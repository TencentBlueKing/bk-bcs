// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.12.0
// source: clustermanager.proto

package clustermanager

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_struct "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID               string                    `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ClusterName             string                    `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	FederationClusterID     string                    `protobuf:"bytes,3,opt,name=federationClusterID,proto3" json:"federationClusterID,omitempty"`
	Provider                string                    `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
	Region                  string                    `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	VpcID                   string                    `protobuf:"bytes,6,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	ProjectID               string                    `protobuf:"bytes,7,opt,name=projectID,proto3" json:"projectID,omitempty"`
	BusinessID              string                    `protobuf:"bytes,8,opt,name=businessID,proto3" json:"businessID,omitempty"`
	Environment             string                    `protobuf:"bytes,9,opt,name=environment,proto3" json:"environment,omitempty"`
	EngineType              string                    `protobuf:"bytes,10,opt,name=engineType,proto3" json:"engineType,omitempty"`
	IsExclusive             bool                      `protobuf:"varint,11,opt,name=isExclusive,proto3" json:"isExclusive,omitempty"`
	ClusterType             string                    `protobuf:"bytes,12,opt,name=clusterType,proto3" json:"clusterType,omitempty"`
	Labels                  map[string]string         `protobuf:"bytes,13,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Creator                 string                    `protobuf:"bytes,14,opt,name=creator,proto3" json:"creator,omitempty"`
	CreateTime              string                    `protobuf:"bytes,15,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime              string                    `protobuf:"bytes,16,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	BcsAddons               map[string]*BKOpsPlugin   `protobuf:"bytes,17,rep,name=bcsAddons,proto3" json:"bcsAddons,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExtraAddons             map[string]*BKOpsPlugin   `protobuf:"bytes,18,rep,name=extraAddons,proto3" json:"extraAddons,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SystemID                string                    `protobuf:"bytes,19,opt,name=systemID,proto3" json:"systemID,omitempty"`
	ManageType              string                    `protobuf:"bytes,20,opt,name=manageType,proto3" json:"manageType,omitempty"`
	Master                  map[string]*Node          `protobuf:"bytes,21,rep,name=master,proto3" json:"master,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NetworkSettings         *NetworkSetting           `protobuf:"bytes,22,opt,name=networkSettings,proto3" json:"networkSettings,omitempty"`
	ClusterBasicSettings    *ClusterBasicSetting      `protobuf:"bytes,23,opt,name=clusterBasicSettings,proto3" json:"clusterBasicSettings,omitempty"`
	ClusterAdvanceSettings  *ClusterAdvanceSetting    `protobuf:"bytes,24,opt,name=clusterAdvanceSettings,proto3" json:"clusterAdvanceSettings,omitempty"`
	NodeSettings            *NodeSetting              `protobuf:"bytes,25,opt,name=nodeSettings,proto3" json:"nodeSettings,omitempty"`
	Status                  string                    `protobuf:"bytes,26,opt,name=status,proto3" json:"status,omitempty"`
	Updater                 string                    `protobuf:"bytes,27,opt,name=updater,proto3" json:"updater,omitempty"`
	NetworkType             string                    `protobuf:"bytes,28,opt,name=networkType,proto3" json:"networkType,omitempty"`
	AutoGenerateMasterNodes bool                      `protobuf:"varint,29,opt,name=autoGenerateMasterNodes,proto3" json:"autoGenerateMasterNodes,omitempty"`
	Template                []*InstanceTemplateConfig `protobuf:"bytes,30,rep,name=template,proto3" json:"template,omitempty"`
	ExtraInfo               map[string]string         `protobuf:"bytes,31,rep,name=extraInfo,proto3" json:"extraInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ModuleID                string                    `protobuf:"bytes,32,opt,name=moduleID,proto3" json:"moduleID,omitempty"`
	ExtraClusterID          string                    `protobuf:"bytes,33,opt,name=extraClusterID,proto3" json:"extraClusterID,omitempty"`
	IsCommonCluster         bool                      `protobuf:"varint,34,opt,name=isCommonCluster,proto3" json:"isCommonCluster,omitempty"`
	Description             string                    `protobuf:"bytes,35,opt,name=description,proto3" json:"description,omitempty"`
	ClusterCategory         string                    `protobuf:"bytes,36,opt,name=clusterCategory,proto3" json:"clusterCategory,omitempty"`
	IsShared                bool                      `protobuf:"varint,37,opt,name=is_shared,json=isShared,proto3" json:"is_shared,omitempty"`
	KubeConfig              string                    `protobuf:"bytes,38,opt,name=kubeConfig,proto3" json:"kubeConfig,omitempty"`
	ImportCategory          string                    `protobuf:"bytes,39,opt,name=importCategory,proto3" json:"importCategory,omitempty"`
	CloudAccountID          string                    `protobuf:"bytes,40,opt,name=cloudAccountID,proto3" json:"cloudAccountID,omitempty"`
	Message                 string                    `protobuf:"bytes,41,opt,name=message,proto3" json:"message,omitempty"`
	IsMixed                 bool                      `protobuf:"varint,42,opt,name=isMixed,proto3" json:"isMixed,omitempty"`
	ClusterIamRole          string                    `protobuf:"bytes,43,opt,name=clusterIamRole,proto3" json:"clusterIamRole,omitempty"`
	SharedRanges            *SharedClusterRanges      `protobuf:"bytes,44,opt,name=sharedRanges,proto3" json:"sharedRanges,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{0}
}

func (x *Cluster) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *Cluster) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *Cluster) GetFederationClusterID() string {
	if x != nil {
		return x.FederationClusterID
	}
	return ""
}

func (x *Cluster) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Cluster) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Cluster) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *Cluster) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *Cluster) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *Cluster) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *Cluster) GetEngineType() string {
	if x != nil {
		return x.EngineType
	}
	return ""
}

func (x *Cluster) GetIsExclusive() bool {
	if x != nil {
		return x.IsExclusive
	}
	return false
}

func (x *Cluster) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

func (x *Cluster) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Cluster) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Cluster) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Cluster) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Cluster) GetBcsAddons() map[string]*BKOpsPlugin {
	if x != nil {
		return x.BcsAddons
	}
	return nil
}

func (x *Cluster) GetExtraAddons() map[string]*BKOpsPlugin {
	if x != nil {
		return x.ExtraAddons
	}
	return nil
}

func (x *Cluster) GetSystemID() string {
	if x != nil {
		return x.SystemID
	}
	return ""
}

func (x *Cluster) GetManageType() string {
	if x != nil {
		return x.ManageType
	}
	return ""
}

func (x *Cluster) GetMaster() map[string]*Node {
	if x != nil {
		return x.Master
	}
	return nil
}

func (x *Cluster) GetNetworkSettings() *NetworkSetting {
	if x != nil {
		return x.NetworkSettings
	}
	return nil
}

func (x *Cluster) GetClusterBasicSettings() *ClusterBasicSetting {
	if x != nil {
		return x.ClusterBasicSettings
	}
	return nil
}

func (x *Cluster) GetClusterAdvanceSettings() *ClusterAdvanceSetting {
	if x != nil {
		return x.ClusterAdvanceSettings
	}
	return nil
}

func (x *Cluster) GetNodeSettings() *NodeSetting {
	if x != nil {
		return x.NodeSettings
	}
	return nil
}

func (x *Cluster) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Cluster) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *Cluster) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *Cluster) GetAutoGenerateMasterNodes() bool {
	if x != nil {
		return x.AutoGenerateMasterNodes
	}
	return false
}

func (x *Cluster) GetTemplate() []*InstanceTemplateConfig {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *Cluster) GetExtraInfo() map[string]string {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *Cluster) GetModuleID() string {
	if x != nil {
		return x.ModuleID
	}
	return ""
}

func (x *Cluster) GetExtraClusterID() string {
	if x != nil {
		return x.ExtraClusterID
	}
	return ""
}

func (x *Cluster) GetIsCommonCluster() bool {
	if x != nil {
		return x.IsCommonCluster
	}
	return false
}

func (x *Cluster) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Cluster) GetClusterCategory() string {
	if x != nil {
		return x.ClusterCategory
	}
	return ""
}

func (x *Cluster) GetIsShared() bool {
	if x != nil {
		return x.IsShared
	}
	return false
}

func (x *Cluster) GetKubeConfig() string {
	if x != nil {
		return x.KubeConfig
	}
	return ""
}

func (x *Cluster) GetImportCategory() string {
	if x != nil {
		return x.ImportCategory
	}
	return ""
}

func (x *Cluster) GetCloudAccountID() string {
	if x != nil {
		return x.CloudAccountID
	}
	return ""
}

func (x *Cluster) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Cluster) GetIsMixed() bool {
	if x != nil {
		return x.IsMixed
	}
	return false
}

func (x *Cluster) GetClusterIamRole() string {
	if x != nil {
		return x.ClusterIamRole
	}
	return ""
}

func (x *Cluster) GetSharedRanges() *SharedClusterRanges {
	if x != nil {
		return x.SharedRanges
	}
	return nil
}

type SharedClusterRanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bizs             []string `protobuf:"bytes,1,rep,name=bizs,proto3" json:"bizs,omitempty"`
	ProjectIdOrCodes []string `protobuf:"bytes,2,rep,name=projectIdOrCodes,proto3" json:"projectIdOrCodes,omitempty"`
}

func (x *SharedClusterRanges) Reset() {
	*x = SharedClusterRanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedClusterRanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedClusterRanges) ProtoMessage() {}

func (x *SharedClusterRanges) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedClusterRanges.ProtoReflect.Descriptor instead.
func (*SharedClusterRanges) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{1}
}

func (x *SharedClusterRanges) GetBizs() []string {
	if x != nil {
		return x.Bizs
	}
	return nil
}

func (x *SharedClusterRanges) GetProjectIdOrCodes() []string {
	if x != nil {
		return x.ProjectIdOrCodes
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeID         string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	InnerIP        string `protobuf:"bytes,2,opt,name=innerIP,proto3" json:"innerIP,omitempty"`
	InstanceType   string `protobuf:"bytes,3,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	CPU            uint32 `protobuf:"varint,4,opt,name=CPU,proto3" json:"CPU,omitempty"`
	Mem            uint32 `protobuf:"varint,5,opt,name=mem,proto3" json:"mem,omitempty"`
	GPU            uint32 `protobuf:"varint,6,opt,name=GPU,proto3" json:"GPU,omitempty"`
	Status         string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	ZoneID         string `protobuf:"bytes,8,opt,name=zoneID,proto3" json:"zoneID,omitempty"`
	NodeGroupID    string `protobuf:"bytes,9,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	ClusterID      string `protobuf:"bytes,10,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	VPC            string `protobuf:"bytes,11,opt,name=VPC,proto3" json:"VPC,omitempty"`
	Region         string `protobuf:"bytes,12,opt,name=region,proto3" json:"region,omitempty"`
	Passwd         string `protobuf:"bytes,13,opt,name=passwd,proto3" json:"passwd,omitempty"`
	Zone           uint32 `protobuf:"varint,14,opt,name=zone,proto3" json:"zone,omitempty"`
	DeviceID       string `protobuf:"bytes,15,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	NodeTemplateID string `protobuf:"bytes,16,opt,name=nodeTemplateID,proto3" json:"nodeTemplateID,omitempty"`
	NodeType       string `protobuf:"bytes,17,opt,name=nodeType,proto3" json:"nodeType,omitempty"`
	NodeName       string `protobuf:"bytes,18,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	InnerIPv6      string `protobuf:"bytes,19,opt,name=innerIPv6,proto3" json:"innerIPv6,omitempty"`
	ZoneName       string `protobuf:"bytes,20,opt,name=zoneName,proto3" json:"zoneName,omitempty"`
	TaskID         string `protobuf:"bytes,21,opt,name=taskID,proto3" json:"taskID,omitempty"`
	FailedReason   string `protobuf:"bytes,22,opt,name=failedReason,proto3" json:"failedReason,omitempty"`
	ChargeType     string `protobuf:"bytes,23,opt,name=chargeType,proto3" json:"chargeType,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{2}
}

func (x *Node) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *Node) GetInnerIP() string {
	if x != nil {
		return x.InnerIP
	}
	return ""
}

func (x *Node) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *Node) GetCPU() uint32 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *Node) GetMem() uint32 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *Node) GetGPU() uint32 {
	if x != nil {
		return x.GPU
	}
	return 0
}

func (x *Node) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Node) GetZoneID() string {
	if x != nil {
		return x.ZoneID
	}
	return ""
}

func (x *Node) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *Node) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *Node) GetVPC() string {
	if x != nil {
		return x.VPC
	}
	return ""
}

func (x *Node) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Node) GetPasswd() string {
	if x != nil {
		return x.Passwd
	}
	return ""
}

func (x *Node) GetZone() uint32 {
	if x != nil {
		return x.Zone
	}
	return 0
}

func (x *Node) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *Node) GetNodeTemplateID() string {
	if x != nil {
		return x.NodeTemplateID
	}
	return ""
}

func (x *Node) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

func (x *Node) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *Node) GetInnerIPv6() string {
	if x != nil {
		return x.InnerIPv6
	}
	return ""
}

func (x *Node) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *Node) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *Node) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

func (x *Node) GetChargeType() string {
	if x != nil {
		return x.ChargeType
	}
	return ""
}

type NetworkSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterIPv4CIDR     string        `protobuf:"bytes,1,opt,name=clusterIPv4CIDR,proto3" json:"clusterIPv4CIDR,omitempty"`
	ServiceIPv4CIDR     string        `protobuf:"bytes,2,opt,name=serviceIPv4CIDR,proto3" json:"serviceIPv4CIDR,omitempty"`
	MaxNodePodNum       uint32        `protobuf:"varint,3,opt,name=maxNodePodNum,proto3" json:"maxNodePodNum,omitempty"`
	MaxServiceNum       uint32        `protobuf:"varint,4,opt,name=maxServiceNum,proto3" json:"maxServiceNum,omitempty"`
	EnableVPCCni        bool          `protobuf:"varint,5,opt,name=enableVPCCni,proto3" json:"enableVPCCni,omitempty"`
	EniSubnetIDs        []string      `protobuf:"bytes,6,rep,name=eniSubnetIDs,proto3" json:"eniSubnetIDs,omitempty"`
	SubnetSource        *SubnetSource `protobuf:"bytes,7,opt,name=subnetSource,proto3" json:"subnetSource,omitempty"`
	IsStaticIpMode      bool          `protobuf:"varint,8,opt,name=isStaticIpMode,proto3" json:"isStaticIpMode,omitempty"`
	ClaimExpiredSeconds uint32        `protobuf:"varint,9,opt,name=claimExpiredSeconds,proto3" json:"claimExpiredSeconds,omitempty"`
	MultiClusterCIDR    []string      `protobuf:"bytes,10,rep,name=multiClusterCIDR,proto3" json:"multiClusterCIDR,omitempty"`
	CidrStep            uint32        `protobuf:"varint,11,opt,name=cidrStep,proto3" json:"cidrStep,omitempty"`
	ClusterIpType       string        `protobuf:"bytes,12,opt,name=clusterIpType,proto3" json:"clusterIpType,omitempty"`
	ClusterIPv6CIDR     string        `protobuf:"bytes,13,opt,name=clusterIPv6CIDR,proto3" json:"clusterIPv6CIDR,omitempty"`
	ServiceIPv6CIDR     string        `protobuf:"bytes,14,opt,name=serviceIPv6CIDR,proto3" json:"serviceIPv6CIDR,omitempty"`
	Status              string        `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	NetworkMode         string        `protobuf:"bytes,16,opt,name=networkMode,proto3" json:"networkMode,omitempty"`
}

func (x *NetworkSetting) Reset() {
	*x = NetworkSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkSetting) ProtoMessage() {}

func (x *NetworkSetting) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkSetting.ProtoReflect.Descriptor instead.
func (*NetworkSetting) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{3}
}

func (x *NetworkSetting) GetClusterIPv4CIDR() string {
	if x != nil {
		return x.ClusterIPv4CIDR
	}
	return ""
}

func (x *NetworkSetting) GetServiceIPv4CIDR() string {
	if x != nil {
		return x.ServiceIPv4CIDR
	}
	return ""
}

func (x *NetworkSetting) GetMaxNodePodNum() uint32 {
	if x != nil {
		return x.MaxNodePodNum
	}
	return 0
}

func (x *NetworkSetting) GetMaxServiceNum() uint32 {
	if x != nil {
		return x.MaxServiceNum
	}
	return 0
}

func (x *NetworkSetting) GetEnableVPCCni() bool {
	if x != nil {
		return x.EnableVPCCni
	}
	return false
}

func (x *NetworkSetting) GetEniSubnetIDs() []string {
	if x != nil {
		return x.EniSubnetIDs
	}
	return nil
}

func (x *NetworkSetting) GetSubnetSource() *SubnetSource {
	if x != nil {
		return x.SubnetSource
	}
	return nil
}

func (x *NetworkSetting) GetIsStaticIpMode() bool {
	if x != nil {
		return x.IsStaticIpMode
	}
	return false
}

func (x *NetworkSetting) GetClaimExpiredSeconds() uint32 {
	if x != nil {
		return x.ClaimExpiredSeconds
	}
	return 0
}

func (x *NetworkSetting) GetMultiClusterCIDR() []string {
	if x != nil {
		return x.MultiClusterCIDR
	}
	return nil
}

func (x *NetworkSetting) GetCidrStep() uint32 {
	if x != nil {
		return x.CidrStep
	}
	return 0
}

func (x *NetworkSetting) GetClusterIpType() string {
	if x != nil {
		return x.ClusterIpType
	}
	return ""
}

func (x *NetworkSetting) GetClusterIPv6CIDR() string {
	if x != nil {
		return x.ClusterIPv6CIDR
	}
	return ""
}

func (x *NetworkSetting) GetServiceIPv6CIDR() string {
	if x != nil {
		return x.ServiceIPv6CIDR
	}
	return ""
}

func (x *NetworkSetting) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NetworkSetting) GetNetworkMode() string {
	if x != nil {
		return x.NetworkMode
	}
	return ""
}

type SubnetSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	New     []*NewSubnet      `protobuf:"bytes,1,rep,name=new,proto3" json:"new,omitempty"`
	Existed *ExistedSubnetIDs `protobuf:"bytes,2,opt,name=existed,proto3" json:"existed,omitempty"`
}

func (x *SubnetSource) Reset() {
	*x = SubnetSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetSource) ProtoMessage() {}

func (x *SubnetSource) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetSource.ProtoReflect.Descriptor instead.
func (*SubnetSource) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{4}
}

func (x *SubnetSource) GetNew() []*NewSubnet {
	if x != nil {
		return x.New
	}
	return nil
}

func (x *SubnetSource) GetExisted() *ExistedSubnetIDs {
	if x != nil {
		return x.Existed
	}
	return nil
}

type ExistedSubnetIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ExistedSubnetIDs) Reset() {
	*x = ExistedSubnetIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistedSubnetIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistedSubnetIDs) ProtoMessage() {}

func (x *ExistedSubnetIDs) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistedSubnetIDs.ProtoReflect.Descriptor instead.
func (*ExistedSubnetIDs) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{5}
}

func (x *ExistedSubnetIDs) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type NewSubnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mask  uint32 `protobuf:"varint,1,opt,name=mask,proto3" json:"mask,omitempty"`
	Zone  string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	IpCnt uint32 `protobuf:"varint,3,opt,name=ipCnt,proto3" json:"ipCnt,omitempty"`
}

func (x *NewSubnet) Reset() {
	*x = NewSubnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSubnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSubnet) ProtoMessage() {}

func (x *NewSubnet) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSubnet.ProtoReflect.Descriptor instead.
func (*NewSubnet) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{6}
}

func (x *NewSubnet) GetMask() uint32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

func (x *NewSubnet) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *NewSubnet) GetIpCnt() uint32 {
	if x != nil {
		return x.IpCnt
	}
	return 0
}

type UpgradePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportType string `protobuf:"bytes,1,opt,name=supportType,proto3" json:"supportType,omitempty"`
}

func (x *UpgradePolicy) Reset() {
	*x = UpgradePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePolicy) ProtoMessage() {}

func (x *UpgradePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePolicy.ProtoReflect.Descriptor instead.
func (*UpgradePolicy) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{7}
}

func (x *UpgradePolicy) GetSupportType() string {
	if x != nil {
		return x.SupportType
	}
	return ""
}

type ClusterBasicSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OS                        string            `protobuf:"bytes,1,opt,name=OS,proto3" json:"OS,omitempty"`
	Version                   string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	ClusterTags               map[string]string `protobuf:"bytes,3,rep,name=clusterTags,proto3" json:"clusterTags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VersionName               string            `protobuf:"bytes,4,opt,name=versionName,proto3" json:"versionName,omitempty"`
	SubnetID                  string            `protobuf:"bytes,5,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
	ClusterLevel              string            `protobuf:"bytes,6,opt,name=clusterLevel,proto3" json:"clusterLevel,omitempty"`
	IsAutoUpgradeClusterLevel bool              `protobuf:"varint,7,opt,name=isAutoUpgradeClusterLevel,proto3" json:"isAutoUpgradeClusterLevel,omitempty"`
	Area                      *CloudArea        `protobuf:"bytes,8,opt,name=area,proto3" json:"area,omitempty"`
	Module                    *ClusterModule    `protobuf:"bytes,9,opt,name=module,proto3" json:"module,omitempty"`
	UpgradePolicy             *UpgradePolicy    `protobuf:"bytes,10,opt,name=upgradePolicy,proto3" json:"upgradePolicy,omitempty"`
}

func (x *ClusterBasicSetting) Reset() {
	*x = ClusterBasicSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterBasicSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterBasicSetting) ProtoMessage() {}

func (x *ClusterBasicSetting) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterBasicSetting.ProtoReflect.Descriptor instead.
func (*ClusterBasicSetting) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{8}
}

func (x *ClusterBasicSetting) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *ClusterBasicSetting) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClusterBasicSetting) GetClusterTags() map[string]string {
	if x != nil {
		return x.ClusterTags
	}
	return nil
}

func (x *ClusterBasicSetting) GetVersionName() string {
	if x != nil {
		return x.VersionName
	}
	return ""
}

func (x *ClusterBasicSetting) GetSubnetID() string {
	if x != nil {
		return x.SubnetID
	}
	return ""
}

func (x *ClusterBasicSetting) GetClusterLevel() string {
	if x != nil {
		return x.ClusterLevel
	}
	return ""
}

func (x *ClusterBasicSetting) GetIsAutoUpgradeClusterLevel() bool {
	if x != nil {
		return x.IsAutoUpgradeClusterLevel
	}
	return false
}

func (x *ClusterBasicSetting) GetArea() *CloudArea {
	if x != nil {
		return x.Area
	}
	return nil
}

func (x *ClusterBasicSetting) GetModule() *ClusterModule {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *ClusterBasicSetting) GetUpgradePolicy() *UpgradePolicy {
	if x != nil {
		return x.UpgradePolicy
	}
	return nil
}

type ClusterAdvanceSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IPVS                  bool                   `protobuf:"varint,1,opt,name=IPVS,proto3" json:"IPVS,omitempty"`
	ContainerRuntime      string                 `protobuf:"bytes,2,opt,name=containerRuntime,proto3" json:"containerRuntime,omitempty"`
	RuntimeVersion        string                 `protobuf:"bytes,3,opt,name=runtimeVersion,proto3" json:"runtimeVersion,omitempty"`
	ExtraArgs             map[string]string      `protobuf:"bytes,4,rep,name=extraArgs,proto3" json:"extraArgs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NetworkType           string                 `protobuf:"bytes,5,opt,name=networkType,proto3" json:"networkType,omitempty"`
	DeletionProtection    bool                   `protobuf:"varint,6,opt,name=deletionProtection,proto3" json:"deletionProtection,omitempty"`
	AuditEnabled          bool                   `protobuf:"varint,7,opt,name=auditEnabled,proto3" json:"auditEnabled,omitempty"`
	EnableHa              bool                   `protobuf:"varint,8,opt,name=enableHa,proto3" json:"enableHa,omitempty"`
	ClusterConnectSetting *ClusterConnectSetting `protobuf:"bytes,9,opt,name=clusterConnectSetting,proto3" json:"clusterConnectSetting,omitempty"`
}

func (x *ClusterAdvanceSetting) Reset() {
	*x = ClusterAdvanceSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAdvanceSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAdvanceSetting) ProtoMessage() {}

func (x *ClusterAdvanceSetting) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAdvanceSetting.ProtoReflect.Descriptor instead.
func (*ClusterAdvanceSetting) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{9}
}

func (x *ClusterAdvanceSetting) GetIPVS() bool {
	if x != nil {
		return x.IPVS
	}
	return false
}

func (x *ClusterAdvanceSetting) GetContainerRuntime() string {
	if x != nil {
		return x.ContainerRuntime
	}
	return ""
}

func (x *ClusterAdvanceSetting) GetRuntimeVersion() string {
	if x != nil {
		return x.RuntimeVersion
	}
	return ""
}

func (x *ClusterAdvanceSetting) GetExtraArgs() map[string]string {
	if x != nil {
		return x.ExtraArgs
	}
	return nil
}

func (x *ClusterAdvanceSetting) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *ClusterAdvanceSetting) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *ClusterAdvanceSetting) GetAuditEnabled() bool {
	if x != nil {
		return x.AuditEnabled
	}
	return false
}

func (x *ClusterAdvanceSetting) GetEnableHa() bool {
	if x != nil {
		return x.EnableHa
	}
	return false
}

func (x *ClusterAdvanceSetting) GetClusterConnectSetting() *ClusterConnectSetting {
	if x != nil {
		return x.ClusterConnectSetting
	}
	return nil
}

// ClusterConnectSetting ApiServer内外网访问信息
type ClusterConnectSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsExtranet    bool                `protobuf:"varint,1,opt,name=isExtranet,proto3" json:"isExtranet,omitempty"`
	SubnetId      string              `protobuf:"bytes,2,opt,name=subnetId,proto3" json:"subnetId,omitempty"`
	Domain        string              `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	SecurityGroup string              `protobuf:"bytes,4,opt,name=securityGroup,proto3" json:"securityGroup,omitempty"`
	Internet      *InternetAccessible `protobuf:"bytes,5,opt,name=internet,proto3" json:"internet,omitempty"`
}

func (x *ClusterConnectSetting) Reset() {
	*x = ClusterConnectSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConnectSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConnectSetting) ProtoMessage() {}

func (x *ClusterConnectSetting) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConnectSetting.ProtoReflect.Descriptor instead.
func (*ClusterConnectSetting) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{10}
}

func (x *ClusterConnectSetting) GetIsExtranet() bool {
	if x != nil {
		return x.IsExtranet
	}
	return false
}

func (x *ClusterConnectSetting) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *ClusterConnectSetting) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ClusterConnectSetting) GetSecurityGroup() string {
	if x != nil {
		return x.SecurityGroup
	}
	return ""
}

func (x *ClusterConnectSetting) GetInternet() *InternetAccessible {
	if x != nil {
		return x.Internet
	}
	return nil
}

// 集群节点通用配置
type NodeSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DockerGraphPath      string            `protobuf:"bytes,1,opt,name=dockerGraphPath,proto3" json:"dockerGraphPath,omitempty"`
	MountTarget          string            `protobuf:"bytes,2,opt,name=mountTarget,proto3" json:"mountTarget,omitempty"`
	UnSchedulable        uint32            `protobuf:"varint,3,opt,name=unSchedulable,proto3" json:"unSchedulable,omitempty"`
	Labels               map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExtraArgs            map[string]string `protobuf:"bytes,5,rep,name=extraArgs,proto3" json:"extraArgs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Taints               []*Taint          `protobuf:"bytes,6,rep,name=taints,proto3" json:"taints,omitempty"`
	MasterLogin          *NodeLoginInfo    `protobuf:"bytes,7,opt,name=masterLogin,proto3" json:"masterLogin,omitempty"`
	WorkerLogin          *NodeLoginInfo    `protobuf:"bytes,8,opt,name=workerLogin,proto3" json:"workerLogin,omitempty"`
	MasterSecurityGroups []string          `protobuf:"bytes,9,rep,name=masterSecurityGroups,proto3" json:"masterSecurityGroups,omitempty"`
	WorkerSecurityGroups []string          `protobuf:"bytes,10,rep,name=workerSecurityGroups,proto3" json:"workerSecurityGroups,omitempty"`
}

func (x *NodeSetting) Reset() {
	*x = NodeSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSetting) ProtoMessage() {}

func (x *NodeSetting) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSetting.ProtoReflect.Descriptor instead.
func (*NodeSetting) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{11}
}

func (x *NodeSetting) GetDockerGraphPath() string {
	if x != nil {
		return x.DockerGraphPath
	}
	return ""
}

func (x *NodeSetting) GetMountTarget() string {
	if x != nil {
		return x.MountTarget
	}
	return ""
}

func (x *NodeSetting) GetUnSchedulable() uint32 {
	if x != nil {
		return x.UnSchedulable
	}
	return 0
}

func (x *NodeSetting) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NodeSetting) GetExtraArgs() map[string]string {
	if x != nil {
		return x.ExtraArgs
	}
	return nil
}

func (x *NodeSetting) GetTaints() []*Taint {
	if x != nil {
		return x.Taints
	}
	return nil
}

func (x *NodeSetting) GetMasterLogin() *NodeLoginInfo {
	if x != nil {
		return x.MasterLogin
	}
	return nil
}

func (x *NodeSetting) GetWorkerLogin() *NodeLoginInfo {
	if x != nil {
		return x.WorkerLogin
	}
	return nil
}

func (x *NodeSetting) GetMasterSecurityGroups() []string {
	if x != nil {
		return x.MasterSecurityGroups
	}
	return nil
}

func (x *NodeSetting) GetWorkerSecurityGroups() []string {
	if x != nil {
		return x.WorkerSecurityGroups
	}
	return nil
}

type NodeLoginInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitLoginUsername string   `protobuf:"bytes,1,opt,name=initLoginUsername,proto3" json:"initLoginUsername,omitempty"`
	InitLoginPassword string   `protobuf:"bytes,2,opt,name=initLoginPassword,proto3" json:"initLoginPassword,omitempty"`
	KeyPair           *KeyInfo `protobuf:"bytes,3,opt,name=keyPair,proto3" json:"keyPair,omitempty"`
}

func (x *NodeLoginInfo) Reset() {
	*x = NodeLoginInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeLoginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeLoginInfo) ProtoMessage() {}

func (x *NodeLoginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeLoginInfo.ProtoReflect.Descriptor instead.
func (*NodeLoginInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{12}
}

func (x *NodeLoginInfo) GetInitLoginUsername() string {
	if x != nil {
		return x.InitLoginUsername
	}
	return ""
}

func (x *NodeLoginInfo) GetInitLoginPassword() string {
	if x != nil {
		return x.InitLoginPassword
	}
	return ""
}

func (x *NodeLoginInfo) GetKeyPair() *KeyInfo {
	if x != nil {
		return x.KeyPair
	}
	return nil
}

type NodeAdvancedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeOs    string `protobuf:"bytes,1,opt,name=nodeOs,proto3" json:"nodeOs,omitempty"`
	IsGPUNode bool   `protobuf:"varint,2,opt,name=isGPUNode,proto3" json:"isGPUNode,omitempty"`
}

func (x *NodeAdvancedInfo) Reset() {
	*x = NodeAdvancedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAdvancedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAdvancedInfo) ProtoMessage() {}

func (x *NodeAdvancedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAdvancedInfo.ProtoReflect.Descriptor instead.
func (*NodeAdvancedInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{13}
}

func (x *NodeAdvancedInfo) GetNodeOs() string {
	if x != nil {
		return x.NodeOs
	}
	return ""
}

func (x *NodeAdvancedInfo) GetIsGPUNode() bool {
	if x != nil {
		return x.IsGPUNode
	}
	return false
}

type ClusterCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerKey     string `protobuf:"bytes,1,opt,name=serverKey,proto3" json:"serverKey,omitempty"`
	ClusterID     string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ClientModule  string `protobuf:"bytes,3,opt,name=clientModule,proto3" json:"clientModule,omitempty"`
	ServerAddress string `protobuf:"bytes,4,opt,name=serverAddress,proto3" json:"serverAddress,omitempty"`
	CaCertData    string `protobuf:"bytes,5,opt,name=caCertData,proto3" json:"caCertData,omitempty"`
	UserToken     string `protobuf:"bytes,6,opt,name=userToken,proto3" json:"userToken,omitempty"`
	ClusterDomain string `protobuf:"bytes,7,opt,name=clusterDomain,proto3" json:"clusterDomain,omitempty"`
	ConnectMode   string `protobuf:"bytes,8,opt,name=connectMode,proto3" json:"connectMode,omitempty"`
	CreateTime    string `protobuf:"bytes,9,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    string `protobuf:"bytes,10,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	ClientCert    string `protobuf:"bytes,11,opt,name=clientCert,proto3" json:"clientCert,omitempty"`
	ClientKey     string `protobuf:"bytes,12,opt,name=clientKey,proto3" json:"clientKey,omitempty"`
}

func (x *ClusterCredential) Reset() {
	*x = ClusterCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterCredential) ProtoMessage() {}

func (x *ClusterCredential) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterCredential.ProtoReflect.Descriptor instead.
func (*ClusterCredential) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{14}
}

func (x *ClusterCredential) GetServerKey() string {
	if x != nil {
		return x.ServerKey
	}
	return ""
}

func (x *ClusterCredential) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ClusterCredential) GetClientModule() string {
	if x != nil {
		return x.ClientModule
	}
	return ""
}

func (x *ClusterCredential) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *ClusterCredential) GetCaCertData() string {
	if x != nil {
		return x.CaCertData
	}
	return ""
}

func (x *ClusterCredential) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *ClusterCredential) GetClusterDomain() string {
	if x != nil {
		return x.ClusterDomain
	}
	return ""
}

func (x *ClusterCredential) GetConnectMode() string {
	if x != nil {
		return x.ConnectMode
	}
	return ""
}

func (x *ClusterCredential) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ClusterCredential) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ClusterCredential) GetClientCert() string {
	if x != nil {
		return x.ClientCert
	}
	return ""
}

func (x *ClusterCredential) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

type Namespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FederationClusterID string            `protobuf:"bytes,2,opt,name=federationClusterID,proto3" json:"federationClusterID,omitempty"`
	ProjectID           string            `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	BusinessID          string            `protobuf:"bytes,4,opt,name=businessID,proto3" json:"businessID,omitempty"`
	Labels              map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MaxQuota            string            `protobuf:"bytes,6,opt,name=maxQuota,proto3" json:"maxQuota,omitempty"`
	CreateTime          string            `protobuf:"bytes,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime          string            `protobuf:"bytes,8,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	QuotaList           []*ResourceQuota  `protobuf:"bytes,9,rep,name=quotaList,proto3" json:"quotaList,omitempty"`
}

func (x *Namespace) Reset() {
	*x = Namespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace) ProtoMessage() {}

func (x *Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace.ProtoReflect.Descriptor instead.
func (*Namespace) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{15}
}

func (x *Namespace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Namespace) GetFederationClusterID() string {
	if x != nil {
		return x.FederationClusterID
	}
	return ""
}

func (x *Namespace) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *Namespace) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *Namespace) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Namespace) GetMaxQuota() string {
	if x != nil {
		return x.MaxQuota
	}
	return ""
}

func (x *Namespace) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Namespace) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Namespace) GetQuotaList() []*ResourceQuota {
	if x != nil {
		return x.QuotaList
	}
	return nil
}

type ResourceQuota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace           string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	FederationClusterID string `protobuf:"bytes,2,opt,name=federationClusterID,proto3" json:"federationClusterID,omitempty"`
	ClusterID           string `protobuf:"bytes,3,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ResourceQuota       string `protobuf:"bytes,4,opt,name=resourceQuota,proto3" json:"resourceQuota,omitempty"`
	Region              string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	CreateTime          string `protobuf:"bytes,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime          string `protobuf:"bytes,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Status              string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	Message             string `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ResourceQuota) Reset() {
	*x = ResourceQuota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceQuota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceQuota) ProtoMessage() {}

func (x *ResourceQuota) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceQuota.ProtoReflect.Descriptor instead.
func (*ResourceQuota) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{16}
}

func (x *ResourceQuota) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ResourceQuota) GetFederationClusterID() string {
	if x != nil {
		return x.FederationClusterID
	}
	return ""
}

func (x *ResourceQuota) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ResourceQuota) GetResourceQuota() string {
	if x != nil {
		return x.ResourceQuota
	}
	return ""
}

func (x *ResourceQuota) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ResourceQuota) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ResourceQuota) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ResourceQuota) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ResourceQuota) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Credential storage for cloud credential
type Credential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Secret               string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	SubscriptionID       string `protobuf:"bytes,3,opt,name=subscriptionID,proto3" json:"subscriptionID,omitempty"`
	TenantID             string `protobuf:"bytes,4,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	ResourceGroupName    string `protobuf:"bytes,5,opt,name=resourceGroupName,proto3" json:"resourceGroupName,omitempty"`
	ClientID             string `protobuf:"bytes,6,opt,name=clientID,proto3" json:"clientID,omitempty"`
	ClientSecret         string `protobuf:"bytes,7,opt,name=clientSecret,proto3" json:"clientSecret,omitempty"`
	ServiceAccountSecret string `protobuf:"bytes,8,opt,name=serviceAccountSecret,proto3" json:"serviceAccountSecret,omitempty"`
	GkeProjectID         string `protobuf:"bytes,9,opt,name=gkeProjectID,proto3" json:"gkeProjectID,omitempty"`
}

func (x *Credential) Reset() {
	*x = Credential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{17}
}

func (x *Credential) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Credential) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *Credential) GetSubscriptionID() string {
	if x != nil {
		return x.SubscriptionID
	}
	return ""
}

func (x *Credential) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *Credential) GetResourceGroupName() string {
	if x != nil {
		return x.ResourceGroupName
	}
	return ""
}

func (x *Credential) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *Credential) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *Credential) GetServiceAccountSecret() string {
	if x != nil {
		return x.ServiceAccountSecret
	}
	return ""
}

func (x *Credential) GetGkeProjectID() string {
	if x != nil {
		return x.GkeProjectID
	}
	return ""
}

type BKOpsPlugin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	System              string            `protobuf:"bytes,1,opt,name=system,proto3" json:"system,omitempty"`
	Link                string            `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	Params              map[string]string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AllowSkipWhenFailed bool              `protobuf:"varint,4,opt,name=allowSkipWhenFailed,proto3" json:"allowSkipWhenFailed,omitempty"`
}

func (x *BKOpsPlugin) Reset() {
	*x = BKOpsPlugin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BKOpsPlugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BKOpsPlugin) ProtoMessage() {}

func (x *BKOpsPlugin) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BKOpsPlugin.ProtoReflect.Descriptor instead.
func (*BKOpsPlugin) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{18}
}

func (x *BKOpsPlugin) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *BKOpsPlugin) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *BKOpsPlugin) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *BKOpsPlugin) GetAllowSkipWhenFailed() bool {
	if x != nil {
		return x.AllowSkipWhenFailed
	}
	return false
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreActions  []string                `protobuf:"bytes,1,rep,name=preActions,proto3" json:"preActions,omitempty"`
	PostActions []string                `protobuf:"bytes,2,rep,name=postActions,proto3" json:"postActions,omitempty"`
	Plugins     map[string]*BKOpsPlugin `protobuf:"bytes,3,rep,name=plugins,proto3" json:"plugins,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{19}
}

func (x *Action) GetPreActions() []string {
	if x != nil {
		return x.PreActions
	}
	return nil
}

func (x *Action) GetPostActions() []string {
	if x != nil {
		return x.PostActions
	}
	return nil
}

func (x *Action) GetPlugins() map[string]*BKOpsPlugin {
	if x != nil {
		return x.Plugins
	}
	return nil
}

type ClusterMgr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableVersion             []string         `protobuf:"bytes,1,rep,name=availableVersion,proto3" json:"availableVersion,omitempty"`
	CreateCluster                *Action          `protobuf:"bytes,2,opt,name=createCluster,proto3" json:"createCluster,omitempty"`
	DeleteCluster                *Action          `protobuf:"bytes,3,opt,name=deleteCluster,proto3" json:"deleteCluster,omitempty"`
	AddNodesToCluster            *Action          `protobuf:"bytes,4,opt,name=addNodesToCluster,proto3" json:"addNodesToCluster,omitempty"`
	DeleteNodesFromCluster       *Action          `protobuf:"bytes,5,opt,name=deleteNodesFromCluster,proto3" json:"deleteNodesFromCluster,omitempty"`
	ImportCluster                *Action          `protobuf:"bytes,6,opt,name=importCluster,proto3" json:"importCluster,omitempty"`
	CommonMixedAction            *Action          `protobuf:"bytes,7,opt,name=commonMixedAction,proto3" json:"commonMixedAction,omitempty"`
	CheckExternalNodeEmptyAction *Action          `protobuf:"bytes,8,opt,name=checkExternalNodeEmptyAction,proto3" json:"checkExternalNodeEmptyAction,omitempty"`
	ManagedConfig                []*ManagedConfig `protobuf:"bytes,9,rep,name=managedConfig,proto3" json:"managedConfig,omitempty"`
}

func (x *ClusterMgr) Reset() {
	*x = ClusterMgr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMgr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMgr) ProtoMessage() {}

func (x *ClusterMgr) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMgr.ProtoReflect.Descriptor instead.
func (*ClusterMgr) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{20}
}

func (x *ClusterMgr) GetAvailableVersion() []string {
	if x != nil {
		return x.AvailableVersion
	}
	return nil
}

func (x *ClusterMgr) GetCreateCluster() *Action {
	if x != nil {
		return x.CreateCluster
	}
	return nil
}

func (x *ClusterMgr) GetDeleteCluster() *Action {
	if x != nil {
		return x.DeleteCluster
	}
	return nil
}

func (x *ClusterMgr) GetAddNodesToCluster() *Action {
	if x != nil {
		return x.AddNodesToCluster
	}
	return nil
}

func (x *ClusterMgr) GetDeleteNodesFromCluster() *Action {
	if x != nil {
		return x.DeleteNodesFromCluster
	}
	return nil
}

func (x *ClusterMgr) GetImportCluster() *Action {
	if x != nil {
		return x.ImportCluster
	}
	return nil
}

func (x *ClusterMgr) GetCommonMixedAction() *Action {
	if x != nil {
		return x.CommonMixedAction
	}
	return nil
}

func (x *ClusterMgr) GetCheckExternalNodeEmptyAction() *Action {
	if x != nil {
		return x.CheckExternalNodeEmptyAction
	}
	return nil
}

func (x *ClusterMgr) GetManagedConfig() []*ManagedConfig {
	if x != nil {
		return x.ManagedConfig
	}
	return nil
}

type ManagedConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec string `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *ManagedConfig) Reset() {
	*x = ManagedConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedConfig) ProtoMessage() {}

func (x *ManagedConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedConfig.ProtoReflect.Descriptor instead.
func (*ManagedConfig) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{21}
}

func (x *ManagedConfig) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *ManagedConfig) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type NodeGroupMgr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateNodeGroup                *Action `protobuf:"bytes,2,opt,name=createNodeGroup,proto3" json:"createNodeGroup,omitempty"`
	DeleteNodeGroup                *Action `protobuf:"bytes,3,opt,name=deleteNodeGroup,proto3" json:"deleteNodeGroup,omitempty"`
	MoveNodesToGroup               *Action `protobuf:"bytes,4,opt,name=moveNodesToGroup,proto3" json:"moveNodesToGroup,omitempty"`
	RemoveNodesFromGroup           *Action `protobuf:"bytes,5,opt,name=removeNodesFromGroup,proto3" json:"removeNodesFromGroup,omitempty"`
	CleanNodesInGroup              *Action `protobuf:"bytes,6,opt,name=cleanNodesInGroup,proto3" json:"cleanNodesInGroup,omitempty"`
	UpdateDesiredNodes             *Action `protobuf:"bytes,7,opt,name=updateDesiredNodes,proto3" json:"updateDesiredNodes,omitempty"`
	AddExternalNodesToCluster      *Action `protobuf:"bytes,8,opt,name=addExternalNodesToCluster,proto3" json:"addExternalNodesToCluster,omitempty"`
	DeleteExternalNodesFromCluster *Action `protobuf:"bytes,9,opt,name=deleteExternalNodesFromCluster,proto3" json:"deleteExternalNodesFromCluster,omitempty"`
}

func (x *NodeGroupMgr) Reset() {
	*x = NodeGroupMgr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeGroupMgr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeGroupMgr) ProtoMessage() {}

func (x *NodeGroupMgr) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeGroupMgr.ProtoReflect.Descriptor instead.
func (*NodeGroupMgr) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{22}
}

func (x *NodeGroupMgr) GetCreateNodeGroup() *Action {
	if x != nil {
		return x.CreateNodeGroup
	}
	return nil
}

func (x *NodeGroupMgr) GetDeleteNodeGroup() *Action {
	if x != nil {
		return x.DeleteNodeGroup
	}
	return nil
}

func (x *NodeGroupMgr) GetMoveNodesToGroup() *Action {
	if x != nil {
		return x.MoveNodesToGroup
	}
	return nil
}

func (x *NodeGroupMgr) GetRemoveNodesFromGroup() *Action {
	if x != nil {
		return x.RemoveNodesFromGroup
	}
	return nil
}

func (x *NodeGroupMgr) GetCleanNodesInGroup() *Action {
	if x != nil {
		return x.CleanNodesInGroup
	}
	return nil
}

func (x *NodeGroupMgr) GetUpdateDesiredNodes() *Action {
	if x != nil {
		return x.UpdateDesiredNodes
	}
	return nil
}

func (x *NodeGroupMgr) GetAddExternalNodesToCluster() *Action {
	if x != nil {
		return x.AddExternalNodesToCluster
	}
	return nil
}

func (x *NodeGroupMgr) GetDeleteExternalNodesFromCluster() *Action {
	if x != nil {
		return x.DeleteExternalNodesFromCluster
	}
	return nil
}

type OSInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableVersion      []string          `protobuf:"bytes,1,rep,name=availableVersion,proto3" json:"availableVersion,omitempty"`
	InstanceType          []string          `protobuf:"bytes,2,rep,name=instanceType,proto3" json:"instanceType,omitempty"`
	DefaultSecurityGroups []string          `protobuf:"bytes,3,rep,name=defaultSecurityGroups,proto3" json:"defaultSecurityGroups,omitempty"`
	Regions               map[string]string `protobuf:"bytes,4,rep,name=regions,proto3" json:"regions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OSInfo) Reset() {
	*x = OSInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSInfo) ProtoMessage() {}

func (x *OSInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSInfo.ProtoReflect.Descriptor instead.
func (*OSInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{23}
}

func (x *OSInfo) GetAvailableVersion() []string {
	if x != nil {
		return x.AvailableVersion
	}
	return nil
}

func (x *OSInfo) GetInstanceType() []string {
	if x != nil {
		return x.InstanceType
	}
	return nil
}

func (x *OSInfo) GetDefaultSecurityGroups() []string {
	if x != nil {
		return x.DefaultSecurityGroups
	}
	return nil
}

func (x *OSInfo) GetRegions() map[string]string {
	if x != nil {
		return x.Regions
	}
	return nil
}

// Account account info
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretID             string `protobuf:"bytes,1,opt,name=secretID,proto3" json:"secretID,omitempty"`
	SecretKey            string `protobuf:"bytes,2,opt,name=secretKey,proto3" json:"secretKey,omitempty"`
	SubscriptionID       string `protobuf:"bytes,3,opt,name=subscriptionID,proto3" json:"subscriptionID,omitempty"`
	TenantID             string `protobuf:"bytes,4,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	ResourceGroupName    string `protobuf:"bytes,5,opt,name=resourceGroupName,proto3" json:"resourceGroupName,omitempty"`
	ClientID             string `protobuf:"bytes,6,opt,name=clientID,proto3" json:"clientID,omitempty"`
	ClientSecret         string `protobuf:"bytes,7,opt,name=clientSecret,proto3" json:"clientSecret,omitempty"`
	ServiceAccountSecret string `protobuf:"bytes,8,opt,name=serviceAccountSecret,proto3" json:"serviceAccountSecret,omitempty"`
	GkeProjectID         string `protobuf:"bytes,9,opt,name=gkeProjectID,proto3" json:"gkeProjectID,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{24}
}

func (x *Account) GetSecretID() string {
	if x != nil {
		return x.SecretID
	}
	return ""
}

func (x *Account) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *Account) GetSubscriptionID() string {
	if x != nil {
		return x.SubscriptionID
	}
	return ""
}

func (x *Account) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *Account) GetResourceGroupName() string {
	if x != nil {
		return x.ResourceGroupName
	}
	return ""
}

func (x *Account) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *Account) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *Account) GetServiceAccountSecret() string {
	if x != nil {
		return x.ServiceAccountSecret
	}
	return ""
}

func (x *Account) GetGkeProjectID() string {
	if x != nil {
		return x.GkeProjectID
	}
	return ""
}

// cloud account manage
type CloudAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID     string   `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	ProjectID   string   `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	AccountID   string   `protobuf:"bytes,3,opt,name=accountID,proto3" json:"accountID,omitempty"`
	AccountName string   `protobuf:"bytes,4,opt,name=accountName,proto3" json:"accountName,omitempty"`
	Desc        string   `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	Account     *Account `protobuf:"bytes,6,opt,name=account,proto3" json:"account,omitempty"`
	Enable      bool     `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
	Creator     string   `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater     string   `protobuf:"bytes,9,opt,name=updater,proto3" json:"updater,omitempty"`
	CreatTime   string   `protobuf:"bytes,10,opt,name=creatTime,proto3" json:"creatTime,omitempty"`
	UpdateTime  string   `protobuf:"bytes,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *CloudAccount) Reset() {
	*x = CloudAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAccount) ProtoMessage() {}

func (x *CloudAccount) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAccount.ProtoReflect.Descriptor instead.
func (*CloudAccount) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{25}
}

func (x *CloudAccount) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *CloudAccount) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CloudAccount) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CloudAccount) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *CloudAccount) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CloudAccount) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *CloudAccount) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *CloudAccount) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CloudAccount) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *CloudAccount) GetCreatTime() string {
	if x != nil {
		return x.CreatTime
	}
	return ""
}

func (x *CloudAccount) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type CreateCloudAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID     string              `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	AccountName string              `protobuf:"bytes,2,opt,name=accountName,proto3" json:"accountName,omitempty"`
	Desc        string              `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Account     *Account            `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	Enable      *wrappers.BoolValue `protobuf:"bytes,5,opt,name=enable,proto3" json:"enable,omitempty"`
	Creator     string              `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	ProjectID   string              `protobuf:"bytes,7,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (x *CreateCloudAccountRequest) Reset() {
	*x = CreateCloudAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudAccountRequest) ProtoMessage() {}

func (x *CreateCloudAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudAccountRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{26}
}

func (x *CreateCloudAccountRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *CreateCloudAccountRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *CreateCloudAccountRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CreateCloudAccountRequest) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *CreateCloudAccountRequest) GetEnable() *wrappers.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *CreateCloudAccountRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreateCloudAccountRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

type CreateCloudAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool          `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *CloudAccount `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateCloudAccountResponse) Reset() {
	*x = CreateCloudAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudAccountResponse) ProtoMessage() {}

func (x *CreateCloudAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateCloudAccountResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{27}
}

func (x *CreateCloudAccountResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateCloudAccountResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateCloudAccountResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CreateCloudAccountResponse) GetData() *CloudAccount {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateCloudAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID     string              `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	AccountID   string              `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	AccountName string              `protobuf:"bytes,3,opt,name=accountName,proto3" json:"accountName,omitempty"`
	Desc        string              `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Enable      *wrappers.BoolValue `protobuf:"bytes,5,opt,name=enable,proto3" json:"enable,omitempty"`
	ProjectID   string              `protobuf:"bytes,6,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Updater     string              `protobuf:"bytes,7,opt,name=updater,proto3" json:"updater,omitempty"`
	Account     *Account            `protobuf:"bytes,8,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *UpdateCloudAccountRequest) Reset() {
	*x = UpdateCloudAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloudAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudAccountRequest) ProtoMessage() {}

func (x *UpdateCloudAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudAccountRequest.ProtoReflect.Descriptor instead.
func (*UpdateCloudAccountRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateCloudAccountRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *UpdateCloudAccountRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *UpdateCloudAccountRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *UpdateCloudAccountRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *UpdateCloudAccountRequest) GetEnable() *wrappers.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *UpdateCloudAccountRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *UpdateCloudAccountRequest) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *UpdateCloudAccountRequest) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type UpdateCloudAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UpdateCloudAccountResponse) Reset() {
	*x = UpdateCloudAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloudAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudAccountResponse) ProtoMessage() {}

func (x *UpdateCloudAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudAccountResponse.ProtoReflect.Descriptor instead.
func (*UpdateCloudAccountResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateCloudAccountResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateCloudAccountResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateCloudAccountResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type MigrateCloudAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID    string         `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	AccountIDs string         `protobuf:"bytes,2,opt,name=accountIDs,proto3" json:"accountIDs,omitempty"`
	Encrypt    *OriginEncrypt `protobuf:"bytes,3,opt,name=encrypt,proto3" json:"encrypt,omitempty"`
	All        bool           `protobuf:"varint,4,opt,name=all,proto3" json:"all,omitempty"`
}

func (x *MigrateCloudAccountRequest) Reset() {
	*x = MigrateCloudAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateCloudAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateCloudAccountRequest) ProtoMessage() {}

func (x *MigrateCloudAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateCloudAccountRequest.ProtoReflect.Descriptor instead.
func (*MigrateCloudAccountRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{30}
}

func (x *MigrateCloudAccountRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *MigrateCloudAccountRequest) GetAccountIDs() string {
	if x != nil {
		return x.AccountIDs
	}
	return ""
}

func (x *MigrateCloudAccountRequest) GetEncrypt() *OriginEncrypt {
	if x != nil {
		return x.Encrypt
	}
	return nil
}

func (x *MigrateCloudAccountRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type OriginEncrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptType string `protobuf:"bytes,1,opt,name=encryptType,proto3" json:"encryptType,omitempty"`
	Kv          string `protobuf:"bytes,2,opt,name=kv,proto3" json:"kv,omitempty"`
	Iv          string `protobuf:"bytes,3,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (x *OriginEncrypt) Reset() {
	*x = OriginEncrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginEncrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginEncrypt) ProtoMessage() {}

func (x *OriginEncrypt) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginEncrypt.ProtoReflect.Descriptor instead.
func (*OriginEncrypt) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{31}
}

func (x *OriginEncrypt) GetEncryptType() string {
	if x != nil {
		return x.EncryptType
	}
	return ""
}

func (x *OriginEncrypt) GetKv() string {
	if x != nil {
		return x.Kv
	}
	return ""
}

func (x *OriginEncrypt) GetIv() string {
	if x != nil {
		return x.Iv
	}
	return ""
}

type MigrateCloudAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *MigrateCloudAccountResponse) Reset() {
	*x = MigrateCloudAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateCloudAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateCloudAccountResponse) ProtoMessage() {}

func (x *MigrateCloudAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateCloudAccountResponse.ProtoReflect.Descriptor instead.
func (*MigrateCloudAccountResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{32}
}

func (x *MigrateCloudAccountResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MigrateCloudAccountResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MigrateCloudAccountResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type DeleteCloudAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID   string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	AccountID string `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
}

func (x *DeleteCloudAccountRequest) Reset() {
	*x = DeleteCloudAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudAccountRequest) ProtoMessage() {}

func (x *DeleteCloudAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloudAccountRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteCloudAccountRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *DeleteCloudAccountRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

type DeleteCloudAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DeleteCloudAccountResponse) Reset() {
	*x = DeleteCloudAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudAccountResponse) ProtoMessage() {}

func (x *DeleteCloudAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudAccountResponse.ProtoReflect.Descriptor instead.
func (*DeleteCloudAccountResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteCloudAccountResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteCloudAccountResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteCloudAccountResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListCloudAccountPermRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID   string   `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	AccountID   []string `protobuf:"bytes,2,rep,name=accountID,proto3" json:"accountID,omitempty"`
	AccountName string   `protobuf:"bytes,3,opt,name=accountName,proto3" json:"accountName,omitempty"`
}

func (x *ListCloudAccountPermRequest) Reset() {
	*x = ListCloudAccountPermRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudAccountPermRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudAccountPermRequest) ProtoMessage() {}

func (x *ListCloudAccountPermRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudAccountPermRequest.ProtoReflect.Descriptor instead.
func (*ListCloudAccountPermRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{35}
}

func (x *ListCloudAccountPermRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListCloudAccountPermRequest) GetAccountID() []string {
	if x != nil {
		return x.AccountID
	}
	return nil
}

func (x *ListCloudAccountPermRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type ListCloudAccountPermResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*CloudAccount `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudAccountPermResponse) Reset() {
	*x = ListCloudAccountPermResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudAccountPermResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudAccountPermResponse) ProtoMessage() {}

func (x *ListCloudAccountPermResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudAccountPermResponse.ProtoReflect.Descriptor instead.
func (*ListCloudAccountPermResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{36}
}

func (x *ListCloudAccountPermResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCloudAccountPermResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCloudAccountPermResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListCloudAccountPermResponse) GetData() []*CloudAccount {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCloudAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID   string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	AccountID string `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	ProjectID string `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *ListCloudAccountRequest) Reset() {
	*x = ListCloudAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudAccountRequest) ProtoMessage() {}

func (x *ListCloudAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudAccountRequest.ProtoReflect.Descriptor instead.
func (*ListCloudAccountRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{37}
}

func (x *ListCloudAccountRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *ListCloudAccountRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ListCloudAccountRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListCloudAccountRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type VerifyCloudAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID string   `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Desc    string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Account *Account `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *VerifyCloudAccountRequest) Reset() {
	*x = VerifyCloudAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyCloudAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyCloudAccountRequest) ProtoMessage() {}

func (x *VerifyCloudAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyCloudAccountRequest.ProtoReflect.Descriptor instead.
func (*VerifyCloudAccountRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{38}
}

func (x *VerifyCloudAccountRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *VerifyCloudAccountRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *VerifyCloudAccountRequest) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type VerifyCloudAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *VerifyCloudAccountResponse) Reset() {
	*x = VerifyCloudAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyCloudAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyCloudAccountResponse) ProtoMessage() {}

func (x *VerifyCloudAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyCloudAccountResponse.ProtoReflect.Descriptor instead.
func (*VerifyCloudAccountResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{39}
}

func (x *VerifyCloudAccountResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *VerifyCloudAccountResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VerifyCloudAccountResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// CloudAccountInfo return account relative info
type CloudAccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  *CloudAccount `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Clusters []string      `protobuf:"bytes,2,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *CloudAccountInfo) Reset() {
	*x = CloudAccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAccountInfo) ProtoMessage() {}

func (x *CloudAccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAccountInfo.ProtoReflect.Descriptor instead.
func (*CloudAccountInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{40}
}

func (x *CloudAccountInfo) GetAccount() *CloudAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *CloudAccountInfo) GetClusters() []string {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type ListCloudAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool                `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           []*CloudAccountInfo `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations     `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListCloudAccountResponse) Reset() {
	*x = ListCloudAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudAccountResponse) ProtoMessage() {}

func (x *ListCloudAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudAccountResponse.ProtoReflect.Descriptor instead.
func (*ListCloudAccountResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{41}
}

func (x *ListCloudAccountResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCloudAccountResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCloudAccountResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListCloudAccountResponse) GetData() []*CloudAccountInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListCloudAccountResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

// cloud region VPCInfo
type CloudVPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID       string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Region        string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	RegionName    string `protobuf:"bytes,3,opt,name=regionName,proto3" json:"regionName,omitempty"`
	NetworkType   string `protobuf:"bytes,4,opt,name=networkType,proto3" json:"networkType,omitempty"`
	VpcID         string `protobuf:"bytes,5,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	VpcName       string `protobuf:"bytes,6,opt,name=vpcName,proto3" json:"vpcName,omitempty"`
	Available     string `protobuf:"bytes,7,opt,name=available,proto3" json:"available,omitempty"`
	Extra         string `protobuf:"bytes,8,opt,name=extra,proto3" json:"extra,omitempty"`
	Creator       string `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater       string `protobuf:"bytes,10,opt,name=updater,proto3" json:"updater,omitempty"`
	CreatTime     string `protobuf:"bytes,11,opt,name=creatTime,proto3" json:"creatTime,omitempty"`
	UpdateTime    string `protobuf:"bytes,12,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	ReservedIPNum uint32 `protobuf:"varint,13,opt,name=reservedIPNum,proto3" json:"reservedIPNum,omitempty"`
	BusinessID    string `protobuf:"bytes,14,opt,name=businessID,proto3" json:"businessID,omitempty"`
	Overlay       *Cidr  `protobuf:"bytes,15,opt,name=overlay,proto3" json:"overlay,omitempty"`
	Underlay      *Cidr  `protobuf:"bytes,16,opt,name=underlay,proto3" json:"underlay,omitempty"`
}

func (x *CloudVPC) Reset() {
	*x = CloudVPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudVPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudVPC) ProtoMessage() {}

func (x *CloudVPC) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudVPC.ProtoReflect.Descriptor instead.
func (*CloudVPC) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{42}
}

func (x *CloudVPC) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *CloudVPC) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CloudVPC) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *CloudVPC) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *CloudVPC) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *CloudVPC) GetVpcName() string {
	if x != nil {
		return x.VpcName
	}
	return ""
}

func (x *CloudVPC) GetAvailable() string {
	if x != nil {
		return x.Available
	}
	return ""
}

func (x *CloudVPC) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *CloudVPC) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CloudVPC) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *CloudVPC) GetCreatTime() string {
	if x != nil {
		return x.CreatTime
	}
	return ""
}

func (x *CloudVPC) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CloudVPC) GetReservedIPNum() uint32 {
	if x != nil {
		return x.ReservedIPNum
	}
	return 0
}

func (x *CloudVPC) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *CloudVPC) GetOverlay() *Cidr {
	if x != nil {
		return x.Overlay
	}
	return nil
}

func (x *CloudVPC) GetUnderlay() *Cidr {
	if x != nil {
		return x.Underlay
	}
	return nil
}

type Cidr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cidrs         []*CidrState `protobuf:"bytes,1,rep,name=cidrs,proto3" json:"cidrs,omitempty"`
	ReservedIPNum uint32       `protobuf:"varint,2,opt,name=reservedIPNum,proto3" json:"reservedIPNum,omitempty"`
	ReservedCidrs []string     `protobuf:"bytes,3,rep,name=reservedCidrs,proto3" json:"reservedCidrs,omitempty"`
}

func (x *Cidr) Reset() {
	*x = Cidr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cidr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cidr) ProtoMessage() {}

func (x *Cidr) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cidr.ProtoReflect.Descriptor instead.
func (*Cidr) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{43}
}

func (x *Cidr) GetCidrs() []*CidrState {
	if x != nil {
		return x.Cidrs
	}
	return nil
}

func (x *Cidr) GetReservedIPNum() uint32 {
	if x != nil {
		return x.ReservedIPNum
	}
	return 0
}

func (x *Cidr) GetReservedCidrs() []string {
	if x != nil {
		return x.ReservedCidrs
	}
	return nil
}

type CidrState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cidr  string `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
	Block bool   `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *CidrState) Reset() {
	*x = CidrState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CidrState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CidrState) ProtoMessage() {}

func (x *CidrState) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CidrState.ProtoReflect.Descriptor instead.
func (*CidrState) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{44}
}

func (x *CidrState) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *CidrState) GetBlock() bool {
	if x != nil {
		return x.Block
	}
	return false
}

type CreateCloudVPCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID       string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	NetworkType   string `protobuf:"bytes,2,opt,name=networkType,proto3" json:"networkType,omitempty"`
	Region        string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	RegionName    string `protobuf:"bytes,4,opt,name=regionName,proto3" json:"regionName,omitempty"`
	VpcName       string `protobuf:"bytes,5,opt,name=vpcName,proto3" json:"vpcName,omitempty"`
	VpcID         string `protobuf:"bytes,6,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	Available     string `protobuf:"bytes,7,opt,name=available,proto3" json:"available,omitempty"`
	Extra         string `protobuf:"bytes,8,opt,name=extra,proto3" json:"extra,omitempty"`
	Creator       string `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
	ReservedIPNum uint32 `protobuf:"varint,10,opt,name=reservedIPNum,proto3" json:"reservedIPNum,omitempty"`
	BusinessID    string `protobuf:"bytes,11,opt,name=businessID,proto3" json:"businessID,omitempty"`
	Overlay       *Cidr  `protobuf:"bytes,12,opt,name=overlay,proto3" json:"overlay,omitempty"`
	Underlay      *Cidr  `protobuf:"bytes,13,opt,name=underlay,proto3" json:"underlay,omitempty"`
}

func (x *CreateCloudVPCRequest) Reset() {
	*x = CreateCloudVPCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudVPCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudVPCRequest) ProtoMessage() {}

func (x *CreateCloudVPCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudVPCRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudVPCRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{45}
}

func (x *CreateCloudVPCRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *CreateCloudVPCRequest) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *CreateCloudVPCRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreateCloudVPCRequest) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *CreateCloudVPCRequest) GetVpcName() string {
	if x != nil {
		return x.VpcName
	}
	return ""
}

func (x *CreateCloudVPCRequest) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *CreateCloudVPCRequest) GetAvailable() string {
	if x != nil {
		return x.Available
	}
	return ""
}

func (x *CreateCloudVPCRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *CreateCloudVPCRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreateCloudVPCRequest) GetReservedIPNum() uint32 {
	if x != nil {
		return x.ReservedIPNum
	}
	return 0
}

func (x *CreateCloudVPCRequest) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *CreateCloudVPCRequest) GetOverlay() *Cidr {
	if x != nil {
		return x.Overlay
	}
	return nil
}

func (x *CreateCloudVPCRequest) GetUnderlay() *Cidr {
	if x != nil {
		return x.Underlay
	}
	return nil
}

type CreateCloudVPCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateCloudVPCResponse) Reset() {
	*x = CreateCloudVPCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudVPCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudVPCResponse) ProtoMessage() {}

func (x *CreateCloudVPCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudVPCResponse.ProtoReflect.Descriptor instead.
func (*CreateCloudVPCResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{46}
}

func (x *CreateCloudVPCResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateCloudVPCResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateCloudVPCResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type UpdateCloudVPCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID       string                `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	NetworkType   string                `protobuf:"bytes,2,opt,name=networkType,proto3" json:"networkType,omitempty"`
	Region        string                `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	RegionName    string                `protobuf:"bytes,4,opt,name=regionName,proto3" json:"regionName,omitempty"`
	VpcName       string                `protobuf:"bytes,5,opt,name=vpcName,proto3" json:"vpcName,omitempty"`
	VpcID         string                `protobuf:"bytes,6,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	Available     string                `protobuf:"bytes,7,opt,name=available,proto3" json:"available,omitempty"`
	Updater       string                `protobuf:"bytes,8,opt,name=updater,proto3" json:"updater,omitempty"`
	ReservedIPNum *wrappers.UInt32Value `protobuf:"bytes,9,opt,name=reservedIPNum,proto3" json:"reservedIPNum,omitempty"`
	BusinessID    *wrappers.StringValue `protobuf:"bytes,11,opt,name=businessID,proto3" json:"businessID,omitempty"`
	Overlay       *Cidr                 `protobuf:"bytes,12,opt,name=overlay,proto3" json:"overlay,omitempty"`
	Underlay      *Cidr                 `protobuf:"bytes,13,opt,name=underlay,proto3" json:"underlay,omitempty"`
}

func (x *UpdateCloudVPCRequest) Reset() {
	*x = UpdateCloudVPCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloudVPCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudVPCRequest) ProtoMessage() {}

func (x *UpdateCloudVPCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudVPCRequest.ProtoReflect.Descriptor instead.
func (*UpdateCloudVPCRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{47}
}

func (x *UpdateCloudVPCRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *UpdateCloudVPCRequest) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *UpdateCloudVPCRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *UpdateCloudVPCRequest) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *UpdateCloudVPCRequest) GetVpcName() string {
	if x != nil {
		return x.VpcName
	}
	return ""
}

func (x *UpdateCloudVPCRequest) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *UpdateCloudVPCRequest) GetAvailable() string {
	if x != nil {
		return x.Available
	}
	return ""
}

func (x *UpdateCloudVPCRequest) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *UpdateCloudVPCRequest) GetReservedIPNum() *wrappers.UInt32Value {
	if x != nil {
		return x.ReservedIPNum
	}
	return nil
}

func (x *UpdateCloudVPCRequest) GetBusinessID() *wrappers.StringValue {
	if x != nil {
		return x.BusinessID
	}
	return nil
}

func (x *UpdateCloudVPCRequest) GetOverlay() *Cidr {
	if x != nil {
		return x.Overlay
	}
	return nil
}

func (x *UpdateCloudVPCRequest) GetUnderlay() *Cidr {
	if x != nil {
		return x.Underlay
	}
	return nil
}

type UpdateCloudVPCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool      `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *CloudVPC `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateCloudVPCResponse) Reset() {
	*x = UpdateCloudVPCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloudVPCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudVPCResponse) ProtoMessage() {}

func (x *UpdateCloudVPCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudVPCResponse.ProtoReflect.Descriptor instead.
func (*UpdateCloudVPCResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{48}
}

func (x *UpdateCloudVPCResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateCloudVPCResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateCloudVPCResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateCloudVPCResponse) GetData() *CloudVPC {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteCloudVPCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	VpcID   string `protobuf:"bytes,2,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
}

func (x *DeleteCloudVPCRequest) Reset() {
	*x = DeleteCloudVPCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudVPCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudVPCRequest) ProtoMessage() {}

func (x *DeleteCloudVPCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudVPCRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloudVPCRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{49}
}

func (x *DeleteCloudVPCRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *DeleteCloudVPCRequest) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

type DeleteCloudVPCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool      `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *CloudVPC `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteCloudVPCResponse) Reset() {
	*x = DeleteCloudVPCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudVPCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudVPCResponse) ProtoMessage() {}

func (x *DeleteCloudVPCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudVPCResponse.ProtoReflect.Descriptor instead.
func (*DeleteCloudVPCResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{50}
}

func (x *DeleteCloudVPCResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteCloudVPCResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteCloudVPCResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteCloudVPCResponse) GetData() *CloudVPC {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCloudVPCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID     string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Region      string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	VpcID       string `protobuf:"bytes,3,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	NetworkType string `protobuf:"bytes,4,opt,name=networkType,proto3" json:"networkType,omitempty"`
	BusinessID  string `protobuf:"bytes,5,opt,name=businessID,proto3" json:"businessID,omitempty"`
}

func (x *ListCloudVPCRequest) Reset() {
	*x = ListCloudVPCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudVPCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudVPCRequest) ProtoMessage() {}

func (x *ListCloudVPCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudVPCRequest.ProtoReflect.Descriptor instead.
func (*ListCloudVPCRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{51}
}

func (x *ListCloudVPCRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *ListCloudVPCRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListCloudVPCRequest) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *ListCloudVPCRequest) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *ListCloudVPCRequest) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

type ListCloudVPCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*CloudVPCResp `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudVPCResponse) Reset() {
	*x = ListCloudVPCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudVPCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudVPCResponse) ProtoMessage() {}

func (x *ListCloudVPCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudVPCResponse.ProtoReflect.Descriptor instead.
func (*ListCloudVPCResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{52}
}

func (x *ListCloudVPCResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCloudVPCResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCloudVPCResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListCloudVPCResponse) GetData() []*CloudVPCResp {
	if x != nil {
		return x.Data
	}
	return nil
}

// CloudVPCResp for web model
type CloudVPCResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID        string          `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Region         string          `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	RegionName     string          `protobuf:"bytes,3,opt,name=regionName,proto3" json:"regionName,omitempty"`
	NetworkType    string          `protobuf:"bytes,4,opt,name=networkType,proto3" json:"networkType,omitempty"`
	VpcID          string          `protobuf:"bytes,5,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	VpcName        string          `protobuf:"bytes,6,opt,name=vpcName,proto3" json:"vpcName,omitempty"`
	Available      string          `protobuf:"bytes,7,opt,name=available,proto3" json:"available,omitempty"`
	Extra          string          `protobuf:"bytes,8,opt,name=extra,proto3" json:"extra,omitempty"`
	ReservedIPNum  uint32          `protobuf:"varint,9,opt,name=reservedIPNum,proto3" json:"reservedIPNum,omitempty"`
	AvailableIPNum uint32          `protobuf:"varint,10,opt,name=availableIPNum,proto3" json:"availableIPNum,omitempty"`
	Overlay        *CidrDetailInfo `protobuf:"bytes,11,opt,name=overlay,proto3" json:"overlay,omitempty"`
	Underlay       *CidrDetailInfo `protobuf:"bytes,12,opt,name=underlay,proto3" json:"underlay,omitempty"`
	BusinessID     string          `protobuf:"bytes,13,opt,name=businessID,proto3" json:"businessID,omitempty"`
}

func (x *CloudVPCResp) Reset() {
	*x = CloudVPCResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudVPCResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudVPCResp) ProtoMessage() {}

func (x *CloudVPCResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudVPCResp.ProtoReflect.Descriptor instead.
func (*CloudVPCResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{53}
}

func (x *CloudVPCResp) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *CloudVPCResp) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CloudVPCResp) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *CloudVPCResp) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *CloudVPCResp) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *CloudVPCResp) GetVpcName() string {
	if x != nil {
		return x.VpcName
	}
	return ""
}

func (x *CloudVPCResp) GetAvailable() string {
	if x != nil {
		return x.Available
	}
	return ""
}

func (x *CloudVPCResp) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *CloudVPCResp) GetReservedIPNum() uint32 {
	if x != nil {
		return x.ReservedIPNum
	}
	return 0
}

func (x *CloudVPCResp) GetAvailableIPNum() uint32 {
	if x != nil {
		return x.AvailableIPNum
	}
	return 0
}

func (x *CloudVPCResp) GetOverlay() *CidrDetailInfo {
	if x != nil {
		return x.Overlay
	}
	return nil
}

func (x *CloudVPCResp) GetUnderlay() *CidrDetailInfo {
	if x != nil {
		return x.Underlay
	}
	return nil
}

func (x *CloudVPCResp) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

type CidrDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cidrs          []*CidrState `protobuf:"bytes,1,rep,name=cidrs,proto3" json:"cidrs,omitempty"`
	ReservedIPNum  uint32       `protobuf:"varint,2,opt,name=reservedIPNum,proto3" json:"reservedIPNum,omitempty"`
	AvailableIPNum uint32       `protobuf:"varint,3,opt,name=availableIPNum,proto3" json:"availableIPNum,omitempty"`
}

func (x *CidrDetailInfo) Reset() {
	*x = CidrDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CidrDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CidrDetailInfo) ProtoMessage() {}

func (x *CidrDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CidrDetailInfo.ProtoReflect.Descriptor instead.
func (*CidrDetailInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{54}
}

func (x *CidrDetailInfo) GetCidrs() []*CidrState {
	if x != nil {
		return x.Cidrs
	}
	return nil
}

func (x *CidrDetailInfo) GetReservedIPNum() uint32 {
	if x != nil {
		return x.ReservedIPNum
	}
	return 0
}

func (x *CidrDetailInfo) GetAvailableIPNum() uint32 {
	if x != nil {
		return x.AvailableIPNum
	}
	return 0
}

type ListCloudRegionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
}

func (x *ListCloudRegionsRequest) Reset() {
	*x = ListCloudRegionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudRegionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudRegionsRequest) ProtoMessage() {}

func (x *ListCloudRegionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudRegionsRequest.ProtoReflect.Descriptor instead.
func (*ListCloudRegionsRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{55}
}

func (x *ListCloudRegionsRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

type ListCloudRegionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool           `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*CloudRegion `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudRegionsResponse) Reset() {
	*x = ListCloudRegionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudRegionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudRegionsResponse) ProtoMessage() {}

func (x *ListCloudRegionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudRegionsResponse.ProtoReflect.Descriptor instead.
func (*ListCloudRegionsResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{56}
}

func (x *ListCloudRegionsResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCloudRegionsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCloudRegionsResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListCloudRegionsResponse) GetData() []*CloudRegion {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloudRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID    string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	RegionName string `protobuf:"bytes,2,opt,name=regionName,proto3" json:"regionName,omitempty"`
	Region     string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *CloudRegion) Reset() {
	*x = CloudRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudRegion) ProtoMessage() {}

func (x *CloudRegion) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudRegion.ProtoReflect.Descriptor instead.
func (*CloudRegion) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{57}
}

func (x *CloudRegion) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *CloudRegion) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *CloudRegion) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type GetVPCCidrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VpcID string `protobuf:"bytes,1,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
}

func (x *GetVPCCidrRequest) Reset() {
	*x = GetVPCCidrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVPCCidrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVPCCidrRequest) ProtoMessage() {}

func (x *GetVPCCidrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVPCCidrRequest.ProtoReflect.Descriptor instead.
func (*GetVPCCidrRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{58}
}

func (x *GetVPCCidrRequest) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

type GetVPCCidrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool       `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*VPCCidr `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetVPCCidrResponse) Reset() {
	*x = GetVPCCidrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVPCCidrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVPCCidrResponse) ProtoMessage() {}

func (x *GetVPCCidrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVPCCidrResponse.ProtoReflect.Descriptor instead.
func (*GetVPCCidrResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{59}
}

func (x *GetVPCCidrResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetVPCCidrResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetVPCCidrResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetVPCCidrResponse) GetData() []*VPCCidr {
	if x != nil {
		return x.Data
	}
	return nil
}

type VPCCidr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vpc      string `protobuf:"bytes,1,opt,name=vpc,proto3" json:"vpc,omitempty"`
	Cidr     string `protobuf:"bytes,2,opt,name=cidr,proto3" json:"cidr,omitempty"`
	IPNumber uint32 `protobuf:"varint,3,opt,name=IPNumber,proto3" json:"IPNumber,omitempty"`
	Status   string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *VPCCidr) Reset() {
	*x = VPCCidr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPCCidr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPCCidr) ProtoMessage() {}

func (x *VPCCidr) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPCCidr.ProtoReflect.Descriptor instead.
func (*VPCCidr) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{60}
}

func (x *VPCCidr) GetVpc() string {
	if x != nil {
		return x.Vpc
	}
	return ""
}

func (x *VPCCidr) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *VPCCidr) GetIPNumber() uint32 {
	if x != nil {
		return x.IPNumber
	}
	return 0
}

func (x *VPCCidr) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type Cloud struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID             string                  `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Name                string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Editable            bool                    `protobuf:"varint,3,opt,name=editable,proto3" json:"editable,omitempty"`
	OpsPlugins          map[string]*BKOpsPlugin `protobuf:"bytes,4,rep,name=opsPlugins,proto3" json:"opsPlugins,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExtraPlugins        map[string]*BKOpsPlugin `protobuf:"bytes,5,rep,name=extraPlugins,proto3" json:"extraPlugins,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CloudCredential     *Credential             `protobuf:"bytes,6,opt,name=cloudCredential,proto3" json:"cloudCredential,omitempty"`
	OsManagement        *OSInfo                 `protobuf:"bytes,7,opt,name=osManagement,proto3" json:"osManagement,omitempty"`
	ClusterManagement   *ClusterMgr             `protobuf:"bytes,8,opt,name=clusterManagement,proto3" json:"clusterManagement,omitempty"`
	NodeGroupManagement *NodeGroupMgr           `protobuf:"bytes,10,opt,name=nodeGroupManagement,proto3" json:"nodeGroupManagement,omitempty"`
	Creator             string                  `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater             string                  `protobuf:"bytes,12,opt,name=updater,proto3" json:"updater,omitempty"`
	CreatTime           string                  `protobuf:"bytes,13,opt,name=creatTime,proto3" json:"creatTime,omitempty"`
	UpdateTime          string                  `protobuf:"bytes,14,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	CloudProvider       string                  `protobuf:"bytes,15,opt,name=cloudProvider,proto3" json:"cloudProvider,omitempty"`
	Config              string                  `protobuf:"bytes,16,opt,name=config,proto3" json:"config,omitempty"`
	Description         string                  `protobuf:"bytes,17,opt,name=description,proto3" json:"description,omitempty"`
	EngineType          string                  `protobuf:"bytes,18,opt,name=engineType,proto3" json:"engineType,omitempty"`
	Enable              string                  `protobuf:"bytes,19,opt,name=enable,proto3" json:"enable,omitempty"`
	NetworkInfo         *CloudNetworkInfo       `protobuf:"bytes,20,opt,name=networkInfo,proto3" json:"networkInfo,omitempty"`
	ConfInfo            *CloudConfigInfo        `protobuf:"bytes,21,opt,name=confInfo,proto3" json:"confInfo,omitempty"`
	PlatformInfo        map[string]string       `protobuf:"bytes,22,rep,name=platformInfo,proto3" json:"platformInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Cloud) Reset() {
	*x = Cloud{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cloud) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cloud) ProtoMessage() {}

func (x *Cloud) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cloud.ProtoReflect.Descriptor instead.
func (*Cloud) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{61}
}

func (x *Cloud) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *Cloud) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cloud) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *Cloud) GetOpsPlugins() map[string]*BKOpsPlugin {
	if x != nil {
		return x.OpsPlugins
	}
	return nil
}

func (x *Cloud) GetExtraPlugins() map[string]*BKOpsPlugin {
	if x != nil {
		return x.ExtraPlugins
	}
	return nil
}

func (x *Cloud) GetCloudCredential() *Credential {
	if x != nil {
		return x.CloudCredential
	}
	return nil
}

func (x *Cloud) GetOsManagement() *OSInfo {
	if x != nil {
		return x.OsManagement
	}
	return nil
}

func (x *Cloud) GetClusterManagement() *ClusterMgr {
	if x != nil {
		return x.ClusterManagement
	}
	return nil
}

func (x *Cloud) GetNodeGroupManagement() *NodeGroupMgr {
	if x != nil {
		return x.NodeGroupManagement
	}
	return nil
}

func (x *Cloud) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Cloud) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *Cloud) GetCreatTime() string {
	if x != nil {
		return x.CreatTime
	}
	return ""
}

func (x *Cloud) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Cloud) GetCloudProvider() string {
	if x != nil {
		return x.CloudProvider
	}
	return ""
}

func (x *Cloud) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *Cloud) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Cloud) GetEngineType() string {
	if x != nil {
		return x.EngineType
	}
	return ""
}

func (x *Cloud) GetEnable() string {
	if x != nil {
		return x.Enable
	}
	return ""
}

func (x *Cloud) GetNetworkInfo() *CloudNetworkInfo {
	if x != nil {
		return x.NetworkInfo
	}
	return nil
}

func (x *Cloud) GetConfInfo() *CloudConfigInfo {
	if x != nil {
		return x.ConfInfo
	}
	return nil
}

func (x *Cloud) GetPlatformInfo() map[string]string {
	if x != nil {
		return x.PlatformInfo
	}
	return nil
}

// CloudConfigInfo storage for cloud special conf info
type CloudConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudInternalEnable       bool     `protobuf:"varint,1,opt,name=cloudInternalEnable,proto3" json:"cloudInternalEnable,omitempty"`
	CloudDomain               string   `protobuf:"bytes,2,opt,name=cloudDomain,proto3" json:"cloudDomain,omitempty"`
	MachineDomain             string   `protobuf:"bytes,3,opt,name=machineDomain,proto3" json:"machineDomain,omitempty"`
	DisableCreateCluster      bool     `protobuf:"varint,4,opt,name=disableCreateCluster,proto3" json:"disableCreateCluster,omitempty"`
	DisableImportCluster      bool     `protobuf:"varint,5,opt,name=disableImportCluster,proto3" json:"disableImportCluster,omitempty"`
	DisableNodeGroup          bool     `protobuf:"varint,6,opt,name=disableNodeGroup,proto3" json:"disableNodeGroup,omitempty"`
	VpcDomain                 string   `protobuf:"bytes,7,opt,name=vpcDomain,proto3" json:"vpcDomain,omitempty"`
	DisableCheckGroupResource bool     `protobuf:"varint,8,opt,name=disableCheckGroupResource,proto3" json:"disableCheckGroupResource,omitempty"`
	RegionHaWhiteList         []string `protobuf:"bytes,9,rep,name=regionHaWhiteList,proto3" json:"regionHaWhiteList,omitempty"`
	MaxNodeCount              uint32   `protobuf:"varint,10,opt,name=maxNodeCount,proto3" json:"maxNodeCount,omitempty"`
	WhiteImageOsName          []string `protobuf:"bytes,11,rep,name=whiteImageOsName,proto3" json:"whiteImageOsName,omitempty"`
}

func (x *CloudConfigInfo) Reset() {
	*x = CloudConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudConfigInfo) ProtoMessage() {}

func (x *CloudConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudConfigInfo.ProtoReflect.Descriptor instead.
func (*CloudConfigInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{62}
}

func (x *CloudConfigInfo) GetCloudInternalEnable() bool {
	if x != nil {
		return x.CloudInternalEnable
	}
	return false
}

func (x *CloudConfigInfo) GetCloudDomain() string {
	if x != nil {
		return x.CloudDomain
	}
	return ""
}

func (x *CloudConfigInfo) GetMachineDomain() string {
	if x != nil {
		return x.MachineDomain
	}
	return ""
}

func (x *CloudConfigInfo) GetDisableCreateCluster() bool {
	if x != nil {
		return x.DisableCreateCluster
	}
	return false
}

func (x *CloudConfigInfo) GetDisableImportCluster() bool {
	if x != nil {
		return x.DisableImportCluster
	}
	return false
}

func (x *CloudConfigInfo) GetDisableNodeGroup() bool {
	if x != nil {
		return x.DisableNodeGroup
	}
	return false
}

func (x *CloudConfigInfo) GetVpcDomain() string {
	if x != nil {
		return x.VpcDomain
	}
	return ""
}

func (x *CloudConfigInfo) GetDisableCheckGroupResource() bool {
	if x != nil {
		return x.DisableCheckGroupResource
	}
	return false
}

func (x *CloudConfigInfo) GetRegionHaWhiteList() []string {
	if x != nil {
		return x.RegionHaWhiteList
	}
	return nil
}

func (x *CloudConfigInfo) GetMaxNodeCount() uint32 {
	if x != nil {
		return x.MaxNodeCount
	}
	return 0
}

func (x *CloudConfigInfo) GetWhiteImageOsName() []string {
	if x != nil {
		return x.WhiteImageOsName
	}
	return nil
}

// CloudNetworkInfo storage for cloud network info
type CloudNetworkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CidrStep          []uint32       `protobuf:"varint,1,rep,packed,name=cidrStep,proto3" json:"cidrStep,omitempty"`
	CidrSteps         []*EnvCidrStep `protobuf:"bytes,2,rep,name=cidrSteps,proto3" json:"cidrSteps,omitempty"`
	ServiceSteps      []uint32       `protobuf:"varint,3,rep,packed,name=serviceSteps,proto3" json:"serviceSteps,omitempty"`
	PerNodePodNum     []uint32       `protobuf:"varint,4,rep,packed,name=perNodePodNum,proto3" json:"perNodePodNum,omitempty"`
	UnderlaySteps     []uint32       `protobuf:"varint,5,rep,packed,name=underlaySteps,proto3" json:"underlaySteps,omitempty"`
	UnderlayAutoSteps []uint32       `protobuf:"varint,6,rep,packed,name=underlayAutoSteps,proto3" json:"underlayAutoSteps,omitempty"`
	UnderlayRatio     uint32         `protobuf:"varint,7,opt,name=underlayRatio,proto3" json:"underlayRatio,omitempty"`
	VpcCniModes       []*NetworkMode `protobuf:"bytes,8,rep,name=vpcCniModes,proto3" json:"vpcCniModes,omitempty"`
}

func (x *CloudNetworkInfo) Reset() {
	*x = CloudNetworkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudNetworkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudNetworkInfo) ProtoMessage() {}

func (x *CloudNetworkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudNetworkInfo.ProtoReflect.Descriptor instead.
func (*CloudNetworkInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{63}
}

func (x *CloudNetworkInfo) GetCidrStep() []uint32 {
	if x != nil {
		return x.CidrStep
	}
	return nil
}

func (x *CloudNetworkInfo) GetCidrSteps() []*EnvCidrStep {
	if x != nil {
		return x.CidrSteps
	}
	return nil
}

func (x *CloudNetworkInfo) GetServiceSteps() []uint32 {
	if x != nil {
		return x.ServiceSteps
	}
	return nil
}

func (x *CloudNetworkInfo) GetPerNodePodNum() []uint32 {
	if x != nil {
		return x.PerNodePodNum
	}
	return nil
}

func (x *CloudNetworkInfo) GetUnderlaySteps() []uint32 {
	if x != nil {
		return x.UnderlaySteps
	}
	return nil
}

func (x *CloudNetworkInfo) GetUnderlayAutoSteps() []uint32 {
	if x != nil {
		return x.UnderlayAutoSteps
	}
	return nil
}

func (x *CloudNetworkInfo) GetUnderlayRatio() uint32 {
	if x != nil {
		return x.UnderlayRatio
	}
	return 0
}

func (x *CloudNetworkInfo) GetVpcCniModes() []*NetworkMode {
	if x != nil {
		return x.VpcCniModes
	}
	return nil
}

type EnvCidrStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env  string `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
	Step uint32 `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
}

func (x *EnvCidrStep) Reset() {
	*x = EnvCidrStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvCidrStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvCidrStep) ProtoMessage() {}

func (x *EnvCidrStep) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvCidrStep.ProtoReflect.Descriptor instead.
func (*EnvCidrStep) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{64}
}

func (x *EnvCidrStep) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *EnvCidrStep) GetStep() uint32 {
	if x != nil {
		return x.Step
	}
	return 0
}

type NetworkMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode    string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	Default bool   `protobuf:"varint,2,opt,name=default,proto3" json:"default,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NetworkMode) Reset() {
	*x = NetworkMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkMode) ProtoMessage() {}

func (x *NetworkMode) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkMode.ProtoReflect.Descriptor instead.
func (*NetworkMode) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{65}
}

func (x *NetworkMode) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *NetworkMode) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (x *NetworkMode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// NodeGroup pool for kubernetes cluster-autoscaling
type NodeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeGroupID      string               `protobuf:"bytes,1,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	Name             string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ClusterID        string               `protobuf:"bytes,3,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Region           string               `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	EnableAutoscale  bool                 `protobuf:"varint,5,opt,name=enableAutoscale,proto3" json:"enableAutoscale,omitempty"`
	AutoScaling      *AutoScalingGroup    `protobuf:"bytes,6,opt,name=autoScaling,proto3" json:"autoScaling,omitempty"`
	LaunchTemplate   *LaunchConfiguration `protobuf:"bytes,7,opt,name=launchTemplate,proto3" json:"launchTemplate,omitempty"`
	Labels           map[string]string    `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Taints           map[string]string    `protobuf:"bytes,9,rep,name=taints,proto3" json:"taints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NodeOS           string               `protobuf:"bytes,10,opt,name=nodeOS,proto3" json:"nodeOS,omitempty"`
	Creator          string               `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater          string               `protobuf:"bytes,12,opt,name=updater,proto3" json:"updater,omitempty"`
	CreateTime       string               `protobuf:"bytes,13,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime       string               `protobuf:"bytes,14,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	ProjectID        string               `protobuf:"bytes,15,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Provider         string               `protobuf:"bytes,16,opt,name=provider,proto3" json:"provider,omitempty"`
	Status           string               `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	ConsumerID       string               `protobuf:"bytes,18,opt,name=consumerID,proto3" json:"consumerID,omitempty"`
	NodeTemplate     *NodeTemplate        `protobuf:"bytes,19,opt,name=nodeTemplate,proto3" json:"nodeTemplate,omitempty"`
	CloudNodeGroupID string               `protobuf:"bytes,20,opt,name=cloudNodeGroupID,proto3" json:"cloudNodeGroupID,omitempty"`
	Tags             map[string]string    `protobuf:"bytes,21,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NodeGroupType    string               `protobuf:"bytes,22,opt,name=nodeGroupType,proto3" json:"nodeGroupType,omitempty"`
	Area             *CloudArea           `protobuf:"bytes,23,opt,name=area,proto3" json:"area,omitempty"`
	ExtraInfo        map[string]string    `protobuf:"bytes,24,rep,name=extraInfo,proto3" json:"extraInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NodeGroup) Reset() {
	*x = NodeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeGroup) ProtoMessage() {}

func (x *NodeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeGroup.ProtoReflect.Descriptor instead.
func (*NodeGroup) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{66}
}

func (x *NodeGroup) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *NodeGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeGroup) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *NodeGroup) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *NodeGroup) GetEnableAutoscale() bool {
	if x != nil {
		return x.EnableAutoscale
	}
	return false
}

func (x *NodeGroup) GetAutoScaling() *AutoScalingGroup {
	if x != nil {
		return x.AutoScaling
	}
	return nil
}

func (x *NodeGroup) GetLaunchTemplate() *LaunchConfiguration {
	if x != nil {
		return x.LaunchTemplate
	}
	return nil
}

func (x *NodeGroup) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NodeGroup) GetTaints() map[string]string {
	if x != nil {
		return x.Taints
	}
	return nil
}

func (x *NodeGroup) GetNodeOS() string {
	if x != nil {
		return x.NodeOS
	}
	return ""
}

func (x *NodeGroup) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *NodeGroup) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *NodeGroup) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *NodeGroup) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *NodeGroup) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *NodeGroup) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *NodeGroup) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NodeGroup) GetConsumerID() string {
	if x != nil {
		return x.ConsumerID
	}
	return ""
}

func (x *NodeGroup) GetNodeTemplate() *NodeTemplate {
	if x != nil {
		return x.NodeTemplate
	}
	return nil
}

func (x *NodeGroup) GetCloudNodeGroupID() string {
	if x != nil {
		return x.CloudNodeGroupID
	}
	return ""
}

func (x *NodeGroup) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NodeGroup) GetNodeGroupType() string {
	if x != nil {
		return x.NodeGroupType
	}
	return ""
}

func (x *NodeGroup) GetArea() *CloudArea {
	if x != nil {
		return x.Area
	}
	return nil
}

func (x *NodeGroup) GetExtraInfo() map[string]string {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

type CloudArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BkCloudID   uint32 `protobuf:"varint,1,opt,name=bkCloudID,proto3" json:"bkCloudID,omitempty"`
	BkCloudName string `protobuf:"bytes,2,opt,name=bkCloudName,proto3" json:"bkCloudName,omitempty"`
}

func (x *CloudArea) Reset() {
	*x = CloudArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudArea) ProtoMessage() {}

func (x *CloudArea) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudArea.ProtoReflect.Descriptor instead.
func (*CloudArea) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{67}
}

func (x *CloudArea) GetBkCloudID() uint32 {
	if x != nil {
		return x.BkCloudID
	}
	return 0
}

func (x *CloudArea) GetBkCloudName() string {
	if x != nil {
		return x.BkCloudName
	}
	return ""
}

// AutoScalingGroup define auto scaling information
type AutoScalingGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoScalingID         string       `protobuf:"bytes,1,opt,name=autoScalingID,proto3" json:"autoScalingID,omitempty"`
	AutoScalingName       string       `protobuf:"bytes,2,opt,name=autoScalingName,proto3" json:"autoScalingName,omitempty"`
	MinSize               uint32       `protobuf:"varint,3,opt,name=minSize,proto3" json:"minSize,omitempty"`
	MaxSize               uint32       `protobuf:"varint,4,opt,name=maxSize,proto3" json:"maxSize,omitempty"`
	DesiredSize           uint32       `protobuf:"varint,5,opt,name=desiredSize,proto3" json:"desiredSize,omitempty"`
	VpcID                 string       `protobuf:"bytes,6,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	DefaultCooldown       uint32       `protobuf:"varint,7,opt,name=defaultCooldown,proto3" json:"defaultCooldown,omitempty"`
	SubnetIDs             []string     `protobuf:"bytes,8,rep,name=subnetIDs,proto3" json:"subnetIDs,omitempty"`
	Zones                 []string     `protobuf:"bytes,9,rep,name=zones,proto3" json:"zones,omitempty"`
	RetryPolicy           string       `protobuf:"bytes,10,opt,name=retryPolicy,proto3" json:"retryPolicy,omitempty"`
	MultiZoneSubnetPolicy string       `protobuf:"bytes,11,opt,name=multiZoneSubnetPolicy,proto3" json:"multiZoneSubnetPolicy,omitempty"`
	ReplaceUnhealthy      bool         `protobuf:"varint,12,opt,name=replaceUnhealthy,proto3" json:"replaceUnhealthy,omitempty"`
	ScalingMode           string       `protobuf:"bytes,13,opt,name=scalingMode,proto3" json:"scalingMode,omitempty"`
	TimeRanges            []*TimeRange `protobuf:"bytes,14,rep,name=timeRanges,proto3" json:"timeRanges,omitempty"`
	AutoUpgrade           bool         `protobuf:"varint,15,opt,name=autoUpgrade,proto3" json:"autoUpgrade,omitempty"`
	ServiceRole           string       `protobuf:"bytes,16,opt,name=serviceRole,proto3" json:"serviceRole,omitempty"`
}

func (x *AutoScalingGroup) Reset() {
	*x = AutoScalingGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoScalingGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoScalingGroup) ProtoMessage() {}

func (x *AutoScalingGroup) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoScalingGroup.ProtoReflect.Descriptor instead.
func (*AutoScalingGroup) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{68}
}

func (x *AutoScalingGroup) GetAutoScalingID() string {
	if x != nil {
		return x.AutoScalingID
	}
	return ""
}

func (x *AutoScalingGroup) GetAutoScalingName() string {
	if x != nil {
		return x.AutoScalingName
	}
	return ""
}

func (x *AutoScalingGroup) GetMinSize() uint32 {
	if x != nil {
		return x.MinSize
	}
	return 0
}

func (x *AutoScalingGroup) GetMaxSize() uint32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *AutoScalingGroup) GetDesiredSize() uint32 {
	if x != nil {
		return x.DesiredSize
	}
	return 0
}

func (x *AutoScalingGroup) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *AutoScalingGroup) GetDefaultCooldown() uint32 {
	if x != nil {
		return x.DefaultCooldown
	}
	return 0
}

func (x *AutoScalingGroup) GetSubnetIDs() []string {
	if x != nil {
		return x.SubnetIDs
	}
	return nil
}

func (x *AutoScalingGroup) GetZones() []string {
	if x != nil {
		return x.Zones
	}
	return nil
}

func (x *AutoScalingGroup) GetRetryPolicy() string {
	if x != nil {
		return x.RetryPolicy
	}
	return ""
}

func (x *AutoScalingGroup) GetMultiZoneSubnetPolicy() string {
	if x != nil {
		return x.MultiZoneSubnetPolicy
	}
	return ""
}

func (x *AutoScalingGroup) GetReplaceUnhealthy() bool {
	if x != nil {
		return x.ReplaceUnhealthy
	}
	return false
}

func (x *AutoScalingGroup) GetScalingMode() string {
	if x != nil {
		return x.ScalingMode
	}
	return ""
}

func (x *AutoScalingGroup) GetTimeRanges() []*TimeRange {
	if x != nil {
		return x.TimeRanges
	}
	return nil
}

func (x *AutoScalingGroup) GetAutoUpgrade() bool {
	if x != nil {
		return x.AutoUpgrade
	}
	return false
}

func (x *AutoScalingGroup) GetServiceRole() string {
	if x != nil {
		return x.ServiceRole
	}
	return ""
}

type TimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Schedule   string `protobuf:"bytes,2,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Zone       string `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	DesiredNum uint32 `protobuf:"varint,4,opt,name=desiredNum,proto3" json:"desiredNum,omitempty"`
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{69}
}

func (x *TimeRange) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TimeRange) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *TimeRange) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *TimeRange) GetDesiredNum() uint32 {
	if x != nil {
		return x.DesiredNum
	}
	return 0
}

// DataDisk 数据盘定义
type DataDisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskType string `protobuf:"bytes,1,opt,name=diskType,proto3" json:"diskType,omitempty"`
	DiskSize string `protobuf:"bytes,2,opt,name=diskSize,proto3" json:"diskSize,omitempty"`
}

func (x *DataDisk) Reset() {
	*x = DataDisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataDisk) ProtoMessage() {}

func (x *DataDisk) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataDisk.ProtoReflect.Descriptor instead.
func (*DataDisk) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{70}
}

func (x *DataDisk) GetDiskType() string {
	if x != nil {
		return x.DiskType
	}
	return ""
}

func (x *DataDisk) GetDiskSize() string {
	if x != nil {
		return x.DiskSize
	}
	return ""
}

// CloudDataDisk 云磁盘格式化数据, 对应CVM数据盘。应用于节点模版
// 主要用于 CA 自动扩容节点并上架节点时重装系统，多块数据盘 mountTarget 不能重复
// 上架已存在节点时, 用户需指定diskPartition参数区分设备
type CloudDataDisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskType           string `protobuf:"bytes,1,opt,name=diskType,proto3" json:"diskType,omitempty"`
	DiskSize           string `protobuf:"bytes,2,opt,name=diskSize,proto3" json:"diskSize,omitempty"`
	FileSystem         string `protobuf:"bytes,3,opt,name=fileSystem,proto3" json:"fileSystem,omitempty"`
	AutoFormatAndMount bool   `protobuf:"varint,4,opt,name=autoFormatAndMount,proto3" json:"autoFormatAndMount,omitempty"`
	MountTarget        string `protobuf:"bytes,5,opt,name=mountTarget,proto3" json:"mountTarget,omitempty"`
	DiskPartition      string `protobuf:"bytes,6,opt,name=diskPartition,proto3" json:"diskPartition,omitempty"`
}

func (x *CloudDataDisk) Reset() {
	*x = CloudDataDisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudDataDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudDataDisk) ProtoMessage() {}

func (x *CloudDataDisk) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudDataDisk.ProtoReflect.Descriptor instead.
func (*CloudDataDisk) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{71}
}

func (x *CloudDataDisk) GetDiskType() string {
	if x != nil {
		return x.DiskType
	}
	return ""
}

func (x *CloudDataDisk) GetDiskSize() string {
	if x != nil {
		return x.DiskSize
	}
	return ""
}

func (x *CloudDataDisk) GetFileSystem() string {
	if x != nil {
		return x.FileSystem
	}
	return ""
}

func (x *CloudDataDisk) GetAutoFormatAndMount() bool {
	if x != nil {
		return x.AutoFormatAndMount
	}
	return false
}

func (x *CloudDataDisk) GetMountTarget() string {
	if x != nil {
		return x.MountTarget
	}
	return ""
}

func (x *CloudDataDisk) GetDiskPartition() string {
	if x != nil {
		return x.DiskPartition
	}
	return ""
}

// InternetAccessible 公网带宽设置
type InternetAccessible struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternetChargeType   string   `protobuf:"bytes,1,opt,name=internetChargeType,proto3" json:"internetChargeType,omitempty"`
	InternetMaxBandwidth string   `protobuf:"bytes,2,opt,name=internetMaxBandwidth,proto3" json:"internetMaxBandwidth,omitempty"`
	PublicIPAssigned     bool     `protobuf:"varint,3,opt,name=publicIPAssigned,proto3" json:"publicIPAssigned,omitempty"`
	BandwidthPackageId   string   `protobuf:"bytes,4,opt,name=bandwidthPackageId,proto3" json:"bandwidthPackageId,omitempty"`
	PublicIP             string   `protobuf:"bytes,5,opt,name=publicIP,proto3" json:"publicIP,omitempty"`
	PublicAccessCidrs    []string `protobuf:"bytes,6,rep,name=publicAccessCidrs,proto3" json:"publicAccessCidrs,omitempty"`
	NodePublicIPPrefixID string   `protobuf:"bytes,7,opt,name=nodePublicIPPrefixID,proto3" json:"nodePublicIPPrefixID,omitempty"`
}

func (x *InternetAccessible) Reset() {
	*x = InternetAccessible{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternetAccessible) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternetAccessible) ProtoMessage() {}

func (x *InternetAccessible) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternetAccessible.ProtoReflect.Descriptor instead.
func (*InternetAccessible) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{72}
}

func (x *InternetAccessible) GetInternetChargeType() string {
	if x != nil {
		return x.InternetChargeType
	}
	return ""
}

func (x *InternetAccessible) GetInternetMaxBandwidth() string {
	if x != nil {
		return x.InternetMaxBandwidth
	}
	return ""
}

func (x *InternetAccessible) GetPublicIPAssigned() bool {
	if x != nil {
		return x.PublicIPAssigned
	}
	return false
}

func (x *InternetAccessible) GetBandwidthPackageId() string {
	if x != nil {
		return x.BandwidthPackageId
	}
	return ""
}

func (x *InternetAccessible) GetPublicIP() string {
	if x != nil {
		return x.PublicIP
	}
	return ""
}

func (x *InternetAccessible) GetPublicAccessCidrs() []string {
	if x != nil {
		return x.PublicAccessCidrs
	}
	return nil
}

func (x *InternetAccessible) GetNodePublicIPPrefixID() string {
	if x != nil {
		return x.NodePublicIPPrefixID
	}
	return ""
}

// InstanceTemplateConfig instance config info
type InstanceTemplateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region             string                 `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	Zone               string                 `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	VpcID              string                 `protobuf:"bytes,3,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	SubnetID           string                 `protobuf:"bytes,4,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
	ApplyNum           uint32                 `protobuf:"varint,5,opt,name=applyNum,proto3" json:"applyNum,omitempty"`
	CPU                uint32                 `protobuf:"varint,6,opt,name=CPU,proto3" json:"CPU,omitempty"`
	Mem                uint32                 `protobuf:"varint,7,opt,name=Mem,proto3" json:"Mem,omitempty"`
	GPU                uint32                 `protobuf:"varint,8,opt,name=GPU,proto3" json:"GPU,omitempty"`
	InstanceType       string                 `protobuf:"bytes,9,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	InstanceChargeType string                 `protobuf:"bytes,10,opt,name=instanceChargeType,proto3" json:"instanceChargeType,omitempty"`
	SystemDisk         *DataDisk              `protobuf:"bytes,11,opt,name=systemDisk,proto3" json:"systemDisk,omitempty"`
	DataDisks          []*DataDisk            `protobuf:"bytes,12,rep,name=dataDisks,proto3" json:"dataDisks,omitempty"`
	ImageInfo          *ImageInfo             `protobuf:"bytes,13,opt,name=imageInfo,proto3" json:"imageInfo,omitempty"`
	InitLoginPassword  string                 `protobuf:"bytes,14,opt,name=initLoginPassword,proto3" json:"initLoginPassword,omitempty"`
	SecurityGroupIDs   []string               `protobuf:"bytes,15,rep,name=securityGroupIDs,proto3" json:"securityGroupIDs,omitempty"`
	IsSecurityService  bool                   `protobuf:"varint,16,opt,name=isSecurityService,proto3" json:"isSecurityService,omitempty"`
	IsMonitorService   bool                   `protobuf:"varint,17,opt,name=isMonitorService,proto3" json:"isMonitorService,omitempty"`
	CloudDataDisks     []*CloudDataDisk       `protobuf:"bytes,18,rep,name=cloudDataDisks,proto3" json:"cloudDataDisks,omitempty"`
	InitLoginUsername  string                 `protobuf:"bytes,19,opt,name=initLoginUsername,proto3" json:"initLoginUsername,omitempty"`
	KeyPair            *KeyInfo               `protobuf:"bytes,20,opt,name=keyPair,proto3" json:"keyPair,omitempty"`
	DockerGraphPath    string                 `protobuf:"bytes,21,opt,name=dockerGraphPath,proto3" json:"dockerGraphPath,omitempty"`
	NodeRole           string                 `protobuf:"bytes,22,opt,name=nodeRole,proto3" json:"nodeRole,omitempty"`
	Charge             *InstanceChargePrepaid `protobuf:"bytes,23,opt,name=charge,proto3" json:"charge,omitempty"`
	InternetAccess     *InternetAccessible    `protobuf:"bytes,24,opt,name=internetAccess,proto3" json:"internetAccess,omitempty"`
}

func (x *InstanceTemplateConfig) Reset() {
	*x = InstanceTemplateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTemplateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTemplateConfig) ProtoMessage() {}

func (x *InstanceTemplateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTemplateConfig.ProtoReflect.Descriptor instead.
func (*InstanceTemplateConfig) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{73}
}

func (x *InstanceTemplateConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *InstanceTemplateConfig) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *InstanceTemplateConfig) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *InstanceTemplateConfig) GetSubnetID() string {
	if x != nil {
		return x.SubnetID
	}
	return ""
}

func (x *InstanceTemplateConfig) GetApplyNum() uint32 {
	if x != nil {
		return x.ApplyNum
	}
	return 0
}

func (x *InstanceTemplateConfig) GetCPU() uint32 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *InstanceTemplateConfig) GetMem() uint32 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *InstanceTemplateConfig) GetGPU() uint32 {
	if x != nil {
		return x.GPU
	}
	return 0
}

func (x *InstanceTemplateConfig) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *InstanceTemplateConfig) GetInstanceChargeType() string {
	if x != nil {
		return x.InstanceChargeType
	}
	return ""
}

func (x *InstanceTemplateConfig) GetSystemDisk() *DataDisk {
	if x != nil {
		return x.SystemDisk
	}
	return nil
}

func (x *InstanceTemplateConfig) GetDataDisks() []*DataDisk {
	if x != nil {
		return x.DataDisks
	}
	return nil
}

func (x *InstanceTemplateConfig) GetImageInfo() *ImageInfo {
	if x != nil {
		return x.ImageInfo
	}
	return nil
}

func (x *InstanceTemplateConfig) GetInitLoginPassword() string {
	if x != nil {
		return x.InitLoginPassword
	}
	return ""
}

func (x *InstanceTemplateConfig) GetSecurityGroupIDs() []string {
	if x != nil {
		return x.SecurityGroupIDs
	}
	return nil
}

func (x *InstanceTemplateConfig) GetIsSecurityService() bool {
	if x != nil {
		return x.IsSecurityService
	}
	return false
}

func (x *InstanceTemplateConfig) GetIsMonitorService() bool {
	if x != nil {
		return x.IsMonitorService
	}
	return false
}

func (x *InstanceTemplateConfig) GetCloudDataDisks() []*CloudDataDisk {
	if x != nil {
		return x.CloudDataDisks
	}
	return nil
}

func (x *InstanceTemplateConfig) GetInitLoginUsername() string {
	if x != nil {
		return x.InitLoginUsername
	}
	return ""
}

func (x *InstanceTemplateConfig) GetKeyPair() *KeyInfo {
	if x != nil {
		return x.KeyPair
	}
	return nil
}

func (x *InstanceTemplateConfig) GetDockerGraphPath() string {
	if x != nil {
		return x.DockerGraphPath
	}
	return ""
}

func (x *InstanceTemplateConfig) GetNodeRole() string {
	if x != nil {
		return x.NodeRole
	}
	return ""
}

func (x *InstanceTemplateConfig) GetCharge() *InstanceChargePrepaid {
	if x != nil {
		return x.Charge
	}
	return nil
}

func (x *InstanceTemplateConfig) GetInternetAccess() *InternetAccessible {
	if x != nil {
		return x.InternetAccess
	}
	return nil
}

type InstanceChargePrepaid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period    uint32 `protobuf:"varint,1,opt,name=period,proto3" json:"period,omitempty"`
	RenewFlag string `protobuf:"bytes,2,opt,name=renewFlag,proto3" json:"renewFlag,omitempty"`
}

func (x *InstanceChargePrepaid) Reset() {
	*x = InstanceChargePrepaid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceChargePrepaid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceChargePrepaid) ProtoMessage() {}

func (x *InstanceChargePrepaid) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceChargePrepaid.ProtoReflect.Descriptor instead.
func (*InstanceChargePrepaid) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{74}
}

func (x *InstanceChargePrepaid) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *InstanceChargePrepaid) GetRenewFlag() string {
	if x != nil {
		return x.RenewFlag
	}
	return ""
}

// LaunchConfigure template for scaling node
type LaunchConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchConfigurationID string                 `protobuf:"bytes,1,opt,name=launchConfigurationID,proto3" json:"launchConfigurationID,omitempty"`
	LaunchConfigureName   string                 `protobuf:"bytes,2,opt,name=launchConfigureName,proto3" json:"launchConfigureName,omitempty"`
	ProjectID             string                 `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	CPU                   uint32                 `protobuf:"varint,4,opt,name=CPU,proto3" json:"CPU,omitempty"`
	Mem                   uint32                 `protobuf:"varint,5,opt,name=Mem,proto3" json:"Mem,omitempty"`
	GPU                   uint32                 `protobuf:"varint,6,opt,name=GPU,proto3" json:"GPU,omitempty"`
	InstanceType          string                 `protobuf:"bytes,7,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	InstanceChargeType    string                 `protobuf:"bytes,8,opt,name=instanceChargeType,proto3" json:"instanceChargeType,omitempty"`
	SystemDisk            *DataDisk              `protobuf:"bytes,9,opt,name=systemDisk,proto3" json:"systemDisk,omitempty"`
	DataDisks             []*DataDisk            `protobuf:"bytes,10,rep,name=dataDisks,proto3" json:"dataDisks,omitempty"`
	InternetAccess        *InternetAccessible    `protobuf:"bytes,11,opt,name=internetAccess,proto3" json:"internetAccess,omitempty"`
	InitLoginPassword     string                 `protobuf:"bytes,12,opt,name=initLoginPassword,proto3" json:"initLoginPassword,omitempty"`
	SecurityGroupIDs      []string               `protobuf:"bytes,13,rep,name=securityGroupIDs,proto3" json:"securityGroupIDs,omitempty"`
	ImageInfo             *ImageInfo             `protobuf:"bytes,14,opt,name=imageInfo,proto3" json:"imageInfo,omitempty"`
	IsSecurityService     bool                   `protobuf:"varint,15,opt,name=isSecurityService,proto3" json:"isSecurityService,omitempty"`
	IsMonitorService      bool                   `protobuf:"varint,16,opt,name=isMonitorService,proto3" json:"isMonitorService,omitempty"`
	UserData              string                 `protobuf:"bytes,17,opt,name=userData,proto3" json:"userData,omitempty"`
	InitLoginUsername     string                 `protobuf:"bytes,18,opt,name=initLoginUsername,proto3" json:"initLoginUsername,omitempty"`
	Selector              map[string]string      `protobuf:"bytes,19,rep,name=selector,proto3" json:"selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	KeyPair               *KeyInfo               `protobuf:"bytes,20,opt,name=keyPair,proto3" json:"keyPair,omitempty"`
	Charge                *InstanceChargePrepaid `protobuf:"bytes,21,opt,name=charge,proto3" json:"charge,omitempty"`
	NetworkTag            []string               `protobuf:"bytes,22,rep,name=networkTag,proto3" json:"networkTag,omitempty"`
}

func (x *LaunchConfiguration) Reset() {
	*x = LaunchConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchConfiguration) ProtoMessage() {}

func (x *LaunchConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchConfiguration.ProtoReflect.Descriptor instead.
func (*LaunchConfiguration) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{75}
}

func (x *LaunchConfiguration) GetLaunchConfigurationID() string {
	if x != nil {
		return x.LaunchConfigurationID
	}
	return ""
}

func (x *LaunchConfiguration) GetLaunchConfigureName() string {
	if x != nil {
		return x.LaunchConfigureName
	}
	return ""
}

func (x *LaunchConfiguration) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *LaunchConfiguration) GetCPU() uint32 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *LaunchConfiguration) GetMem() uint32 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *LaunchConfiguration) GetGPU() uint32 {
	if x != nil {
		return x.GPU
	}
	return 0
}

func (x *LaunchConfiguration) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *LaunchConfiguration) GetInstanceChargeType() string {
	if x != nil {
		return x.InstanceChargeType
	}
	return ""
}

func (x *LaunchConfiguration) GetSystemDisk() *DataDisk {
	if x != nil {
		return x.SystemDisk
	}
	return nil
}

func (x *LaunchConfiguration) GetDataDisks() []*DataDisk {
	if x != nil {
		return x.DataDisks
	}
	return nil
}

func (x *LaunchConfiguration) GetInternetAccess() *InternetAccessible {
	if x != nil {
		return x.InternetAccess
	}
	return nil
}

func (x *LaunchConfiguration) GetInitLoginPassword() string {
	if x != nil {
		return x.InitLoginPassword
	}
	return ""
}

func (x *LaunchConfiguration) GetSecurityGroupIDs() []string {
	if x != nil {
		return x.SecurityGroupIDs
	}
	return nil
}

func (x *LaunchConfiguration) GetImageInfo() *ImageInfo {
	if x != nil {
		return x.ImageInfo
	}
	return nil
}

func (x *LaunchConfiguration) GetIsSecurityService() bool {
	if x != nil {
		return x.IsSecurityService
	}
	return false
}

func (x *LaunchConfiguration) GetIsMonitorService() bool {
	if x != nil {
		return x.IsMonitorService
	}
	return false
}

func (x *LaunchConfiguration) GetUserData() string {
	if x != nil {
		return x.UserData
	}
	return ""
}

func (x *LaunchConfiguration) GetInitLoginUsername() string {
	if x != nil {
		return x.InitLoginUsername
	}
	return ""
}

func (x *LaunchConfiguration) GetSelector() map[string]string {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *LaunchConfiguration) GetKeyPair() *KeyInfo {
	if x != nil {
		return x.KeyPair
	}
	return nil
}

func (x *LaunchConfiguration) GetCharge() *InstanceChargePrepaid {
	if x != nil {
		return x.Charge
	}
	return nil
}

func (x *LaunchConfiguration) GetNetworkTag() []string {
	if x != nil {
		return x.NetworkTag
	}
	return nil
}

type KeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyID     string `protobuf:"bytes,1,opt,name=keyID,proto3" json:"keyID,omitempty"`
	KeySecret string `protobuf:"bytes,2,opt,name=keySecret,proto3" json:"keySecret,omitempty"`
	KeyPublic string `protobuf:"bytes,3,opt,name=keyPublic,proto3" json:"keyPublic,omitempty"`
}

func (x *KeyInfo) Reset() {
	*x = KeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyInfo) ProtoMessage() {}

func (x *KeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyInfo.ProtoReflect.Descriptor instead.
func (*KeyInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{76}
}

func (x *KeyInfo) GetKeyID() string {
	if x != nil {
		return x.KeyID
	}
	return ""
}

func (x *KeyInfo) GetKeySecret() string {
	if x != nil {
		return x.KeySecret
	}
	return ""
}

func (x *KeyInfo) GetKeyPublic() string {
	if x != nil {
		return x.KeyPublic
	}
	return ""
}

// ImageInfo 创建cvm实例的镜像信息
type ImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageID   string `protobuf:"bytes,1,opt,name=imageID,proto3" json:"imageID,omitempty"`
	ImageName string `protobuf:"bytes,2,opt,name=imageName,proto3" json:"imageName,omitempty"`
	ImageType string `protobuf:"bytes,3,opt,name=imageType,proto3" json:"imageType,omitempty"`
	ImageOs   string `protobuf:"bytes,4,opt,name=imageOs,proto3" json:"imageOs,omitempty"`
}

func (x *ImageInfo) Reset() {
	*x = ImageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageInfo) ProtoMessage() {}

func (x *ImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageInfo.ProtoReflect.Descriptor instead.
func (*ImageInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{77}
}

func (x *ImageInfo) GetImageID() string {
	if x != nil {
		return x.ImageID
	}
	return ""
}

func (x *ImageInfo) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ImageInfo) GetImageType() string {
	if x != nil {
		return x.ImageType
	}
	return ""
}

func (x *ImageInfo) GetImageOs() string {
	if x != nil {
		return x.ImageOs
	}
	return ""
}

// ClusterAutoScalingOption cluster autoScaler module parameter
type ClusterAutoScalingOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsScaleDownEnable                bool         `protobuf:"varint,1,opt,name=isScaleDownEnable,proto3" json:"isScaleDownEnable,omitempty"`
	Expander                         string       `protobuf:"bytes,2,opt,name=expander,proto3" json:"expander,omitempty"`
	MaxEmptyBulkDelete               uint32       `protobuf:"varint,3,opt,name=maxEmptyBulkDelete,proto3" json:"maxEmptyBulkDelete,omitempty"`
	ScaleDownDelay                   uint32       `protobuf:"varint,4,opt,name=scaleDownDelay,proto3" json:"scaleDownDelay,omitempty"`
	ScaleDownUnneededTime            uint32       `protobuf:"varint,5,opt,name=scaleDownUnneededTime,proto3" json:"scaleDownUnneededTime,omitempty"`
	ScaleDownUtilizationThreahold    uint32       `protobuf:"varint,6,opt,name=scaleDownUtilizationThreahold,proto3" json:"scaleDownUtilizationThreahold,omitempty"`
	SkipNodesWithLocalStorage        bool         `protobuf:"varint,7,opt,name=skipNodesWithLocalStorage,proto3" json:"skipNodesWithLocalStorage,omitempty"`
	SkipNodesWithSystemPods          bool         `protobuf:"varint,8,opt,name=skipNodesWithSystemPods,proto3" json:"skipNodesWithSystemPods,omitempty"`
	IgnoreDaemonSetsUtilization      bool         `protobuf:"varint,9,opt,name=ignoreDaemonSetsUtilization,proto3" json:"ignoreDaemonSetsUtilization,omitempty"`
	OkTotalUnreadyCount              uint32       `protobuf:"varint,10,opt,name=okTotalUnreadyCount,proto3" json:"okTotalUnreadyCount,omitempty"`
	MaxTotalUnreadyPercentage        uint32       `protobuf:"varint,11,opt,name=maxTotalUnreadyPercentage,proto3" json:"maxTotalUnreadyPercentage,omitempty"`
	ScaleDownUnreadyTime             uint32       `protobuf:"varint,12,opt,name=scaleDownUnreadyTime,proto3" json:"scaleDownUnreadyTime,omitempty"`
	UnregisteredNodeRemovalTime      uint32       `protobuf:"varint,13,opt,name=unregisteredNodeRemovalTime,proto3" json:"unregisteredNodeRemovalTime,omitempty"`
	ProjectID                        string       `protobuf:"bytes,14,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID                        string       `protobuf:"bytes,15,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Creator                          string       `protobuf:"bytes,16,opt,name=creator,proto3" json:"creator,omitempty"`
	CreateTime                       string       `protobuf:"bytes,17,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Updater                          string       `protobuf:"bytes,18,opt,name=updater,proto3" json:"updater,omitempty"`
	UpdateTime                       string       `protobuf:"bytes,19,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Provider                         string       `protobuf:"bytes,20,opt,name=provider,proto3" json:"provider,omitempty"`
	EnableAutoscale                  bool         `protobuf:"varint,21,opt,name=enableAutoscale,proto3" json:"enableAutoscale,omitempty"`
	BufferResourceRatio              uint32       `protobuf:"varint,22,opt,name=bufferResourceRatio,proto3" json:"bufferResourceRatio,omitempty"`
	MaxGracefulTerminationSec        uint32       `protobuf:"varint,23,opt,name=maxGracefulTerminationSec,proto3" json:"maxGracefulTerminationSec,omitempty"`
	ScanInterval                     uint32       `protobuf:"varint,24,opt,name=scanInterval,proto3" json:"scanInterval,omitempty"`
	MaxNodeProvisionTime             uint32       `protobuf:"varint,25,opt,name=maxNodeProvisionTime,proto3" json:"maxNodeProvisionTime,omitempty"`
	ScaleUpFromZero                  bool         `protobuf:"varint,26,opt,name=scaleUpFromZero,proto3" json:"scaleUpFromZero,omitempty"`
	ScaleDownDelayAfterAdd           uint32       `protobuf:"varint,27,opt,name=scaleDownDelayAfterAdd,proto3" json:"scaleDownDelayAfterAdd,omitempty"`
	ScaleDownDelayAfterDelete        uint32       `protobuf:"varint,28,opt,name=scaleDownDelayAfterDelete,proto3" json:"scaleDownDelayAfterDelete,omitempty"`
	ScaleDownDelayAfterFailure       uint32       `protobuf:"varint,29,opt,name=scaleDownDelayAfterFailure,proto3" json:"scaleDownDelayAfterFailure,omitempty"`
	ScaleDownGpuUtilizationThreshold uint32       `protobuf:"varint,30,opt,name=scaleDownGpuUtilizationThreshold,proto3" json:"scaleDownGpuUtilizationThreshold,omitempty"`
	Status                           string       `protobuf:"bytes,31,opt,name=status,proto3" json:"status,omitempty"`
	ErrorMessage                     string       `protobuf:"bytes,32,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	BufferResourceCpuRatio           uint32       `protobuf:"varint,33,opt,name=bufferResourceCpuRatio,proto3" json:"bufferResourceCpuRatio,omitempty"`
	BufferResourceMemRatio           uint32       `protobuf:"varint,34,opt,name=bufferResourceMemRatio,proto3" json:"bufferResourceMemRatio,omitempty"`
	Module                           *ModuleInfo  `protobuf:"bytes,35,opt,name=module,proto3" json:"module,omitempty"`
	Webhook                          *WebhookMode `protobuf:"bytes,36,opt,name=webhook,proto3" json:"webhook,omitempty"`
	ExpendablePodsPriorityCutoff     int32        `protobuf:"varint,37,opt,name=expendablePodsPriorityCutoff,proto3" json:"expendablePodsPriorityCutoff,omitempty"`
	NewPodScaleUpDelay               uint32       `protobuf:"varint,38,opt,name=newPodScaleUpDelay,proto3" json:"newPodScaleUpDelay,omitempty"`
	DevicePoolProvider               string       `protobuf:"bytes,39,opt,name=devicePoolProvider,proto3" json:"devicePoolProvider,omitempty"`
}

func (x *ClusterAutoScalingOption) Reset() {
	*x = ClusterAutoScalingOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAutoScalingOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAutoScalingOption) ProtoMessage() {}

func (x *ClusterAutoScalingOption) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAutoScalingOption.ProtoReflect.Descriptor instead.
func (*ClusterAutoScalingOption) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{78}
}

func (x *ClusterAutoScalingOption) GetIsScaleDownEnable() bool {
	if x != nil {
		return x.IsScaleDownEnable
	}
	return false
}

func (x *ClusterAutoScalingOption) GetExpander() string {
	if x != nil {
		return x.Expander
	}
	return ""
}

func (x *ClusterAutoScalingOption) GetMaxEmptyBulkDelete() uint32 {
	if x != nil {
		return x.MaxEmptyBulkDelete
	}
	return 0
}

func (x *ClusterAutoScalingOption) GetScaleDownDelay() uint32 {
	if x != nil {
		return x.ScaleDownDelay
	}
	return 0
}

func (x *ClusterAutoScalingOption) GetScaleDownUnneededTime() uint32 {
	if x != nil {
		return x.ScaleDownUnneededTime
	}
	return 0
}

func (x *ClusterAutoScalingOption) GetScaleDownUtilizationThreahold() uint32 {
	if x != nil {
		return x.ScaleDownUtilizationThreahold
	}
	return 0
}

func (x *ClusterAutoScalingOption) GetSkipNodesWithLocalStorage() bool {
	if x != nil {
		return x.SkipNodesWithLocalStorage
	}
	return false
}

func (x *ClusterAutoScalingOption) GetSkipNodesWithSystemPods() bool {
	if x != nil {
		return x.SkipNodesWithSystemPods
	}
	return false
}

func (x *ClusterAutoScalingOption) GetIgnoreDaemonSetsUtilization() bool {
	if x != nil {
		return x.IgnoreDaemonSetsUtilization
	}
	return false
}

func (x *ClusterAutoScalingOption) GetOkTotalUnreadyCount() uint32 {
	if x != nil {
		return x.OkTotalUnreadyCount
	}
	return 0
}

func (x *ClusterAutoScalingOption) GetMaxTotalUnreadyPercentage() uint32 {
	if x != nil {
		return x.MaxTotalUnreadyPercentage
	}
	return 0
}

func (x *ClusterAutoScalingOption) GetScaleDownUnreadyTime() uint32 {
	if x != nil {
		return x.ScaleDownUnreadyTime
	}
	return 0
}

func (x *ClusterAutoScalingOption) GetUnregisteredNodeRemovalTime() uint32 {
	if x != nil {
		return x.UnregisteredNodeRemovalTime
	}
	return 0
}

func (x *ClusterAutoScalingOption) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ClusterAutoScalingOption) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ClusterAutoScalingOption) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ClusterAutoScalingOption) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ClusterAutoScalingOption) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *ClusterAutoScalingOption) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ClusterAutoScalingOption) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ClusterAutoScalingOption) GetEnableAutoscale() bool {
	if x != nil {
		return x.EnableAutoscale
	}
	return false
}

func (x *ClusterAutoScalingOption) GetBufferResourceRatio() uint32 {
	if x != nil {
		return x.BufferResourceRatio
	}
	return 0
}

func (x *ClusterAutoScalingOption) GetMaxGracefulTerminationSec() uint32 {
	if x != nil {
		return x.MaxGracefulTerminationSec
	}
	return 0
}

func (x *ClusterAutoScalingOption) GetScanInterval() uint32 {
	if x != nil {
		return x.ScanInterval
	}
	return 0
}

func (x *ClusterAutoScalingOption) GetMaxNodeProvisionTime() uint32 {
	if x != nil {
		return x.MaxNodeProvisionTime
	}
	return 0
}

func (x *ClusterAutoScalingOption) GetScaleUpFromZero() bool {
	if x != nil {
		return x.ScaleUpFromZero
	}
	return false
}

func (x *ClusterAutoScalingOption) GetScaleDownDelayAfterAdd() uint32 {
	if x != nil {
		return x.ScaleDownDelayAfterAdd
	}
	return 0
}

func (x *ClusterAutoScalingOption) GetScaleDownDelayAfterDelete() uint32 {
	if x != nil {
		return x.ScaleDownDelayAfterDelete
	}
	return 0
}

func (x *ClusterAutoScalingOption) GetScaleDownDelayAfterFailure() uint32 {
	if x != nil {
		return x.ScaleDownDelayAfterFailure
	}
	return 0
}

func (x *ClusterAutoScalingOption) GetScaleDownGpuUtilizationThreshold() uint32 {
	if x != nil {
		return x.ScaleDownGpuUtilizationThreshold
	}
	return 0
}

func (x *ClusterAutoScalingOption) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ClusterAutoScalingOption) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ClusterAutoScalingOption) GetBufferResourceCpuRatio() uint32 {
	if x != nil {
		return x.BufferResourceCpuRatio
	}
	return 0
}

func (x *ClusterAutoScalingOption) GetBufferResourceMemRatio() uint32 {
	if x != nil {
		return x.BufferResourceMemRatio
	}
	return 0
}

func (x *ClusterAutoScalingOption) GetModule() *ModuleInfo {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *ClusterAutoScalingOption) GetWebhook() *WebhookMode {
	if x != nil {
		return x.Webhook
	}
	return nil
}

func (x *ClusterAutoScalingOption) GetExpendablePodsPriorityCutoff() int32 {
	if x != nil {
		return x.ExpendablePodsPriorityCutoff
	}
	return 0
}

func (x *ClusterAutoScalingOption) GetNewPodScaleUpDelay() uint32 {
	if x != nil {
		return x.NewPodScaleUpDelay
	}
	return 0
}

func (x *ClusterAutoScalingOption) GetDevicePoolProvider() string {
	if x != nil {
		return x.DevicePoolProvider
	}
	return ""
}

// Taint for node taints
type WebhookMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode   string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	Server string `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	Token  string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *WebhookMode) Reset() {
	*x = WebhookMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookMode) ProtoMessage() {}

func (x *WebhookMode) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookMode.ProtoReflect.Descriptor instead.
func (*WebhookMode) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{79}
}

func (x *WebhookMode) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *WebhookMode) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *WebhookMode) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Taint for node taints
type Taint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Effect string `protobuf:"bytes,3,opt,name=effect,proto3" json:"effect,omitempty"`
}

func (x *Taint) Reset() {
	*x = Taint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Taint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Taint) ProtoMessage() {}

func (x *Taint) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Taint.ProtoReflect.Descriptor instead.
func (*Taint) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{80}
}

func (x *Taint) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Taint) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Taint) GetEffect() string {
	if x != nil {
		return x.Effect
	}
	return ""
}

// NodeTemplate for kubernetes cluster node common setting
type NodeTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeTemplateID              string            `protobuf:"bytes,1,opt,name=nodeTemplateID,proto3" json:"nodeTemplateID,omitempty"`
	Name                        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectID                   string            `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Labels                      map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Taints                      []*Taint          `protobuf:"bytes,5,rep,name=taints,proto3" json:"taints,omitempty"`
	DockerGraphPath             string            `protobuf:"bytes,6,opt,name=dockerGraphPath,proto3" json:"dockerGraphPath,omitempty"`
	MountTarget                 string            `protobuf:"bytes,7,opt,name=mountTarget,proto3" json:"mountTarget,omitempty"`
	UserScript                  string            `protobuf:"bytes,8,opt,name=userScript,proto3" json:"userScript,omitempty"`
	UnSchedulable               uint32            `protobuf:"varint,9,opt,name=unSchedulable,proto3" json:"unSchedulable,omitempty"`
	DataDisks                   []*CloudDataDisk  `protobuf:"bytes,10,rep,name=dataDisks,proto3" json:"dataDisks,omitempty"`
	ExtraArgs                   map[string]string `protobuf:"bytes,11,rep,name=extraArgs,proto3" json:"extraArgs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PreStartUserScript          string            `protobuf:"bytes,12,opt,name=preStartUserScript,proto3" json:"preStartUserScript,omitempty"`
	BcsScaleOutAddons           *Action           `protobuf:"bytes,13,opt,name=bcsScaleOutAddons,proto3" json:"bcsScaleOutAddons,omitempty"`
	BcsScaleInAddons            *Action           `protobuf:"bytes,14,opt,name=bcsScaleInAddons,proto3" json:"bcsScaleInAddons,omitempty"`
	ScaleOutExtraAddons         *Action           `protobuf:"bytes,15,opt,name=scaleOutExtraAddons,proto3" json:"scaleOutExtraAddons,omitempty"`
	ScaleInExtraAddons          *Action           `protobuf:"bytes,16,opt,name=scaleInExtraAddons,proto3" json:"scaleInExtraAddons,omitempty"`
	NodeOS                      string            `protobuf:"bytes,17,opt,name=nodeOS,proto3" json:"nodeOS,omitempty"`
	Creator                     string            `protobuf:"bytes,19,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater                     string            `protobuf:"bytes,20,opt,name=updater,proto3" json:"updater,omitempty"`
	CreateTime                  string            `protobuf:"bytes,21,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime                  string            `protobuf:"bytes,22,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Desc                        string            `protobuf:"bytes,23,opt,name=desc,proto3" json:"desc,omitempty"`
	Runtime                     *RunTimeInfo      `protobuf:"bytes,24,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Module                      *ModuleInfo       `protobuf:"bytes,25,opt,name=module,proto3" json:"module,omitempty"`
	ScaleInPreScript            string            `protobuf:"bytes,26,opt,name=scaleInPreScript,proto3" json:"scaleInPreScript,omitempty"`
	ScaleInPostScript           string            `protobuf:"bytes,27,opt,name=scaleInPostScript,proto3" json:"scaleInPostScript,omitempty"`
	Annotations                 map[string]string `protobuf:"bytes,28,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MaxPodsPerNode              uint32            `protobuf:"varint,29,opt,name=maxPodsPerNode,proto3" json:"maxPodsPerNode,omitempty"`
	SkipSystemInit              bool              `protobuf:"varint,30,opt,name=skipSystemInit,proto3" json:"skipSystemInit,omitempty"`
	AllowSkipScaleOutWhenFailed bool              `protobuf:"varint,31,opt,name=allowSkipScaleOutWhenFailed,proto3" json:"allowSkipScaleOutWhenFailed,omitempty"`
	AllowSkipScaleInWhenFailed  bool              `protobuf:"varint,32,opt,name=allowSkipScaleInWhenFailed,proto3" json:"allowSkipScaleInWhenFailed,omitempty"`
	Image                       *ImageInfo        `protobuf:"bytes,33,opt,name=image,proto3" json:"image,omitempty"`
	GpuArgs                     *GPUArgs          `protobuf:"bytes,34,opt,name=gpuArgs,proto3" json:"gpuArgs,omitempty"`
	ExtraInfo                   map[string]string `protobuf:"bytes,35,rep,name=extraInfo,proto3" json:"extraInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NodeTemplate) Reset() {
	*x = NodeTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeTemplate) ProtoMessage() {}

func (x *NodeTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeTemplate.ProtoReflect.Descriptor instead.
func (*NodeTemplate) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{81}
}

func (x *NodeTemplate) GetNodeTemplateID() string {
	if x != nil {
		return x.NodeTemplateID
	}
	return ""
}

func (x *NodeTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeTemplate) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *NodeTemplate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NodeTemplate) GetTaints() []*Taint {
	if x != nil {
		return x.Taints
	}
	return nil
}

func (x *NodeTemplate) GetDockerGraphPath() string {
	if x != nil {
		return x.DockerGraphPath
	}
	return ""
}

func (x *NodeTemplate) GetMountTarget() string {
	if x != nil {
		return x.MountTarget
	}
	return ""
}

func (x *NodeTemplate) GetUserScript() string {
	if x != nil {
		return x.UserScript
	}
	return ""
}

func (x *NodeTemplate) GetUnSchedulable() uint32 {
	if x != nil {
		return x.UnSchedulable
	}
	return 0
}

func (x *NodeTemplate) GetDataDisks() []*CloudDataDisk {
	if x != nil {
		return x.DataDisks
	}
	return nil
}

func (x *NodeTemplate) GetExtraArgs() map[string]string {
	if x != nil {
		return x.ExtraArgs
	}
	return nil
}

func (x *NodeTemplate) GetPreStartUserScript() string {
	if x != nil {
		return x.PreStartUserScript
	}
	return ""
}

func (x *NodeTemplate) GetBcsScaleOutAddons() *Action {
	if x != nil {
		return x.BcsScaleOutAddons
	}
	return nil
}

func (x *NodeTemplate) GetBcsScaleInAddons() *Action {
	if x != nil {
		return x.BcsScaleInAddons
	}
	return nil
}

func (x *NodeTemplate) GetScaleOutExtraAddons() *Action {
	if x != nil {
		return x.ScaleOutExtraAddons
	}
	return nil
}

func (x *NodeTemplate) GetScaleInExtraAddons() *Action {
	if x != nil {
		return x.ScaleInExtraAddons
	}
	return nil
}

func (x *NodeTemplate) GetNodeOS() string {
	if x != nil {
		return x.NodeOS
	}
	return ""
}

func (x *NodeTemplate) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *NodeTemplate) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *NodeTemplate) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *NodeTemplate) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *NodeTemplate) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *NodeTemplate) GetRuntime() *RunTimeInfo {
	if x != nil {
		return x.Runtime
	}
	return nil
}

func (x *NodeTemplate) GetModule() *ModuleInfo {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *NodeTemplate) GetScaleInPreScript() string {
	if x != nil {
		return x.ScaleInPreScript
	}
	return ""
}

func (x *NodeTemplate) GetScaleInPostScript() string {
	if x != nil {
		return x.ScaleInPostScript
	}
	return ""
}

func (x *NodeTemplate) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *NodeTemplate) GetMaxPodsPerNode() uint32 {
	if x != nil {
		return x.MaxPodsPerNode
	}
	return 0
}

func (x *NodeTemplate) GetSkipSystemInit() bool {
	if x != nil {
		return x.SkipSystemInit
	}
	return false
}

func (x *NodeTemplate) GetAllowSkipScaleOutWhenFailed() bool {
	if x != nil {
		return x.AllowSkipScaleOutWhenFailed
	}
	return false
}

func (x *NodeTemplate) GetAllowSkipScaleInWhenFailed() bool {
	if x != nil {
		return x.AllowSkipScaleInWhenFailed
	}
	return false
}

func (x *NodeTemplate) GetImage() *ImageInfo {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *NodeTemplate) GetGpuArgs() *GPUArgs {
	if x != nil {
		return x.GpuArgs
	}
	return nil
}

func (x *NodeTemplate) GetExtraInfo() map[string]string {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

type ClusterModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterModuleID   string `protobuf:"bytes,1,opt,name=masterModuleID,proto3" json:"masterModuleID,omitempty"`
	MasterModuleName string `protobuf:"bytes,2,opt,name=masterModuleName,proto3" json:"masterModuleName,omitempty"`
	WorkerModuleID   string `protobuf:"bytes,3,opt,name=workerModuleID,proto3" json:"workerModuleID,omitempty"`
	WorkerModuleName string `protobuf:"bytes,4,opt,name=workerModuleName,proto3" json:"workerModuleName,omitempty"`
}

func (x *ClusterModule) Reset() {
	*x = ClusterModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterModule) ProtoMessage() {}

func (x *ClusterModule) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterModule.ProtoReflect.Descriptor instead.
func (*ClusterModule) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{82}
}

func (x *ClusterModule) GetMasterModuleID() string {
	if x != nil {
		return x.MasterModuleID
	}
	return ""
}

func (x *ClusterModule) GetMasterModuleName() string {
	if x != nil {
		return x.MasterModuleName
	}
	return ""
}

func (x *ClusterModule) GetWorkerModuleID() string {
	if x != nil {
		return x.WorkerModuleID
	}
	return ""
}

func (x *ClusterModule) GetWorkerModuleName() string {
	if x != nil {
		return x.WorkerModuleName
	}
	return ""
}

// ModuleInfo 业务模块信息,主要涉及到节点模块转移
type ModuleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScaleOutModuleID   string `protobuf:"bytes,1,opt,name=scaleOutModuleID,proto3" json:"scaleOutModuleID,omitempty"`
	ScaleInModuleID    string `protobuf:"bytes,2,opt,name=scaleInModuleID,proto3" json:"scaleInModuleID,omitempty"`
	ScaleOutBizID      string `protobuf:"bytes,3,opt,name=scaleOutBizID,proto3" json:"scaleOutBizID,omitempty"`
	ScaleInBizID       string `protobuf:"bytes,4,opt,name=scaleInBizID,proto3" json:"scaleInBizID,omitempty"`
	ScaleOutModuleName string `protobuf:"bytes,5,opt,name=scaleOutModuleName,proto3" json:"scaleOutModuleName,omitempty"`
	ScaleInModuleName  string `protobuf:"bytes,6,opt,name=scaleInModuleName,proto3" json:"scaleInModuleName,omitempty"`
}

func (x *ModuleInfo) Reset() {
	*x = ModuleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleInfo) ProtoMessage() {}

func (x *ModuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleInfo.ProtoReflect.Descriptor instead.
func (*ModuleInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{83}
}

func (x *ModuleInfo) GetScaleOutModuleID() string {
	if x != nil {
		return x.ScaleOutModuleID
	}
	return ""
}

func (x *ModuleInfo) GetScaleInModuleID() string {
	if x != nil {
		return x.ScaleInModuleID
	}
	return ""
}

func (x *ModuleInfo) GetScaleOutBizID() string {
	if x != nil {
		return x.ScaleOutBizID
	}
	return ""
}

func (x *ModuleInfo) GetScaleInBizID() string {
	if x != nil {
		return x.ScaleInBizID
	}
	return ""
}

func (x *ModuleInfo) GetScaleOutModuleName() string {
	if x != nil {
		return x.ScaleOutModuleName
	}
	return ""
}

func (x *ModuleInfo) GetScaleInModuleName() string {
	if x != nil {
		return x.ScaleInModuleName
	}
	return ""
}

// RunTimeInfo cluster runTime info
type RunTimeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerRuntime string `protobuf:"bytes,1,opt,name=containerRuntime,proto3" json:"containerRuntime,omitempty"`
	RuntimeVersion   string `protobuf:"bytes,2,opt,name=runtimeVersion,proto3" json:"runtimeVersion,omitempty"`
}

func (x *RunTimeInfo) Reset() {
	*x = RunTimeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunTimeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTimeInfo) ProtoMessage() {}

func (x *RunTimeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTimeInfo.ProtoReflect.Descriptor instead.
func (*RunTimeInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{84}
}

func (x *RunTimeInfo) GetContainerRuntime() string {
	if x != nil {
		return x.ContainerRuntime
	}
	return ""
}

func (x *RunTimeInfo) GetRuntimeVersion() string {
	if x != nil {
		return x.RuntimeVersion
	}
	return ""
}

type CreateNodeTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID           string                `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Name                string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc                string                `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Labels              map[string]string     `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Taints              []*Taint              `protobuf:"bytes,5,rep,name=taints,proto3" json:"taints,omitempty"`
	DockerGraphPath     string                `protobuf:"bytes,6,opt,name=dockerGraphPath,proto3" json:"dockerGraphPath,omitempty"`
	MountTarget         string                `protobuf:"bytes,7,opt,name=mountTarget,proto3" json:"mountTarget,omitempty"`
	UserScript          string                `protobuf:"bytes,8,opt,name=userScript,proto3" json:"userScript,omitempty"`
	UnSchedulable       uint32                `protobuf:"varint,9,opt,name=unSchedulable,proto3" json:"unSchedulable,omitempty"`
	DataDisks           []*CloudDataDisk      `protobuf:"bytes,10,rep,name=dataDisks,proto3" json:"dataDisks,omitempty"`
	ExtraArgs           map[string]string     `protobuf:"bytes,11,rep,name=extraArgs,proto3" json:"extraArgs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PreStartUserScript  string                `protobuf:"bytes,12,opt,name=preStartUserScript,proto3" json:"preStartUserScript,omitempty"`
	ScaleOutExtraAddons *Action               `protobuf:"bytes,13,opt,name=scaleOutExtraAddons,proto3" json:"scaleOutExtraAddons,omitempty"`
	ScaleInExtraAddons  *Action               `protobuf:"bytes,14,opt,name=scaleInExtraAddons,proto3" json:"scaleInExtraAddons,omitempty"`
	NodeOS              string                `protobuf:"bytes,15,opt,name=nodeOS,proto3" json:"nodeOS,omitempty"`
	Creator             string                `protobuf:"bytes,17,opt,name=creator,proto3" json:"creator,omitempty"`
	Runtime             *RunTimeInfo          `protobuf:"bytes,18,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Module              *ModuleInfo           `protobuf:"bytes,19,opt,name=module,proto3" json:"module,omitempty"`
	ScaleInPreScript    *wrappers.StringValue `protobuf:"bytes,20,opt,name=ScaleInPreScript,proto3" json:"ScaleInPreScript,omitempty"`
	ScaleInPostScript   *wrappers.StringValue `protobuf:"bytes,21,opt,name=ScaleInPostScript,proto3" json:"ScaleInPostScript,omitempty"`
	Annotations         *MapStruct            `protobuf:"bytes,22,opt,name=annotations,proto3" json:"annotations,omitempty"`
	ImageInfo           *ImageInfo            `protobuf:"bytes,23,opt,name=imageInfo,proto3" json:"imageInfo,omitempty"`
	GpuArgs             *GPUArgs              `protobuf:"bytes,24,opt,name=gpuArgs,proto3" json:"gpuArgs,omitempty"`
	ExtraInfo           *MapStruct            `protobuf:"bytes,25,opt,name=extraInfo,proto3" json:"extraInfo,omitempty"`
}

func (x *CreateNodeTemplateRequest) Reset() {
	*x = CreateNodeTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeTemplateRequest) ProtoMessage() {}

func (x *CreateNodeTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeTemplateRequest.ProtoReflect.Descriptor instead.
func (*CreateNodeTemplateRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{85}
}

func (x *CreateNodeTemplateRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CreateNodeTemplateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNodeTemplateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CreateNodeTemplateRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateNodeTemplateRequest) GetTaints() []*Taint {
	if x != nil {
		return x.Taints
	}
	return nil
}

func (x *CreateNodeTemplateRequest) GetDockerGraphPath() string {
	if x != nil {
		return x.DockerGraphPath
	}
	return ""
}

func (x *CreateNodeTemplateRequest) GetMountTarget() string {
	if x != nil {
		return x.MountTarget
	}
	return ""
}

func (x *CreateNodeTemplateRequest) GetUserScript() string {
	if x != nil {
		return x.UserScript
	}
	return ""
}

func (x *CreateNodeTemplateRequest) GetUnSchedulable() uint32 {
	if x != nil {
		return x.UnSchedulable
	}
	return 0
}

func (x *CreateNodeTemplateRequest) GetDataDisks() []*CloudDataDisk {
	if x != nil {
		return x.DataDisks
	}
	return nil
}

func (x *CreateNodeTemplateRequest) GetExtraArgs() map[string]string {
	if x != nil {
		return x.ExtraArgs
	}
	return nil
}

func (x *CreateNodeTemplateRequest) GetPreStartUserScript() string {
	if x != nil {
		return x.PreStartUserScript
	}
	return ""
}

func (x *CreateNodeTemplateRequest) GetScaleOutExtraAddons() *Action {
	if x != nil {
		return x.ScaleOutExtraAddons
	}
	return nil
}

func (x *CreateNodeTemplateRequest) GetScaleInExtraAddons() *Action {
	if x != nil {
		return x.ScaleInExtraAddons
	}
	return nil
}

func (x *CreateNodeTemplateRequest) GetNodeOS() string {
	if x != nil {
		return x.NodeOS
	}
	return ""
}

func (x *CreateNodeTemplateRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreateNodeTemplateRequest) GetRuntime() *RunTimeInfo {
	if x != nil {
		return x.Runtime
	}
	return nil
}

func (x *CreateNodeTemplateRequest) GetModule() *ModuleInfo {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *CreateNodeTemplateRequest) GetScaleInPreScript() *wrappers.StringValue {
	if x != nil {
		return x.ScaleInPreScript
	}
	return nil
}

func (x *CreateNodeTemplateRequest) GetScaleInPostScript() *wrappers.StringValue {
	if x != nil {
		return x.ScaleInPostScript
	}
	return nil
}

func (x *CreateNodeTemplateRequest) GetAnnotations() *MapStruct {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CreateNodeTemplateRequest) GetImageInfo() *ImageInfo {
	if x != nil {
		return x.ImageInfo
	}
	return nil
}

func (x *CreateNodeTemplateRequest) GetGpuArgs() *GPUArgs {
	if x != nil {
		return x.GpuArgs
	}
	return nil
}

func (x *CreateNodeTemplateRequest) GetExtraInfo() *MapStruct {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

type CreateNodeTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *CreateNodeTemplateResponse) Reset() {
	*x = CreateNodeTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeTemplateResponse) ProtoMessage() {}

func (x *CreateNodeTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeTemplateResponse.ProtoReflect.Descriptor instead.
func (*CreateNodeTemplateResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{86}
}

func (x *CreateNodeTemplateResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateNodeTemplateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateNodeTemplateResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CreateNodeTemplateResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type UpdateNodeTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID           string                `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	NodeTemplateID      string                `protobuf:"bytes,2,opt,name=nodeTemplateID,proto3" json:"nodeTemplateID,omitempty"`
	Name                string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Desc                string                `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Labels              map[string]string     `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Taints              []*Taint              `protobuf:"bytes,6,rep,name=taints,proto3" json:"taints,omitempty"`
	DockerGraphPath     string                `protobuf:"bytes,7,opt,name=dockerGraphPath,proto3" json:"dockerGraphPath,omitempty"`
	MountTarget         string                `protobuf:"bytes,8,opt,name=mountTarget,proto3" json:"mountTarget,omitempty"`
	UserScript          string                `protobuf:"bytes,9,opt,name=userScript,proto3" json:"userScript,omitempty"`
	UnSchedulable       *wrappers.UInt32Value `protobuf:"bytes,10,opt,name=unSchedulable,proto3" json:"unSchedulable,omitempty"`
	DataDisks           []*CloudDataDisk      `protobuf:"bytes,11,rep,name=dataDisks,proto3" json:"dataDisks,omitempty"`
	ExtraArgs           map[string]string     `protobuf:"bytes,12,rep,name=extraArgs,proto3" json:"extraArgs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PreStartUserScript  string                `protobuf:"bytes,13,opt,name=preStartUserScript,proto3" json:"preStartUserScript,omitempty"`
	ScaleOutExtraAddons *Action               `protobuf:"bytes,14,opt,name=scaleOutExtraAddons,proto3" json:"scaleOutExtraAddons,omitempty"`
	ScaleInExtraAddons  *Action               `protobuf:"bytes,15,opt,name=scaleInExtraAddons,proto3" json:"scaleInExtraAddons,omitempty"`
	NodeOS              string                `protobuf:"bytes,16,opt,name=nodeOS,proto3" json:"nodeOS,omitempty"`
	Updater             string                `protobuf:"bytes,18,opt,name=updater,proto3" json:"updater,omitempty"`
	Runtime             *RunTimeInfo          `protobuf:"bytes,19,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Module              *ModuleInfo           `protobuf:"bytes,20,opt,name=module,proto3" json:"module,omitempty"`
	ScaleInPreScript    *wrappers.StringValue `protobuf:"bytes,21,opt,name=ScaleInPreScript,proto3" json:"ScaleInPreScript,omitempty"`
	ScaleInPostScript   *wrappers.StringValue `protobuf:"bytes,22,opt,name=ScaleInPostScript,proto3" json:"ScaleInPostScript,omitempty"`
	Annotations         *MapStruct            `protobuf:"bytes,23,opt,name=annotations,proto3" json:"annotations,omitempty"`
	ImageInfo           *ImageInfo            `protobuf:"bytes,24,opt,name=imageInfo,proto3" json:"imageInfo,omitempty"`
	GpuArgs             *GPUArgs              `protobuf:"bytes,25,opt,name=gpuArgs,proto3" json:"gpuArgs,omitempty"`
	ExtraInfo           *MapStruct            `protobuf:"bytes,26,opt,name=extraInfo,proto3" json:"extraInfo,omitempty"`
}

func (x *UpdateNodeTemplateRequest) Reset() {
	*x = UpdateNodeTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeTemplateRequest) ProtoMessage() {}

func (x *UpdateNodeTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeTemplateRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeTemplateRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{87}
}

func (x *UpdateNodeTemplateRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *UpdateNodeTemplateRequest) GetNodeTemplateID() string {
	if x != nil {
		return x.NodeTemplateID
	}
	return ""
}

func (x *UpdateNodeTemplateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNodeTemplateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *UpdateNodeTemplateRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateNodeTemplateRequest) GetTaints() []*Taint {
	if x != nil {
		return x.Taints
	}
	return nil
}

func (x *UpdateNodeTemplateRequest) GetDockerGraphPath() string {
	if x != nil {
		return x.DockerGraphPath
	}
	return ""
}

func (x *UpdateNodeTemplateRequest) GetMountTarget() string {
	if x != nil {
		return x.MountTarget
	}
	return ""
}

func (x *UpdateNodeTemplateRequest) GetUserScript() string {
	if x != nil {
		return x.UserScript
	}
	return ""
}

func (x *UpdateNodeTemplateRequest) GetUnSchedulable() *wrappers.UInt32Value {
	if x != nil {
		return x.UnSchedulable
	}
	return nil
}

func (x *UpdateNodeTemplateRequest) GetDataDisks() []*CloudDataDisk {
	if x != nil {
		return x.DataDisks
	}
	return nil
}

func (x *UpdateNodeTemplateRequest) GetExtraArgs() map[string]string {
	if x != nil {
		return x.ExtraArgs
	}
	return nil
}

func (x *UpdateNodeTemplateRequest) GetPreStartUserScript() string {
	if x != nil {
		return x.PreStartUserScript
	}
	return ""
}

func (x *UpdateNodeTemplateRequest) GetScaleOutExtraAddons() *Action {
	if x != nil {
		return x.ScaleOutExtraAddons
	}
	return nil
}

func (x *UpdateNodeTemplateRequest) GetScaleInExtraAddons() *Action {
	if x != nil {
		return x.ScaleInExtraAddons
	}
	return nil
}

func (x *UpdateNodeTemplateRequest) GetNodeOS() string {
	if x != nil {
		return x.NodeOS
	}
	return ""
}

func (x *UpdateNodeTemplateRequest) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *UpdateNodeTemplateRequest) GetRuntime() *RunTimeInfo {
	if x != nil {
		return x.Runtime
	}
	return nil
}

func (x *UpdateNodeTemplateRequest) GetModule() *ModuleInfo {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *UpdateNodeTemplateRequest) GetScaleInPreScript() *wrappers.StringValue {
	if x != nil {
		return x.ScaleInPreScript
	}
	return nil
}

func (x *UpdateNodeTemplateRequest) GetScaleInPostScript() *wrappers.StringValue {
	if x != nil {
		return x.ScaleInPostScript
	}
	return nil
}

func (x *UpdateNodeTemplateRequest) GetAnnotations() *MapStruct {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *UpdateNodeTemplateRequest) GetImageInfo() *ImageInfo {
	if x != nil {
		return x.ImageInfo
	}
	return nil
}

func (x *UpdateNodeTemplateRequest) GetGpuArgs() *GPUArgs {
	if x != nil {
		return x.GpuArgs
	}
	return nil
}

func (x *UpdateNodeTemplateRequest) GetExtraInfo() *MapStruct {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

type UpdateNodeTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *UpdateNodeTemplateResponse) Reset() {
	*x = UpdateNodeTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeTemplateResponse) ProtoMessage() {}

func (x *UpdateNodeTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeTemplateResponse.ProtoReflect.Descriptor instead.
func (*UpdateNodeTemplateResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{88}
}

func (x *UpdateNodeTemplateResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateNodeTemplateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateNodeTemplateResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateNodeTemplateResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type DeleteNodeTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID      string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	NodeTemplateID string `protobuf:"bytes,2,opt,name=nodeTemplateID,proto3" json:"nodeTemplateID,omitempty"`
}

func (x *DeleteNodeTemplateRequest) Reset() {
	*x = DeleteNodeTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeTemplateRequest) ProtoMessage() {}

func (x *DeleteNodeTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeTemplateRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeTemplateRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{89}
}

func (x *DeleteNodeTemplateRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *DeleteNodeTemplateRequest) GetNodeTemplateID() string {
	if x != nil {
		return x.NodeTemplateID
	}
	return ""
}

type DeleteNodeTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *DeleteNodeTemplateResponse) Reset() {
	*x = DeleteNodeTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeTemplateResponse) ProtoMessage() {}

func (x *DeleteNodeTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeTemplateResponse.ProtoReflect.Descriptor instead.
func (*DeleteNodeTemplateResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{90}
}

func (x *DeleteNodeTemplateResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteNodeTemplateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteNodeTemplateResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteNodeTemplateResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type GetNodeTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID      string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	NodeTemplateID string `protobuf:"bytes,2,opt,name=nodeTemplateID,proto3" json:"nodeTemplateID,omitempty"`
}

func (x *GetNodeTemplateRequest) Reset() {
	*x = GetNodeTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeTemplateRequest) ProtoMessage() {}

func (x *GetNodeTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeTemplateRequest.ProtoReflect.Descriptor instead.
func (*GetNodeTemplateRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{91}
}

func (x *GetNodeTemplateRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetNodeTemplateRequest) GetNodeTemplateID() string {
	if x != nil {
		return x.NodeTemplateID
	}
	return ""
}

type GetNodeTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *NodeTemplate     `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetNodeTemplateResponse) Reset() {
	*x = GetNodeTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeTemplateResponse) ProtoMessage() {}

func (x *GetNodeTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeTemplateResponse.ProtoReflect.Descriptor instead.
func (*GetNodeTemplateResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{92}
}

func (x *GetNodeTemplateResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetNodeTemplateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetNodeTemplateResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetNodeTemplateResponse) GetData() *NodeTemplate {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetNodeTemplateResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListNodeTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID      string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	NodeTemplateID string `protobuf:"bytes,2,opt,name=nodeTemplateID,proto3" json:"nodeTemplateID,omitempty"`
}

func (x *ListNodeTemplateRequest) Reset() {
	*x = ListNodeTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeTemplateRequest) ProtoMessage() {}

func (x *ListNodeTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeTemplateRequest.ProtoReflect.Descriptor instead.
func (*ListNodeTemplateRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{93}
}

func (x *ListNodeTemplateRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListNodeTemplateRequest) GetNodeTemplateID() string {
	if x != nil {
		return x.NodeTemplateID
	}
	return ""
}

type ListNodeTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*NodeTemplate `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListNodeTemplateResponse) Reset() {
	*x = ListNodeTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeTemplateResponse) ProtoMessage() {}

func (x *ListNodeTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeTemplateResponse.ProtoReflect.Descriptor instead.
func (*ListNodeTemplateResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{94}
}

func (x *ListNodeTemplateResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListNodeTemplateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListNodeTemplateResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListNodeTemplateResponse) GetData() []*NodeTemplate {
	if x != nil {
		return x.Data
	}
	return nil
}

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID   string                 `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EnglishName string                 `protobuf:"bytes,3,opt,name=englishName,proto3" json:"englishName,omitempty"`
	Creator     string                 `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater     string                 `protobuf:"bytes,5,opt,name=updater,proto3" json:"updater,omitempty"`
	ProjectType uint32                 `protobuf:"varint,6,opt,name=projectType,proto3" json:"projectType,omitempty"`
	UseBKRes    bool                   `protobuf:"varint,7,opt,name=useBKRes,proto3" json:"useBKRes,omitempty"`
	Description string                 `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	IsOffline   bool                   `protobuf:"varint,9,opt,name=isOffline,proto3" json:"isOffline,omitempty"`
	Kind        string                 `protobuf:"bytes,10,opt,name=kind,proto3" json:"kind,omitempty"`
	BusinessID  string                 `protobuf:"bytes,11,opt,name=businessID,proto3" json:"businessID,omitempty"`
	DeployType  uint32                 `protobuf:"varint,12,opt,name=deployType,proto3" json:"deployType,omitempty"`
	BgID        string                 `protobuf:"bytes,13,opt,name=bgID,proto3" json:"bgID,omitempty"`
	BgName      string                 `protobuf:"bytes,14,opt,name=bgName,proto3" json:"bgName,omitempty"`
	DeptID      string                 `protobuf:"bytes,15,opt,name=deptID,proto3" json:"deptID,omitempty"`
	DeptName    string                 `protobuf:"bytes,16,opt,name=deptName,proto3" json:"deptName,omitempty"`
	CenterID    string                 `protobuf:"bytes,17,opt,name=centerID,proto3" json:"centerID,omitempty"`
	CenterName  string                 `protobuf:"bytes,18,opt,name=centerName,proto3" json:"centerName,omitempty"`
	IsSecret    bool                   `protobuf:"varint,19,opt,name=isSecret,proto3" json:"isSecret,omitempty"`
	Credentials map[string]*Credential `protobuf:"bytes,20,rep,name=credentials,proto3" json:"credentials,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreatTime   string                 `protobuf:"bytes,21,opt,name=creatTime,proto3" json:"creatTime,omitempty"`
	UpdateTime  string                 `protobuf:"bytes,22,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{95}
}

func (x *Project) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetEnglishName() string {
	if x != nil {
		return x.EnglishName
	}
	return ""
}

func (x *Project) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Project) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *Project) GetProjectType() uint32 {
	if x != nil {
		return x.ProjectType
	}
	return 0
}

func (x *Project) GetUseBKRes() bool {
	if x != nil {
		return x.UseBKRes
	}
	return false
}

func (x *Project) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Project) GetIsOffline() bool {
	if x != nil {
		return x.IsOffline
	}
	return false
}

func (x *Project) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Project) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *Project) GetDeployType() uint32 {
	if x != nil {
		return x.DeployType
	}
	return 0
}

func (x *Project) GetBgID() string {
	if x != nil {
		return x.BgID
	}
	return ""
}

func (x *Project) GetBgName() string {
	if x != nil {
		return x.BgName
	}
	return ""
}

func (x *Project) GetDeptID() string {
	if x != nil {
		return x.DeptID
	}
	return ""
}

func (x *Project) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *Project) GetCenterID() string {
	if x != nil {
		return x.CenterID
	}
	return ""
}

func (x *Project) GetCenterName() string {
	if x != nil {
		return x.CenterName
	}
	return ""
}

func (x *Project) GetIsSecret() bool {
	if x != nil {
		return x.IsSecret
	}
	return false
}

func (x *Project) GetCredentials() map[string]*Credential {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *Project) GetCreatTime() string {
	if x != nil {
		return x.CreatTime
	}
	return ""
}

func (x *Project) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID         string            `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	TaskType       string            `protobuf:"bytes,2,opt,name=taskType,proto3" json:"taskType,omitempty"`
	Status         string            `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Message        string            `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Start          string            `protobuf:"bytes,5,opt,name=start,proto3" json:"start,omitempty"`
	End            string            `protobuf:"bytes,6,opt,name=end,proto3" json:"end,omitempty"`
	ExecutionTime  uint32            `protobuf:"varint,7,opt,name=executionTime,proto3" json:"executionTime,omitempty"`
	CurrentStep    string            `protobuf:"bytes,8,opt,name=currentStep,proto3" json:"currentStep,omitempty"`
	StepSequence   []string          `protobuf:"bytes,9,rep,name=stepSequence,proto3" json:"stepSequence,omitempty"`
	Steps          map[string]*Step  `protobuf:"bytes,10,rep,name=steps,proto3" json:"steps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClusterID      string            `protobuf:"bytes,11,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ProjectID      string            `protobuf:"bytes,12,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Creator        string            `protobuf:"bytes,13,opt,name=creator,proto3" json:"creator,omitempty"`
	LastUpdate     string            `protobuf:"bytes,14,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Updater        string            `protobuf:"bytes,15,opt,name=updater,proto3" json:"updater,omitempty"`
	ForceTerminate bool              `protobuf:"varint,16,opt,name=forceTerminate,proto3" json:"forceTerminate,omitempty"`
	CommonParams   map[string]string `protobuf:"bytes,17,rep,name=commonParams,proto3" json:"commonParams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TaskName       string            `protobuf:"bytes,18,opt,name=taskName,proto3" json:"taskName,omitempty"`
	NodeIPList     []string          `protobuf:"bytes,19,rep,name=nodeIPList,proto3" json:"nodeIPList,omitempty"`
	NodeGroupID    string            `protobuf:"bytes,20,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{96}
}

func (x *Task) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *Task) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *Task) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Task) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Task) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *Task) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *Task) GetExecutionTime() uint32 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *Task) GetCurrentStep() string {
	if x != nil {
		return x.CurrentStep
	}
	return ""
}

func (x *Task) GetStepSequence() []string {
	if x != nil {
		return x.StepSequence
	}
	return nil
}

func (x *Task) GetSteps() map[string]*Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Task) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *Task) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *Task) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Task) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

func (x *Task) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *Task) GetForceTerminate() bool {
	if x != nil {
		return x.ForceTerminate
	}
	return false
}

func (x *Task) GetCommonParams() map[string]string {
	if x != nil {
		return x.CommonParams
	}
	return nil
}

func (x *Task) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *Task) GetNodeIPList() []string {
	if x != nil {
		return x.NodeIPList
	}
	return nil
}

func (x *Task) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

type Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	System        string            `protobuf:"bytes,2,opt,name=system,proto3" json:"system,omitempty"`
	Link          string            `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	Params        map[string]string `protobuf:"bytes,4,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Retry         uint32            `protobuf:"varint,5,opt,name=retry,proto3" json:"retry,omitempty"`
	Start         string            `protobuf:"bytes,6,opt,name=start,proto3" json:"start,omitempty"`
	End           string            `protobuf:"bytes,7,opt,name=end,proto3" json:"end,omitempty"`
	ExecutionTime uint32            `protobuf:"varint,8,opt,name=executionTime,proto3" json:"executionTime,omitempty"`
	Status        string            `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	Message       string            `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`
	LastUpdate    string            `protobuf:"bytes,11,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	TaskMethod    string            `protobuf:"bytes,12,opt,name=taskMethod,proto3" json:"taskMethod,omitempty"`
	TaskName      string            `protobuf:"bytes,13,opt,name=taskName,proto3" json:"taskName,omitempty"`
	SkipOnFailed  bool              `protobuf:"varint,14,opt,name=skipOnFailed,proto3" json:"skipOnFailed,omitempty"`
	Translate     string            `protobuf:"bytes,15,opt,name=translate,proto3" json:"translate,omitempty"`
	AllowSkip     bool              `protobuf:"varint,16,opt,name=allowSkip,proto3" json:"allowSkip,omitempty"`
	MaxRetry      uint32            `protobuf:"varint,17,opt,name=maxRetry,proto3" json:"maxRetry,omitempty"`
}

func (x *Step) Reset() {
	*x = Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step) ProtoMessage() {}

func (x *Step) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step.ProtoReflect.Descriptor instead.
func (*Step) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{97}
}

func (x *Step) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Step) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *Step) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Step) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Step) GetRetry() uint32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *Step) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *Step) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *Step) GetExecutionTime() uint32 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *Step) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Step) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Step) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

func (x *Step) GetTaskMethod() string {
	if x != nil {
		return x.TaskMethod
	}
	return ""
}

func (x *Step) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *Step) GetSkipOnFailed() bool {
	if x != nil {
		return x.SkipOnFailed
	}
	return false
}

func (x *Step) GetTranslate() string {
	if x != nil {
		return x.Translate
	}
	return ""
}

func (x *Step) GetAllowSkip() bool {
	if x != nil {
		return x.AllowSkip
	}
	return false
}

func (x *Step) GetMaxRetry() uint32 {
	if x != nil {
		return x.MaxRetry
	}
	return 0
}

type TkeCidr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VPC        string `protobuf:"bytes,1,opt,name=VPC,proto3" json:"VPC,omitempty"`
	CIDR       string `protobuf:"bytes,2,opt,name=CIDR,proto3" json:"CIDR,omitempty"`
	IPNumber   uint32 `protobuf:"varint,3,opt,name=IPNumber,proto3" json:"IPNumber,omitempty"`
	Status     string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Cluster    string `protobuf:"bytes,5,opt,name=cluster,proto3" json:"cluster,omitempty"`
	CreateTime string `protobuf:"bytes,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime string `protobuf:"bytes,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *TkeCidr) Reset() {
	*x = TkeCidr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TkeCidr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TkeCidr) ProtoMessage() {}

func (x *TkeCidr) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TkeCidr.ProtoReflect.Descriptor instead.
func (*TkeCidr) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{98}
}

func (x *TkeCidr) GetVPC() string {
	if x != nil {
		return x.VPC
	}
	return ""
}

func (x *TkeCidr) GetCIDR() string {
	if x != nil {
		return x.CIDR
	}
	return ""
}

func (x *TkeCidr) GetIPNumber() uint32 {
	if x != nil {
		return x.IPNumber
	}
	return 0
}

func (x *TkeCidr) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TkeCidr) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *TkeCidr) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *TkeCidr) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type TkeCidrCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	VPC      string `protobuf:"bytes,2,opt,name=VPC,proto3" json:"VPC,omitempty"`
	IPNumber uint32 `protobuf:"varint,3,opt,name=IPNumber,proto3" json:"IPNumber,omitempty"`
	Status   string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TkeCidrCount) Reset() {
	*x = TkeCidrCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TkeCidrCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TkeCidrCount) ProtoMessage() {}

func (x *TkeCidrCount) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TkeCidrCount.ProtoReflect.Descriptor instead.
func (*TkeCidrCount) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{99}
}

func (x *TkeCidrCount) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TkeCidrCount) GetVPC() string {
	if x != nil {
		return x.VPC
	}
	return ""
}

func (x *TkeCidrCount) GetIPNumber() uint32 {
	if x != nil {
		return x.IPNumber
	}
	return 0
}

func (x *TkeCidrCount) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type CreateClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID           string            `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ClusterName         string            `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Provider            string            `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Region              string            `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	VpcID               string            `protobuf:"bytes,5,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	ProjectID           string            `protobuf:"bytes,6,opt,name=projectID,proto3" json:"projectID,omitempty"`
	BusinessID          string            `protobuf:"bytes,7,opt,name=businessID,proto3" json:"businessID,omitempty"`
	Environment         string            `protobuf:"bytes,8,opt,name=environment,proto3" json:"environment,omitempty"`
	EngineType          string            `protobuf:"bytes,9,opt,name=engineType,proto3" json:"engineType,omitempty"`
	IsExclusive         bool              `protobuf:"varint,10,opt,name=isExclusive,proto3" json:"isExclusive,omitempty"`
	ClusterType         string            `protobuf:"bytes,11,opt,name=clusterType,proto3" json:"clusterType,omitempty"`
	FederationClusterID string            `protobuf:"bytes,12,opt,name=federationClusterID,proto3" json:"federationClusterID,omitempty"`
	Labels              map[string]string `protobuf:"bytes,13,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Creator             string            `protobuf:"bytes,14,opt,name=creator,proto3" json:"creator,omitempty"`
	// 集群创建的控制信息
	OnlyCreateInfo          bool                      `protobuf:"varint,15,opt,name=onlyCreateInfo,proto3" json:"onlyCreateInfo,omitempty"`
	BcsAddons               map[string]*BKOpsPlugin   `protobuf:"bytes,17,rep,name=bcsAddons,proto3" json:"bcsAddons,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExtraAddons             map[string]*BKOpsPlugin   `protobuf:"bytes,18,rep,name=extraAddons,proto3" json:"extraAddons,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CloudID                 string                    `protobuf:"bytes,19,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	ManageType              string                    `protobuf:"bytes,20,opt,name=manageType,proto3" json:"manageType,omitempty"`
	Master                  []string                  `protobuf:"bytes,21,rep,name=master,proto3" json:"master,omitempty"`
	Nodes                   []string                  `protobuf:"bytes,22,rep,name=nodes,proto3" json:"nodes,omitempty"`
	NetworkSettings         *NetworkSetting           `protobuf:"bytes,23,opt,name=networkSettings,proto3" json:"networkSettings,omitempty"`
	ClusterBasicSettings    *ClusterBasicSetting      `protobuf:"bytes,24,opt,name=clusterBasicSettings,proto3" json:"clusterBasicSettings,omitempty"`
	ClusterAdvanceSettings  *ClusterAdvanceSetting    `protobuf:"bytes,25,opt,name=clusterAdvanceSettings,proto3" json:"clusterAdvanceSettings,omitempty"`
	NodeSettings            *NodeSetting              `protobuf:"bytes,26,opt,name=nodeSettings,proto3" json:"nodeSettings,omitempty"`
	SystemReinstall         bool                      `protobuf:"varint,27,opt,name=systemReinstall,proto3" json:"systemReinstall,omitempty"`
	InitLoginPassword       string                    `protobuf:"bytes,28,opt,name=initLoginPassword,proto3" json:"initLoginPassword,omitempty"`
	NetworkType             string                    `protobuf:"bytes,29,opt,name=networkType,proto3" json:"networkType,omitempty"`
	AutoGenerateMasterNodes bool                      `protobuf:"varint,30,opt,name=autoGenerateMasterNodes,proto3" json:"autoGenerateMasterNodes,omitempty"`
	Instances               []*InstanceTemplateConfig `protobuf:"bytes,31,rep,name=instances,proto3" json:"instances,omitempty"`
	ExtraInfo               map[string]string         `protobuf:"bytes,32,rep,name=extraInfo,proto3" json:"extraInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ModuleID                string                    `protobuf:"bytes,33,opt,name=moduleID,proto3" json:"moduleID,omitempty"`
	ExtraClusterID          string                    `protobuf:"bytes,34,opt,name=extraClusterID,proto3" json:"extraClusterID,omitempty"`
	IsCommonCluster         bool                      `protobuf:"varint,35,opt,name=isCommonCluster,proto3" json:"isCommonCluster,omitempty"`
	Description             string                    `protobuf:"bytes,36,opt,name=description,proto3" json:"description,omitempty"`
	ClusterCategory         string                    `protobuf:"bytes,37,opt,name=clusterCategory,proto3" json:"clusterCategory,omitempty"`
	IsShared                bool                      `protobuf:"varint,38,opt,name=is_shared,json=isShared,proto3" json:"is_shared,omitempty"`
	CloudAccountID          string                    `protobuf:"bytes,39,opt,name=cloudAccountID,proto3" json:"cloudAccountID,omitempty"`
	NodeTemplateID          string                    `protobuf:"bytes,40,opt,name=nodeTemplateID,proto3" json:"nodeTemplateID,omitempty"`
	NodeGroups              []*NodeGroup              `protobuf:"bytes,41,rep,name=nodeGroups,proto3" json:"nodeGroups,omitempty"`
	IsMixed                 bool                      `protobuf:"varint,42,opt,name=isMixed,proto3" json:"isMixed,omitempty"`
	ClusterIamRole          string                    `protobuf:"bytes,43,opt,name=clusterIamRole,proto3" json:"clusterIamRole,omitempty"`
	SharedRanges            *SharedClusterRanges      `protobuf:"bytes,44,opt,name=sharedRanges,proto3" json:"sharedRanges,omitempty"`
	Status                  string                    `protobuf:"bytes,45,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreateClusterReq) Reset() {
	*x = CreateClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterReq) ProtoMessage() {}

func (x *CreateClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterReq.ProtoReflect.Descriptor instead.
func (*CreateClusterReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{100}
}

func (x *CreateClusterReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *CreateClusterReq) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreateClusterReq) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CreateClusterReq) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreateClusterReq) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *CreateClusterReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CreateClusterReq) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *CreateClusterReq) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *CreateClusterReq) GetEngineType() string {
	if x != nil {
		return x.EngineType
	}
	return ""
}

func (x *CreateClusterReq) GetIsExclusive() bool {
	if x != nil {
		return x.IsExclusive
	}
	return false
}

func (x *CreateClusterReq) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

func (x *CreateClusterReq) GetFederationClusterID() string {
	if x != nil {
		return x.FederationClusterID
	}
	return ""
}

func (x *CreateClusterReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateClusterReq) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreateClusterReq) GetOnlyCreateInfo() bool {
	if x != nil {
		return x.OnlyCreateInfo
	}
	return false
}

func (x *CreateClusterReq) GetBcsAddons() map[string]*BKOpsPlugin {
	if x != nil {
		return x.BcsAddons
	}
	return nil
}

func (x *CreateClusterReq) GetExtraAddons() map[string]*BKOpsPlugin {
	if x != nil {
		return x.ExtraAddons
	}
	return nil
}

func (x *CreateClusterReq) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *CreateClusterReq) GetManageType() string {
	if x != nil {
		return x.ManageType
	}
	return ""
}

func (x *CreateClusterReq) GetMaster() []string {
	if x != nil {
		return x.Master
	}
	return nil
}

func (x *CreateClusterReq) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *CreateClusterReq) GetNetworkSettings() *NetworkSetting {
	if x != nil {
		return x.NetworkSettings
	}
	return nil
}

func (x *CreateClusterReq) GetClusterBasicSettings() *ClusterBasicSetting {
	if x != nil {
		return x.ClusterBasicSettings
	}
	return nil
}

func (x *CreateClusterReq) GetClusterAdvanceSettings() *ClusterAdvanceSetting {
	if x != nil {
		return x.ClusterAdvanceSettings
	}
	return nil
}

func (x *CreateClusterReq) GetNodeSettings() *NodeSetting {
	if x != nil {
		return x.NodeSettings
	}
	return nil
}

func (x *CreateClusterReq) GetSystemReinstall() bool {
	if x != nil {
		return x.SystemReinstall
	}
	return false
}

func (x *CreateClusterReq) GetInitLoginPassword() string {
	if x != nil {
		return x.InitLoginPassword
	}
	return ""
}

func (x *CreateClusterReq) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *CreateClusterReq) GetAutoGenerateMasterNodes() bool {
	if x != nil {
		return x.AutoGenerateMasterNodes
	}
	return false
}

func (x *CreateClusterReq) GetInstances() []*InstanceTemplateConfig {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *CreateClusterReq) GetExtraInfo() map[string]string {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *CreateClusterReq) GetModuleID() string {
	if x != nil {
		return x.ModuleID
	}
	return ""
}

func (x *CreateClusterReq) GetExtraClusterID() string {
	if x != nil {
		return x.ExtraClusterID
	}
	return ""
}

func (x *CreateClusterReq) GetIsCommonCluster() bool {
	if x != nil {
		return x.IsCommonCluster
	}
	return false
}

func (x *CreateClusterReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateClusterReq) GetClusterCategory() string {
	if x != nil {
		return x.ClusterCategory
	}
	return ""
}

func (x *CreateClusterReq) GetIsShared() bool {
	if x != nil {
		return x.IsShared
	}
	return false
}

func (x *CreateClusterReq) GetCloudAccountID() string {
	if x != nil {
		return x.CloudAccountID
	}
	return ""
}

func (x *CreateClusterReq) GetNodeTemplateID() string {
	if x != nil {
		return x.NodeTemplateID
	}
	return ""
}

func (x *CreateClusterReq) GetNodeGroups() []*NodeGroup {
	if x != nil {
		return x.NodeGroups
	}
	return nil
}

func (x *CreateClusterReq) GetIsMixed() bool {
	if x != nil {
		return x.IsMixed
	}
	return false
}

func (x *CreateClusterReq) GetClusterIamRole() string {
	if x != nil {
		return x.ClusterIamRole
	}
	return ""
}

func (x *CreateClusterReq) GetSharedRanges() *SharedClusterRanges {
	if x != nil {
		return x.SharedRanges
	}
	return nil
}

func (x *CreateClusterReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type CreateClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *Cluster          `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Task           *Task             `protobuf:"bytes,5,opt,name=task,proto3" json:"task,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,6,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *CreateClusterResp) Reset() {
	*x = CreateClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterResp) ProtoMessage() {}

func (x *CreateClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterResp.ProtoReflect.Descriptor instead.
func (*CreateClusterResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{101}
}

func (x *CreateClusterResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateClusterResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateClusterResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CreateClusterResp) GetData() *Cluster {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateClusterResp) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *CreateClusterResp) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type AddSubnetToClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID string        `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Subnet    *SubnetSource `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Operator  string        `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *AddSubnetToClusterReq) Reset() {
	*x = AddSubnetToClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubnetToClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubnetToClusterReq) ProtoMessage() {}

func (x *AddSubnetToClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubnetToClusterReq.ProtoReflect.Descriptor instead.
func (*AddSubnetToClusterReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{102}
}

func (x *AddSubnetToClusterReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *AddSubnetToClusterReq) GetSubnet() *SubnetSource {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *AddSubnetToClusterReq) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type AddSubnetToClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *AddSubnetToClusterResp) Reset() {
	*x = AddSubnetToClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubnetToClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubnetToClusterResp) ProtoMessage() {}

func (x *AddSubnetToClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubnetToClusterResp.ProtoReflect.Descriptor instead.
func (*AddSubnetToClusterResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{103}
}

func (x *AddSubnetToClusterResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddSubnetToClusterResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddSubnetToClusterResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *AddSubnetToClusterResp) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type SwitchClusterUnderlayNetworkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID           string        `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Disable             bool          `protobuf:"varint,2,opt,name=disable,proto3" json:"disable,omitempty"`
	Subnet              *SubnetSource `protobuf:"bytes,3,opt,name=subnet,proto3" json:"subnet,omitempty"`
	IsStaticIpMode      bool          `protobuf:"varint,4,opt,name=isStaticIpMode,proto3" json:"isStaticIpMode,omitempty"`
	ClaimExpiredSeconds uint32        `protobuf:"varint,5,opt,name=claimExpiredSeconds,proto3" json:"claimExpiredSeconds,omitempty"`
	Operator            string        `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *SwitchClusterUnderlayNetworkReq) Reset() {
	*x = SwitchClusterUnderlayNetworkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchClusterUnderlayNetworkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchClusterUnderlayNetworkReq) ProtoMessage() {}

func (x *SwitchClusterUnderlayNetworkReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchClusterUnderlayNetworkReq.ProtoReflect.Descriptor instead.
func (*SwitchClusterUnderlayNetworkReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{104}
}

func (x *SwitchClusterUnderlayNetworkReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *SwitchClusterUnderlayNetworkReq) GetDisable() bool {
	if x != nil {
		return x.Disable
	}
	return false
}

func (x *SwitchClusterUnderlayNetworkReq) GetSubnet() *SubnetSource {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *SwitchClusterUnderlayNetworkReq) GetIsStaticIpMode() bool {
	if x != nil {
		return x.IsStaticIpMode
	}
	return false
}

func (x *SwitchClusterUnderlayNetworkReq) GetClaimExpiredSeconds() uint32 {
	if x != nil {
		return x.ClaimExpiredSeconds
	}
	return 0
}

func (x *SwitchClusterUnderlayNetworkReq) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type SwitchClusterUnderlayNetworkResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Task           *Task             `protobuf:"bytes,4,opt,name=task,proto3" json:"task,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
	Cluster        *Cluster          `protobuf:"bytes,6,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *SwitchClusterUnderlayNetworkResp) Reset() {
	*x = SwitchClusterUnderlayNetworkResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchClusterUnderlayNetworkResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchClusterUnderlayNetworkResp) ProtoMessage() {}

func (x *SwitchClusterUnderlayNetworkResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchClusterUnderlayNetworkResp.ProtoReflect.Descriptor instead.
func (*SwitchClusterUnderlayNetworkResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{105}
}

func (x *SwitchClusterUnderlayNetworkResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SwitchClusterUnderlayNetworkResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SwitchClusterUnderlayNetworkResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *SwitchClusterUnderlayNetworkResp) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *SwitchClusterUnderlayNetworkResp) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

func (x *SwitchClusterUnderlayNetworkResp) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type CreateVirtualClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID          string            `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ClusterName        string            `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Provider           string            `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Region             string            `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	VpcID              string            `protobuf:"bytes,5,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	ProjectID          string            `protobuf:"bytes,6,opt,name=projectID,proto3" json:"projectID,omitempty"`
	BusinessID         string            `protobuf:"bytes,7,opt,name=businessID,proto3" json:"businessID,omitempty"`
	Environment        string            `protobuf:"bytes,8,opt,name=environment,proto3" json:"environment,omitempty"`
	EngineType         string            `protobuf:"bytes,9,opt,name=engineType,proto3" json:"engineType,omitempty"`
	IsExclusive        bool              `protobuf:"varint,10,opt,name=isExclusive,proto3" json:"isExclusive,omitempty"`
	ClusterType        string            `protobuf:"bytes,11,opt,name=clusterType,proto3" json:"clusterType,omitempty"`
	HostClusterID      string            `protobuf:"bytes,12,opt,name=hostClusterID,proto3" json:"hostClusterID,omitempty"`
	HostClusterNetwork string            `protobuf:"bytes,13,opt,name=hostClusterNetwork,proto3" json:"hostClusterNetwork,omitempty"`
	Labels             map[string]string `protobuf:"bytes,14,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Creator            string            `protobuf:"bytes,15,opt,name=creator,proto3" json:"creator,omitempty"`
	// 集群创建的控制信息
	OnlyCreateInfo         bool                   `protobuf:"varint,16,opt,name=onlyCreateInfo,proto3" json:"onlyCreateInfo,omitempty"`
	Master                 []string               `protobuf:"bytes,17,rep,name=master,proto3" json:"master,omitempty"`
	NetworkSettings        *NetworkSetting        `protobuf:"bytes,18,opt,name=networkSettings,proto3" json:"networkSettings,omitempty"`
	ClusterBasicSettings   *ClusterBasicSetting   `protobuf:"bytes,19,opt,name=clusterBasicSettings,proto3" json:"clusterBasicSettings,omitempty"`
	ClusterAdvanceSettings *ClusterAdvanceSetting `protobuf:"bytes,20,opt,name=clusterAdvanceSettings,proto3" json:"clusterAdvanceSettings,omitempty"`
	NodeSettings           *NodeSetting           `protobuf:"bytes,21,opt,name=nodeSettings,proto3" json:"nodeSettings,omitempty"`
	ExtraInfo              map[string]string      `protobuf:"bytes,22,rep,name=extraInfo,proto3" json:"extraInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Description            string                 `protobuf:"bytes,23,opt,name=description,proto3" json:"description,omitempty"`
	Ns                     *NamespaceInfo         `protobuf:"bytes,24,opt,name=ns,proto3" json:"ns,omitempty"`
	ProjectCode            string                 `protobuf:"bytes,25,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
}

func (x *CreateVirtualClusterReq) Reset() {
	*x = CreateVirtualClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVirtualClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVirtualClusterReq) ProtoMessage() {}

func (x *CreateVirtualClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVirtualClusterReq.ProtoReflect.Descriptor instead.
func (*CreateVirtualClusterReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{106}
}

func (x *CreateVirtualClusterReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *CreateVirtualClusterReq) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreateVirtualClusterReq) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CreateVirtualClusterReq) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreateVirtualClusterReq) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *CreateVirtualClusterReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CreateVirtualClusterReq) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *CreateVirtualClusterReq) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *CreateVirtualClusterReq) GetEngineType() string {
	if x != nil {
		return x.EngineType
	}
	return ""
}

func (x *CreateVirtualClusterReq) GetIsExclusive() bool {
	if x != nil {
		return x.IsExclusive
	}
	return false
}

func (x *CreateVirtualClusterReq) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

func (x *CreateVirtualClusterReq) GetHostClusterID() string {
	if x != nil {
		return x.HostClusterID
	}
	return ""
}

func (x *CreateVirtualClusterReq) GetHostClusterNetwork() string {
	if x != nil {
		return x.HostClusterNetwork
	}
	return ""
}

func (x *CreateVirtualClusterReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateVirtualClusterReq) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreateVirtualClusterReq) GetOnlyCreateInfo() bool {
	if x != nil {
		return x.OnlyCreateInfo
	}
	return false
}

func (x *CreateVirtualClusterReq) GetMaster() []string {
	if x != nil {
		return x.Master
	}
	return nil
}

func (x *CreateVirtualClusterReq) GetNetworkSettings() *NetworkSetting {
	if x != nil {
		return x.NetworkSettings
	}
	return nil
}

func (x *CreateVirtualClusterReq) GetClusterBasicSettings() *ClusterBasicSetting {
	if x != nil {
		return x.ClusterBasicSettings
	}
	return nil
}

func (x *CreateVirtualClusterReq) GetClusterAdvanceSettings() *ClusterAdvanceSetting {
	if x != nil {
		return x.ClusterAdvanceSettings
	}
	return nil
}

func (x *CreateVirtualClusterReq) GetNodeSettings() *NodeSetting {
	if x != nil {
		return x.NodeSettings
	}
	return nil
}

func (x *CreateVirtualClusterReq) GetExtraInfo() map[string]string {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *CreateVirtualClusterReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateVirtualClusterReq) GetNs() *NamespaceInfo {
	if x != nil {
		return x.Ns
	}
	return nil
}

func (x *CreateVirtualClusterReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

type NamespaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Labels      map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations map[string]string `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Quota       *NamespaceQuota   `protobuf:"bytes,4,opt,name=quota,proto3" json:"quota,omitempty"`
}

func (x *NamespaceInfo) Reset() {
	*x = NamespaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceInfo) ProtoMessage() {}

func (x *NamespaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceInfo.ProtoReflect.Descriptor instead.
func (*NamespaceInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{107}
}

func (x *NamespaceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamespaceInfo) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NamespaceInfo) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *NamespaceInfo) GetQuota() *NamespaceQuota {
	if x != nil {
		return x.Quota
	}
	return nil
}

type NamespaceQuota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuRequests    string `protobuf:"bytes,1,opt,name=cpuRequests,proto3" json:"cpuRequests,omitempty"`
	CpuLimits      string `protobuf:"bytes,2,opt,name=cpuLimits,proto3" json:"cpuLimits,omitempty"`
	MemoryRequests string `protobuf:"bytes,3,opt,name=memoryRequests,proto3" json:"memoryRequests,omitempty"`
	MemoryLimits   string `protobuf:"bytes,4,opt,name=memoryLimits,proto3" json:"memoryLimits,omitempty"`
}

func (x *NamespaceQuota) Reset() {
	*x = NamespaceQuota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceQuota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceQuota) ProtoMessage() {}

func (x *NamespaceQuota) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceQuota.ProtoReflect.Descriptor instead.
func (*NamespaceQuota) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{108}
}

func (x *NamespaceQuota) GetCpuRequests() string {
	if x != nil {
		return x.CpuRequests
	}
	return ""
}

func (x *NamespaceQuota) GetCpuLimits() string {
	if x != nil {
		return x.CpuLimits
	}
	return ""
}

func (x *NamespaceQuota) GetMemoryRequests() string {
	if x != nil {
		return x.MemoryRequests
	}
	return ""
}

func (x *NamespaceQuota) GetMemoryLimits() string {
	if x != nil {
		return x.MemoryLimits
	}
	return ""
}

type CreateVirtualClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *Cluster          `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Task           *Task             `protobuf:"bytes,5,opt,name=task,proto3" json:"task,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,6,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *CreateVirtualClusterResp) Reset() {
	*x = CreateVirtualClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVirtualClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVirtualClusterResp) ProtoMessage() {}

func (x *CreateVirtualClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVirtualClusterResp.ProtoReflect.Descriptor instead.
func (*CreateVirtualClusterResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{109}
}

func (x *CreateVirtualClusterResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateVirtualClusterResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateVirtualClusterResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CreateVirtualClusterResp) GetData() *Cluster {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateVirtualClusterResp) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *CreateVirtualClusterResp) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type RecommendNodeGroupConfReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID           string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	AccountID         string `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	Region            string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	ResourceGroupName string `protobuf:"bytes,4,opt,name=resourceGroupName,proto3" json:"resourceGroupName,omitempty"`
}

func (x *RecommendNodeGroupConfReq) Reset() {
	*x = RecommendNodeGroupConfReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendNodeGroupConfReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendNodeGroupConfReq) ProtoMessage() {}

func (x *RecommendNodeGroupConfReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendNodeGroupConfReq.ProtoReflect.Descriptor instead.
func (*RecommendNodeGroupConfReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{110}
}

func (x *RecommendNodeGroupConfReq) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *RecommendNodeGroupConfReq) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *RecommendNodeGroupConfReq) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RecommendNodeGroupConfReq) GetResourceGroupName() string {
	if x != nil {
		return x.ResourceGroupName
	}
	return ""
}

type InstanceProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeOS             string `protobuf:"bytes,1,opt,name=nodeOS,proto3" json:"nodeOS,omitempty"`
	InstanceType       string `protobuf:"bytes,2,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	InstanceChargeType string `protobuf:"bytes,3,opt,name=instanceChargeType,proto3" json:"instanceChargeType,omitempty"`
}

func (x *InstanceProfile) Reset() {
	*x = InstanceProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceProfile) ProtoMessage() {}

func (x *InstanceProfile) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceProfile.ProtoReflect.Descriptor instead.
func (*InstanceProfile) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{111}
}

func (x *InstanceProfile) GetNodeOS() string {
	if x != nil {
		return x.NodeOS
	}
	return ""
}

func (x *InstanceProfile) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *InstanceProfile) GetInstanceChargeType() string {
	if x != nil {
		return x.InstanceChargeType
	}
	return ""
}

type HardwareProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CPU        uint32      `protobuf:"varint,1,opt,name=CPU,proto3" json:"CPU,omitempty"`
	Mem        uint32      `protobuf:"varint,2,opt,name=Mem,proto3" json:"Mem,omitempty"`
	GPU        uint32      `protobuf:"varint,3,opt,name=GPU,proto3" json:"GPU,omitempty"`
	SystemDisk *DataDisk   `protobuf:"bytes,4,opt,name=systemDisk,proto3" json:"systemDisk,omitempty"`
	DataDisks  []*DataDisk `protobuf:"bytes,5,rep,name=dataDisks,proto3" json:"dataDisks,omitempty"`
}

func (x *HardwareProfile) Reset() {
	*x = HardwareProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareProfile) ProtoMessage() {}

func (x *HardwareProfile) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareProfile.ProtoReflect.Descriptor instead.
func (*HardwareProfile) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{112}
}

func (x *HardwareProfile) GetCPU() uint32 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *HardwareProfile) GetMem() uint32 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *HardwareProfile) GetGPU() uint32 {
	if x != nil {
		return x.GPU
	}
	return 0
}

func (x *HardwareProfile) GetSystemDisk() *DataDisk {
	if x != nil {
		return x.SystemDisk
	}
	return nil
}

func (x *HardwareProfile) GetDataDisks() []*DataDisk {
	if x != nil {
		return x.DataDisks
	}
	return nil
}

type NetworkProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetIDs        []string `protobuf:"bytes,1,rep,name=subnetIDs,proto3" json:"subnetIDs,omitempty"`
	PublicIPAssigned bool     `protobuf:"varint,2,opt,name=publicIPAssigned,proto3" json:"publicIPAssigned,omitempty"`
}

func (x *NetworkProfile) Reset() {
	*x = NetworkProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkProfile) ProtoMessage() {}

func (x *NetworkProfile) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkProfile.ProtoReflect.Descriptor instead.
func (*NetworkProfile) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{113}
}

func (x *NetworkProfile) GetSubnetIDs() []string {
	if x != nil {
		return x.SubnetIDs
	}
	return nil
}

func (x *NetworkProfile) GetPublicIPAssigned() bool {
	if x != nil {
		return x.PublicIPAssigned
	}
	return false
}

type ScalingProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSize     uint32 `protobuf:"varint,1,opt,name=maxSize,proto3" json:"maxSize,omitempty"`
	DesiredSize uint32 `protobuf:"varint,2,opt,name=desiredSize,proto3" json:"desiredSize,omitempty"`
	ScalingMode string `protobuf:"bytes,3,opt,name=scalingMode,proto3" json:"scalingMode,omitempty"`
}

func (x *ScalingProfile) Reset() {
	*x = ScalingProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalingProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalingProfile) ProtoMessage() {}

func (x *ScalingProfile) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalingProfile.ProtoReflect.Descriptor instead.
func (*ScalingProfile) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{114}
}

func (x *ScalingProfile) GetMaxSize() uint32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *ScalingProfile) GetDesiredSize() uint32 {
	if x != nil {
		return x.DesiredSize
	}
	return 0
}

func (x *ScalingProfile) GetScalingMode() string {
	if x != nil {
		return x.ScalingMode
	}
	return ""
}

type RecommendNodeGroupConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ServiceRoleName string           `protobuf:"bytes,2,opt,name=serviceRoleName,proto3" json:"serviceRoleName,omitempty"`
	InstanceProfile *InstanceProfile `protobuf:"bytes,3,opt,name=instanceProfile,proto3" json:"instanceProfile,omitempty"`
	HardwareProfile *HardwareProfile `protobuf:"bytes,4,opt,name=hardwareProfile,proto3" json:"hardwareProfile,omitempty"`
	NetworkProfile  *NetworkProfile  `protobuf:"bytes,5,opt,name=networkProfile,proto3" json:"networkProfile,omitempty"`
	ScalingProfile  *ScalingProfile  `protobuf:"bytes,6,opt,name=scalingProfile,proto3" json:"scalingProfile,omitempty"`
	Mode            string           `protobuf:"bytes,7,opt,name=mode,proto3" json:"mode,omitempty"`
	Zones           []string         `protobuf:"bytes,8,rep,name=zones,proto3" json:"zones,omitempty"`
}

func (x *RecommendNodeGroupConf) Reset() {
	*x = RecommendNodeGroupConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendNodeGroupConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendNodeGroupConf) ProtoMessage() {}

func (x *RecommendNodeGroupConf) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendNodeGroupConf.ProtoReflect.Descriptor instead.
func (*RecommendNodeGroupConf) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{115}
}

func (x *RecommendNodeGroupConf) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecommendNodeGroupConf) GetServiceRoleName() string {
	if x != nil {
		return x.ServiceRoleName
	}
	return ""
}

func (x *RecommendNodeGroupConf) GetInstanceProfile() *InstanceProfile {
	if x != nil {
		return x.InstanceProfile
	}
	return nil
}

func (x *RecommendNodeGroupConf) GetHardwareProfile() *HardwareProfile {
	if x != nil {
		return x.HardwareProfile
	}
	return nil
}

func (x *RecommendNodeGroupConf) GetNetworkProfile() *NetworkProfile {
	if x != nil {
		return x.NetworkProfile
	}
	return nil
}

func (x *RecommendNodeGroupConf) GetScalingProfile() *ScalingProfile {
	if x != nil {
		return x.ScalingProfile
	}
	return nil
}

func (x *RecommendNodeGroupConf) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *RecommendNodeGroupConf) GetZones() []string {
	if x != nil {
		return x.Zones
	}
	return nil
}

type RecommendNodeGroupConfResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                      `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*RecommendNodeGroupConf `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *RecommendNodeGroupConfResp) Reset() {
	*x = RecommendNodeGroupConfResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendNodeGroupConfResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendNodeGroupConfResp) ProtoMessage() {}

func (x *RecommendNodeGroupConfResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendNodeGroupConfResp.ProtoReflect.Descriptor instead.
func (*RecommendNodeGroupConfResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{116}
}

func (x *RecommendNodeGroupConfResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RecommendNodeGroupConfResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RecommendNodeGroupConfResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *RecommendNodeGroupConfResp) GetData() []*RecommendNodeGroupConf {
	if x != nil {
		return x.Data
	}
	return nil
}

type KubeConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KubeConfig string `protobuf:"bytes,1,opt,name=kubeConfig,proto3" json:"kubeConfig,omitempty"`
}

func (x *KubeConfigReq) Reset() {
	*x = KubeConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeConfigReq) ProtoMessage() {}

func (x *KubeConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeConfigReq.ProtoReflect.Descriptor instead.
func (*KubeConfigReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{117}
}

func (x *KubeConfigReq) GetKubeConfig() string {
	if x != nil {
		return x.KubeConfig
	}
	return ""
}

type KubeConfigConnectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID         string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	IsExtranet        bool   `protobuf:"varint,2,opt,name=isExtranet,proto3" json:"isExtranet,omitempty"`
	CloudID           string `protobuf:"bytes,3,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	AccountID         string `protobuf:"bytes,4,opt,name=accountID,proto3" json:"accountID,omitempty"`
	Region            string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	ResourceGroupName string `protobuf:"bytes,6,opt,name=resourceGroupName,proto3" json:"resourceGroupName,omitempty"`
}

func (x *KubeConfigConnectReq) Reset() {
	*x = KubeConfigConnectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeConfigConnectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeConfigConnectReq) ProtoMessage() {}

func (x *KubeConfigConnectReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeConfigConnectReq.ProtoReflect.Descriptor instead.
func (*KubeConfigConnectReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{118}
}

func (x *KubeConfigConnectReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *KubeConfigConnectReq) GetIsExtranet() bool {
	if x != nil {
		return x.IsExtranet
	}
	return false
}

func (x *KubeConfigConnectReq) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *KubeConfigConnectReq) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *KubeConfigConnectReq) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *KubeConfigConnectReq) GetResourceGroupName() string {
	if x != nil {
		return x.ResourceGroupName
	}
	return ""
}

type KubeConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *KubeConfigResp) Reset() {
	*x = KubeConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeConfigResp) ProtoMessage() {}

func (x *KubeConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeConfigResp.ProtoReflect.Descriptor instead.
func (*KubeConfigResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{119}
}

func (x *KubeConfigResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *KubeConfigResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *KubeConfigResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type KubeConfigConnectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *KubeConfigConnectResp) Reset() {
	*x = KubeConfigConnectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeConfigConnectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeConfigConnectResp) ProtoMessage() {}

func (x *KubeConfigConnectResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeConfigConnectResp.ProtoReflect.Descriptor instead.
func (*KubeConfigConnectResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{120}
}

func (x *KubeConfigConnectResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *KubeConfigConnectResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *KubeConfigConnectResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ImportCloudMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID       string   `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	KubeConfig    string   `protobuf:"bytes,2,opt,name=kubeConfig,proto3" json:"kubeConfig,omitempty"`
	Inter         bool     `protobuf:"varint,3,opt,name=inter,proto3" json:"inter,omitempty"`
	ResourceGroup string   `protobuf:"bytes,4,opt,name=resourceGroup,proto3" json:"resourceGroup,omitempty"`
	NodeIps       []string `protobuf:"bytes,5,rep,name=nodeIps,proto3" json:"nodeIps,omitempty"`
}

func (x *ImportCloudMode) Reset() {
	*x = ImportCloudMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportCloudMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportCloudMode) ProtoMessage() {}

func (x *ImportCloudMode) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportCloudMode.ProtoReflect.Descriptor instead.
func (*ImportCloudMode) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{121}
}

func (x *ImportCloudMode) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *ImportCloudMode) GetKubeConfig() string {
	if x != nil {
		return x.KubeConfig
	}
	return ""
}

func (x *ImportCloudMode) GetInter() bool {
	if x != nil {
		return x.Inter
	}
	return false
}

func (x *ImportCloudMode) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

func (x *ImportCloudMode) GetNodeIps() []string {
	if x != nil {
		return x.NodeIps
	}
	return nil
}

type ImportClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID       string              `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ClusterName     string              `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Description     string              `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Provider        string              `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
	Region          string              `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	ProjectID       string              `protobuf:"bytes,6,opt,name=projectID,proto3" json:"projectID,omitempty"`
	BusinessID      string              `protobuf:"bytes,7,opt,name=businessID,proto3" json:"businessID,omitempty"`
	Environment     string              `protobuf:"bytes,8,opt,name=environment,proto3" json:"environment,omitempty"`
	EngineType      string              `protobuf:"bytes,9,opt,name=engineType,proto3" json:"engineType,omitempty"`
	IsExclusive     *wrappers.BoolValue `protobuf:"bytes,10,opt,name=isExclusive,proto3" json:"isExclusive,omitempty"`
	ClusterType     string              `protobuf:"bytes,11,opt,name=clusterType,proto3" json:"clusterType,omitempty"`
	Labels          map[string]string   `protobuf:"bytes,12,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Creator         string              `protobuf:"bytes,13,opt,name=creator,proto3" json:"creator,omitempty"`
	CloudMode       *ImportCloudMode    `protobuf:"bytes,14,opt,name=cloudMode,proto3" json:"cloudMode,omitempty"`
	ManageType      string              `protobuf:"bytes,15,opt,name=manageType,proto3" json:"manageType,omitempty"`
	NetworkType     string              `protobuf:"bytes,16,opt,name=networkType,proto3" json:"networkType,omitempty"`
	ExtraInfo       map[string]string   `protobuf:"bytes,17,rep,name=extraInfo,proto3" json:"extraInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExtraClusterID  string              `protobuf:"bytes,18,opt,name=extraClusterID,proto3" json:"extraClusterID,omitempty"`
	ClusterCategory string              `protobuf:"bytes,19,opt,name=clusterCategory,proto3" json:"clusterCategory,omitempty"`
	IsShared        bool                `protobuf:"varint,20,opt,name=is_shared,json=isShared,proto3" json:"is_shared,omitempty"`
	Version         string              `protobuf:"bytes,21,opt,name=version,proto3" json:"version,omitempty"`
	AccountID       string              `protobuf:"bytes,22,opt,name=accountID,proto3" json:"accountID,omitempty"`
	Area            *CloudArea          `protobuf:"bytes,23,opt,name=area,proto3" json:"area,omitempty"`
}

func (x *ImportClusterReq) Reset() {
	*x = ImportClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportClusterReq) ProtoMessage() {}

func (x *ImportClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportClusterReq.ProtoReflect.Descriptor instead.
func (*ImportClusterReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{122}
}

func (x *ImportClusterReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ImportClusterReq) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ImportClusterReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ImportClusterReq) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ImportClusterReq) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ImportClusterReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ImportClusterReq) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *ImportClusterReq) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *ImportClusterReq) GetEngineType() string {
	if x != nil {
		return x.EngineType
	}
	return ""
}

func (x *ImportClusterReq) GetIsExclusive() *wrappers.BoolValue {
	if x != nil {
		return x.IsExclusive
	}
	return nil
}

func (x *ImportClusterReq) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

func (x *ImportClusterReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ImportClusterReq) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ImportClusterReq) GetCloudMode() *ImportCloudMode {
	if x != nil {
		return x.CloudMode
	}
	return nil
}

func (x *ImportClusterReq) GetManageType() string {
	if x != nil {
		return x.ManageType
	}
	return ""
}

func (x *ImportClusterReq) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *ImportClusterReq) GetExtraInfo() map[string]string {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *ImportClusterReq) GetExtraClusterID() string {
	if x != nil {
		return x.ExtraClusterID
	}
	return ""
}

func (x *ImportClusterReq) GetClusterCategory() string {
	if x != nil {
		return x.ClusterCategory
	}
	return ""
}

func (x *ImportClusterReq) GetIsShared() bool {
	if x != nil {
		return x.IsShared
	}
	return false
}

func (x *ImportClusterReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ImportClusterReq) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ImportClusterReq) GetArea() *CloudArea {
	if x != nil {
		return x.Area
	}
	return nil
}

type ImportClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ImportClusterResp) Reset() {
	*x = ImportClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportClusterResp) ProtoMessage() {}

func (x *ImportClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportClusterResp.ProtoReflect.Descriptor instead.
func (*ImportClusterResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{123}
}

func (x *ImportClusterResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ImportClusterResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ImportClusterResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ImportClusterResp) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteVirtualClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID      string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	OnlyDeleteInfo bool   `protobuf:"varint,2,opt,name=onlyDeleteInfo,proto3" json:"onlyDeleteInfo,omitempty"`
	Operator       string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *DeleteVirtualClusterReq) Reset() {
	*x = DeleteVirtualClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVirtualClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVirtualClusterReq) ProtoMessage() {}

func (x *DeleteVirtualClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVirtualClusterReq.ProtoReflect.Descriptor instead.
func (*DeleteVirtualClusterReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{124}
}

func (x *DeleteVirtualClusterReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *DeleteVirtualClusterReq) GetOnlyDeleteInfo() bool {
	if x != nil {
		return x.OnlyDeleteInfo
	}
	return false
}

func (x *DeleteVirtualClusterReq) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type DeleteVirtualClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *Cluster          `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Task           *Task             `protobuf:"bytes,5,opt,name=task,proto3" json:"task,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,6,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *DeleteVirtualClusterResp) Reset() {
	*x = DeleteVirtualClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVirtualClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVirtualClusterResp) ProtoMessage() {}

func (x *DeleteVirtualClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVirtualClusterResp.ProtoReflect.Descriptor instead.
func (*DeleteVirtualClusterResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{125}
}

func (x *DeleteVirtualClusterResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteVirtualClusterResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteVirtualClusterResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteVirtualClusterResp) GetData() *Cluster {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeleteVirtualClusterResp) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *DeleteVirtualClusterResp) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type UpdateVirtualClusterQuotaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID string          `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Quota     *NamespaceQuota `protobuf:"bytes,2,opt,name=quota,proto3" json:"quota,omitempty"`
	Updater   string          `protobuf:"bytes,3,opt,name=updater,proto3" json:"updater,omitempty"`
}

func (x *UpdateVirtualClusterQuotaReq) Reset() {
	*x = UpdateVirtualClusterQuotaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVirtualClusterQuotaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVirtualClusterQuotaReq) ProtoMessage() {}

func (x *UpdateVirtualClusterQuotaReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVirtualClusterQuotaReq.ProtoReflect.Descriptor instead.
func (*UpdateVirtualClusterQuotaReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{126}
}

func (x *UpdateVirtualClusterQuotaReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *UpdateVirtualClusterQuotaReq) GetQuota() *NamespaceQuota {
	if x != nil {
		return x.Quota
	}
	return nil
}

func (x *UpdateVirtualClusterQuotaReq) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

type UpdateVirtualClusterQuotaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *NamespaceQuota `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateVirtualClusterQuotaResp) Reset() {
	*x = UpdateVirtualClusterQuotaResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVirtualClusterQuotaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVirtualClusterQuotaResp) ProtoMessage() {}

func (x *UpdateVirtualClusterQuotaResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVirtualClusterQuotaResp.ProtoReflect.Descriptor instead.
func (*UpdateVirtualClusterQuotaResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{127}
}

func (x *UpdateVirtualClusterQuotaResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateVirtualClusterQuotaResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateVirtualClusterQuotaResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateVirtualClusterQuotaResp) GetData() *NamespaceQuota {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID           string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	IsForced            bool   `protobuf:"varint,2,opt,name=isForced,proto3" json:"isForced,omitempty"`
	InstanceDeleteMode  string `protobuf:"bytes,3,opt,name=instanceDeleteMode,proto3" json:"instanceDeleteMode,omitempty"`
	OnlyDeleteInfo      bool   `protobuf:"varint,4,opt,name=onlyDeleteInfo,proto3" json:"onlyDeleteInfo,omitempty"`
	Operator            string `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
	DeleteClusterRecord bool   `protobuf:"varint,6,opt,name=deleteClusterRecord,proto3" json:"deleteClusterRecord,omitempty"`
}

func (x *DeleteClusterReq) Reset() {
	*x = DeleteClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterReq) ProtoMessage() {}

func (x *DeleteClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterReq.ProtoReflect.Descriptor instead.
func (*DeleteClusterReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{128}
}

func (x *DeleteClusterReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *DeleteClusterReq) GetIsForced() bool {
	if x != nil {
		return x.IsForced
	}
	return false
}

func (x *DeleteClusterReq) GetInstanceDeleteMode() string {
	if x != nil {
		return x.InstanceDeleteMode
	}
	return ""
}

func (x *DeleteClusterReq) GetOnlyDeleteInfo() bool {
	if x != nil {
		return x.OnlyDeleteInfo
	}
	return false
}

func (x *DeleteClusterReq) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *DeleteClusterReq) GetDeleteClusterRecord() bool {
	if x != nil {
		return x.DeleteClusterRecord
	}
	return false
}

type DeleteClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *Cluster          `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Task           *Task             `protobuf:"bytes,5,opt,name=task,proto3" json:"task,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,6,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *DeleteClusterResp) Reset() {
	*x = DeleteClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterResp) ProtoMessage() {}

func (x *DeleteClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterResp.ProtoReflect.Descriptor instead.
func (*DeleteClusterResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{129}
}

func (x *DeleteClusterResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteClusterResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteClusterResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteClusterResp) GetData() *Cluster {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeleteClusterResp) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *DeleteClusterResp) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type UpdateClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID              string                  `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ClusterName            string                  `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Provider               string                  `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Region                 string                  `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	VpcID                  string                  `protobuf:"bytes,5,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	ProjectID              string                  `protobuf:"bytes,6,opt,name=projectID,proto3" json:"projectID,omitempty"`
	BusinessID             string                  `protobuf:"bytes,7,opt,name=businessID,proto3" json:"businessID,omitempty"`
	Environment            string                  `protobuf:"bytes,8,opt,name=environment,proto3" json:"environment,omitempty"`
	EngineType             string                  `protobuf:"bytes,9,opt,name=engineType,proto3" json:"engineType,omitempty"`
	IsExclusive            *wrappers.BoolValue     `protobuf:"bytes,10,opt,name=isExclusive,proto3" json:"isExclusive,omitempty"`
	ClusterType            string                  `protobuf:"bytes,11,opt,name=clusterType,proto3" json:"clusterType,omitempty"`
	FederationClusterID    string                  `protobuf:"bytes,12,opt,name=federationClusterID,proto3" json:"federationClusterID,omitempty"`
	Labels                 map[string]string       `protobuf:"bytes,13,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Updater                string                  `protobuf:"bytes,14,opt,name=updater,proto3" json:"updater,omitempty"`
	Status                 string                  `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	BcsAddons              map[string]*BKOpsPlugin `protobuf:"bytes,17,rep,name=bcsAddons,proto3" json:"bcsAddons,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExtraAddons            map[string]*BKOpsPlugin `protobuf:"bytes,18,rep,name=extraAddons,proto3" json:"extraAddons,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SystemID               string                  `protobuf:"bytes,19,opt,name=systemID,proto3" json:"systemID,omitempty"`
	ManageType             string                  `protobuf:"bytes,20,opt,name=manageType,proto3" json:"manageType,omitempty"`
	Master                 []string                `protobuf:"bytes,21,rep,name=master,proto3" json:"master,omitempty"`
	NetworkSettings        *NetworkSetting         `protobuf:"bytes,22,opt,name=networkSettings,proto3" json:"networkSettings,omitempty"`
	ClusterBasicSettings   *ClusterBasicSetting    `protobuf:"bytes,23,opt,name=clusterBasicSettings,proto3" json:"clusterBasicSettings,omitempty"`
	ClusterAdvanceSettings *ClusterAdvanceSetting  `protobuf:"bytes,24,opt,name=clusterAdvanceSettings,proto3" json:"clusterAdvanceSettings,omitempty"`
	NodeSettings           *NodeSetting            `protobuf:"bytes,25,opt,name=nodeSettings,proto3" json:"nodeSettings,omitempty"`
	NetworkType            string                  `protobuf:"bytes,26,opt,name=networkType,proto3" json:"networkType,omitempty"`
	ExtraInfo              map[string]string       `protobuf:"bytes,27,rep,name=ExtraInfo,proto3" json:"ExtraInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ModuleID               string                  `protobuf:"bytes,28,opt,name=moduleID,proto3" json:"moduleID,omitempty"`
	ExtraClusterID         string                  `protobuf:"bytes,29,opt,name=extraClusterID,proto3" json:"extraClusterID,omitempty"`
	IsCommonCluster        *wrappers.BoolValue     `protobuf:"bytes,30,opt,name=isCommonCluster,proto3" json:"isCommonCluster,omitempty"`
	Description            *wrappers.StringValue   `protobuf:"bytes,31,opt,name=description,proto3" json:"description,omitempty"`
	ClusterCategory        string                  `protobuf:"bytes,32,opt,name=clusterCategory,proto3" json:"clusterCategory,omitempty"`
	IsShared               *wrappers.BoolValue     `protobuf:"bytes,33,opt,name=is_shared,json=isShared,proto3" json:"is_shared,omitempty"`
	CreateTime             string                  `protobuf:"bytes,34,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Creator                string                  `protobuf:"bytes,35,opt,name=creator,proto3" json:"creator,omitempty"`
	ImportCategory         string                  `protobuf:"bytes,36,opt,name=importCategory,proto3" json:"importCategory,omitempty"`
	CloudAccountID         string                  `protobuf:"bytes,37,opt,name=cloudAccountID,proto3" json:"cloudAccountID,omitempty"`
	IsMixed                *wrappers.BoolValue     `protobuf:"bytes,38,opt,name=isMixed,proto3" json:"isMixed,omitempty"`
	SharedRanges           *SharedClusterRanges    `protobuf:"bytes,39,opt,name=sharedRanges,proto3" json:"sharedRanges,omitempty"`
	Labels2                *MapStruct              `protobuf:"bytes,40,opt,name=labels2,proto3" json:"labels2,omitempty"`
}

func (x *UpdateClusterReq) Reset() {
	*x = UpdateClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterReq) ProtoMessage() {}

func (x *UpdateClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterReq.ProtoReflect.Descriptor instead.
func (*UpdateClusterReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{130}
}

func (x *UpdateClusterReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *UpdateClusterReq) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *UpdateClusterReq) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *UpdateClusterReq) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *UpdateClusterReq) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *UpdateClusterReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *UpdateClusterReq) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *UpdateClusterReq) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *UpdateClusterReq) GetEngineType() string {
	if x != nil {
		return x.EngineType
	}
	return ""
}

func (x *UpdateClusterReq) GetIsExclusive() *wrappers.BoolValue {
	if x != nil {
		return x.IsExclusive
	}
	return nil
}

func (x *UpdateClusterReq) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

func (x *UpdateClusterReq) GetFederationClusterID() string {
	if x != nil {
		return x.FederationClusterID
	}
	return ""
}

func (x *UpdateClusterReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateClusterReq) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *UpdateClusterReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateClusterReq) GetBcsAddons() map[string]*BKOpsPlugin {
	if x != nil {
		return x.BcsAddons
	}
	return nil
}

func (x *UpdateClusterReq) GetExtraAddons() map[string]*BKOpsPlugin {
	if x != nil {
		return x.ExtraAddons
	}
	return nil
}

func (x *UpdateClusterReq) GetSystemID() string {
	if x != nil {
		return x.SystemID
	}
	return ""
}

func (x *UpdateClusterReq) GetManageType() string {
	if x != nil {
		return x.ManageType
	}
	return ""
}

func (x *UpdateClusterReq) GetMaster() []string {
	if x != nil {
		return x.Master
	}
	return nil
}

func (x *UpdateClusterReq) GetNetworkSettings() *NetworkSetting {
	if x != nil {
		return x.NetworkSettings
	}
	return nil
}

func (x *UpdateClusterReq) GetClusterBasicSettings() *ClusterBasicSetting {
	if x != nil {
		return x.ClusterBasicSettings
	}
	return nil
}

func (x *UpdateClusterReq) GetClusterAdvanceSettings() *ClusterAdvanceSetting {
	if x != nil {
		return x.ClusterAdvanceSettings
	}
	return nil
}

func (x *UpdateClusterReq) GetNodeSettings() *NodeSetting {
	if x != nil {
		return x.NodeSettings
	}
	return nil
}

func (x *UpdateClusterReq) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *UpdateClusterReq) GetExtraInfo() map[string]string {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *UpdateClusterReq) GetModuleID() string {
	if x != nil {
		return x.ModuleID
	}
	return ""
}

func (x *UpdateClusterReq) GetExtraClusterID() string {
	if x != nil {
		return x.ExtraClusterID
	}
	return ""
}

func (x *UpdateClusterReq) GetIsCommonCluster() *wrappers.BoolValue {
	if x != nil {
		return x.IsCommonCluster
	}
	return nil
}

func (x *UpdateClusterReq) GetDescription() *wrappers.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateClusterReq) GetClusterCategory() string {
	if x != nil {
		return x.ClusterCategory
	}
	return ""
}

func (x *UpdateClusterReq) GetIsShared() *wrappers.BoolValue {
	if x != nil {
		return x.IsShared
	}
	return nil
}

func (x *UpdateClusterReq) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *UpdateClusterReq) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *UpdateClusterReq) GetImportCategory() string {
	if x != nil {
		return x.ImportCategory
	}
	return ""
}

func (x *UpdateClusterReq) GetCloudAccountID() string {
	if x != nil {
		return x.CloudAccountID
	}
	return ""
}

func (x *UpdateClusterReq) GetIsMixed() *wrappers.BoolValue {
	if x != nil {
		return x.IsMixed
	}
	return nil
}

func (x *UpdateClusterReq) GetSharedRanges() *SharedClusterRanges {
	if x != nil {
		return x.SharedRanges
	}
	return nil
}

func (x *UpdateClusterReq) GetLabels2() *MapStruct {
	if x != nil {
		return x.Labels2
	}
	return nil
}

type UpdateClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *Cluster          `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *UpdateClusterResp) Reset() {
	*x = UpdateClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterResp) ProtoMessage() {}

func (x *UpdateClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterResp.ProtoReflect.Descriptor instead.
func (*UpdateClusterResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{131}
}

func (x *UpdateClusterResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateClusterResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateClusterResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateClusterResp) GetData() *Cluster {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateClusterResp) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type RetryCreateClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Operator  string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *RetryCreateClusterReq) Reset() {
	*x = RetryCreateClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryCreateClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryCreateClusterReq) ProtoMessage() {}

func (x *RetryCreateClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryCreateClusterReq.ProtoReflect.Descriptor instead.
func (*RetryCreateClusterReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{132}
}

func (x *RetryCreateClusterReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *RetryCreateClusterReq) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type RetryCreateClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool     `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *Cluster `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Task    *Task    `protobuf:"bytes,5,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *RetryCreateClusterResp) Reset() {
	*x = RetryCreateClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryCreateClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryCreateClusterResp) ProtoMessage() {}

func (x *RetryCreateClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryCreateClusterResp.ProtoReflect.Descriptor instead.
func (*RetryCreateClusterResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{133}
}

func (x *RetryCreateClusterResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RetryCreateClusterResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RetryCreateClusterResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *RetryCreateClusterResp) GetData() *Cluster {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RetryCreateClusterResp) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type GetClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	CloudInfo bool   `protobuf:"varint,3,opt,name=cloudInfo,proto3" json:"cloudInfo,omitempty"`
	ProjectId string `protobuf:"bytes,4,opt,name=projectId,proto3" json:"projectId,omitempty"`
}

func (x *GetClusterReq) Reset() {
	*x = GetClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterReq) ProtoMessage() {}

func (x *GetClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterReq.ProtoReflect.Descriptor instead.
func (*GetClusterReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{134}
}

func (x *GetClusterReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *GetClusterReq) GetCloudInfo() bool {
	if x != nil {
		return x.CloudInfo
	}
	return false
}

func (x *GetClusterReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type GetClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *Cluster          `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Extra          *ExtraClusterInfo `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,6,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetClusterResp) Reset() {
	*x = GetClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterResp) ProtoMessage() {}

func (x *GetClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterResp.ProtoReflect.Descriptor instead.
func (*GetClusterResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{135}
}

func (x *GetClusterResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetClusterResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetClusterResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetClusterResp) GetData() *Cluster {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetClusterResp) GetExtra() *ExtraClusterInfo {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *GetClusterResp) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ExtraClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderType string `protobuf:"bytes,1,opt,name=providerType,proto3" json:"providerType,omitempty"`
}

func (x *ExtraClusterInfo) Reset() {
	*x = ExtraClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraClusterInfo) ProtoMessage() {}

func (x *ExtraClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraClusterInfo.ProtoReflect.Descriptor instead.
func (*ExtraClusterInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{136}
}

func (x *ExtraClusterInfo) GetProviderType() string {
	if x != nil {
		return x.ProviderType
	}
	return ""
}

type CheckNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerIPs []string `protobuf:"bytes,1,rep,name=innerIPs,proto3" json:"innerIPs,omitempty"`
}

func (x *CheckNodesRequest) Reset() {
	*x = CheckNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckNodesRequest) ProtoMessage() {}

func (x *CheckNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckNodesRequest.ProtoReflect.Descriptor instead.
func (*CheckNodesRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{137}
}

func (x *CheckNodesRequest) GetInnerIPs() []string {
	if x != nil {
		return x.InnerIPs
	}
	return nil
}

type CheckNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    map[string]*NodeResult `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CheckNodesResponse) Reset() {
	*x = CheckNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckNodesResponse) ProtoMessage() {}

func (x *CheckNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckNodesResponse.ProtoReflect.Descriptor instead.
func (*CheckNodesResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{138}
}

func (x *CheckNodesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CheckNodesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CheckNodesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CheckNodesResponse) GetData() map[string]*NodeResult {
	if x != nil {
		return x.Data
	}
	return nil
}

type NodeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsExist     bool   `protobuf:"varint,1,opt,name=isExist,proto3" json:"isExist,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ClusterName string `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
}

func (x *NodeResult) Reset() {
	*x = NodeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeResult) ProtoMessage() {}

func (x *NodeResult) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeResult.ProtoReflect.Descriptor instead.
func (*NodeResult) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{139}
}

func (x *NodeResult) GetIsExist() bool {
	if x != nil {
		return x.IsExist
	}
	return false
}

func (x *NodeResult) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *NodeResult) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type UnCordonNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerIPs  []string `protobuf:"bytes,1,rep,name=innerIPs,proto3" json:"innerIPs,omitempty"`
	ClusterID string   `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Nodes     []string `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *UnCordonNodeRequest) Reset() {
	*x = UnCordonNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnCordonNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnCordonNodeRequest) ProtoMessage() {}

func (x *UnCordonNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnCordonNodeRequest.ProtoReflect.Descriptor instead.
func (*UnCordonNodeRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{140}
}

func (x *UnCordonNodeRequest) GetInnerIPs() []string {
	if x != nil {
		return x.InnerIPs
	}
	return nil
}

func (x *UnCordonNodeRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *UnCordonNodeRequest) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type UnCordonNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                 `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *NodeOperationStatus `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UnCordonNodeResponse) Reset() {
	*x = UnCordonNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnCordonNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnCordonNodeResponse) ProtoMessage() {}

func (x *UnCordonNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnCordonNodeResponse.ProtoReflect.Descriptor instead.
func (*UnCordonNodeResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{141}
}

func (x *UnCordonNodeResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UnCordonNodeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UnCordonNodeResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UnCordonNodeResponse) GetData() *NodeOperationStatus {
	if x != nil {
		return x.Data
	}
	return nil
}

type CordonNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerIPs  []string `protobuf:"bytes,1,rep,name=innerIPs,proto3" json:"innerIPs,omitempty"`
	ClusterID string   `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Nodes     []string `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *CordonNodeRequest) Reset() {
	*x = CordonNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CordonNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CordonNodeRequest) ProtoMessage() {}

func (x *CordonNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CordonNodeRequest.ProtoReflect.Descriptor instead.
func (*CordonNodeRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{142}
}

func (x *CordonNodeRequest) GetInnerIPs() []string {
	if x != nil {
		return x.InnerIPs
	}
	return nil
}

func (x *CordonNodeRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *CordonNodeRequest) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type CordonNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                 `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *NodeOperationStatus `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CordonNodeResponse) Reset() {
	*x = CordonNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CordonNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CordonNodeResponse) ProtoMessage() {}

func (x *CordonNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CordonNodeResponse.ProtoReflect.Descriptor instead.
func (*CordonNodeResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{143}
}

func (x *CordonNodeResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CordonNodeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CordonNodeResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CordonNodeResponse) GetData() *NodeOperationStatus {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerIPs    []string `protobuf:"bytes,1,rep,name=innerIPs,proto3" json:"innerIPs,omitempty"`
	Status      string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	NodeGroupID string   `protobuf:"bytes,3,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	ClusterID   string   `protobuf:"bytes,4,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Updater     string   `protobuf:"bytes,5,opt,name=updater,proto3" json:"updater,omitempty"`
}

func (x *UpdateNodeRequest) Reset() {
	*x = UpdateNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeRequest) ProtoMessage() {}

func (x *UpdateNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{144}
}

func (x *UpdateNodeRequest) GetInnerIPs() []string {
	if x != nil {
		return x.InnerIPs
	}
	return nil
}

func (x *UpdateNodeRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateNodeRequest) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *UpdateNodeRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *UpdateNodeRequest) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

type UpdateNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool        `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *NodeStatus `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateNodeResponse) Reset() {
	*x = UpdateNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeResponse) ProtoMessage() {}

func (x *UpdateNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeResponse.ProtoReflect.Descriptor instead.
func (*UpdateNodeResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{145}
}

func (x *UpdateNodeResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateNodeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateNodeResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateNodeResponse) GetData() *NodeStatus {
	if x != nil {
		return x.Data
	}
	return nil
}

type NodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success []string `protobuf:"bytes,1,rep,name=success,proto3" json:"success,omitempty"`
	Failed  []string `protobuf:"bytes,2,rep,name=failed,proto3" json:"failed,omitempty"`
}

func (x *NodeStatus) Reset() {
	*x = NodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatus) ProtoMessage() {}

func (x *NodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatus.ProtoReflect.Descriptor instead.
func (*NodeStatus) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{146}
}

func (x *NodeStatus) GetSuccess() []string {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *NodeStatus) GetFailed() []string {
	if x != nil {
		return x.Failed
	}
	return nil
}

type UpdateClusterModuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID string         `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Module    *ClusterModule `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	Operator  string         `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *UpdateClusterModuleRequest) Reset() {
	*x = UpdateClusterModuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterModuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterModuleRequest) ProtoMessage() {}

func (x *UpdateClusterModuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterModuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterModuleRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{147}
}

func (x *UpdateClusterModuleRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *UpdateClusterModuleRequest) GetModule() *ClusterModule {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *UpdateClusterModuleRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type UpdateClusterModuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool           `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *ClusterModule `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateClusterModuleResponse) Reset() {
	*x = UpdateClusterModuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterModuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterModuleResponse) ProtoMessage() {}

func (x *UpdateClusterModuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterModuleResponse.ProtoReflect.Descriptor instead.
func (*UpdateClusterModuleResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{148}
}

func (x *UpdateClusterModuleResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateClusterModuleResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateClusterModuleResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateClusterModuleResponse) GetData() *ClusterModule {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordNodeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *RecordNodeInfoRequest) Reset() {
	*x = RecordNodeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordNodeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordNodeInfoRequest) ProtoMessage() {}

func (x *RecordNodeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordNodeInfoRequest.ProtoReflect.Descriptor instead.
func (*RecordNodeInfoRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{149}
}

func (x *RecordNodeInfoRequest) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type GetNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerIP string `protobuf:"bytes,1,opt,name=innerIP,proto3" json:"innerIP,omitempty"`
	ShowPwd bool   `protobuf:"varint,2,opt,name=showPwd,proto3" json:"showPwd,omitempty"`
}

func (x *GetNodeRequest) Reset() {
	*x = GetNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeRequest) ProtoMessage() {}

func (x *GetNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeRequest.ProtoReflect.Descriptor instead.
func (*GetNodeRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{150}
}

func (x *GetNodeRequest) GetInnerIP() string {
	if x != nil {
		return x.InnerIP
	}
	return ""
}

func (x *GetNodeRequest) GetShowPwd() bool {
	if x != nil {
		return x.ShowPwd
	}
	return false
}

type GetNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool    `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*Node `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNodeResponse) Reset() {
	*x = GetNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeResponse) ProtoMessage() {}

func (x *GetNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeResponse.ProtoReflect.Descriptor instead.
func (*GetNodeResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{151}
}

func (x *GetNodeResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetNodeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetNodeResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetNodeResponse) GetData() []*Node {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetNodeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerIP string `protobuf:"bytes,1,opt,name=innerIP,proto3" json:"innerIP,omitempty"`
}

func (x *GetNodeInfoRequest) Reset() {
	*x = GetNodeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeInfoRequest) ProtoMessage() {}

func (x *GetNodeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeInfoRequest.ProtoReflect.Descriptor instead.
func (*GetNodeInfoRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{152}
}

func (x *GetNodeInfoRequest) GetInnerIP() string {
	if x != nil {
		return x.InnerIP
	}
	return ""
}

type GetNodeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool      `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *NodeInfo `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNodeInfoResponse) Reset() {
	*x = GetNodeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeInfoResponse) ProtoMessage() {}

func (x *GetNodeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeInfoResponse.ProtoReflect.Descriptor instead.
func (*GetNodeInfoResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{153}
}

func (x *GetNodeInfoResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetNodeInfoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetNodeInfoResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetNodeInfoResponse) GetData() *NodeInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type NodeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceType string `protobuf:"bytes,1,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	CPU          uint32 `protobuf:"varint,2,opt,name=CPU,proto3" json:"CPU,omitempty"`
	Mem          uint32 `protobuf:"varint,3,opt,name=mem,proto3" json:"mem,omitempty"`
	GPU          uint32 `protobuf:"varint,4,opt,name=GPU,proto3" json:"GPU,omitempty"`
}

func (x *NodeConfig) Reset() {
	*x = NodeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfig) ProtoMessage() {}

func (x *NodeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfig.ProtoReflect.Descriptor instead.
func (*NodeConfig) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{154}
}

func (x *NodeConfig) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *NodeConfig) GetCPU() uint32 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *NodeConfig) GetMem() uint32 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *NodeConfig) GetGPU() uint32 {
	if x != nil {
		return x.GPU
	}
	return 0
}

type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName       string        `protobuf:"bytes,1,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	NodeType       string        `protobuf:"bytes,2,opt,name=nodeType,proto3" json:"nodeType,omitempty"`
	NodeID         string        `protobuf:"bytes,3,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	InnerIP        string        `protobuf:"bytes,4,opt,name=innerIP,proto3" json:"innerIP,omitempty"`
	ClusterID      string        `protobuf:"bytes,5,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	VPC            string        `protobuf:"bytes,6,opt,name=VPC,proto3" json:"VPC,omitempty"`
	Region         string        `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	DeviceID       string        `protobuf:"bytes,8,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	Status         string        `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	InstanceConfig *NodeConfig   `protobuf:"bytes,10,opt,name=instanceConfig,proto3" json:"instanceConfig,omitempty"`
	ZoneInfo       *ZoneInfo     `protobuf:"bytes,11,opt,name=zoneInfo,proto3" json:"zoneInfo,omitempty"`
	Group          *NodeGroup    `protobuf:"bytes,12,opt,name=group,proto3" json:"group,omitempty"`
	NodeTemplate   *NodeTemplate `protobuf:"bytes,13,opt,name=nodeTemplate,proto3" json:"nodeTemplate,omitempty"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{155}
}

func (x *NodeInfo) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeInfo) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

func (x *NodeInfo) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *NodeInfo) GetInnerIP() string {
	if x != nil {
		return x.InnerIP
	}
	return ""
}

func (x *NodeInfo) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *NodeInfo) GetVPC() string {
	if x != nil {
		return x.VPC
	}
	return ""
}

func (x *NodeInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *NodeInfo) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *NodeInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NodeInfo) GetInstanceConfig() *NodeConfig {
	if x != nil {
		return x.InstanceConfig
	}
	return nil
}

func (x *NodeInfo) GetZoneInfo() *ZoneInfo {
	if x != nil {
		return x.ZoneInfo
	}
	return nil
}

func (x *NodeInfo) GetGroup() *NodeGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *NodeInfo) GetNodeTemplate() *NodeTemplate {
	if x != nil {
		return x.NodeTemplate
	}
	return nil
}

type ListCommonClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowVCluster bool `protobuf:"varint,1,opt,name=showVCluster,proto3" json:"showVCluster,omitempty"`
}

func (x *ListCommonClusterReq) Reset() {
	*x = ListCommonClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommonClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommonClusterReq) ProtoMessage() {}

func (x *ListCommonClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommonClusterReq.ProtoReflect.Descriptor instead.
func (*ListCommonClusterReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{156}
}

func (x *ListCommonClusterReq) GetShowVCluster() bool {
	if x != nil {
		return x.ShowVCluster
	}
	return false
}

type ListCommonClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           []*Cluster      `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,6,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListCommonClusterResp) Reset() {
	*x = ListCommonClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommonClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommonClusterResp) ProtoMessage() {}

func (x *ListCommonClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommonClusterResp.ProtoReflect.Descriptor instead.
func (*ListCommonClusterResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{157}
}

func (x *ListCommonClusterResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCommonClusterResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCommonClusterResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListCommonClusterResp) GetData() []*Cluster {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListCommonClusterResp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListProjectClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Region    string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Provider  string `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Operator  string `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
	BizId     string `protobuf:"bytes,5,opt,name=bizId,proto3" json:"bizId,omitempty"`
}

func (x *ListProjectClusterReq) Reset() {
	*x = ListProjectClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectClusterReq) ProtoMessage() {}

func (x *ListProjectClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectClusterReq.ProtoReflect.Descriptor instead.
func (*ListProjectClusterReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{158}
}

func (x *ListProjectClusterReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListProjectClusterReq) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListProjectClusterReq) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListProjectClusterReq) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *ListProjectClusterReq) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

type ListProjectClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code             uint32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message          string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result           bool                  `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data             []*Cluster            `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	ClusterExtraInfo map[string]*ExtraInfo `protobuf:"bytes,6,rep,name=clusterExtraInfo,proto3" json:"clusterExtraInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WebAnnotations   *WebAnnotationsV2     `protobuf:"bytes,8,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListProjectClusterResp) Reset() {
	*x = ListProjectClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectClusterResp) ProtoMessage() {}

func (x *ListProjectClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectClusterResp.ProtoReflect.Descriptor instead.
func (*ListProjectClusterResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{159}
}

func (x *ListProjectClusterResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListProjectClusterResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListProjectClusterResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListProjectClusterResp) GetData() []*Cluster {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListProjectClusterResp) GetClusterExtraInfo() map[string]*ExtraInfo {
	if x != nil {
		return x.ClusterExtraInfo
	}
	return nil
}

func (x *ListProjectClusterResp) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListBusinessClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessID string `protobuf:"bytes,1,opt,name=businessID,proto3" json:"businessID,omitempty"`
	Operator   string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *ListBusinessClusterReq) Reset() {
	*x = ListBusinessClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessClusterReq) ProtoMessage() {}

func (x *ListBusinessClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessClusterReq.ProtoReflect.Descriptor instead.
func (*ListBusinessClusterReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{160}
}

func (x *ListBusinessClusterReq) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *ListBusinessClusterReq) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type ListBusinessClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*ClusterBasicInfo `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListBusinessClusterResp) Reset() {
	*x = ListBusinessClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessClusterResp) ProtoMessage() {}

func (x *ListBusinessClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessClusterResp.ProtoReflect.Descriptor instead.
func (*ListBusinessClusterResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{161}
}

func (x *ListBusinessClusterResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListBusinessClusterResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListBusinessClusterResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListBusinessClusterResp) GetData() []*ClusterBasicInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName         string `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Provider            string `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Region              string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	VpcID               string `protobuf:"bytes,5,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	ProjectID           string `protobuf:"bytes,6,opt,name=projectID,proto3" json:"projectID,omitempty"`
	BusinessID          string `protobuf:"bytes,7,opt,name=businessID,proto3" json:"businessID,omitempty"`
	Environment         string `protobuf:"bytes,8,opt,name=environment,proto3" json:"environment,omitempty"`
	EngineType          string `protobuf:"bytes,9,opt,name=engineType,proto3" json:"engineType,omitempty"`
	IsExclusive         bool   `protobuf:"varint,10,opt,name=isExclusive,proto3" json:"isExclusive,omitempty"`
	ClusterType         string `protobuf:"bytes,11,opt,name=clusterType,proto3" json:"clusterType,omitempty"`
	FederationClusterID string `protobuf:"bytes,12,opt,name=federationClusterID,proto3" json:"federationClusterID,omitempty"`
	Status              string `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	Offset              uint32 `protobuf:"varint,14,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit               uint32 `protobuf:"varint,15,opt,name=limit,proto3" json:"limit,omitempty"`
	Operator            string `protobuf:"bytes,16,opt,name=operator,proto3" json:"operator,omitempty"`
	SystemID            string `protobuf:"bytes,17,opt,name=systemID,proto3" json:"systemID,omitempty"`
	ExtraClusterID      string `protobuf:"bytes,18,opt,name=extraClusterID,proto3" json:"extraClusterID,omitempty"`
	IsCommonCluster     bool   `protobuf:"varint,19,opt,name=isCommonCluster,proto3" json:"isCommonCluster,omitempty"`
	ClusterID           string `protobuf:"bytes,20,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	All                 bool   `protobuf:"varint,21,opt,name=all,proto3" json:"all,omitempty"`
}

func (x *ListClusterReq) Reset() {
	*x = ListClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterReq) ProtoMessage() {}

func (x *ListClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterReq.ProtoReflect.Descriptor instead.
func (*ListClusterReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{162}
}

func (x *ListClusterReq) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ListClusterReq) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListClusterReq) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListClusterReq) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *ListClusterReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListClusterReq) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *ListClusterReq) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *ListClusterReq) GetEngineType() string {
	if x != nil {
		return x.EngineType
	}
	return ""
}

func (x *ListClusterReq) GetIsExclusive() bool {
	if x != nil {
		return x.IsExclusive
	}
	return false
}

func (x *ListClusterReq) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

func (x *ListClusterReq) GetFederationClusterID() string {
	if x != nil {
		return x.FederationClusterID
	}
	return ""
}

func (x *ListClusterReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListClusterReq) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListClusterReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListClusterReq) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *ListClusterReq) GetSystemID() string {
	if x != nil {
		return x.SystemID
	}
	return ""
}

func (x *ListClusterReq) GetExtraClusterID() string {
	if x != nil {
		return x.ExtraClusterID
	}
	return ""
}

func (x *ListClusterReq) GetIsCommonCluster() bool {
	if x != nil {
		return x.IsCommonCluster
	}
	return false
}

func (x *ListClusterReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ListClusterReq) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type ListClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code             uint32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message          string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result           bool                  `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data             []*Cluster            `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	ClusterExtraInfo map[string]*ExtraInfo `protobuf:"bytes,6,rep,name=clusterExtraInfo,proto3" json:"clusterExtraInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WebAnnotations   *WebAnnotations       `protobuf:"bytes,8,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListClusterResp) Reset() {
	*x = ListClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterResp) ProtoMessage() {}

func (x *ListClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterResp.ProtoReflect.Descriptor instead.
func (*ListClusterResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{163}
}

func (x *ListClusterResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListClusterResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListClusterResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListClusterResp) GetData() []*Cluster {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListClusterResp) GetClusterExtraInfo() map[string]*ExtraInfo {
	if x != nil {
		return x.ClusterExtraInfo
	}
	return nil
}

func (x *ListClusterResp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListClusterV2Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID       string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	BusinessID      string `protobuf:"bytes,2,opt,name=businessID,proto3" json:"businessID,omitempty"`
	Provider        string `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Region          string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	VpcID           string `protobuf:"bytes,5,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	Environment     string `protobuf:"bytes,6,opt,name=environment,proto3" json:"environment,omitempty"`
	EngineType      string `protobuf:"bytes,7,opt,name=engineType,proto3" json:"engineType,omitempty"`
	ClusterType     string `protobuf:"bytes,8,opt,name=clusterType,proto3" json:"clusterType,omitempty"`
	Status          string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	SystemID        string `protobuf:"bytes,10,opt,name=systemID,proto3" json:"systemID,omitempty"`
	IsCommonCluster bool   `protobuf:"varint,11,opt,name=isCommonCluster,proto3" json:"isCommonCluster,omitempty"`
	ClusterID       string `protobuf:"bytes,12,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	All             bool   `protobuf:"varint,13,opt,name=all,proto3" json:"all,omitempty"`
	Offset          uint32 `protobuf:"varint,14,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit           uint32 `protobuf:"varint,15,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListClusterV2Req) Reset() {
	*x = ListClusterV2Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterV2Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterV2Req) ProtoMessage() {}

func (x *ListClusterV2Req) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterV2Req.ProtoReflect.Descriptor instead.
func (*ListClusterV2Req) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{164}
}

func (x *ListClusterV2Req) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListClusterV2Req) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *ListClusterV2Req) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListClusterV2Req) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListClusterV2Req) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *ListClusterV2Req) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *ListClusterV2Req) GetEngineType() string {
	if x != nil {
		return x.EngineType
	}
	return ""
}

func (x *ListClusterV2Req) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

func (x *ListClusterV2Req) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListClusterV2Req) GetSystemID() string {
	if x != nil {
		return x.SystemID
	}
	return ""
}

func (x *ListClusterV2Req) GetIsCommonCluster() bool {
	if x != nil {
		return x.IsCommonCluster
	}
	return false
}

func (x *ListClusterV2Req) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ListClusterV2Req) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *ListClusterV2Req) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListClusterV2Req) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListClusterV2Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*ClusterBasicInfo `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListClusterV2Resp) Reset() {
	*x = ListClusterV2Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterV2Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterV2Resp) ProtoMessage() {}

func (x *ListClusterV2Resp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterV2Resp.ProtoReflect.Descriptor instead.
func (*ListClusterV2Resp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{165}
}

func (x *ListClusterV2Resp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListClusterV2Resp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListClusterV2Resp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListClusterV2Resp) GetData() []*ClusterBasicInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanDeleted   bool   `protobuf:"varint,1,opt,name=canDeleted,proto3" json:"canDeleted,omitempty"`
	ProviderType string `protobuf:"bytes,2,opt,name=providerType,proto3" json:"providerType,omitempty"`
	AutoScale    bool   `protobuf:"varint,3,opt,name=autoScale,proto3" json:"autoScale,omitempty"`
}

func (x *ExtraInfo) Reset() {
	*x = ExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraInfo) ProtoMessage() {}

func (x *ExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraInfo.ProtoReflect.Descriptor instead.
func (*ExtraInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{166}
}

func (x *ExtraInfo) GetCanDeleted() bool {
	if x != nil {
		return x.CanDeleted
	}
	return false
}

func (x *ExtraInfo) GetProviderType() string {
	if x != nil {
		return x.ProviderType
	}
	return ""
}

func (x *ExtraInfo) GetAutoScale() bool {
	if x != nil {
		return x.AutoScale
	}
	return false
}

// https://github.com/golang/protobuf/issues/1118
// https://pkg.go.dev/google.golang.org/protobuf/types/known/structpb#Struct
type WebAnnotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Perms map[string]*_struct.Struct `protobuf:"bytes,1,rep,name=perms,proto3" json:"perms,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WebAnnotations) Reset() {
	*x = WebAnnotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebAnnotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebAnnotations) ProtoMessage() {}

func (x *WebAnnotations) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebAnnotations.ProtoReflect.Descriptor instead.
func (*WebAnnotations) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{167}
}

func (x *WebAnnotations) GetPerms() map[string]*_struct.Struct {
	if x != nil {
		return x.Perms
	}
	return nil
}

type WebAnnotationsV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Perms *_struct.Struct `protobuf:"bytes,1,opt,name=perms,proto3" json:"perms,omitempty"`
}

func (x *WebAnnotationsV2) Reset() {
	*x = WebAnnotationsV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebAnnotationsV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebAnnotationsV2) ProtoMessage() {}

func (x *WebAnnotationsV2) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebAnnotationsV2.ProtoReflect.Descriptor instead.
func (*WebAnnotationsV2) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{168}
}

func (x *WebAnnotationsV2) GetPerms() *_struct.Struct {
	if x != nil {
		return x.Perms
	}
	return nil
}

type ListNodesInClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID    string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Region       string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	VpcID        string `protobuf:"bytes,3,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	NodeGroupID  string `protobuf:"bytes,4,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	InstanceType string `protobuf:"bytes,5,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Status       string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Offset       uint32 `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit        uint32 `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	ShowPwd      bool   `protobuf:"varint,9,opt,name=showPwd,proto3" json:"showPwd,omitempty"`
}

func (x *ListNodesInClusterRequest) Reset() {
	*x = ListNodesInClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodesInClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesInClusterRequest) ProtoMessage() {}

func (x *ListNodesInClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesInClusterRequest.ProtoReflect.Descriptor instead.
func (*ListNodesInClusterRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{169}
}

func (x *ListNodesInClusterRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ListNodesInClusterRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListNodesInClusterRequest) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *ListNodesInClusterRequest) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *ListNodesInClusterRequest) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *ListNodesInClusterRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListNodesInClusterRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListNodesInClusterRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListNodesInClusterRequest) GetShowPwd() bool {
	if x != nil {
		return x.ShowPwd
	}
	return false
}

type ListNodesInClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           []*ClusterNode    `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListNodesInClusterResponse) Reset() {
	*x = ListNodesInClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodesInClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesInClusterResponse) ProtoMessage() {}

func (x *ListNodesInClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesInClusterResponse.ProtoReflect.Descriptor instead.
func (*ListNodesInClusterResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{170}
}

func (x *ListNodesInClusterResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListNodesInClusterResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListNodesInClusterResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListNodesInClusterResponse) GetData() []*ClusterNode {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListNodesInClusterResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ClusterNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeID        string            `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	InnerIP       string            `protobuf:"bytes,2,opt,name=innerIP,proto3" json:"innerIP,omitempty"`
	InstanceType  string            `protobuf:"bytes,3,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	CPU           uint32            `protobuf:"varint,4,opt,name=CPU,proto3" json:"CPU,omitempty"`
	Mem           uint32            `protobuf:"varint,5,opt,name=mem,proto3" json:"mem,omitempty"`
	GPU           uint32            `protobuf:"varint,6,opt,name=GPU,proto3" json:"GPU,omitempty"`
	Status        string            `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	ZoneID        string            `protobuf:"bytes,8,opt,name=zoneID,proto3" json:"zoneID,omitempty"`
	NodeGroupID   string            `protobuf:"bytes,9,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	ClusterID     string            `protobuf:"bytes,10,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	VPC           string            `protobuf:"bytes,11,opt,name=VPC,proto3" json:"VPC,omitempty"`
	Region        string            `protobuf:"bytes,12,opt,name=region,proto3" json:"region,omitempty"`
	Passwd        string            `protobuf:"bytes,13,opt,name=passwd,proto3" json:"passwd,omitempty"`
	Zone          uint32            `protobuf:"varint,14,opt,name=zone,proto3" json:"zone,omitempty"`
	DeviceID      string            `protobuf:"bytes,15,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	Labels        map[string]string `protobuf:"bytes,16,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Taints        []*Taint          `protobuf:"bytes,17,rep,name=taints,proto3" json:"taints,omitempty"`
	UnSchedulable uint32            `protobuf:"varint,18,opt,name=unSchedulable,proto3" json:"unSchedulable,omitempty"`
	NodeName      string            `protobuf:"bytes,19,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	Agent         uint32            `protobuf:"varint,20,opt,name=agent,proto3" json:"agent,omitempty"`
	Idc           string            `protobuf:"bytes,21,opt,name=idc,proto3" json:"idc,omitempty"`
	Rack          string            `protobuf:"bytes,22,opt,name=rack,proto3" json:"rack,omitempty"`
	DeviceClass   string            `protobuf:"bytes,23,opt,name=deviceClass,proto3" json:"deviceClass,omitempty"`
	InnerIPv6     string            `protobuf:"bytes,24,opt,name=innerIPv6,proto3" json:"innerIPv6,omitempty"`
	NodeGroupName string            `protobuf:"bytes,25,opt,name=nodeGroupName,proto3" json:"nodeGroupName,omitempty"`
	BkCloudID     uint32            `protobuf:"varint,26,opt,name=bkCloudID,proto3" json:"bkCloudID,omitempty"`
	Annotations   map[string]string `protobuf:"bytes,27,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ZoneName      string            `protobuf:"bytes,28,opt,name=zoneName,proto3" json:"zoneName,omitempty"`
	TaskID        string            `protobuf:"bytes,29,opt,name=taskID,proto3" json:"taskID,omitempty"`
	FailedReason  string            `protobuf:"bytes,30,opt,name=failedReason,proto3" json:"failedReason,omitempty"`
}

func (x *ClusterNode) Reset() {
	*x = ClusterNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNode) ProtoMessage() {}

func (x *ClusterNode) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNode.ProtoReflect.Descriptor instead.
func (*ClusterNode) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{171}
}

func (x *ClusterNode) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *ClusterNode) GetInnerIP() string {
	if x != nil {
		return x.InnerIP
	}
	return ""
}

func (x *ClusterNode) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *ClusterNode) GetCPU() uint32 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *ClusterNode) GetMem() uint32 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *ClusterNode) GetGPU() uint32 {
	if x != nil {
		return x.GPU
	}
	return 0
}

func (x *ClusterNode) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ClusterNode) GetZoneID() string {
	if x != nil {
		return x.ZoneID
	}
	return ""
}

func (x *ClusterNode) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *ClusterNode) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ClusterNode) GetVPC() string {
	if x != nil {
		return x.VPC
	}
	return ""
}

func (x *ClusterNode) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ClusterNode) GetPasswd() string {
	if x != nil {
		return x.Passwd
	}
	return ""
}

func (x *ClusterNode) GetZone() uint32 {
	if x != nil {
		return x.Zone
	}
	return 0
}

func (x *ClusterNode) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *ClusterNode) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ClusterNode) GetTaints() []*Taint {
	if x != nil {
		return x.Taints
	}
	return nil
}

func (x *ClusterNode) GetUnSchedulable() uint32 {
	if x != nil {
		return x.UnSchedulable
	}
	return 0
}

func (x *ClusterNode) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *ClusterNode) GetAgent() uint32 {
	if x != nil {
		return x.Agent
	}
	return 0
}

func (x *ClusterNode) GetIdc() string {
	if x != nil {
		return x.Idc
	}
	return ""
}

func (x *ClusterNode) GetRack() string {
	if x != nil {
		return x.Rack
	}
	return ""
}

func (x *ClusterNode) GetDeviceClass() string {
	if x != nil {
		return x.DeviceClass
	}
	return ""
}

func (x *ClusterNode) GetInnerIPv6() string {
	if x != nil {
		return x.InnerIPv6
	}
	return ""
}

func (x *ClusterNode) GetNodeGroupName() string {
	if x != nil {
		return x.NodeGroupName
	}
	return ""
}

func (x *ClusterNode) GetBkCloudID() uint32 {
	if x != nil {
		return x.BkCloudID
	}
	return 0
}

func (x *ClusterNode) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ClusterNode) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *ClusterNode) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *ClusterNode) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

type GetClustersMetaDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters []string `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *GetClustersMetaDataRequest) Reset() {
	*x = GetClustersMetaDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClustersMetaDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClustersMetaDataRequest) ProtoMessage() {}

func (x *GetClustersMetaDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClustersMetaDataRequest.ProtoReflect.Descriptor instead.
func (*GetClustersMetaDataRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{172}
}

func (x *GetClustersMetaDataRequest) GetClusters() []string {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type GetClustersMetaDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           []*ClusterMeta    `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetClustersMetaDataResponse) Reset() {
	*x = GetClustersMetaDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClustersMetaDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClustersMetaDataResponse) ProtoMessage() {}

func (x *GetClustersMetaDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClustersMetaDataResponse.ProtoReflect.Descriptor instead.
func (*GetClustersMetaDataResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{173}
}

func (x *GetClustersMetaDataResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetClustersMetaDataResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetClustersMetaDataResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetClustersMetaDataResponse) GetData() []*ClusterMeta {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetClustersMetaDataResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ClusterMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId      string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ClusterNodeNum uint32 `protobuf:"varint,2,opt,name=clusterNodeNum,proto3" json:"clusterNodeNum,omitempty"`
}

func (x *ClusterMeta) Reset() {
	*x = ClusterMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMeta) ProtoMessage() {}

func (x *ClusterMeta) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMeta.ProtoReflect.Descriptor instead.
func (*ClusterMeta) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{174}
}

func (x *ClusterMeta) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterMeta) GetClusterNodeNum() uint32 {
	if x != nil {
		return x.ClusterNodeNum
	}
	return 0
}

type ListMastersInClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
}

func (x *ListMastersInClusterRequest) Reset() {
	*x = ListMastersInClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMastersInClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMastersInClusterRequest) ProtoMessage() {}

func (x *ListMastersInClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMastersInClusterRequest.ProtoReflect.Descriptor instead.
func (*ListMastersInClusterRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{175}
}

func (x *ListMastersInClusterRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

type ListMastersInClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           []*ClusterNode    `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListMastersInClusterResponse) Reset() {
	*x = ListMastersInClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMastersInClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMastersInClusterResponse) ProtoMessage() {}

func (x *ListMastersInClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMastersInClusterResponse.ProtoReflect.Descriptor instead.
func (*ListMastersInClusterResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{176}
}

func (x *ListMastersInClusterResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListMastersInClusterResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListMastersInClusterResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListMastersInClusterResponse) GetData() []*ClusterNode {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListMastersInClusterResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type GetClusterCredentialReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerKey string `protobuf:"bytes,1,opt,name=serverKey,proto3" json:"serverKey,omitempty"`
}

func (x *GetClusterCredentialReq) Reset() {
	*x = GetClusterCredentialReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterCredentialReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterCredentialReq) ProtoMessage() {}

func (x *GetClusterCredentialReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterCredentialReq.ProtoReflect.Descriptor instead.
func (*GetClusterCredentialReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{177}
}

func (x *GetClusterCredentialReq) GetServerKey() string {
	if x != nil {
		return x.ServerKey
	}
	return ""
}

type GetClusterCredentialResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool               `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *ClusterCredential `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetClusterCredentialResp) Reset() {
	*x = GetClusterCredentialResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterCredentialResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterCredentialResp) ProtoMessage() {}

func (x *GetClusterCredentialResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterCredentialResp.ProtoReflect.Descriptor instead.
func (*GetClusterCredentialResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{178}
}

func (x *GetClusterCredentialResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetClusterCredentialResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetClusterCredentialResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetClusterCredentialResp) GetData() *ClusterCredential {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateClusterCredentialReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerKey     string `protobuf:"bytes,1,opt,name=serverKey,proto3" json:"serverKey,omitempty"`
	ClusterID     string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ClientModule  string `protobuf:"bytes,3,opt,name=clientModule,proto3" json:"clientModule,omitempty"`
	ServerAddress string `protobuf:"bytes,4,opt,name=serverAddress,proto3" json:"serverAddress,omitempty"`
	CaCertData    string `protobuf:"bytes,5,opt,name=caCertData,proto3" json:"caCertData,omitempty"`
	UserToken     string `protobuf:"bytes,6,opt,name=userToken,proto3" json:"userToken,omitempty"`
	ClusterDomain string `protobuf:"bytes,7,opt,name=clusterDomain,proto3" json:"clusterDomain,omitempty"`
	ClientCert    string `protobuf:"bytes,8,opt,name=clientCert,proto3" json:"clientCert,omitempty"`
	ClientKey     string `protobuf:"bytes,9,opt,name=clientKey,proto3" json:"clientKey,omitempty"`
}

func (x *UpdateClusterCredentialReq) Reset() {
	*x = UpdateClusterCredentialReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterCredentialReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterCredentialReq) ProtoMessage() {}

func (x *UpdateClusterCredentialReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterCredentialReq.ProtoReflect.Descriptor instead.
func (*UpdateClusterCredentialReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{179}
}

func (x *UpdateClusterCredentialReq) GetServerKey() string {
	if x != nil {
		return x.ServerKey
	}
	return ""
}

func (x *UpdateClusterCredentialReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *UpdateClusterCredentialReq) GetClientModule() string {
	if x != nil {
		return x.ClientModule
	}
	return ""
}

func (x *UpdateClusterCredentialReq) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *UpdateClusterCredentialReq) GetCaCertData() string {
	if x != nil {
		return x.CaCertData
	}
	return ""
}

func (x *UpdateClusterCredentialReq) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *UpdateClusterCredentialReq) GetClusterDomain() string {
	if x != nil {
		return x.ClusterDomain
	}
	return ""
}

func (x *UpdateClusterCredentialReq) GetClientCert() string {
	if x != nil {
		return x.ClientCert
	}
	return ""
}

func (x *UpdateClusterCredentialReq) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

type UpdateClusterCredentialResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UpdateClusterCredentialResp) Reset() {
	*x = UpdateClusterCredentialResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterCredentialResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterCredentialResp) ProtoMessage() {}

func (x *UpdateClusterCredentialResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterCredentialResp.ProtoReflect.Descriptor instead.
func (*UpdateClusterCredentialResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{180}
}

func (x *UpdateClusterCredentialResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateClusterCredentialResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateClusterCredentialResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type UpdateClusterKubeConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID  string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	KubeConfig string `protobuf:"bytes,2,opt,name=kubeConfig,proto3" json:"kubeConfig,omitempty"`
}

func (x *UpdateClusterKubeConfigReq) Reset() {
	*x = UpdateClusterKubeConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterKubeConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterKubeConfigReq) ProtoMessage() {}

func (x *UpdateClusterKubeConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterKubeConfigReq.ProtoReflect.Descriptor instead.
func (*UpdateClusterKubeConfigReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{181}
}

func (x *UpdateClusterKubeConfigReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *UpdateClusterKubeConfigReq) GetKubeConfig() string {
	if x != nil {
		return x.KubeConfig
	}
	return ""
}

type UpdateClusterKubeConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UpdateClusterKubeConfigResp) Reset() {
	*x = UpdateClusterKubeConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterKubeConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterKubeConfigResp) ProtoMessage() {}

func (x *UpdateClusterKubeConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterKubeConfigResp.ProtoReflect.Descriptor instead.
func (*UpdateClusterKubeConfigResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{182}
}

func (x *UpdateClusterKubeConfigResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateClusterKubeConfigResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateClusterKubeConfigResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type DeleteClusterCredentialReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerKey string `protobuf:"bytes,1,opt,name=serverKey,proto3" json:"serverKey,omitempty"`
}

func (x *DeleteClusterCredentialReq) Reset() {
	*x = DeleteClusterCredentialReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterCredentialReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterCredentialReq) ProtoMessage() {}

func (x *DeleteClusterCredentialReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterCredentialReq.ProtoReflect.Descriptor instead.
func (*DeleteClusterCredentialReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{183}
}

func (x *DeleteClusterCredentialReq) GetServerKey() string {
	if x != nil {
		return x.ServerKey
	}
	return ""
}

type DeleteClusterCredentialResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DeleteClusterCredentialResp) Reset() {
	*x = DeleteClusterCredentialResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterCredentialResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterCredentialResp) ProtoMessage() {}

func (x *DeleteClusterCredentialResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterCredentialResp.ProtoReflect.Descriptor instead.
func (*DeleteClusterCredentialResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{184}
}

func (x *DeleteClusterCredentialResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteClusterCredentialResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteClusterCredentialResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListClusterCredentialReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerKey   string `protobuf:"bytes,1,opt,name=serverKey,proto3" json:"serverKey,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ClientMode  string `protobuf:"bytes,3,opt,name=clientMode,proto3" json:"clientMode,omitempty"`
	ConnectMode string `protobuf:"bytes,4,opt,name=connectMode,proto3" json:"connectMode,omitempty"`
	Offset      uint32 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       uint32 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListClusterCredentialReq) Reset() {
	*x = ListClusterCredentialReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterCredentialReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterCredentialReq) ProtoMessage() {}

func (x *ListClusterCredentialReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterCredentialReq.ProtoReflect.Descriptor instead.
func (*ListClusterCredentialReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{185}
}

func (x *ListClusterCredentialReq) GetServerKey() string {
	if x != nil {
		return x.ServerKey
	}
	return ""
}

func (x *ListClusterCredentialReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ListClusterCredentialReq) GetClientMode() string {
	if x != nil {
		return x.ClientMode
	}
	return ""
}

func (x *ListClusterCredentialReq) GetConnectMode() string {
	if x != nil {
		return x.ConnectMode
	}
	return ""
}

func (x *ListClusterCredentialReq) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListClusterCredentialReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListClusterCredentialResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                 `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*ClusterCredential `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListClusterCredentialResp) Reset() {
	*x = ListClusterCredentialResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterCredentialResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterCredentialResp) ProtoMessage() {}

func (x *ListClusterCredentialResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterCredentialResp.ProtoReflect.Descriptor instead.
func (*ListClusterCredentialResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{186}
}

func (x *ListClusterCredentialResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListClusterCredentialResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListClusterCredentialResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListClusterCredentialResp) GetData() []*ClusterCredential {
	if x != nil {
		return x.Data
	}
	return nil
}

type InitFederationClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitFederationClusterReq) Reset() {
	*x = InitFederationClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitFederationClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitFederationClusterReq) ProtoMessage() {}

func (x *InitFederationClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitFederationClusterReq.ProtoReflect.Descriptor instead.
func (*InitFederationClusterReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{187}
}

type InitFederationClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitFederationClusterResp) Reset() {
	*x = InitFederationClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitFederationClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitFederationClusterResp) ProtoMessage() {}

func (x *InitFederationClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitFederationClusterResp.ProtoReflect.Descriptor instead.
func (*InitFederationClusterResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{188}
}

type AddFederatedClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FederationClusterID string `protobuf:"bytes,1,opt,name=federationClusterID,proto3" json:"federationClusterID,omitempty"`
	ClusterID           string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
}

func (x *AddFederatedClusterReq) Reset() {
	*x = AddFederatedClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFederatedClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFederatedClusterReq) ProtoMessage() {}

func (x *AddFederatedClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFederatedClusterReq.ProtoReflect.Descriptor instead.
func (*AddFederatedClusterReq) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{189}
}

func (x *AddFederatedClusterReq) GetFederationClusterID() string {
	if x != nil {
		return x.FederationClusterID
	}
	return ""
}

func (x *AddFederatedClusterReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

type AddFederatedClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AddFederatedClusterResp) Reset() {
	*x = AddFederatedClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFederatedClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFederatedClusterResp) ProtoMessage() {}

func (x *AddFederatedClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFederatedClusterResp.ProtoReflect.Descriptor instead.
func (*AddFederatedClusterResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{190}
}

func (x *AddFederatedClusterResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddFederatedClusterResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddFederatedClusterResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CreateCloudRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID             string                  `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Name                string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Editable            bool                    `protobuf:"varint,3,opt,name=editable,proto3" json:"editable,omitempty"`
	OpsPlugins          map[string]*BKOpsPlugin `protobuf:"bytes,4,rep,name=opsPlugins,proto3" json:"opsPlugins,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExtraPlugins        map[string]*BKOpsPlugin `protobuf:"bytes,5,rep,name=extraPlugins,proto3" json:"extraPlugins,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CloudCredential     *Credential             `protobuf:"bytes,6,opt,name=cloudCredential,proto3" json:"cloudCredential,omitempty"`
	OsManagement        *OSInfo                 `protobuf:"bytes,7,opt,name=osManagement,proto3" json:"osManagement,omitempty"`
	ClusterManagement   *ClusterMgr             `protobuf:"bytes,8,opt,name=clusterManagement,proto3" json:"clusterManagement,omitempty"`
	NodeGroupManagement *NodeGroupMgr           `protobuf:"bytes,10,opt,name=nodeGroupManagement,proto3" json:"nodeGroupManagement,omitempty"`
	Creator             string                  `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
	CloudProvider       string                  `protobuf:"bytes,12,opt,name=cloudProvider,proto3" json:"cloudProvider,omitempty"`
	Config              string                  `protobuf:"bytes,13,opt,name=config,proto3" json:"config,omitempty"`
	Description         string                  `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	EngineType          string                  `protobuf:"bytes,15,opt,name=engineType,proto3" json:"engineType,omitempty"`
	Enable              string                  `protobuf:"bytes,16,opt,name=enable,proto3" json:"enable,omitempty"`
	NetworkInfo         *CloudNetworkInfo       `protobuf:"bytes,17,opt,name=networkInfo,proto3" json:"networkInfo,omitempty"`
	ConfInfo            *CloudConfigInfo        `protobuf:"bytes,18,opt,name=confInfo,proto3" json:"confInfo,omitempty"`
	PlatformInfo        map[string]string       `protobuf:"bytes,19,rep,name=platformInfo,proto3" json:"platformInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateCloudRequest) Reset() {
	*x = CreateCloudRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudRequest) ProtoMessage() {}

func (x *CreateCloudRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{191}
}

func (x *CreateCloudRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *CreateCloudRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCloudRequest) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *CreateCloudRequest) GetOpsPlugins() map[string]*BKOpsPlugin {
	if x != nil {
		return x.OpsPlugins
	}
	return nil
}

func (x *CreateCloudRequest) GetExtraPlugins() map[string]*BKOpsPlugin {
	if x != nil {
		return x.ExtraPlugins
	}
	return nil
}

func (x *CreateCloudRequest) GetCloudCredential() *Credential {
	if x != nil {
		return x.CloudCredential
	}
	return nil
}

func (x *CreateCloudRequest) GetOsManagement() *OSInfo {
	if x != nil {
		return x.OsManagement
	}
	return nil
}

func (x *CreateCloudRequest) GetClusterManagement() *ClusterMgr {
	if x != nil {
		return x.ClusterManagement
	}
	return nil
}

func (x *CreateCloudRequest) GetNodeGroupManagement() *NodeGroupMgr {
	if x != nil {
		return x.NodeGroupManagement
	}
	return nil
}

func (x *CreateCloudRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreateCloudRequest) GetCloudProvider() string {
	if x != nil {
		return x.CloudProvider
	}
	return ""
}

func (x *CreateCloudRequest) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *CreateCloudRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateCloudRequest) GetEngineType() string {
	if x != nil {
		return x.EngineType
	}
	return ""
}

func (x *CreateCloudRequest) GetEnable() string {
	if x != nil {
		return x.Enable
	}
	return ""
}

func (x *CreateCloudRequest) GetNetworkInfo() *CloudNetworkInfo {
	if x != nil {
		return x.NetworkInfo
	}
	return nil
}

func (x *CreateCloudRequest) GetConfInfo() *CloudConfigInfo {
	if x != nil {
		return x.ConfInfo
	}
	return nil
}

func (x *CreateCloudRequest) GetPlatformInfo() map[string]string {
	if x != nil {
		return x.PlatformInfo
	}
	return nil
}

type CreateCloudResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateCloudResponse) Reset() {
	*x = CreateCloudResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResponse) ProtoMessage() {}

func (x *CreateCloudResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResponse.ProtoReflect.Descriptor instead.
func (*CreateCloudResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{192}
}

func (x *CreateCloudResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateCloudResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateCloudResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type UpdateCloudRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID             string                  `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Name                string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Editable            bool                    `protobuf:"varint,3,opt,name=editable,proto3" json:"editable,omitempty"`
	OpsPlugins          map[string]*BKOpsPlugin `protobuf:"bytes,4,rep,name=opsPlugins,proto3" json:"opsPlugins,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExtraPlugins        map[string]*BKOpsPlugin `protobuf:"bytes,5,rep,name=extraPlugins,proto3" json:"extraPlugins,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CloudCredential     *Credential             `protobuf:"bytes,6,opt,name=cloudCredential,proto3" json:"cloudCredential,omitempty"`
	OsManagement        *OSInfo                 `protobuf:"bytes,7,opt,name=osManagement,proto3" json:"osManagement,omitempty"`
	ClusterManagement   *ClusterMgr             `protobuf:"bytes,8,opt,name=clusterManagement,proto3" json:"clusterManagement,omitempty"`
	NodeGroupManagement *NodeGroupMgr           `protobuf:"bytes,10,opt,name=nodeGroupManagement,proto3" json:"nodeGroupManagement,omitempty"`
	Updater             string                  `protobuf:"bytes,11,opt,name=updater,proto3" json:"updater,omitempty"`
	CloudProvider       string                  `protobuf:"bytes,12,opt,name=cloudProvider,proto3" json:"cloudProvider,omitempty"`
	Config              string                  `protobuf:"bytes,13,opt,name=config,proto3" json:"config,omitempty"`
	Description         string                  `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	EngineType          string                  `protobuf:"bytes,15,opt,name=engineType,proto3" json:"engineType,omitempty"`
	Enable              string                  `protobuf:"bytes,16,opt,name=enable,proto3" json:"enable,omitempty"`
	NetworkInfo         *CloudNetworkInfo       `protobuf:"bytes,17,opt,name=networkInfo,proto3" json:"networkInfo,omitempty"`
	ConfInfo            *CloudConfigInfo        `protobuf:"bytes,18,opt,name=confInfo,proto3" json:"confInfo,omitempty"`
	PlatformInfo        map[string]string       `protobuf:"bytes,19,rep,name=platformInfo,proto3" json:"platformInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateCloudRequest) Reset() {
	*x = UpdateCloudRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloudRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudRequest) ProtoMessage() {}

func (x *UpdateCloudRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudRequest.ProtoReflect.Descriptor instead.
func (*UpdateCloudRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{193}
}

func (x *UpdateCloudRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *UpdateCloudRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCloudRequest) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *UpdateCloudRequest) GetOpsPlugins() map[string]*BKOpsPlugin {
	if x != nil {
		return x.OpsPlugins
	}
	return nil
}

func (x *UpdateCloudRequest) GetExtraPlugins() map[string]*BKOpsPlugin {
	if x != nil {
		return x.ExtraPlugins
	}
	return nil
}

func (x *UpdateCloudRequest) GetCloudCredential() *Credential {
	if x != nil {
		return x.CloudCredential
	}
	return nil
}

func (x *UpdateCloudRequest) GetOsManagement() *OSInfo {
	if x != nil {
		return x.OsManagement
	}
	return nil
}

func (x *UpdateCloudRequest) GetClusterManagement() *ClusterMgr {
	if x != nil {
		return x.ClusterManagement
	}
	return nil
}

func (x *UpdateCloudRequest) GetNodeGroupManagement() *NodeGroupMgr {
	if x != nil {
		return x.NodeGroupManagement
	}
	return nil
}

func (x *UpdateCloudRequest) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *UpdateCloudRequest) GetCloudProvider() string {
	if x != nil {
		return x.CloudProvider
	}
	return ""
}

func (x *UpdateCloudRequest) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *UpdateCloudRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateCloudRequest) GetEngineType() string {
	if x != nil {
		return x.EngineType
	}
	return ""
}

func (x *UpdateCloudRequest) GetEnable() string {
	if x != nil {
		return x.Enable
	}
	return ""
}

func (x *UpdateCloudRequest) GetNetworkInfo() *CloudNetworkInfo {
	if x != nil {
		return x.NetworkInfo
	}
	return nil
}

func (x *UpdateCloudRequest) GetConfInfo() *CloudConfigInfo {
	if x != nil {
		return x.ConfInfo
	}
	return nil
}

func (x *UpdateCloudRequest) GetPlatformInfo() map[string]string {
	if x != nil {
		return x.PlatformInfo
	}
	return nil
}

type UpdateCloudResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *Cloud `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateCloudResponse) Reset() {
	*x = UpdateCloudResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloudResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudResponse) ProtoMessage() {}

func (x *UpdateCloudResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudResponse.ProtoReflect.Descriptor instead.
func (*UpdateCloudResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{194}
}

func (x *UpdateCloudResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateCloudResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateCloudResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateCloudResponse) GetData() *Cloud {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteCloudRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	IsForce bool   `protobuf:"varint,2,opt,name=isForce,proto3" json:"isForce,omitempty"`
}

func (x *DeleteCloudRequest) Reset() {
	*x = DeleteCloudRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudRequest) ProtoMessage() {}

func (x *DeleteCloudRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloudRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{195}
}

func (x *DeleteCloudRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *DeleteCloudRequest) GetIsForce() bool {
	if x != nil {
		return x.IsForce
	}
	return false
}

type DeleteCloudResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *Cloud `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteCloudResponse) Reset() {
	*x = DeleteCloudResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudResponse) ProtoMessage() {}

func (x *DeleteCloudResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudResponse.ProtoReflect.Descriptor instead.
func (*DeleteCloudResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{196}
}

func (x *DeleteCloudResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteCloudResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteCloudResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteCloudResponse) GetData() *Cloud {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCloudRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID    string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	BusinessID string `protobuf:"bytes,2,opt,name=businessID,proto3" json:"businessID,omitempty"`
}

func (x *GetCloudRequest) Reset() {
	*x = GetCloudRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudRequest) ProtoMessage() {}

func (x *GetCloudRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudRequest.ProtoReflect.Descriptor instead.
func (*GetCloudRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{197}
}

func (x *GetCloudRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *GetCloudRequest) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

type GetCloudResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *Cloud `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCloudResponse) Reset() {
	*x = GetCloudResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudResponse) ProtoMessage() {}

func (x *GetCloudResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudResponse.ProtoReflect.Descriptor instead.
func (*GetCloudResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{198}
}

func (x *GetCloudResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCloudResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCloudResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetCloudResponse) GetData() *Cloud {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCloudRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID       string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Editable      bool   `protobuf:"varint,3,opt,name=editable,proto3" json:"editable,omitempty"`
	Creator       string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater       string `protobuf:"bytes,5,opt,name=updater,proto3" json:"updater,omitempty"`
	CloudProvider string `protobuf:"bytes,6,opt,name=cloudProvider,proto3" json:"cloudProvider,omitempty"`
	BusinessID    string `protobuf:"bytes,7,opt,name=businessID,proto3" json:"businessID,omitempty"`
}

func (x *ListCloudRequest) Reset() {
	*x = ListCloudRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudRequest) ProtoMessage() {}

func (x *ListCloudRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudRequest.ProtoReflect.Descriptor instead.
func (*ListCloudRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{199}
}

func (x *ListCloudRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *ListCloudRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListCloudRequest) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *ListCloudRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ListCloudRequest) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *ListCloudRequest) GetCloudProvider() string {
	if x != nil {
		return x.CloudProvider
	}
	return ""
}

func (x *ListCloudRequest) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

type ListCloudResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool     `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*Cloud `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudResponse) Reset() {
	*x = ListCloudResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResponse) ProtoMessage() {}

func (x *ListCloudResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResponse.ProtoReflect.Descriptor instead.
func (*ListCloudResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{200}
}

func (x *ListCloudResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCloudResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCloudResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListCloudResponse) GetData() []*Cloud {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateNodeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ClusterID       string               `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Region          string               `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	EnableAutoscale bool                 `protobuf:"varint,4,opt,name=enableAutoscale,proto3" json:"enableAutoscale,omitempty"`
	AutoScaling     *AutoScalingGroup    `protobuf:"bytes,5,opt,name=autoScaling,proto3" json:"autoScaling,omitempty"`
	LaunchTemplate  *LaunchConfiguration `protobuf:"bytes,6,opt,name=launchTemplate,proto3" json:"launchTemplate,omitempty"`
	Labels          map[string]string    `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Taints          map[string]string    `protobuf:"bytes,8,rep,name=taints,proto3" json:"taints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NodeOS          string               `protobuf:"bytes,9,opt,name=nodeOS,proto3" json:"nodeOS,omitempty"`
	Creator         string               `protobuf:"bytes,10,opt,name=creator,proto3" json:"creator,omitempty"`
	Provider        string               `protobuf:"bytes,11,opt,name=provider,proto3" json:"provider,omitempty"`
	ConsumerID      string               `protobuf:"bytes,18,opt,name=consumerID,proto3" json:"consumerID,omitempty"`
	NodeTemplate    *NodeTemplate        `protobuf:"bytes,19,opt,name=nodeTemplate,proto3" json:"nodeTemplate,omitempty"`
	Tags            map[string]string    `protobuf:"bytes,20,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NodeGroupType   string               `protobuf:"bytes,21,opt,name=nodeGroupType,proto3" json:"nodeGroupType,omitempty"`
	BkCloudID       uint32               `protobuf:"varint,22,opt,name=bkCloudID,proto3" json:"bkCloudID,omitempty"`
	CloudAreaName   string               `protobuf:"bytes,23,opt,name=cloudAreaName,proto3" json:"cloudAreaName,omitempty"`
	Extra           *GroupExtraInfo      `protobuf:"bytes,24,opt,name=extra,proto3" json:"extra,omitempty"`
	OnlyCreateInfo  bool                 `protobuf:"varint,25,opt,name=onlyCreateInfo,proto3" json:"onlyCreateInfo,omitempty"`
}

func (x *CreateNodeGroupRequest) Reset() {
	*x = CreateNodeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeGroupRequest) ProtoMessage() {}

func (x *CreateNodeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateNodeGroupRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{201}
}

func (x *CreateNodeGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNodeGroupRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *CreateNodeGroupRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreateNodeGroupRequest) GetEnableAutoscale() bool {
	if x != nil {
		return x.EnableAutoscale
	}
	return false
}

func (x *CreateNodeGroupRequest) GetAutoScaling() *AutoScalingGroup {
	if x != nil {
		return x.AutoScaling
	}
	return nil
}

func (x *CreateNodeGroupRequest) GetLaunchTemplate() *LaunchConfiguration {
	if x != nil {
		return x.LaunchTemplate
	}
	return nil
}

func (x *CreateNodeGroupRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateNodeGroupRequest) GetTaints() map[string]string {
	if x != nil {
		return x.Taints
	}
	return nil
}

func (x *CreateNodeGroupRequest) GetNodeOS() string {
	if x != nil {
		return x.NodeOS
	}
	return ""
}

func (x *CreateNodeGroupRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreateNodeGroupRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CreateNodeGroupRequest) GetConsumerID() string {
	if x != nil {
		return x.ConsumerID
	}
	return ""
}

func (x *CreateNodeGroupRequest) GetNodeTemplate() *NodeTemplate {
	if x != nil {
		return x.NodeTemplate
	}
	return nil
}

func (x *CreateNodeGroupRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateNodeGroupRequest) GetNodeGroupType() string {
	if x != nil {
		return x.NodeGroupType
	}
	return ""
}

func (x *CreateNodeGroupRequest) GetBkCloudID() uint32 {
	if x != nil {
		return x.BkCloudID
	}
	return 0
}

func (x *CreateNodeGroupRequest) GetCloudAreaName() string {
	if x != nil {
		return x.CloudAreaName
	}
	return ""
}

func (x *CreateNodeGroupRequest) GetExtra() *GroupExtraInfo {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *CreateNodeGroupRequest) GetOnlyCreateInfo() bool {
	if x != nil {
		return x.OnlyCreateInfo
	}
	return false
}

type GroupExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider   string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	PoolID     string `protobuf:"bytes,2,opt,name=poolID,proto3" json:"poolID,omitempty"`
	ScriptType string `protobuf:"bytes,3,opt,name=scriptType,proto3" json:"scriptType,omitempty"`
}

func (x *GroupExtraInfo) Reset() {
	*x = GroupExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupExtraInfo) ProtoMessage() {}

func (x *GroupExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupExtraInfo.ProtoReflect.Descriptor instead.
func (*GroupExtraInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{202}
}

func (x *GroupExtraInfo) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *GroupExtraInfo) GetPoolID() string {
	if x != nil {
		return x.PoolID
	}
	return ""
}

func (x *GroupExtraInfo) GetScriptType() string {
	if x != nil {
		return x.ScriptType
	}
	return ""
}

type CreateNodeGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32                       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string                       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool                         `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *CreateNodeGroupResponseData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2            `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *CreateNodeGroupResponse) Reset() {
	*x = CreateNodeGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeGroupResponse) ProtoMessage() {}

func (x *CreateNodeGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateNodeGroupResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{203}
}

func (x *CreateNodeGroupResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateNodeGroupResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateNodeGroupResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CreateNodeGroupResponse) GetData() *CreateNodeGroupResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateNodeGroupResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type CreateNodeGroupResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeGroup *NodeGroup `protobuf:"bytes,1,opt,name=nodeGroup,proto3" json:"nodeGroup,omitempty"`
	Task      *Task      `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *CreateNodeGroupResponseData) Reset() {
	*x = CreateNodeGroupResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeGroupResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeGroupResponseData) ProtoMessage() {}

func (x *CreateNodeGroupResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeGroupResponseData.ProtoReflect.Descriptor instead.
func (*CreateNodeGroupResponseData) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{204}
}

func (x *CreateNodeGroupResponseData) GetNodeGroup() *NodeGroup {
	if x != nil {
		return x.NodeGroup
	}
	return nil
}

func (x *CreateNodeGroupResponseData) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type UpdateNodeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeGroupID     string                `protobuf:"bytes,1,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	ClusterID       string                `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Name            string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Region          string                `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	EnableAutoscale *wrappers.BoolValue   `protobuf:"bytes,5,opt,name=enableAutoscale,proto3" json:"enableAutoscale,omitempty"`
	AutoScaling     *AutoScalingGroup     `protobuf:"bytes,6,opt,name=autoScaling,proto3" json:"autoScaling,omitempty"`
	LaunchTemplate  *LaunchConfiguration  `protobuf:"bytes,7,opt,name=launchTemplate,proto3" json:"launchTemplate,omitempty"`
	NodeTemplate    *NodeTemplate         `protobuf:"bytes,8,opt,name=nodeTemplate,proto3" json:"nodeTemplate,omitempty"`
	Labels          map[string]string     `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Taints          map[string]string     `protobuf:"bytes,10,rep,name=taints,proto3" json:"taints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tags            map[string]string     `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NodeOS          string                `protobuf:"bytes,12,opt,name=nodeOS,proto3" json:"nodeOS,omitempty"`
	Updater         string                `protobuf:"bytes,13,opt,name=updater,proto3" json:"updater,omitempty"`
	Provider        string                `protobuf:"bytes,14,opt,name=provider,proto3" json:"provider,omitempty"`
	ConsumerID      string                `protobuf:"bytes,15,opt,name=consumerID,proto3" json:"consumerID,omitempty"`
	Desc            string                `protobuf:"bytes,16,opt,name=desc,proto3" json:"desc,omitempty"`
	BkCloudID       *wrappers.UInt32Value `protobuf:"bytes,17,opt,name=bkCloudID,proto3" json:"bkCloudID,omitempty"`
	CloudAreaName   *wrappers.StringValue `protobuf:"bytes,18,opt,name=cloudAreaName,proto3" json:"cloudAreaName,omitempty"`
	OnlyUpdateInfo  bool                  `protobuf:"varint,19,opt,name=onlyUpdateInfo,proto3" json:"onlyUpdateInfo,omitempty"`
	ExtraInfo       map[string]string     `protobuf:"bytes,20,rep,name=extraInfo,proto3" json:"extraInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateNodeGroupRequest) Reset() {
	*x = UpdateNodeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeGroupRequest) ProtoMessage() {}

func (x *UpdateNodeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeGroupRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{205}
}

func (x *UpdateNodeGroupRequest) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *UpdateNodeGroupRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *UpdateNodeGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNodeGroupRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *UpdateNodeGroupRequest) GetEnableAutoscale() *wrappers.BoolValue {
	if x != nil {
		return x.EnableAutoscale
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetAutoScaling() *AutoScalingGroup {
	if x != nil {
		return x.AutoScaling
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetLaunchTemplate() *LaunchConfiguration {
	if x != nil {
		return x.LaunchTemplate
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetNodeTemplate() *NodeTemplate {
	if x != nil {
		return x.NodeTemplate
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetTaints() map[string]string {
	if x != nil {
		return x.Taints
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetNodeOS() string {
	if x != nil {
		return x.NodeOS
	}
	return ""
}

func (x *UpdateNodeGroupRequest) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *UpdateNodeGroupRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *UpdateNodeGroupRequest) GetConsumerID() string {
	if x != nil {
		return x.ConsumerID
	}
	return ""
}

func (x *UpdateNodeGroupRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *UpdateNodeGroupRequest) GetBkCloudID() *wrappers.UInt32Value {
	if x != nil {
		return x.BkCloudID
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetCloudAreaName() *wrappers.StringValue {
	if x != nil {
		return x.CloudAreaName
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetOnlyUpdateInfo() bool {
	if x != nil {
		return x.OnlyUpdateInfo
	}
	return false
}

func (x *UpdateNodeGroupRequest) GetExtraInfo() map[string]string {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

type UpdateNodeGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *NodeGroup        `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *UpdateNodeGroupResponse) Reset() {
	*x = UpdateNodeGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeGroupResponse) ProtoMessage() {}

func (x *UpdateNodeGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeGroupResponse.ProtoReflect.Descriptor instead.
func (*UpdateNodeGroupResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{206}
}

func (x *UpdateNodeGroupResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateNodeGroupResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateNodeGroupResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateNodeGroupResponse) GetData() *NodeGroup {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateNodeGroupResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type DeleteNodeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeGroupID           string `protobuf:"bytes,1,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	IsForce               bool   `protobuf:"varint,2,opt,name=isForce,proto3" json:"isForce,omitempty"`
	ReserveNodesInCluster bool   `protobuf:"varint,3,opt,name=reserveNodesInCluster,proto3" json:"reserveNodesInCluster,omitempty"`
	KeepNodesInstance     bool   `protobuf:"varint,4,opt,name=keepNodesInstance,proto3" json:"keepNodesInstance,omitempty"`
	Operator              string `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
	OnlyDeleteInfo        bool   `protobuf:"varint,6,opt,name=onlyDeleteInfo,proto3" json:"onlyDeleteInfo,omitempty"`
}

func (x *DeleteNodeGroupRequest) Reset() {
	*x = DeleteNodeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeGroupRequest) ProtoMessage() {}

func (x *DeleteNodeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeGroupRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{207}
}

func (x *DeleteNodeGroupRequest) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *DeleteNodeGroupRequest) GetIsForce() bool {
	if x != nil {
		return x.IsForce
	}
	return false
}

func (x *DeleteNodeGroupRequest) GetReserveNodesInCluster() bool {
	if x != nil {
		return x.ReserveNodesInCluster
	}
	return false
}

func (x *DeleteNodeGroupRequest) GetKeepNodesInstance() bool {
	if x != nil {
		return x.KeepNodesInstance
	}
	return false
}

func (x *DeleteNodeGroupRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *DeleteNodeGroupRequest) GetOnlyDeleteInfo() bool {
	if x != nil {
		return x.OnlyDeleteInfo
	}
	return false
}

type DeleteNodeGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32                       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string                       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool                         `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *DeleteNodeGroupResponseData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2            `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *DeleteNodeGroupResponse) Reset() {
	*x = DeleteNodeGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeGroupResponse) ProtoMessage() {}

func (x *DeleteNodeGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeGroupResponse.ProtoReflect.Descriptor instead.
func (*DeleteNodeGroupResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{208}
}

func (x *DeleteNodeGroupResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteNodeGroupResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteNodeGroupResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteNodeGroupResponse) GetData() *DeleteNodeGroupResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeleteNodeGroupResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type DeleteNodeGroupResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeGroup *NodeGroup `protobuf:"bytes,1,opt,name=nodeGroup,proto3" json:"nodeGroup,omitempty"`
	Task      *Task      `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *DeleteNodeGroupResponseData) Reset() {
	*x = DeleteNodeGroupResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeGroupResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeGroupResponseData) ProtoMessage() {}

func (x *DeleteNodeGroupResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeGroupResponseData.ProtoReflect.Descriptor instead.
func (*DeleteNodeGroupResponseData) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{209}
}

func (x *DeleteNodeGroupResponseData) GetNodeGroup() *NodeGroup {
	if x != nil {
		return x.NodeGroup
	}
	return nil
}

func (x *DeleteNodeGroupResponseData) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type GetNodeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeGroupID string `protobuf:"bytes,1,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
}

func (x *GetNodeGroupRequest) Reset() {
	*x = GetNodeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeGroupRequest) ProtoMessage() {}

func (x *GetNodeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeGroupRequest.ProtoReflect.Descriptor instead.
func (*GetNodeGroupRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{210}
}

func (x *GetNodeGroupRequest) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

type GetNodeGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *NodeGroup        `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetNodeGroupResponse) Reset() {
	*x = GetNodeGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeGroupResponse) ProtoMessage() {}

func (x *GetNodeGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeGroupResponse.ProtoReflect.Descriptor instead.
func (*GetNodeGroupResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{211}
}

func (x *GetNodeGroupResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetNodeGroupResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetNodeGroupResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetNodeGroupResponse) GetData() *NodeGroup {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetNodeGroupResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListClusterNodeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID    string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	EnableFilter bool   `protobuf:"varint,2,opt,name=enableFilter,proto3" json:"enableFilter,omitempty"`
}

func (x *ListClusterNodeGroupRequest) Reset() {
	*x = ListClusterNodeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterNodeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterNodeGroupRequest) ProtoMessage() {}

func (x *ListClusterNodeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterNodeGroupRequest.ProtoReflect.Descriptor instead.
func (*ListClusterNodeGroupRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{212}
}

func (x *ListClusterNodeGroupRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ListClusterNodeGroupRequest) GetEnableFilter() bool {
	if x != nil {
		return x.EnableFilter
	}
	return false
}

type ListClusterNodeGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           []*NodeGroup      `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListClusterNodeGroupResponse) Reset() {
	*x = ListClusterNodeGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterNodeGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterNodeGroupResponse) ProtoMessage() {}

func (x *ListClusterNodeGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterNodeGroupResponse.ProtoReflect.Descriptor instead.
func (*ListClusterNodeGroupResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{213}
}

func (x *ListClusterNodeGroupResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListClusterNodeGroupResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListClusterNodeGroupResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListClusterNodeGroupResponse) GetData() []*NodeGroup {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListClusterNodeGroupResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListNodeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ClusterID string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Region    string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	ProjectID string `protobuf:"bytes,4,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (x *ListNodeGroupRequest) Reset() {
	*x = ListNodeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeGroupRequest) ProtoMessage() {}

func (x *ListNodeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeGroupRequest.ProtoReflect.Descriptor instead.
func (*ListNodeGroupRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{214}
}

func (x *ListNodeGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListNodeGroupRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ListNodeGroupRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListNodeGroupRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

type ListNodeGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool         `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*NodeGroup `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListNodeGroupResponse) Reset() {
	*x = ListNodeGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeGroupResponse) ProtoMessage() {}

func (x *ListNodeGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeGroupResponse.ProtoReflect.Descriptor instead.
func (*ListNodeGroupResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{215}
}

func (x *ListNodeGroupResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListNodeGroupResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListNodeGroupResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListNodeGroupResponse) GetData() []*NodeGroup {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID         string            `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Nodes             []string          `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	InitLoginPassword string            `protobuf:"bytes,3,opt,name=initLoginPassword,proto3" json:"initLoginPassword,omitempty"`
	NodeGroupID       string            `protobuf:"bytes,4,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	OnlyCreateInfo    bool              `protobuf:"varint,5,opt,name=onlyCreateInfo,proto3" json:"onlyCreateInfo,omitempty"`
	Operator          string            `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`
	NodeTemplateID    string            `protobuf:"bytes,7,opt,name=nodeTemplateID,proto3" json:"nodeTemplateID,omitempty"`
	IsExternalNode    bool              `protobuf:"varint,8,opt,name=isExternalNode,proto3" json:"isExternalNode,omitempty"`
	Login             *NodeLoginInfo    `protobuf:"bytes,9,opt,name=login,proto3" json:"login,omitempty"`
	Advance           *NodeAdvancedInfo `protobuf:"bytes,10,opt,name=advance,proto3" json:"advance,omitempty"`
}

func (x *AddNodesRequest) Reset() {
	*x = AddNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNodesRequest) ProtoMessage() {}

func (x *AddNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNodesRequest.ProtoReflect.Descriptor instead.
func (*AddNodesRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{216}
}

func (x *AddNodesRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *AddNodesRequest) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *AddNodesRequest) GetInitLoginPassword() string {
	if x != nil {
		return x.InitLoginPassword
	}
	return ""
}

func (x *AddNodesRequest) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *AddNodesRequest) GetOnlyCreateInfo() bool {
	if x != nil {
		return x.OnlyCreateInfo
	}
	return false
}

func (x *AddNodesRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *AddNodesRequest) GetNodeTemplateID() string {
	if x != nil {
		return x.NodeTemplateID
	}
	return ""
}

func (x *AddNodesRequest) GetIsExternalNode() bool {
	if x != nil {
		return x.IsExternalNode
	}
	return false
}

func (x *AddNodesRequest) GetLogin() *NodeLoginInfo {
	if x != nil {
		return x.Login
	}
	return nil
}

func (x *AddNodesRequest) GetAdvance() *NodeAdvancedInfo {
	if x != nil {
		return x.Advance
	}
	return nil
}

type AddNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *Task             `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *AddNodesResponse) Reset() {
	*x = AddNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNodesResponse) ProtoMessage() {}

func (x *AddNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNodesResponse.ProtoReflect.Descriptor instead.
func (*AddNodesResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{217}
}

func (x *AddNodesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddNodesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddNodesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *AddNodesResponse) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AddNodesResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type AddNodesV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID         string            `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Nodes             []string          `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	InitLoginPassword string            `protobuf:"bytes,3,opt,name=initLoginPassword,proto3" json:"initLoginPassword,omitempty"`
	NodeGroupID       string            `protobuf:"bytes,4,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	OnlyCreateInfo    bool              `protobuf:"varint,5,opt,name=onlyCreateInfo,proto3" json:"onlyCreateInfo,omitempty"`
	Operator          string            `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`
	NodeTemplateID    string            `protobuf:"bytes,7,opt,name=nodeTemplateID,proto3" json:"nodeTemplateID,omitempty"`
	IsExternalNode    bool              `protobuf:"varint,8,opt,name=isExternalNode,proto3" json:"isExternalNode,omitempty"`
	Login             *NodeLoginInfo    `protobuf:"bytes,9,opt,name=login,proto3" json:"login,omitempty"`
	Advance           *NodeAdvancedInfo `protobuf:"bytes,10,opt,name=advance,proto3" json:"advance,omitempty"`
}

func (x *AddNodesV2Request) Reset() {
	*x = AddNodesV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNodesV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNodesV2Request) ProtoMessage() {}

func (x *AddNodesV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNodesV2Request.ProtoReflect.Descriptor instead.
func (*AddNodesV2Request) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{218}
}

func (x *AddNodesV2Request) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *AddNodesV2Request) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *AddNodesV2Request) GetInitLoginPassword() string {
	if x != nil {
		return x.InitLoginPassword
	}
	return ""
}

func (x *AddNodesV2Request) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *AddNodesV2Request) GetOnlyCreateInfo() bool {
	if x != nil {
		return x.OnlyCreateInfo
	}
	return false
}

func (x *AddNodesV2Request) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *AddNodesV2Request) GetNodeTemplateID() string {
	if x != nil {
		return x.NodeTemplateID
	}
	return ""
}

func (x *AddNodesV2Request) GetIsExternalNode() bool {
	if x != nil {
		return x.IsExternalNode
	}
	return false
}

func (x *AddNodesV2Request) GetLogin() *NodeLoginInfo {
	if x != nil {
		return x.Login
	}
	return nil
}

func (x *AddNodesV2Request) GetAdvance() *NodeAdvancedInfo {
	if x != nil {
		return x.Advance
	}
	return nil
}

type AddNodesV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           []*Task           `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *AddNodesV2Response) Reset() {
	*x = AddNodesV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNodesV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNodesV2Response) ProtoMessage() {}

func (x *AddNodesV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNodesV2Response.ProtoReflect.Descriptor instead.
func (*AddNodesV2Response) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{219}
}

func (x *AddNodesV2Response) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddNodesV2Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddNodesV2Response) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *AddNodesV2Response) GetData() []*Task {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AddNodesV2Response) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type BatchDeleteClusterNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID      string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	NodeIPs        string `protobuf:"bytes,2,opt,name=nodeIPs,proto3" json:"nodeIPs,omitempty"`
	VirtualNodeIDs string `protobuf:"bytes,3,opt,name=virtualNodeIDs,proto3" json:"virtualNodeIDs,omitempty"`
	Operator       string `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
	DeleteMode     string `protobuf:"bytes,5,opt,name=deleteMode,proto3" json:"deleteMode,omitempty"`
}

func (x *BatchDeleteClusterNodesRequest) Reset() {
	*x = BatchDeleteClusterNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteClusterNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteClusterNodesRequest) ProtoMessage() {}

func (x *BatchDeleteClusterNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteClusterNodesRequest.ProtoReflect.Descriptor instead.
func (*BatchDeleteClusterNodesRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{220}
}

func (x *BatchDeleteClusterNodesRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *BatchDeleteClusterNodesRequest) GetNodeIPs() string {
	if x != nil {
		return x.NodeIPs
	}
	return ""
}

func (x *BatchDeleteClusterNodesRequest) GetVirtualNodeIDs() string {
	if x != nil {
		return x.VirtualNodeIDs
	}
	return ""
}

func (x *BatchDeleteClusterNodesRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *BatchDeleteClusterNodesRequest) GetDeleteMode() string {
	if x != nil {
		return x.DeleteMode
	}
	return ""
}

type BatchDeleteClusterNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool                `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           []*BatchNodesStatus `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2   `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *BatchDeleteClusterNodesResponse) Reset() {
	*x = BatchDeleteClusterNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteClusterNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteClusterNodesResponse) ProtoMessage() {}

func (x *BatchDeleteClusterNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteClusterNodesResponse.ProtoReflect.Descriptor instead.
func (*BatchDeleteClusterNodesResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{221}
}

func (x *BatchDeleteClusterNodesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BatchDeleteClusterNodesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BatchDeleteClusterNodesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *BatchDeleteClusterNodesResponse) GetData() []*BatchNodesStatus {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BatchDeleteClusterNodesResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type BatchNodesStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIPs       []string `protobuf:"bytes,1,rep,name=nodeIPs,proto3" json:"nodeIPs,omitempty"`
	Success       bool     `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	TaskID        string   `protobuf:"bytes,4,opt,name=taskID,proto3" json:"taskID,omitempty"`
	NodeGroupID   string   `protobuf:"bytes,5,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	NodeGroupType string   `protobuf:"bytes,6,opt,name=nodeGroupType,proto3" json:"nodeGroupType,omitempty"`
}

func (x *BatchNodesStatus) Reset() {
	*x = BatchNodesStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchNodesStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchNodesStatus) ProtoMessage() {}

func (x *BatchNodesStatus) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchNodesStatus.ProtoReflect.Descriptor instead.
func (*BatchNodesStatus) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{222}
}

func (x *BatchNodesStatus) GetNodeIPs() []string {
	if x != nil {
		return x.NodeIPs
	}
	return nil
}

func (x *BatchNodesStatus) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BatchNodesStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BatchNodesStatus) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *BatchNodesStatus) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *BatchNodesStatus) GetNodeGroupType() string {
	if x != nil {
		return x.NodeGroupType
	}
	return ""
}

type DeleteNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID      string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Nodes          string `protobuf:"bytes,2,opt,name=nodes,proto3" json:"nodes,omitempty"`
	DeleteMode     string `protobuf:"bytes,3,opt,name=deleteMode,proto3" json:"deleteMode,omitempty"`
	IsForce        bool   `protobuf:"varint,4,opt,name=isForce,proto3" json:"isForce,omitempty"`
	Operator       string `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
	OnlyDeleteInfo bool   `protobuf:"varint,6,opt,name=onlyDeleteInfo,proto3" json:"onlyDeleteInfo,omitempty"`
	NodeTemplateID string `protobuf:"bytes,7,opt,name=nodeTemplateID,proto3" json:"nodeTemplateID,omitempty"`
	NodeGroupID    string `protobuf:"bytes,8,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	IsExternalNode bool   `protobuf:"varint,9,opt,name=isExternalNode,proto3" json:"isExternalNode,omitempty"`
}

func (x *DeleteNodesRequest) Reset() {
	*x = DeleteNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodesRequest) ProtoMessage() {}

func (x *DeleteNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodesRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodesRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{223}
}

func (x *DeleteNodesRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *DeleteNodesRequest) GetNodes() string {
	if x != nil {
		return x.Nodes
	}
	return ""
}

func (x *DeleteNodesRequest) GetDeleteMode() string {
	if x != nil {
		return x.DeleteMode
	}
	return ""
}

func (x *DeleteNodesRequest) GetIsForce() bool {
	if x != nil {
		return x.IsForce
	}
	return false
}

func (x *DeleteNodesRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *DeleteNodesRequest) GetOnlyDeleteInfo() bool {
	if x != nil {
		return x.OnlyDeleteInfo
	}
	return false
}

func (x *DeleteNodesRequest) GetNodeTemplateID() string {
	if x != nil {
		return x.NodeTemplateID
	}
	return ""
}

func (x *DeleteNodesRequest) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *DeleteNodesRequest) GetIsExternalNode() bool {
	if x != nil {
		return x.IsExternalNode
	}
	return false
}

type DeleteNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *Task             `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *DeleteNodesResponse) Reset() {
	*x = DeleteNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodesResponse) ProtoMessage() {}

func (x *DeleteNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodesResponse.ProtoReflect.Descriptor instead.
func (*DeleteNodesResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{224}
}

func (x *DeleteNodesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteNodesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteNodesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteNodesResponse) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeleteNodesResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type MoveNodesToGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID   string   `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Nodes       []string `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	NodeGroupID string   `protobuf:"bytes,3,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
}

func (x *MoveNodesToGroupRequest) Reset() {
	*x = MoveNodesToGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveNodesToGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveNodesToGroupRequest) ProtoMessage() {}

func (x *MoveNodesToGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveNodesToGroupRequest.ProtoReflect.Descriptor instead.
func (*MoveNodesToGroupRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{225}
}

func (x *MoveNodesToGroupRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *MoveNodesToGroupRequest) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *MoveNodesToGroupRequest) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

type MoveNodesToGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *Task             `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *MoveNodesToGroupResponse) Reset() {
	*x = MoveNodesToGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveNodesToGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveNodesToGroupResponse) ProtoMessage() {}

func (x *MoveNodesToGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveNodesToGroupResponse.ProtoReflect.Descriptor instead.
func (*MoveNodesToGroupResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{226}
}

func (x *MoveNodesToGroupResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MoveNodesToGroupResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MoveNodesToGroupResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *MoveNodesToGroupResponse) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MoveNodesToGroupResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type RemoveNodesFromGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID   string   `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Nodes       []string `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	NodeGroupID string   `protobuf:"bytes,3,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
}

func (x *RemoveNodesFromGroupRequest) Reset() {
	*x = RemoveNodesFromGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNodesFromGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNodesFromGroupRequest) ProtoMessage() {}

func (x *RemoveNodesFromGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNodesFromGroupRequest.ProtoReflect.Descriptor instead.
func (*RemoveNodesFromGroupRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{227}
}

func (x *RemoveNodesFromGroupRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *RemoveNodesFromGroupRequest) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *RemoveNodesFromGroupRequest) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

type RemoveNodesFromGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *Task             `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *RemoveNodesFromGroupResponse) Reset() {
	*x = RemoveNodesFromGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNodesFromGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNodesFromGroupResponse) ProtoMessage() {}

func (x *RemoveNodesFromGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNodesFromGroupResponse.ProtoReflect.Descriptor instead.
func (*RemoveNodesFromGroupResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{228}
}

func (x *RemoveNodesFromGroupResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RemoveNodesFromGroupResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RemoveNodesFromGroupResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *RemoveNodesFromGroupResponse) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RemoveNodesFromGroupResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type CleanNodesInGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID   string   `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Nodes       []string `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	NodeGroupID string   `protobuf:"bytes,3,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	Operator    string   `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
	Manual      bool     `protobuf:"varint,5,opt,name=manual,proto3" json:"manual,omitempty"`
}

func (x *CleanNodesInGroupRequest) Reset() {
	*x = CleanNodesInGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanNodesInGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanNodesInGroupRequest) ProtoMessage() {}

func (x *CleanNodesInGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanNodesInGroupRequest.ProtoReflect.Descriptor instead.
func (*CleanNodesInGroupRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{229}
}

func (x *CleanNodesInGroupRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *CleanNodesInGroupRequest) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *CleanNodesInGroupRequest) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *CleanNodesInGroupRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *CleanNodesInGroupRequest) GetManual() bool {
	if x != nil {
		return x.Manual
	}
	return false
}

type CleanNodesInGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *Task             `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *CleanNodesInGroupResponse) Reset() {
	*x = CleanNodesInGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanNodesInGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanNodesInGroupResponse) ProtoMessage() {}

func (x *CleanNodesInGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanNodesInGroupResponse.ProtoReflect.Descriptor instead.
func (*CleanNodesInGroupResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{230}
}

func (x *CleanNodesInGroupResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CleanNodesInGroupResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CleanNodesInGroupResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CleanNodesInGroupResponse) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CleanNodesInGroupResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type CleanNodesInGroupV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID   string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Nodes       string `protobuf:"bytes,2,opt,name=nodes,proto3" json:"nodes,omitempty"`
	NodeGroupID string `protobuf:"bytes,3,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	Operator    string `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *CleanNodesInGroupV2Request) Reset() {
	*x = CleanNodesInGroupV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanNodesInGroupV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanNodesInGroupV2Request) ProtoMessage() {}

func (x *CleanNodesInGroupV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanNodesInGroupV2Request.ProtoReflect.Descriptor instead.
func (*CleanNodesInGroupV2Request) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{231}
}

func (x *CleanNodesInGroupV2Request) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *CleanNodesInGroupV2Request) GetNodes() string {
	if x != nil {
		return x.Nodes
	}
	return ""
}

func (x *CleanNodesInGroupV2Request) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *CleanNodesInGroupV2Request) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type CleanNodesInGroupV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *Task             `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *CleanNodesInGroupV2Response) Reset() {
	*x = CleanNodesInGroupV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanNodesInGroupV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanNodesInGroupV2Response) ProtoMessage() {}

func (x *CleanNodesInGroupV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanNodesInGroupV2Response.ProtoReflect.Descriptor instead.
func (*CleanNodesInGroupV2Response) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{232}
}

func (x *CleanNodesInGroupV2Response) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CleanNodesInGroupV2Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CleanNodesInGroupV2Response) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CleanNodesInGroupV2Response) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CleanNodesInGroupV2Response) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListNodesInGroupV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeGroupID string `protobuf:"bytes,1,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	Output      string `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *ListNodesInGroupV2Request) Reset() {
	*x = ListNodesInGroupV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodesInGroupV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesInGroupV2Request) ProtoMessage() {}

func (x *ListNodesInGroupV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesInGroupV2Request.ProtoReflect.Descriptor instead.
func (*ListNodesInGroupV2Request) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{233}
}

func (x *ListNodesInGroupV2Request) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *ListNodesInGroupV2Request) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type ListNodesInGroupV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           []*NodeGroupNode  `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListNodesInGroupV2Response) Reset() {
	*x = ListNodesInGroupV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodesInGroupV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesInGroupV2Response) ProtoMessage() {}

func (x *ListNodesInGroupV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesInGroupV2Response.ProtoReflect.Descriptor instead.
func (*ListNodesInGroupV2Response) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{234}
}

func (x *ListNodesInGroupV2Response) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListNodesInGroupV2Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListNodesInGroupV2Response) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListNodesInGroupV2Response) GetData() []*NodeGroupNode {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListNodesInGroupV2Response) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type NodeGroupNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeID        string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	InnerIP       string `protobuf:"bytes,2,opt,name=innerIP,proto3" json:"innerIP,omitempty"`
	InstanceType  string `protobuf:"bytes,3,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	CPU           uint32 `protobuf:"varint,4,opt,name=CPU,proto3" json:"CPU,omitempty"`
	Mem           uint32 `protobuf:"varint,5,opt,name=mem,proto3" json:"mem,omitempty"`
	GPU           uint32 `protobuf:"varint,6,opt,name=GPU,proto3" json:"GPU,omitempty"`
	Status        string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	ZoneID        string `protobuf:"bytes,8,opt,name=zoneID,proto3" json:"zoneID,omitempty"`
	NodeGroupID   string `protobuf:"bytes,9,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	ClusterID     string `protobuf:"bytes,10,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	VPC           string `protobuf:"bytes,11,opt,name=VPC,proto3" json:"VPC,omitempty"`
	Region        string `protobuf:"bytes,12,opt,name=region,proto3" json:"region,omitempty"`
	Passwd        string `protobuf:"bytes,13,opt,name=passwd,proto3" json:"passwd,omitempty"`
	Zone          uint32 `protobuf:"varint,14,opt,name=zone,proto3" json:"zone,omitempty"`
	DeviceID      string `protobuf:"bytes,15,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	InstanceRole  string `protobuf:"bytes,16,opt,name=instanceRole,proto3" json:"instanceRole,omitempty"`
	UnSchedulable uint32 `protobuf:"varint,17,opt,name=unSchedulable,proto3" json:"unSchedulable,omitempty"`
	NodeName      string `protobuf:"bytes,18,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
}

func (x *NodeGroupNode) Reset() {
	*x = NodeGroupNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeGroupNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeGroupNode) ProtoMessage() {}

func (x *NodeGroupNode) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeGroupNode.ProtoReflect.Descriptor instead.
func (*NodeGroupNode) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{235}
}

func (x *NodeGroupNode) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *NodeGroupNode) GetInnerIP() string {
	if x != nil {
		return x.InnerIP
	}
	return ""
}

func (x *NodeGroupNode) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *NodeGroupNode) GetCPU() uint32 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *NodeGroupNode) GetMem() uint32 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *NodeGroupNode) GetGPU() uint32 {
	if x != nil {
		return x.GPU
	}
	return 0
}

func (x *NodeGroupNode) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NodeGroupNode) GetZoneID() string {
	if x != nil {
		return x.ZoneID
	}
	return ""
}

func (x *NodeGroupNode) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *NodeGroupNode) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *NodeGroupNode) GetVPC() string {
	if x != nil {
		return x.VPC
	}
	return ""
}

func (x *NodeGroupNode) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *NodeGroupNode) GetPasswd() string {
	if x != nil {
		return x.Passwd
	}
	return ""
}

func (x *NodeGroupNode) GetZone() uint32 {
	if x != nil {
		return x.Zone
	}
	return 0
}

func (x *NodeGroupNode) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *NodeGroupNode) GetInstanceRole() string {
	if x != nil {
		return x.InstanceRole
	}
	return ""
}

func (x *NodeGroupNode) GetUnSchedulable() uint32 {
	if x != nil {
		return x.UnSchedulable
	}
	return 0
}

func (x *NodeGroupNode) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

type ListNodesInGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           []*Node           `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListNodesInGroupResponse) Reset() {
	*x = ListNodesInGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodesInGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesInGroupResponse) ProtoMessage() {}

func (x *ListNodesInGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesInGroupResponse.ProtoReflect.Descriptor instead.
func (*ListNodesInGroupResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{236}
}

func (x *ListNodesInGroupResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListNodesInGroupResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListNodesInGroupResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListNodesInGroupResponse) GetData() []*Node {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListNodesInGroupResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type UpdateGroupMinMaxSizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeGroupID string `protobuf:"bytes,1,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	MinSize     uint32 `protobuf:"varint,2,opt,name=minSize,proto3" json:"minSize,omitempty"`
	MaxSize     uint32 `protobuf:"varint,3,opt,name=maxSize,proto3" json:"maxSize,omitempty"`
	Operator    string `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *UpdateGroupMinMaxSizeRequest) Reset() {
	*x = UpdateGroupMinMaxSizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupMinMaxSizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupMinMaxSizeRequest) ProtoMessage() {}

func (x *UpdateGroupMinMaxSizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupMinMaxSizeRequest.ProtoReflect.Descriptor instead.
func (*UpdateGroupMinMaxSizeRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{237}
}

func (x *UpdateGroupMinMaxSizeRequest) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *UpdateGroupMinMaxSizeRequest) GetMinSize() uint32 {
	if x != nil {
		return x.MinSize
	}
	return 0
}

func (x *UpdateGroupMinMaxSizeRequest) GetMaxSize() uint32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *UpdateGroupMinMaxSizeRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type UpdateGroupMinMaxSizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *UpdateGroupMinMaxSizeResponse) Reset() {
	*x = UpdateGroupMinMaxSizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupMinMaxSizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupMinMaxSizeResponse) ProtoMessage() {}

func (x *UpdateGroupMinMaxSizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupMinMaxSizeResponse.ProtoReflect.Descriptor instead.
func (*UpdateGroupMinMaxSizeResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{238}
}

func (x *UpdateGroupMinMaxSizeResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateGroupMinMaxSizeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateGroupMinMaxSizeResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateGroupMinMaxSizeResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type UpdateGroupAsTimeRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeGroupID string       `protobuf:"bytes,1,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	TimeRanges  []*TimeRange `protobuf:"bytes,2,rep,name=timeRanges,proto3" json:"timeRanges,omitempty"`
	Operator    string       `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *UpdateGroupAsTimeRangeRequest) Reset() {
	*x = UpdateGroupAsTimeRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupAsTimeRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupAsTimeRangeRequest) ProtoMessage() {}

func (x *UpdateGroupAsTimeRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupAsTimeRangeRequest.ProtoReflect.Descriptor instead.
func (*UpdateGroupAsTimeRangeRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{239}
}

func (x *UpdateGroupAsTimeRangeRequest) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *UpdateGroupAsTimeRangeRequest) GetTimeRanges() []*TimeRange {
	if x != nil {
		return x.TimeRanges
	}
	return nil
}

func (x *UpdateGroupAsTimeRangeRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type UpdateGroupAsTimeRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *UpdateGroupAsTimeRangeResponse) Reset() {
	*x = UpdateGroupAsTimeRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupAsTimeRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupAsTimeRangeResponse) ProtoMessage() {}

func (x *UpdateGroupAsTimeRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupAsTimeRangeResponse.ProtoReflect.Descriptor instead.
func (*UpdateGroupAsTimeRangeResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{240}
}

func (x *UpdateGroupAsTimeRangeResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateGroupAsTimeRangeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateGroupAsTimeRangeResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateGroupAsTimeRangeResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type TransNodeGroupToNodeTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeGroupID string `protobuf:"bytes,1,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
}

func (x *TransNodeGroupToNodeTemplateRequest) Reset() {
	*x = TransNodeGroupToNodeTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransNodeGroupToNodeTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransNodeGroupToNodeTemplateRequest) ProtoMessage() {}

func (x *TransNodeGroupToNodeTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransNodeGroupToNodeTemplateRequest.ProtoReflect.Descriptor instead.
func (*TransNodeGroupToNodeTemplateRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{241}
}

func (x *TransNodeGroupToNodeTemplateRequest) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

type TransNodeGroupToNodeTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message  string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result   bool          `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Template *NodeTemplate `protobuf:"bytes,4,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *TransNodeGroupToNodeTemplateResponse) Reset() {
	*x = TransNodeGroupToNodeTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransNodeGroupToNodeTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransNodeGroupToNodeTemplateResponse) ProtoMessage() {}

func (x *TransNodeGroupToNodeTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransNodeGroupToNodeTemplateResponse.ProtoReflect.Descriptor instead.
func (*TransNodeGroupToNodeTemplateResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{242}
}

func (x *TransNodeGroupToNodeTemplateResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TransNodeGroupToNodeTemplateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TransNodeGroupToNodeTemplateResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *TransNodeGroupToNodeTemplateResponse) GetTemplate() *NodeTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

type UpdateGroupDesiredSizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeGroupID string `protobuf:"bytes,1,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	DesiredSize uint32 `protobuf:"varint,2,opt,name=desiredSize,proto3" json:"desiredSize,omitempty"`
	Operator    string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *UpdateGroupDesiredSizeRequest) Reset() {
	*x = UpdateGroupDesiredSizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupDesiredSizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupDesiredSizeRequest) ProtoMessage() {}

func (x *UpdateGroupDesiredSizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupDesiredSizeRequest.ProtoReflect.Descriptor instead.
func (*UpdateGroupDesiredSizeRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{243}
}

func (x *UpdateGroupDesiredSizeRequest) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *UpdateGroupDesiredSizeRequest) GetDesiredSize() uint32 {
	if x != nil {
		return x.DesiredSize
	}
	return 0
}

func (x *UpdateGroupDesiredSizeRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type UpdateGroupDesiredSizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *UpdateGroupDesiredSizeResponse) Reset() {
	*x = UpdateGroupDesiredSizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupDesiredSizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupDesiredSizeResponse) ProtoMessage() {}

func (x *UpdateGroupDesiredSizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupDesiredSizeResponse.ProtoReflect.Descriptor instead.
func (*UpdateGroupDesiredSizeResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{244}
}

func (x *UpdateGroupDesiredSizeResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateGroupDesiredSizeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateGroupDesiredSizeResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateGroupDesiredSizeResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type UpdateGroupDesiredNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeGroupID string `protobuf:"bytes,1,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	DesiredNode uint32 `protobuf:"varint,2,opt,name=desiredNode,proto3" json:"desiredNode,omitempty"`
	Operator    string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	Manual      bool   `protobuf:"varint,4,opt,name=manual,proto3" json:"manual,omitempty"`
}

func (x *UpdateGroupDesiredNodeRequest) Reset() {
	*x = UpdateGroupDesiredNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupDesiredNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupDesiredNodeRequest) ProtoMessage() {}

func (x *UpdateGroupDesiredNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupDesiredNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateGroupDesiredNodeRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{245}
}

func (x *UpdateGroupDesiredNodeRequest) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *UpdateGroupDesiredNodeRequest) GetDesiredNode() uint32 {
	if x != nil {
		return x.DesiredNode
	}
	return 0
}

func (x *UpdateGroupDesiredNodeRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *UpdateGroupDesiredNodeRequest) GetManual() bool {
	if x != nil {
		return x.Manual
	}
	return false
}

type UpdateGroupDesiredNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *Task             `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *UpdateGroupDesiredNodeResponse) Reset() {
	*x = UpdateGroupDesiredNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupDesiredNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupDesiredNodeResponse) ProtoMessage() {}

func (x *UpdateGroupDesiredNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupDesiredNodeResponse.ProtoReflect.Descriptor instead.
func (*UpdateGroupDesiredNodeResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{246}
}

func (x *UpdateGroupDesiredNodeResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateGroupDesiredNodeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateGroupDesiredNodeResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateGroupDesiredNodeResponse) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateGroupDesiredNodeResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type EnableNodeGroupAutoScaleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeGroupID string `protobuf:"bytes,1,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
}

func (x *EnableNodeGroupAutoScaleRequest) Reset() {
	*x = EnableNodeGroupAutoScaleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableNodeGroupAutoScaleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableNodeGroupAutoScaleRequest) ProtoMessage() {}

func (x *EnableNodeGroupAutoScaleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableNodeGroupAutoScaleRequest.ProtoReflect.Descriptor instead.
func (*EnableNodeGroupAutoScaleRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{247}
}

func (x *EnableNodeGroupAutoScaleRequest) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

type EnableNodeGroupAutoScaleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *EnableNodeGroupAutoScaleResponse) Reset() {
	*x = EnableNodeGroupAutoScaleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableNodeGroupAutoScaleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableNodeGroupAutoScaleResponse) ProtoMessage() {}

func (x *EnableNodeGroupAutoScaleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableNodeGroupAutoScaleResponse.ProtoReflect.Descriptor instead.
func (*EnableNodeGroupAutoScaleResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{248}
}

func (x *EnableNodeGroupAutoScaleResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EnableNodeGroupAutoScaleResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EnableNodeGroupAutoScaleResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *EnableNodeGroupAutoScaleResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type DisableNodeGroupAutoScaleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeGroupID string `protobuf:"bytes,1,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
}

func (x *DisableNodeGroupAutoScaleRequest) Reset() {
	*x = DisableNodeGroupAutoScaleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableNodeGroupAutoScaleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableNodeGroupAutoScaleRequest) ProtoMessage() {}

func (x *DisableNodeGroupAutoScaleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableNodeGroupAutoScaleRequest.ProtoReflect.Descriptor instead.
func (*DisableNodeGroupAutoScaleRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{249}
}

func (x *DisableNodeGroupAutoScaleRequest) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

type DisableNodeGroupAutoScaleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *DisableNodeGroupAutoScaleResponse) Reset() {
	*x = DisableNodeGroupAutoScaleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableNodeGroupAutoScaleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableNodeGroupAutoScaleResponse) ProtoMessage() {}

func (x *DisableNodeGroupAutoScaleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableNodeGroupAutoScaleResponse.ProtoReflect.Descriptor instead.
func (*DisableNodeGroupAutoScaleResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{250}
}

func (x *DisableNodeGroupAutoScaleResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DisableNodeGroupAutoScaleResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DisableNodeGroupAutoScaleResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DisableNodeGroupAutoScaleResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type CreateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskType      string           `protobuf:"bytes,1,opt,name=taskType,proto3" json:"taskType,omitempty"`
	Status        string           `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Message       string           `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Start         string           `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	End           string           `protobuf:"bytes,5,opt,name=end,proto3" json:"end,omitempty"`
	ExecutionTime uint32           `protobuf:"varint,6,opt,name=executionTime,proto3" json:"executionTime,omitempty"`
	CurrentStep   string           `protobuf:"bytes,7,opt,name=currentStep,proto3" json:"currentStep,omitempty"`
	StepSequence  []string         `protobuf:"bytes,8,rep,name=stepSequence,proto3" json:"stepSequence,omitempty"`
	Steps         map[string]*Step `protobuf:"bytes,9,rep,name=steps,proto3" json:"steps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClusterID     string           `protobuf:"bytes,10,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ProjectID     string           `protobuf:"bytes,11,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Creator       string           `protobuf:"bytes,12,opt,name=creator,proto3" json:"creator,omitempty"`
	LastUpdate    string           `protobuf:"bytes,13,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
}

func (x *CreateTaskRequest) Reset() {
	*x = CreateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskRequest) ProtoMessage() {}

func (x *CreateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateTaskRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{251}
}

func (x *CreateTaskRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *CreateTaskRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreateTaskRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateTaskRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *CreateTaskRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *CreateTaskRequest) GetExecutionTime() uint32 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *CreateTaskRequest) GetCurrentStep() string {
	if x != nil {
		return x.CurrentStep
	}
	return ""
}

func (x *CreateTaskRequest) GetStepSequence() []string {
	if x != nil {
		return x.StepSequence
	}
	return nil
}

func (x *CreateTaskRequest) GetSteps() map[string]*Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *CreateTaskRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *CreateTaskRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CreateTaskRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreateTaskRequest) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

type CreateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *Task  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateTaskResponse) Reset() {
	*x = CreateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskResponse) ProtoMessage() {}

func (x *CreateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateTaskResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{252}
}

func (x *CreateTaskResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateTaskResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CreateTaskResponse) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

type RetryTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID  string `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Updater string `protobuf:"bytes,2,opt,name=updater,proto3" json:"updater,omitempty"`
}

func (x *RetryTaskRequest) Reset() {
	*x = RetryTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryTaskRequest) ProtoMessage() {}

func (x *RetryTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryTaskRequest.ProtoReflect.Descriptor instead.
func (*RetryTaskRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{253}
}

func (x *RetryTaskRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *RetryTaskRequest) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

type RetryTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *Task  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RetryTaskResponse) Reset() {
	*x = RetryTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryTaskResponse) ProtoMessage() {}

func (x *RetryTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryTaskResponse.ProtoReflect.Descriptor instead.
func (*RetryTaskResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{254}
}

func (x *RetryTaskResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RetryTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RetryTaskResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *RetryTaskResponse) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

type SkipTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID  string `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Updater string `protobuf:"bytes,2,opt,name=updater,proto3" json:"updater,omitempty"`
}

func (x *SkipTaskRequest) Reset() {
	*x = SkipTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkipTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkipTaskRequest) ProtoMessage() {}

func (x *SkipTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkipTaskRequest.ProtoReflect.Descriptor instead.
func (*SkipTaskRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{255}
}

func (x *SkipTaskRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *SkipTaskRequest) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

type SkipTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *Task  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SkipTaskResponse) Reset() {
	*x = SkipTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkipTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkipTaskResponse) ProtoMessage() {}

func (x *SkipTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkipTaskResponse.ProtoReflect.Descriptor instead.
func (*SkipTaskResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{256}
}

func (x *SkipTaskResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SkipTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SkipTaskResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *SkipTaskResponse) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID        string           `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Status        string           `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Message       string           `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	End           string           `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	ExecutionTime uint32           `protobuf:"varint,5,opt,name=executionTime,proto3" json:"executionTime,omitempty"`
	CurrentStep   string           `protobuf:"bytes,6,opt,name=currentStep,proto3" json:"currentStep,omitempty"`
	Steps         map[string]*Step `protobuf:"bytes,7,rep,name=steps,proto3" json:"steps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Updater       string           `protobuf:"bytes,8,opt,name=updater,proto3" json:"updater,omitempty"`
}

func (x *UpdateTaskRequest) Reset() {
	*x = UpdateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskRequest) ProtoMessage() {}

func (x *UpdateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateTaskRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{257}
}

func (x *UpdateTaskRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *UpdateTaskRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateTaskRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateTaskRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *UpdateTaskRequest) GetExecutionTime() uint32 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *UpdateTaskRequest) GetCurrentStep() string {
	if x != nil {
		return x.CurrentStep
	}
	return ""
}

func (x *UpdateTaskRequest) GetSteps() map[string]*Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *UpdateTaskRequest) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

type UpdateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *Task  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateTaskResponse) Reset() {
	*x = UpdateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskResponse) ProtoMessage() {}

func (x *UpdateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskResponse.ProtoReflect.Descriptor instead.
func (*UpdateTaskResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{258}
}

func (x *UpdateTaskResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateTaskResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateTaskResponse) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID  string `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	IsForce bool   `protobuf:"varint,2,opt,name=isForce,proto3" json:"isForce,omitempty"`
}

func (x *DeleteTaskRequest) Reset() {
	*x = DeleteTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskRequest) ProtoMessage() {}

func (x *DeleteTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteTaskRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{259}
}

func (x *DeleteTaskRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *DeleteTaskRequest) GetIsForce() bool {
	if x != nil {
		return x.IsForce
	}
	return false
}

type DeleteTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *Task  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteTaskResponse) Reset() {
	*x = DeleteTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskResponse) ProtoMessage() {}

func (x *DeleteTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskResponse.ProtoReflect.Descriptor instead.
func (*DeleteTaskResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{260}
}

func (x *DeleteTaskResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteTaskResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteTaskResponse) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID string `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{261}
}

func (x *GetTaskRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

type GetTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *Task  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTaskResponse) Reset() {
	*x = GetTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskResponse) ProtoMessage() {}

func (x *GetTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskResponse.ProtoReflect.Descriptor instead.
func (*GetTaskResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{262}
}

func (x *GetTaskResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetTaskResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetTaskResponse) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID   string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ProjectID   string `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Creator     string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater     string `protobuf:"bytes,4,opt,name=updater,proto3" json:"updater,omitempty"`
	TaskType    string `protobuf:"bytes,5,opt,name=taskType,proto3" json:"taskType,omitempty"`
	Status      string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	NodeIP      string `protobuf:"bytes,7,opt,name=nodeIP,proto3" json:"nodeIP,omitempty"`
	NodeGroupID string `protobuf:"bytes,8,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
}

func (x *ListTaskRequest) Reset() {
	*x = ListTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskRequest) ProtoMessage() {}

func (x *ListTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskRequest.ProtoReflect.Descriptor instead.
func (*ListTaskRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{263}
}

func (x *ListTaskRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ListTaskRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListTaskRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ListTaskRequest) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *ListTaskRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *ListTaskRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListTaskRequest) GetNodeIP() string {
	if x != nil {
		return x.NodeIP
	}
	return ""
}

func (x *ListTaskRequest) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

type ListTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message    string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result     bool    `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data       []*Task `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	LatestTask *Task   `protobuf:"bytes,5,opt,name=latestTask,proto3" json:"latestTask,omitempty"`
}

func (x *ListTaskResponse) Reset() {
	*x = ListTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskResponse) ProtoMessage() {}

func (x *ListTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskResponse.ProtoReflect.Descriptor instead.
func (*ListTaskResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{264}
}

func (x *ListTaskResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListTaskResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListTaskResponse) GetData() []*Task {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListTaskResponse) GetLatestTask() *Task {
	if x != nil {
		return x.LatestTask
	}
	return nil
}

type CreateAutoScalingOptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsScaleDownEnable                bool                  `protobuf:"varint,1,opt,name=isScaleDownEnable,proto3" json:"isScaleDownEnable,omitempty"`
	Expander                         string                `protobuf:"bytes,2,opt,name=expander,proto3" json:"expander,omitempty"`
	MaxEmptyBulkDelete               uint32                `protobuf:"varint,3,opt,name=maxEmptyBulkDelete,proto3" json:"maxEmptyBulkDelete,omitempty"`
	ScaleDownDelay                   uint32                `protobuf:"varint,4,opt,name=scaleDownDelay,proto3" json:"scaleDownDelay,omitempty"`
	ScaleDownUnneededTime            uint32                `protobuf:"varint,5,opt,name=scaleDownUnneededTime,proto3" json:"scaleDownUnneededTime,omitempty"`
	ScaleDownUtilizationThreahold    uint32                `protobuf:"varint,6,opt,name=scaleDownUtilizationThreahold,proto3" json:"scaleDownUtilizationThreahold,omitempty"`
	SkipNodesWithLocalStorage        bool                  `protobuf:"varint,7,opt,name=skipNodesWithLocalStorage,proto3" json:"skipNodesWithLocalStorage,omitempty"`
	SkipNodesWithSystemPods          bool                  `protobuf:"varint,8,opt,name=skipNodesWithSystemPods,proto3" json:"skipNodesWithSystemPods,omitempty"`
	IgnoreDaemonSetsUtilization      bool                  `protobuf:"varint,9,opt,name=ignoreDaemonSetsUtilization,proto3" json:"ignoreDaemonSetsUtilization,omitempty"`
	OkTotalUnreadyCount              uint32                `protobuf:"varint,10,opt,name=okTotalUnreadyCount,proto3" json:"okTotalUnreadyCount,omitempty"`
	MaxTotalUnreadyPercentage        uint32                `protobuf:"varint,11,opt,name=maxTotalUnreadyPercentage,proto3" json:"maxTotalUnreadyPercentage,omitempty"`
	ScaleDownUnreadyTime             uint32                `protobuf:"varint,12,opt,name=scaleDownUnreadyTime,proto3" json:"scaleDownUnreadyTime,omitempty"`
	UnregisteredNodeRemovalTime      uint32                `protobuf:"varint,13,opt,name=unregisteredNodeRemovalTime,proto3" json:"unregisteredNodeRemovalTime,omitempty"`
	ClusterID                        string                `protobuf:"bytes,14,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Creator                          string                `protobuf:"bytes,15,opt,name=creator,proto3" json:"creator,omitempty"`
	Provider                         string                `protobuf:"bytes,16,opt,name=provider,proto3" json:"provider,omitempty"`
	EnableAutoscale                  bool                  `protobuf:"varint,17,opt,name=enableAutoscale,proto3" json:"enableAutoscale,omitempty"`
	BufferResourceRatio              uint32                `protobuf:"varint,18,opt,name=bufferResourceRatio,proto3" json:"bufferResourceRatio,omitempty"`
	MaxGracefulTerminationSec        uint32                `protobuf:"varint,19,opt,name=maxGracefulTerminationSec,proto3" json:"maxGracefulTerminationSec,omitempty"`
	ScanInterval                     uint32                `protobuf:"varint,20,opt,name=scanInterval,proto3" json:"scanInterval,omitempty"`
	MaxNodeProvisionTime             uint32                `protobuf:"varint,21,opt,name=maxNodeProvisionTime,proto3" json:"maxNodeProvisionTime,omitempty"`
	ScaleUpFromZero                  *wrappers.BoolValue   `protobuf:"bytes,22,opt,name=scaleUpFromZero,proto3" json:"scaleUpFromZero,omitempty"`
	ScaleDownDelayAfterAdd           uint32                `protobuf:"varint,23,opt,name=scaleDownDelayAfterAdd,proto3" json:"scaleDownDelayAfterAdd,omitempty"`
	ScaleDownDelayAfterDelete        uint32                `protobuf:"varint,24,opt,name=scaleDownDelayAfterDelete,proto3" json:"scaleDownDelayAfterDelete,omitempty"`
	ScaleDownDelayAfterFailure       *wrappers.UInt32Value `protobuf:"bytes,25,opt,name=scaleDownDelayAfterFailure,proto3" json:"scaleDownDelayAfterFailure,omitempty"`
	ScaleDownGpuUtilizationThreshold uint32                `protobuf:"varint,26,opt,name=scaleDownGpuUtilizationThreshold,proto3" json:"scaleDownGpuUtilizationThreshold,omitempty"`
	BufferResourceCpuRatio           uint32                `protobuf:"varint,27,opt,name=bufferResourceCpuRatio,proto3" json:"bufferResourceCpuRatio,omitempty"`
	BufferResourceMemRatio           uint32                `protobuf:"varint,28,opt,name=bufferResourceMemRatio,proto3" json:"bufferResourceMemRatio,omitempty"`
}

func (x *CreateAutoScalingOptionRequest) Reset() {
	*x = CreateAutoScalingOptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAutoScalingOptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAutoScalingOptionRequest) ProtoMessage() {}

func (x *CreateAutoScalingOptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAutoScalingOptionRequest.ProtoReflect.Descriptor instead.
func (*CreateAutoScalingOptionRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{265}
}

func (x *CreateAutoScalingOptionRequest) GetIsScaleDownEnable() bool {
	if x != nil {
		return x.IsScaleDownEnable
	}
	return false
}

func (x *CreateAutoScalingOptionRequest) GetExpander() string {
	if x != nil {
		return x.Expander
	}
	return ""
}

func (x *CreateAutoScalingOptionRequest) GetMaxEmptyBulkDelete() uint32 {
	if x != nil {
		return x.MaxEmptyBulkDelete
	}
	return 0
}

func (x *CreateAutoScalingOptionRequest) GetScaleDownDelay() uint32 {
	if x != nil {
		return x.ScaleDownDelay
	}
	return 0
}

func (x *CreateAutoScalingOptionRequest) GetScaleDownUnneededTime() uint32 {
	if x != nil {
		return x.ScaleDownUnneededTime
	}
	return 0
}

func (x *CreateAutoScalingOptionRequest) GetScaleDownUtilizationThreahold() uint32 {
	if x != nil {
		return x.ScaleDownUtilizationThreahold
	}
	return 0
}

func (x *CreateAutoScalingOptionRequest) GetSkipNodesWithLocalStorage() bool {
	if x != nil {
		return x.SkipNodesWithLocalStorage
	}
	return false
}

func (x *CreateAutoScalingOptionRequest) GetSkipNodesWithSystemPods() bool {
	if x != nil {
		return x.SkipNodesWithSystemPods
	}
	return false
}

func (x *CreateAutoScalingOptionRequest) GetIgnoreDaemonSetsUtilization() bool {
	if x != nil {
		return x.IgnoreDaemonSetsUtilization
	}
	return false
}

func (x *CreateAutoScalingOptionRequest) GetOkTotalUnreadyCount() uint32 {
	if x != nil {
		return x.OkTotalUnreadyCount
	}
	return 0
}

func (x *CreateAutoScalingOptionRequest) GetMaxTotalUnreadyPercentage() uint32 {
	if x != nil {
		return x.MaxTotalUnreadyPercentage
	}
	return 0
}

func (x *CreateAutoScalingOptionRequest) GetScaleDownUnreadyTime() uint32 {
	if x != nil {
		return x.ScaleDownUnreadyTime
	}
	return 0
}

func (x *CreateAutoScalingOptionRequest) GetUnregisteredNodeRemovalTime() uint32 {
	if x != nil {
		return x.UnregisteredNodeRemovalTime
	}
	return 0
}

func (x *CreateAutoScalingOptionRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *CreateAutoScalingOptionRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreateAutoScalingOptionRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CreateAutoScalingOptionRequest) GetEnableAutoscale() bool {
	if x != nil {
		return x.EnableAutoscale
	}
	return false
}

func (x *CreateAutoScalingOptionRequest) GetBufferResourceRatio() uint32 {
	if x != nil {
		return x.BufferResourceRatio
	}
	return 0
}

func (x *CreateAutoScalingOptionRequest) GetMaxGracefulTerminationSec() uint32 {
	if x != nil {
		return x.MaxGracefulTerminationSec
	}
	return 0
}

func (x *CreateAutoScalingOptionRequest) GetScanInterval() uint32 {
	if x != nil {
		return x.ScanInterval
	}
	return 0
}

func (x *CreateAutoScalingOptionRequest) GetMaxNodeProvisionTime() uint32 {
	if x != nil {
		return x.MaxNodeProvisionTime
	}
	return 0
}

func (x *CreateAutoScalingOptionRequest) GetScaleUpFromZero() *wrappers.BoolValue {
	if x != nil {
		return x.ScaleUpFromZero
	}
	return nil
}

func (x *CreateAutoScalingOptionRequest) GetScaleDownDelayAfterAdd() uint32 {
	if x != nil {
		return x.ScaleDownDelayAfterAdd
	}
	return 0
}

func (x *CreateAutoScalingOptionRequest) GetScaleDownDelayAfterDelete() uint32 {
	if x != nil {
		return x.ScaleDownDelayAfterDelete
	}
	return 0
}

func (x *CreateAutoScalingOptionRequest) GetScaleDownDelayAfterFailure() *wrappers.UInt32Value {
	if x != nil {
		return x.ScaleDownDelayAfterFailure
	}
	return nil
}

func (x *CreateAutoScalingOptionRequest) GetScaleDownGpuUtilizationThreshold() uint32 {
	if x != nil {
		return x.ScaleDownGpuUtilizationThreshold
	}
	return 0
}

func (x *CreateAutoScalingOptionRequest) GetBufferResourceCpuRatio() uint32 {
	if x != nil {
		return x.BufferResourceCpuRatio
	}
	return 0
}

func (x *CreateAutoScalingOptionRequest) GetBufferResourceMemRatio() uint32 {
	if x != nil {
		return x.BufferResourceMemRatio
	}
	return 0
}

type CreateAutoScalingOptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                      `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *ClusterAutoScalingOption `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateAutoScalingOptionResponse) Reset() {
	*x = CreateAutoScalingOptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAutoScalingOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAutoScalingOptionResponse) ProtoMessage() {}

func (x *CreateAutoScalingOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAutoScalingOptionResponse.ProtoReflect.Descriptor instead.
func (*CreateAutoScalingOptionResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{266}
}

func (x *CreateAutoScalingOptionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateAutoScalingOptionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateAutoScalingOptionResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CreateAutoScalingOptionResponse) GetData() *ClusterAutoScalingOption {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateAutoScalingOptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsScaleDownEnable                bool                  `protobuf:"varint,1,opt,name=isScaleDownEnable,proto3" json:"isScaleDownEnable,omitempty"`
	Expander                         string                `protobuf:"bytes,2,opt,name=expander,proto3" json:"expander,omitempty"`
	MaxEmptyBulkDelete               uint32                `protobuf:"varint,3,opt,name=maxEmptyBulkDelete,proto3" json:"maxEmptyBulkDelete,omitempty"`
	ScaleDownDelay                   uint32                `protobuf:"varint,4,opt,name=scaleDownDelay,proto3" json:"scaleDownDelay,omitempty"`
	ScaleDownUnneededTime            uint32                `protobuf:"varint,5,opt,name=scaleDownUnneededTime,proto3" json:"scaleDownUnneededTime,omitempty"`
	ScaleDownUtilizationThreahold    uint32                `protobuf:"varint,6,opt,name=scaleDownUtilizationThreahold,proto3" json:"scaleDownUtilizationThreahold,omitempty"`
	SkipNodesWithLocalStorage        *wrappers.BoolValue   `protobuf:"bytes,7,opt,name=skipNodesWithLocalStorage,proto3" json:"skipNodesWithLocalStorage,omitempty"`
	SkipNodesWithSystemPods          *wrappers.BoolValue   `protobuf:"bytes,8,opt,name=skipNodesWithSystemPods,proto3" json:"skipNodesWithSystemPods,omitempty"`
	IgnoreDaemonSetsUtilization      *wrappers.BoolValue   `protobuf:"bytes,9,opt,name=ignoreDaemonSetsUtilization,proto3" json:"ignoreDaemonSetsUtilization,omitempty"`
	OkTotalUnreadyCount              uint32                `protobuf:"varint,10,opt,name=okTotalUnreadyCount,proto3" json:"okTotalUnreadyCount,omitempty"`
	MaxTotalUnreadyPercentage        uint32                `protobuf:"varint,11,opt,name=maxTotalUnreadyPercentage,proto3" json:"maxTotalUnreadyPercentage,omitempty"`
	ScaleDownUnreadyTime             uint32                `protobuf:"varint,12,opt,name=scaleDownUnreadyTime,proto3" json:"scaleDownUnreadyTime,omitempty"`
	UnregisteredNodeRemovalTime      uint32                `protobuf:"varint,13,opt,name=unregisteredNodeRemovalTime,proto3" json:"unregisteredNodeRemovalTime,omitempty"`
	ProjectID                        string                `protobuf:"bytes,14,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID                        string                `protobuf:"bytes,15,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Updater                          string                `protobuf:"bytes,16,opt,name=updater,proto3" json:"updater,omitempty"`
	Provider                         string                `protobuf:"bytes,17,opt,name=provider,proto3" json:"provider,omitempty"`
	ScaleDownGpuUtilizationThreshold uint32                `protobuf:"varint,18,opt,name=scaleDownGpuUtilizationThreshold,proto3" json:"scaleDownGpuUtilizationThreshold,omitempty"`
	BufferResourceRatio              *wrappers.UInt32Value `protobuf:"bytes,19,opt,name=bufferResourceRatio,proto3" json:"bufferResourceRatio,omitempty"`
	MaxGracefulTerminationSec        uint32                `protobuf:"varint,20,opt,name=maxGracefulTerminationSec,proto3" json:"maxGracefulTerminationSec,omitempty"`
	ScanInterval                     uint32                `protobuf:"varint,21,opt,name=scanInterval,proto3" json:"scanInterval,omitempty"`
	MaxNodeProvisionTime             uint32                `protobuf:"varint,22,opt,name=maxNodeProvisionTime,proto3" json:"maxNodeProvisionTime,omitempty"`
	ScaleUpFromZero                  *wrappers.BoolValue   `protobuf:"bytes,23,opt,name=scaleUpFromZero,proto3" json:"scaleUpFromZero,omitempty"`
	ScaleDownDelayAfterAdd           uint32                `protobuf:"varint,24,opt,name=scaleDownDelayAfterAdd,proto3" json:"scaleDownDelayAfterAdd,omitempty"`
	ScaleDownDelayAfterDelete        uint32                `protobuf:"varint,25,opt,name=scaleDownDelayAfterDelete,proto3" json:"scaleDownDelayAfterDelete,omitempty"`
	ScaleDownDelayAfterFailure       *wrappers.UInt32Value `protobuf:"bytes,26,opt,name=scaleDownDelayAfterFailure,proto3" json:"scaleDownDelayAfterFailure,omitempty"`
	BufferResourceCpuRatio           uint32                `protobuf:"varint,27,opt,name=bufferResourceCpuRatio,proto3" json:"bufferResourceCpuRatio,omitempty"`
	BufferResourceMemRatio           uint32                `protobuf:"varint,28,opt,name=bufferResourceMemRatio,proto3" json:"bufferResourceMemRatio,omitempty"`
	Module                           *ModuleInfo           `protobuf:"bytes,29,opt,name=module,proto3" json:"module,omitempty"`
	Webhook                          *WebhookMode          `protobuf:"bytes,30,opt,name=webhook,proto3" json:"webhook,omitempty"`
	OnlyUpdateInfo                   bool                  `protobuf:"varint,31,opt,name=onlyUpdateInfo,proto3" json:"onlyUpdateInfo,omitempty"`
	ExpendablePodsPriorityCutoff     *wrappers.Int32Value  `protobuf:"bytes,37,opt,name=expendablePodsPriorityCutoff,proto3" json:"expendablePodsPriorityCutoff,omitempty"`
	NewPodScaleUpDelay               *wrappers.UInt32Value `protobuf:"bytes,38,opt,name=newPodScaleUpDelay,proto3" json:"newPodScaleUpDelay,omitempty"`
}

func (x *UpdateAutoScalingOptionRequest) Reset() {
	*x = UpdateAutoScalingOptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAutoScalingOptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAutoScalingOptionRequest) ProtoMessage() {}

func (x *UpdateAutoScalingOptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAutoScalingOptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateAutoScalingOptionRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{267}
}

func (x *UpdateAutoScalingOptionRequest) GetIsScaleDownEnable() bool {
	if x != nil {
		return x.IsScaleDownEnable
	}
	return false
}

func (x *UpdateAutoScalingOptionRequest) GetExpander() string {
	if x != nil {
		return x.Expander
	}
	return ""
}

func (x *UpdateAutoScalingOptionRequest) GetMaxEmptyBulkDelete() uint32 {
	if x != nil {
		return x.MaxEmptyBulkDelete
	}
	return 0
}

func (x *UpdateAutoScalingOptionRequest) GetScaleDownDelay() uint32 {
	if x != nil {
		return x.ScaleDownDelay
	}
	return 0
}

func (x *UpdateAutoScalingOptionRequest) GetScaleDownUnneededTime() uint32 {
	if x != nil {
		return x.ScaleDownUnneededTime
	}
	return 0
}

func (x *UpdateAutoScalingOptionRequest) GetScaleDownUtilizationThreahold() uint32 {
	if x != nil {
		return x.ScaleDownUtilizationThreahold
	}
	return 0
}

func (x *UpdateAutoScalingOptionRequest) GetSkipNodesWithLocalStorage() *wrappers.BoolValue {
	if x != nil {
		return x.SkipNodesWithLocalStorage
	}
	return nil
}

func (x *UpdateAutoScalingOptionRequest) GetSkipNodesWithSystemPods() *wrappers.BoolValue {
	if x != nil {
		return x.SkipNodesWithSystemPods
	}
	return nil
}

func (x *UpdateAutoScalingOptionRequest) GetIgnoreDaemonSetsUtilization() *wrappers.BoolValue {
	if x != nil {
		return x.IgnoreDaemonSetsUtilization
	}
	return nil
}

func (x *UpdateAutoScalingOptionRequest) GetOkTotalUnreadyCount() uint32 {
	if x != nil {
		return x.OkTotalUnreadyCount
	}
	return 0
}

func (x *UpdateAutoScalingOptionRequest) GetMaxTotalUnreadyPercentage() uint32 {
	if x != nil {
		return x.MaxTotalUnreadyPercentage
	}
	return 0
}

func (x *UpdateAutoScalingOptionRequest) GetScaleDownUnreadyTime() uint32 {
	if x != nil {
		return x.ScaleDownUnreadyTime
	}
	return 0
}

func (x *UpdateAutoScalingOptionRequest) GetUnregisteredNodeRemovalTime() uint32 {
	if x != nil {
		return x.UnregisteredNodeRemovalTime
	}
	return 0
}

func (x *UpdateAutoScalingOptionRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *UpdateAutoScalingOptionRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *UpdateAutoScalingOptionRequest) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *UpdateAutoScalingOptionRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *UpdateAutoScalingOptionRequest) GetScaleDownGpuUtilizationThreshold() uint32 {
	if x != nil {
		return x.ScaleDownGpuUtilizationThreshold
	}
	return 0
}

func (x *UpdateAutoScalingOptionRequest) GetBufferResourceRatio() *wrappers.UInt32Value {
	if x != nil {
		return x.BufferResourceRatio
	}
	return nil
}

func (x *UpdateAutoScalingOptionRequest) GetMaxGracefulTerminationSec() uint32 {
	if x != nil {
		return x.MaxGracefulTerminationSec
	}
	return 0
}

func (x *UpdateAutoScalingOptionRequest) GetScanInterval() uint32 {
	if x != nil {
		return x.ScanInterval
	}
	return 0
}

func (x *UpdateAutoScalingOptionRequest) GetMaxNodeProvisionTime() uint32 {
	if x != nil {
		return x.MaxNodeProvisionTime
	}
	return 0
}

func (x *UpdateAutoScalingOptionRequest) GetScaleUpFromZero() *wrappers.BoolValue {
	if x != nil {
		return x.ScaleUpFromZero
	}
	return nil
}

func (x *UpdateAutoScalingOptionRequest) GetScaleDownDelayAfterAdd() uint32 {
	if x != nil {
		return x.ScaleDownDelayAfterAdd
	}
	return 0
}

func (x *UpdateAutoScalingOptionRequest) GetScaleDownDelayAfterDelete() uint32 {
	if x != nil {
		return x.ScaleDownDelayAfterDelete
	}
	return 0
}

func (x *UpdateAutoScalingOptionRequest) GetScaleDownDelayAfterFailure() *wrappers.UInt32Value {
	if x != nil {
		return x.ScaleDownDelayAfterFailure
	}
	return nil
}

func (x *UpdateAutoScalingOptionRequest) GetBufferResourceCpuRatio() uint32 {
	if x != nil {
		return x.BufferResourceCpuRatio
	}
	return 0
}

func (x *UpdateAutoScalingOptionRequest) GetBufferResourceMemRatio() uint32 {
	if x != nil {
		return x.BufferResourceMemRatio
	}
	return 0
}

func (x *UpdateAutoScalingOptionRequest) GetModule() *ModuleInfo {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *UpdateAutoScalingOptionRequest) GetWebhook() *WebhookMode {
	if x != nil {
		return x.Webhook
	}
	return nil
}

func (x *UpdateAutoScalingOptionRequest) GetOnlyUpdateInfo() bool {
	if x != nil {
		return x.OnlyUpdateInfo
	}
	return false
}

func (x *UpdateAutoScalingOptionRequest) GetExpendablePodsPriorityCutoff() *wrappers.Int32Value {
	if x != nil {
		return x.ExpendablePodsPriorityCutoff
	}
	return nil
}

func (x *UpdateAutoScalingOptionRequest) GetNewPodScaleUpDelay() *wrappers.UInt32Value {
	if x != nil {
		return x.NewPodScaleUpDelay
	}
	return nil
}

type UpdateAutoScalingOptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string                    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool                      `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *ClusterAutoScalingOption `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2         `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *UpdateAutoScalingOptionResponse) Reset() {
	*x = UpdateAutoScalingOptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAutoScalingOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAutoScalingOptionResponse) ProtoMessage() {}

func (x *UpdateAutoScalingOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAutoScalingOptionResponse.ProtoReflect.Descriptor instead.
func (*UpdateAutoScalingOptionResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{268}
}

func (x *UpdateAutoScalingOptionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateAutoScalingOptionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateAutoScalingOptionResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateAutoScalingOptionResponse) GetData() *ClusterAutoScalingOption {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateAutoScalingOptionResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type UpdateAsOptionDeviceProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Provider  string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *UpdateAsOptionDeviceProviderRequest) Reset() {
	*x = UpdateAsOptionDeviceProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAsOptionDeviceProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAsOptionDeviceProviderRequest) ProtoMessage() {}

func (x *UpdateAsOptionDeviceProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAsOptionDeviceProviderRequest.ProtoReflect.Descriptor instead.
func (*UpdateAsOptionDeviceProviderRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{269}
}

func (x *UpdateAsOptionDeviceProviderRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *UpdateAsOptionDeviceProviderRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type UpdateAsOptionDeviceProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UpdateAsOptionDeviceProviderResponse) Reset() {
	*x = UpdateAsOptionDeviceProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAsOptionDeviceProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAsOptionDeviceProviderResponse) ProtoMessage() {}

func (x *UpdateAsOptionDeviceProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAsOptionDeviceProviderResponse.ProtoReflect.Descriptor instead.
func (*UpdateAsOptionDeviceProviderResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{270}
}

func (x *UpdateAsOptionDeviceProviderResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateAsOptionDeviceProviderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateAsOptionDeviceProviderResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type SyncAutoScalingOptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsScaleDownEnable                bool                  `protobuf:"varint,1,opt,name=isScaleDownEnable,proto3" json:"isScaleDownEnable,omitempty"`
	Expander                         string                `protobuf:"bytes,2,opt,name=expander,proto3" json:"expander,omitempty"`
	MaxEmptyBulkDelete               uint32                `protobuf:"varint,3,opt,name=maxEmptyBulkDelete,proto3" json:"maxEmptyBulkDelete,omitempty"`
	ScaleDownDelay                   uint32                `protobuf:"varint,4,opt,name=scaleDownDelay,proto3" json:"scaleDownDelay,omitempty"`
	ScaleDownUnneededTime            uint32                `protobuf:"varint,5,opt,name=scaleDownUnneededTime,proto3" json:"scaleDownUnneededTime,omitempty"`
	ScaleDownUtilizationThreahold    uint32                `protobuf:"varint,6,opt,name=scaleDownUtilizationThreahold,proto3" json:"scaleDownUtilizationThreahold,omitempty"`
	SkipNodesWithLocalStorage        bool                  `protobuf:"varint,7,opt,name=skipNodesWithLocalStorage,proto3" json:"skipNodesWithLocalStorage,omitempty"`
	SkipNodesWithSystemPods          bool                  `protobuf:"varint,8,opt,name=skipNodesWithSystemPods,proto3" json:"skipNodesWithSystemPods,omitempty"`
	IgnoreDaemonSetsUtilization      bool                  `protobuf:"varint,9,opt,name=ignoreDaemonSetsUtilization,proto3" json:"ignoreDaemonSetsUtilization,omitempty"`
	OkTotalUnreadyCount              uint32                `protobuf:"varint,10,opt,name=okTotalUnreadyCount,proto3" json:"okTotalUnreadyCount,omitempty"`
	MaxTotalUnreadyPercentage        uint32                `protobuf:"varint,11,opt,name=maxTotalUnreadyPercentage,proto3" json:"maxTotalUnreadyPercentage,omitempty"`
	ScaleDownUnreadyTime             uint32                `protobuf:"varint,12,opt,name=scaleDownUnreadyTime,proto3" json:"scaleDownUnreadyTime,omitempty"`
	ClusterID                        string                `protobuf:"bytes,13,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Updater                          string                `protobuf:"bytes,14,opt,name=updater,proto3" json:"updater,omitempty"`
	ScaleDownGpuUtilizationThreshold uint32                `protobuf:"varint,15,opt,name=scaleDownGpuUtilizationThreshold,proto3" json:"scaleDownGpuUtilizationThreshold,omitempty"`
	BufferResourceRatio              uint32                `protobuf:"varint,16,opt,name=bufferResourceRatio,proto3" json:"bufferResourceRatio,omitempty"`
	MaxGracefulTerminationSec        uint32                `protobuf:"varint,17,opt,name=maxGracefulTerminationSec,proto3" json:"maxGracefulTerminationSec,omitempty"`
	ScanInterval                     uint32                `protobuf:"varint,18,opt,name=scanInterval,proto3" json:"scanInterval,omitempty"`
	MaxNodeProvisionTime             uint32                `protobuf:"varint,19,opt,name=maxNodeProvisionTime,proto3" json:"maxNodeProvisionTime,omitempty"`
	MaxNodeStartupTime               uint32                `protobuf:"varint,20,opt,name=maxNodeStartupTime,proto3" json:"maxNodeStartupTime,omitempty"`
	MaxNodeStartScheduleTime         uint32                `protobuf:"varint,21,opt,name=maxNodeStartScheduleTime,proto3" json:"maxNodeStartScheduleTime,omitempty"`
	ScaleUpFromZero                  *wrappers.BoolValue   `protobuf:"bytes,22,opt,name=scaleUpFromZero,proto3" json:"scaleUpFromZero,omitempty"`
	ScaleDownDelayAfterAdd           uint32                `protobuf:"varint,23,opt,name=scaleDownDelayAfterAdd,proto3" json:"scaleDownDelayAfterAdd,omitempty"`
	ScaleDownDelayAfterDelete        uint32                `protobuf:"varint,24,opt,name=scaleDownDelayAfterDelete,proto3" json:"scaleDownDelayAfterDelete,omitempty"`
	ScaleDownDelayAfterFailure       *wrappers.UInt32Value `protobuf:"bytes,25,opt,name=scaleDownDelayAfterFailure,proto3" json:"scaleDownDelayAfterFailure,omitempty"`
	BufferResourceCpuRatio           uint32                `protobuf:"varint,26,opt,name=bufferResourceCpuRatio,proto3" json:"bufferResourceCpuRatio,omitempty"`
	BufferResourceMemRatio           uint32                `protobuf:"varint,27,opt,name=bufferResourceMemRatio,proto3" json:"bufferResourceMemRatio,omitempty"`
	Webhook                          *WebhookMode          `protobuf:"bytes,28,opt,name=webhook,proto3" json:"webhook,omitempty"`
	ExpendablePodsPriorityCutoff     *wrappers.Int32Value  `protobuf:"bytes,29,opt,name=expendablePodsPriorityCutoff,proto3" json:"expendablePodsPriorityCutoff,omitempty"`
	NewPodScaleUpDelay               *wrappers.UInt32Value `protobuf:"bytes,30,opt,name=newPodScaleUpDelay,proto3" json:"newPodScaleUpDelay,omitempty"`
}

func (x *SyncAutoScalingOptionRequest) Reset() {
	*x = SyncAutoScalingOptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncAutoScalingOptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAutoScalingOptionRequest) ProtoMessage() {}

func (x *SyncAutoScalingOptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAutoScalingOptionRequest.ProtoReflect.Descriptor instead.
func (*SyncAutoScalingOptionRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{271}
}

func (x *SyncAutoScalingOptionRequest) GetIsScaleDownEnable() bool {
	if x != nil {
		return x.IsScaleDownEnable
	}
	return false
}

func (x *SyncAutoScalingOptionRequest) GetExpander() string {
	if x != nil {
		return x.Expander
	}
	return ""
}

func (x *SyncAutoScalingOptionRequest) GetMaxEmptyBulkDelete() uint32 {
	if x != nil {
		return x.MaxEmptyBulkDelete
	}
	return 0
}

func (x *SyncAutoScalingOptionRequest) GetScaleDownDelay() uint32 {
	if x != nil {
		return x.ScaleDownDelay
	}
	return 0
}

func (x *SyncAutoScalingOptionRequest) GetScaleDownUnneededTime() uint32 {
	if x != nil {
		return x.ScaleDownUnneededTime
	}
	return 0
}

func (x *SyncAutoScalingOptionRequest) GetScaleDownUtilizationThreahold() uint32 {
	if x != nil {
		return x.ScaleDownUtilizationThreahold
	}
	return 0
}

func (x *SyncAutoScalingOptionRequest) GetSkipNodesWithLocalStorage() bool {
	if x != nil {
		return x.SkipNodesWithLocalStorage
	}
	return false
}

func (x *SyncAutoScalingOptionRequest) GetSkipNodesWithSystemPods() bool {
	if x != nil {
		return x.SkipNodesWithSystemPods
	}
	return false
}

func (x *SyncAutoScalingOptionRequest) GetIgnoreDaemonSetsUtilization() bool {
	if x != nil {
		return x.IgnoreDaemonSetsUtilization
	}
	return false
}

func (x *SyncAutoScalingOptionRequest) GetOkTotalUnreadyCount() uint32 {
	if x != nil {
		return x.OkTotalUnreadyCount
	}
	return 0
}

func (x *SyncAutoScalingOptionRequest) GetMaxTotalUnreadyPercentage() uint32 {
	if x != nil {
		return x.MaxTotalUnreadyPercentage
	}
	return 0
}

func (x *SyncAutoScalingOptionRequest) GetScaleDownUnreadyTime() uint32 {
	if x != nil {
		return x.ScaleDownUnreadyTime
	}
	return 0
}

func (x *SyncAutoScalingOptionRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *SyncAutoScalingOptionRequest) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *SyncAutoScalingOptionRequest) GetScaleDownGpuUtilizationThreshold() uint32 {
	if x != nil {
		return x.ScaleDownGpuUtilizationThreshold
	}
	return 0
}

func (x *SyncAutoScalingOptionRequest) GetBufferResourceRatio() uint32 {
	if x != nil {
		return x.BufferResourceRatio
	}
	return 0
}

func (x *SyncAutoScalingOptionRequest) GetMaxGracefulTerminationSec() uint32 {
	if x != nil {
		return x.MaxGracefulTerminationSec
	}
	return 0
}

func (x *SyncAutoScalingOptionRequest) GetScanInterval() uint32 {
	if x != nil {
		return x.ScanInterval
	}
	return 0
}

func (x *SyncAutoScalingOptionRequest) GetMaxNodeProvisionTime() uint32 {
	if x != nil {
		return x.MaxNodeProvisionTime
	}
	return 0
}

func (x *SyncAutoScalingOptionRequest) GetMaxNodeStartupTime() uint32 {
	if x != nil {
		return x.MaxNodeStartupTime
	}
	return 0
}

func (x *SyncAutoScalingOptionRequest) GetMaxNodeStartScheduleTime() uint32 {
	if x != nil {
		return x.MaxNodeStartScheduleTime
	}
	return 0
}

func (x *SyncAutoScalingOptionRequest) GetScaleUpFromZero() *wrappers.BoolValue {
	if x != nil {
		return x.ScaleUpFromZero
	}
	return nil
}

func (x *SyncAutoScalingOptionRequest) GetScaleDownDelayAfterAdd() uint32 {
	if x != nil {
		return x.ScaleDownDelayAfterAdd
	}
	return 0
}

func (x *SyncAutoScalingOptionRequest) GetScaleDownDelayAfterDelete() uint32 {
	if x != nil {
		return x.ScaleDownDelayAfterDelete
	}
	return 0
}

func (x *SyncAutoScalingOptionRequest) GetScaleDownDelayAfterFailure() *wrappers.UInt32Value {
	if x != nil {
		return x.ScaleDownDelayAfterFailure
	}
	return nil
}

func (x *SyncAutoScalingOptionRequest) GetBufferResourceCpuRatio() uint32 {
	if x != nil {
		return x.BufferResourceCpuRatio
	}
	return 0
}

func (x *SyncAutoScalingOptionRequest) GetBufferResourceMemRatio() uint32 {
	if x != nil {
		return x.BufferResourceMemRatio
	}
	return 0
}

func (x *SyncAutoScalingOptionRequest) GetWebhook() *WebhookMode {
	if x != nil {
		return x.Webhook
	}
	return nil
}

func (x *SyncAutoScalingOptionRequest) GetExpendablePodsPriorityCutoff() *wrappers.Int32Value {
	if x != nil {
		return x.ExpendablePodsPriorityCutoff
	}
	return nil
}

func (x *SyncAutoScalingOptionRequest) GetNewPodScaleUpDelay() *wrappers.UInt32Value {
	if x != nil {
		return x.NewPodScaleUpDelay
	}
	return nil
}

type SyncAutoScalingOptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string                    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool                      `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *ClusterAutoScalingOption `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2         `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *SyncAutoScalingOptionResponse) Reset() {
	*x = SyncAutoScalingOptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncAutoScalingOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAutoScalingOptionResponse) ProtoMessage() {}

func (x *SyncAutoScalingOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAutoScalingOptionResponse.ProtoReflect.Descriptor instead.
func (*SyncAutoScalingOptionResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{272}
}

func (x *SyncAutoScalingOptionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SyncAutoScalingOptionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SyncAutoScalingOptionResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *SyncAutoScalingOptionResponse) GetData() *ClusterAutoScalingOption {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SyncAutoScalingOptionResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type DeleteAutoScalingOptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	IsForce   bool   `protobuf:"varint,2,opt,name=isForce,proto3" json:"isForce,omitempty"`
}

func (x *DeleteAutoScalingOptionRequest) Reset() {
	*x = DeleteAutoScalingOptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAutoScalingOptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAutoScalingOptionRequest) ProtoMessage() {}

func (x *DeleteAutoScalingOptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAutoScalingOptionRequest.ProtoReflect.Descriptor instead.
func (*DeleteAutoScalingOptionRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{273}
}

func (x *DeleteAutoScalingOptionRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *DeleteAutoScalingOptionRequest) GetIsForce() bool {
	if x != nil {
		return x.IsForce
	}
	return false
}

type DeleteAutoScalingOptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string                    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool                      `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *ClusterAutoScalingOption `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2         `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *DeleteAutoScalingOptionResponse) Reset() {
	*x = DeleteAutoScalingOptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAutoScalingOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAutoScalingOptionResponse) ProtoMessage() {}

func (x *DeleteAutoScalingOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAutoScalingOptionResponse.ProtoReflect.Descriptor instead.
func (*DeleteAutoScalingOptionResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{274}
}

func (x *DeleteAutoScalingOptionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteAutoScalingOptionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteAutoScalingOptionResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteAutoScalingOptionResponse) GetData() *ClusterAutoScalingOption {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeleteAutoScalingOptionResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type GetAutoScalingOptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Provider  string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *GetAutoScalingOptionRequest) Reset() {
	*x = GetAutoScalingOptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAutoScalingOptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAutoScalingOptionRequest) ProtoMessage() {}

func (x *GetAutoScalingOptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAutoScalingOptionRequest.ProtoReflect.Descriptor instead.
func (*GetAutoScalingOptionRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{275}
}

func (x *GetAutoScalingOptionRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *GetAutoScalingOptionRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type GetAutoScalingOptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string                    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool                      `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *ClusterAutoScalingOption `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2         `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetAutoScalingOptionResponse) Reset() {
	*x = GetAutoScalingOptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAutoScalingOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAutoScalingOptionResponse) ProtoMessage() {}

func (x *GetAutoScalingOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAutoScalingOptionResponse.ProtoReflect.Descriptor instead.
func (*GetAutoScalingOptionResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{276}
}

func (x *GetAutoScalingOptionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAutoScalingOptionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetAutoScalingOptionResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetAutoScalingOptionResponse) GetData() *ClusterAutoScalingOption {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAutoScalingOptionResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListAutoScalingOptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ProjectID string `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Creator   string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater   string `protobuf:"bytes,4,opt,name=updater,proto3" json:"updater,omitempty"`
}

func (x *ListAutoScalingOptionRequest) Reset() {
	*x = ListAutoScalingOptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAutoScalingOptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAutoScalingOptionRequest) ProtoMessage() {}

func (x *ListAutoScalingOptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAutoScalingOptionRequest.ProtoReflect.Descriptor instead.
func (*ListAutoScalingOptionRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{277}
}

func (x *ListAutoScalingOptionRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ListAutoScalingOptionRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListAutoScalingOptionRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ListAutoScalingOptionRequest) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

type ListAutoScalingOptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                        `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*ClusterAutoScalingOption `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListAutoScalingOptionResponse) Reset() {
	*x = ListAutoScalingOptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAutoScalingOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAutoScalingOptionResponse) ProtoMessage() {}

func (x *ListAutoScalingOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAutoScalingOptionResponse.ProtoReflect.Descriptor instead.
func (*ListAutoScalingOptionResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{278}
}

func (x *ListAutoScalingOptionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListAutoScalingOptionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListAutoScalingOptionResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListAutoScalingOptionResponse) GetData() []*ClusterAutoScalingOption {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateAutoScalingStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable    bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	ClusterID string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Updater   string `protobuf:"bytes,3,opt,name=updater,proto3" json:"updater,omitempty"`
	Provider  string `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *UpdateAutoScalingStatusRequest) Reset() {
	*x = UpdateAutoScalingStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAutoScalingStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAutoScalingStatusRequest) ProtoMessage() {}

func (x *UpdateAutoScalingStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAutoScalingStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateAutoScalingStatusRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{279}
}

func (x *UpdateAutoScalingStatusRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *UpdateAutoScalingStatusRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *UpdateAutoScalingStatusRequest) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *UpdateAutoScalingStatusRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type UpdateAutoScalingStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string                    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool                      `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *ClusterAutoScalingOption `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2         `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *UpdateAutoScalingStatusResponse) Reset() {
	*x = UpdateAutoScalingStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAutoScalingStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAutoScalingStatusResponse) ProtoMessage() {}

func (x *UpdateAutoScalingStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAutoScalingStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateAutoScalingStatusResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{280}
}

func (x *UpdateAutoScalingStatusResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateAutoScalingStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateAutoScalingStatusResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateAutoScalingStatusResponse) GetData() *ClusterAutoScalingOption {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateAutoScalingStatusResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ServiceRoleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleName    string `protobuf:"bytes,1,opt,name=roleName,proto3" json:"roleName,omitempty"`
	RoleID      string `protobuf:"bytes,2,opt,name=roleID,proto3" json:"roleID,omitempty"`
	Arn         string `protobuf:"bytes,3,opt,name=arn,proto3" json:"arn,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ServiceRoleInfo) Reset() {
	*x = ServiceRoleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceRoleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRoleInfo) ProtoMessage() {}

func (x *ServiceRoleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRoleInfo.ProtoReflect.Descriptor instead.
func (*ServiceRoleInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{281}
}

func (x *ServiceRoleInfo) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *ServiceRoleInfo) GetRoleID() string {
	if x != nil {
		return x.RoleID
	}
	return ""
}

func (x *ServiceRoleInfo) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *ServiceRoleInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetServiceRolesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID   string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	AccountID string `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	RoleType  string `protobuf:"bytes,3,opt,name=roleType,proto3" json:"roleType,omitempty"`
}

func (x *GetServiceRolesRequest) Reset() {
	*x = GetServiceRolesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceRolesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceRolesRequest) ProtoMessage() {}

func (x *GetServiceRolesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceRolesRequest.ProtoReflect.Descriptor instead.
func (*GetServiceRolesRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{282}
}

func (x *GetServiceRolesRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *GetServiceRolesRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *GetServiceRolesRequest) GetRoleType() string {
	if x != nil {
		return x.RoleType
	}
	return ""
}

type GetServiceRolesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool               `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*ServiceRoleInfo `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetServiceRolesResponse) Reset() {
	*x = GetServiceRolesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceRolesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceRolesResponse) ProtoMessage() {}

func (x *GetServiceRolesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceRolesResponse.ProtoReflect.Descriptor instead.
func (*GetServiceRolesResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{283}
}

func (x *GetServiceRolesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetServiceRolesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetServiceRolesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetServiceRolesResponse) GetData() []*ServiceRoleInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ResourceGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Region            string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	ProvisioningState string `protobuf:"bytes,3,opt,name=provisioningState,proto3" json:"provisioningState,omitempty"`
}

func (x *ResourceGroupInfo) Reset() {
	*x = ResourceGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceGroupInfo) ProtoMessage() {}

func (x *ResourceGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceGroupInfo.ProtoReflect.Descriptor instead.
func (*ResourceGroupInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{284}
}

func (x *ResourceGroupInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceGroupInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ResourceGroupInfo) GetProvisioningState() string {
	if x != nil {
		return x.ProvisioningState
	}
	return ""
}

type GetResourceGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID   string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	AccountID string `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
}

func (x *GetResourceGroupsRequest) Reset() {
	*x = GetResourceGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceGroupsRequest) ProtoMessage() {}

func (x *GetResourceGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceGroupsRequest.ProtoReflect.Descriptor instead.
func (*GetResourceGroupsRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{285}
}

func (x *GetResourceGroupsRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *GetResourceGroupsRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

type GetResourceGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                 `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*ResourceGroupInfo `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetResourceGroupsResponse) Reset() {
	*x = GetResourceGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceGroupsResponse) ProtoMessage() {}

func (x *GetResourceGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceGroupsResponse.ProtoReflect.Descriptor instead.
func (*GetResourceGroupsResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{286}
}

func (x *GetResourceGroupsResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetResourceGroupsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetResourceGroupsResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetResourceGroupsResponse) GetData() []*ResourceGroupInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type RegionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region      string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	RegionName  string `protobuf:"bytes,2,opt,name=regionName,proto3" json:"regionName,omitempty"`
	RegionState string `protobuf:"bytes,3,opt,name=regionState,proto3" json:"regionState,omitempty"`
}

func (x *RegionInfo) Reset() {
	*x = RegionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionInfo) ProtoMessage() {}

func (x *RegionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionInfo.ProtoReflect.Descriptor instead.
func (*RegionInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{287}
}

func (x *RegionInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RegionInfo) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *RegionInfo) GetRegionState() string {
	if x != nil {
		return x.RegionState
	}
	return ""
}

type GetCloudRegionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID   string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	AccountID string `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
}

func (x *GetCloudRegionsRequest) Reset() {
	*x = GetCloudRegionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudRegionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudRegionsRequest) ProtoMessage() {}

func (x *GetCloudRegionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudRegionsRequest.ProtoReflect.Descriptor instead.
func (*GetCloudRegionsRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{288}
}

func (x *GetCloudRegionsRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *GetCloudRegionsRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

type GetCloudRegionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool          `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*RegionInfo `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCloudRegionsResponse) Reset() {
	*x = GetCloudRegionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudRegionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudRegionsResponse) ProtoMessage() {}

func (x *GetCloudRegionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudRegionsResponse.ProtoReflect.Descriptor instead.
func (*GetCloudRegionsResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{289}
}

func (x *GetCloudRegionsResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCloudRegionsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCloudRegionsResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetCloudRegionsResponse) GetData() []*RegionInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ZoneInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneID    string `protobuf:"bytes,1,opt,name=zoneID,proto3" json:"zoneID,omitempty"`
	Zone      string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	ZoneName  string `protobuf:"bytes,3,opt,name=zoneName,proto3" json:"zoneName,omitempty"`
	ZoneState string `protobuf:"bytes,4,opt,name=zoneState,proto3" json:"zoneState,omitempty"`
	SubnetNum uint32 `protobuf:"varint,5,opt,name=subnetNum,proto3" json:"subnetNum,omitempty"`
}

func (x *ZoneInfo) Reset() {
	*x = ZoneInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoneInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoneInfo) ProtoMessage() {}

func (x *ZoneInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoneInfo.ProtoReflect.Descriptor instead.
func (*ZoneInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{290}
}

func (x *ZoneInfo) GetZoneID() string {
	if x != nil {
		return x.ZoneID
	}
	return ""
}

func (x *ZoneInfo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ZoneInfo) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *ZoneInfo) GetZoneState() string {
	if x != nil {
		return x.ZoneState
	}
	return ""
}

func (x *ZoneInfo) GetSubnetNum() uint32 {
	if x != nil {
		return x.SubnetNum
	}
	return 0
}

type CloudClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID          string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ClusterName        string `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	ClusterDescription string `protobuf:"bytes,3,opt,name=clusterDescription,proto3" json:"clusterDescription,omitempty"`
	ClusterVersion     string `protobuf:"bytes,4,opt,name=clusterVersion,proto3" json:"clusterVersion,omitempty"`
	ClusterOS          string `protobuf:"bytes,5,opt,name=clusterOS,proto3" json:"clusterOS,omitempty"`
	ClusterType        string `protobuf:"bytes,6,opt,name=clusterType,proto3" json:"clusterType,omitempty"`
	ClusterStatus      string `protobuf:"bytes,7,opt,name=clusterStatus,proto3" json:"clusterStatus,omitempty"`
	Location           string `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	ClusterLevel       string `protobuf:"bytes,9,opt,name=clusterLevel,proto3" json:"clusterLevel,omitempty"`
}

func (x *CloudClusterInfo) Reset() {
	*x = CloudClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudClusterInfo) ProtoMessage() {}

func (x *CloudClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudClusterInfo.ProtoReflect.Descriptor instead.
func (*CloudClusterInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{291}
}

func (x *CloudClusterInfo) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *CloudClusterInfo) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CloudClusterInfo) GetClusterDescription() string {
	if x != nil {
		return x.ClusterDescription
	}
	return ""
}

func (x *CloudClusterInfo) GetClusterVersion() string {
	if x != nil {
		return x.ClusterVersion
	}
	return ""
}

func (x *CloudClusterInfo) GetClusterOS() string {
	if x != nil {
		return x.ClusterOS
	}
	return ""
}

func (x *CloudClusterInfo) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

func (x *CloudClusterInfo) GetClusterStatus() string {
	if x != nil {
		return x.ClusterStatus
	}
	return ""
}

func (x *CloudClusterInfo) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CloudClusterInfo) GetClusterLevel() string {
	if x != nil {
		return x.ClusterLevel
	}
	return ""
}

type ListCloudRegionClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID           string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Region            string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	AccountID         string `protobuf:"bytes,3,opt,name=accountID,proto3" json:"accountID,omitempty"`
	ResourceGroupName string `protobuf:"bytes,4,opt,name=resourceGroupName,proto3" json:"resourceGroupName,omitempty"`
}

func (x *ListCloudRegionClusterRequest) Reset() {
	*x = ListCloudRegionClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudRegionClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudRegionClusterRequest) ProtoMessage() {}

func (x *ListCloudRegionClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudRegionClusterRequest.ProtoReflect.Descriptor instead.
func (*ListCloudRegionClusterRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{292}
}

func (x *ListCloudRegionClusterRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *ListCloudRegionClusterRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListCloudRegionClusterRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ListCloudRegionClusterRequest) GetResourceGroupName() string {
	if x != nil {
		return x.ResourceGroupName
	}
	return ""
}

type ListCloudRegionClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*CloudClusterInfo `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudRegionClusterResponse) Reset() {
	*x = ListCloudRegionClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudRegionClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudRegionClusterResponse) ProtoMessage() {}

func (x *ListCloudRegionClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudRegionClusterResponse.ProtoReflect.Descriptor instead.
func (*ListCloudRegionClusterResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{293}
}

func (x *ListCloudRegionClusterResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCloudRegionClusterResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCloudRegionClusterResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListCloudRegionClusterResponse) GetData() []*CloudClusterInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCloudRegionZonesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID   string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Region    string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	AccountID string `protobuf:"bytes,3,opt,name=accountID,proto3" json:"accountID,omitempty"`
	VpcId     string `protobuf:"bytes,4,opt,name=vpcId,proto3" json:"vpcId,omitempty"`
	State     string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GetCloudRegionZonesRequest) Reset() {
	*x = GetCloudRegionZonesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudRegionZonesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudRegionZonesRequest) ProtoMessage() {}

func (x *GetCloudRegionZonesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudRegionZonesRequest.ProtoReflect.Descriptor instead.
func (*GetCloudRegionZonesRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{294}
}

func (x *GetCloudRegionZonesRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *GetCloudRegionZonesRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetCloudRegionZonesRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *GetCloudRegionZonesRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *GetCloudRegionZonesRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type GetCloudRegionZonesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool        `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*ZoneInfo `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCloudRegionZonesResponse) Reset() {
	*x = GetCloudRegionZonesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudRegionZonesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudRegionZonesResponse) ProtoMessage() {}

func (x *GetCloudRegionZonesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudRegionZonesResponse.ProtoReflect.Descriptor instead.
func (*GetCloudRegionZonesResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{295}
}

func (x *GetCloudRegionZonesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCloudRegionZonesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCloudRegionZonesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetCloudRegionZonesResponse) GetData() []*ZoneInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type OperationLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType string `protobuf:"bytes,1,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceID   string `protobuf:"bytes,2,opt,name=resourceID,proto3" json:"resourceID,omitempty"`
	TaskID       string `protobuf:"bytes,3,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Message      string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	OpUser       string `protobuf:"bytes,5,opt,name=opUser,proto3" json:"opUser,omitempty"`
	CreateTime   string `protobuf:"bytes,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	ClusterID    string `protobuf:"bytes,7,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ProjectID    string `protobuf:"bytes,8,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ResourceName string `protobuf:"bytes,9,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
}

func (x *OperationLog) Reset() {
	*x = OperationLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationLog) ProtoMessage() {}

func (x *OperationLog) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationLog.ProtoReflect.Descriptor instead.
func (*OperationLog) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{296}
}

func (x *OperationLog) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *OperationLog) GetResourceID() string {
	if x != nil {
		return x.ResourceID
	}
	return ""
}

func (x *OperationLog) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *OperationLog) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OperationLog) GetOpUser() string {
	if x != nil {
		return x.OpUser
	}
	return ""
}

func (x *OperationLog) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *OperationLog) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *OperationLog) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *OperationLog) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

type TaskOperationLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType string `protobuf:"bytes,1,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceID   string `protobuf:"bytes,2,opt,name=resourceID,proto3" json:"resourceID,omitempty"`
	TaskID       string `protobuf:"bytes,3,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Message      string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	OpUser       string `protobuf:"bytes,5,opt,name=opUser,proto3" json:"opUser,omitempty"`
	CreateTime   string `protobuf:"bytes,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	ClusterID    string `protobuf:"bytes,7,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ProjectID    string `protobuf:"bytes,8,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Status       string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	TaskType     string `protobuf:"bytes,10,opt,name=taskType,proto3" json:"taskType,omitempty"`
	ResourceName string `protobuf:"bytes,11,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
}

func (x *TaskOperationLog) Reset() {
	*x = TaskOperationLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOperationLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOperationLog) ProtoMessage() {}

func (x *TaskOperationLog) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOperationLog.ProtoReflect.Descriptor instead.
func (*TaskOperationLog) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{297}
}

func (x *TaskOperationLog) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *TaskOperationLog) GetResourceID() string {
	if x != nil {
		return x.ResourceID
	}
	return ""
}

func (x *TaskOperationLog) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *TaskOperationLog) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskOperationLog) GetOpUser() string {
	if x != nil {
		return x.OpUser
	}
	return ""
}

func (x *TaskOperationLog) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *TaskOperationLog) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *TaskOperationLog) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *TaskOperationLog) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskOperationLog) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *TaskOperationLog) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

type TaskStepLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID     string `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	StepName   string `protobuf:"bytes,2,opt,name=stepName,proto3" json:"stepName,omitempty"`
	Level      string `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	Message    string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	CreateTime string `protobuf:"bytes,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *TaskStepLog) Reset() {
	*x = TaskStepLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStepLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStepLog) ProtoMessage() {}

func (x *TaskStepLog) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStepLog.ProtoReflect.Descriptor instead.
func (*TaskStepLog) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{298}
}

func (x *TaskStepLog) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *TaskStepLog) GetStepName() string {
	if x != nil {
		return x.StepName
	}
	return ""
}

func (x *TaskStepLog) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *TaskStepLog) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskStepLog) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type ListCloudInstanceTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID      string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Region       string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	AccountID    string `protobuf:"bytes,3,opt,name=accountID,proto3" json:"accountID,omitempty"`
	Zone         string `protobuf:"bytes,4,opt,name=zone,proto3" json:"zone,omitempty"`
	NodeFamily   string `protobuf:"bytes,5,opt,name=nodeFamily,proto3" json:"nodeFamily,omitempty"`
	Cpu          uint32 `protobuf:"varint,6,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory       uint32 `protobuf:"varint,7,opt,name=memory,proto3" json:"memory,omitempty"`
	BizID        string `protobuf:"bytes,8,opt,name=bizID,proto3" json:"bizID,omitempty"`
	Provider     string `protobuf:"bytes,9,opt,name=provider,proto3" json:"provider,omitempty"`
	ResourceType string `protobuf:"bytes,10,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ProjectID    string `protobuf:"bytes,11,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (x *ListCloudInstanceTypeRequest) Reset() {
	*x = ListCloudInstanceTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudInstanceTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudInstanceTypeRequest) ProtoMessage() {}

func (x *ListCloudInstanceTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudInstanceTypeRequest.ProtoReflect.Descriptor instead.
func (*ListCloudInstanceTypeRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{299}
}

func (x *ListCloudInstanceTypeRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *ListCloudInstanceTypeRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListCloudInstanceTypeRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ListCloudInstanceTypeRequest) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ListCloudInstanceTypeRequest) GetNodeFamily() string {
	if x != nil {
		return x.NodeFamily
	}
	return ""
}

func (x *ListCloudInstanceTypeRequest) GetCpu() uint32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *ListCloudInstanceTypeRequest) GetMemory() uint32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ListCloudInstanceTypeRequest) GetBizID() string {
	if x != nil {
		return x.BizID
	}
	return ""
}

func (x *ListCloudInstanceTypeRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListCloudInstanceTypeRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ListCloudInstanceTypeRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

type ListCloudInstanceTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*InstanceType `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudInstanceTypeResponse) Reset() {
	*x = ListCloudInstanceTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudInstanceTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudInstanceTypeResponse) ProtoMessage() {}

func (x *ListCloudInstanceTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudInstanceTypeResponse.ProtoReflect.Descriptor instead.
func (*ListCloudInstanceTypeResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{300}
}

func (x *ListCloudInstanceTypeResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCloudInstanceTypeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCloudInstanceTypeResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListCloudInstanceTypeResponse) GetData() []*InstanceType {
	if x != nil {
		return x.Data
	}
	return nil
}

type InstanceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType       string      `protobuf:"bytes,1,opt,name=nodeType,proto3" json:"nodeType,omitempty"`
	TypeName       string      `protobuf:"bytes,2,opt,name=typeName,proto3" json:"typeName,omitempty"`
	NodeFamily     string      `protobuf:"bytes,3,opt,name=nodeFamily,proto3" json:"nodeFamily,omitempty"`
	Cpu            uint32      `protobuf:"varint,4,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory         uint32      `protobuf:"varint,5,opt,name=memory,proto3" json:"memory,omitempty"`
	Gpu            uint32      `protobuf:"varint,6,opt,name=gpu,proto3" json:"gpu,omitempty"`
	Status         string      `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	UnitPrice      float32     `protobuf:"fixed32,8,opt,name=unitPrice,proto3" json:"unitPrice,omitempty"`
	Zones          []string    `protobuf:"bytes,9,rep,name=zones,proto3" json:"zones,omitempty"`
	Provider       string      `protobuf:"bytes,10,opt,name=provider,proto3" json:"provider,omitempty"`
	ResourcePoolID string      `protobuf:"bytes,11,opt,name=resourcePoolID,proto3" json:"resourcePoolID,omitempty"`
	SystemDisk     *DataDisk   `protobuf:"bytes,12,opt,name=systemDisk,proto3" json:"systemDisk,omitempty"`
	DataDisks      []*DataDisk `protobuf:"bytes,13,rep,name=dataDisks,proto3" json:"dataDisks,omitempty"`
	AvailableQuota uint32      `protobuf:"varint,14,opt,name=availableQuota,proto3" json:"availableQuota,omitempty"`
	Region         string      `protobuf:"bytes,15,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *InstanceType) Reset() {
	*x = InstanceType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceType) ProtoMessage() {}

func (x *InstanceType) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceType.ProtoReflect.Descriptor instead.
func (*InstanceType) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{301}
}

func (x *InstanceType) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

func (x *InstanceType) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *InstanceType) GetNodeFamily() string {
	if x != nil {
		return x.NodeFamily
	}
	return ""
}

func (x *InstanceType) GetCpu() uint32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *InstanceType) GetMemory() uint32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *InstanceType) GetGpu() uint32 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *InstanceType) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *InstanceType) GetUnitPrice() float32 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *InstanceType) GetZones() []string {
	if x != nil {
		return x.Zones
	}
	return nil
}

func (x *InstanceType) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *InstanceType) GetResourcePoolID() string {
	if x != nil {
		return x.ResourcePoolID
	}
	return ""
}

func (x *InstanceType) GetSystemDisk() *DataDisk {
	if x != nil {
		return x.SystemDisk
	}
	return nil
}

func (x *InstanceType) GetDataDisks() []*DataDisk {
	if x != nil {
		return x.DataDisks
	}
	return nil
}

func (x *InstanceType) GetAvailableQuota() uint32 {
	if x != nil {
		return x.AvailableQuota
	}
	return 0
}

func (x *InstanceType) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type ListCloudDiskTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID          string   `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	AccountID        string   `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	Region           string   `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	InstanceFamilies []string `protobuf:"bytes,4,rep,name=instanceFamilies,proto3" json:"instanceFamilies,omitempty"`
	Zones            []string `protobuf:"bytes,5,rep,name=zones,proto3" json:"zones,omitempty"`
	DiskChargeType   string   `protobuf:"bytes,6,opt,name=diskChargeType,proto3" json:"diskChargeType,omitempty"`
	Cpu              uint64   `protobuf:"varint,7,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory           uint64   `protobuf:"varint,8,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *ListCloudDiskTypesRequest) Reset() {
	*x = ListCloudDiskTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudDiskTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudDiskTypesRequest) ProtoMessage() {}

func (x *ListCloudDiskTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudDiskTypesRequest.ProtoReflect.Descriptor instead.
func (*ListCloudDiskTypesRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{302}
}

func (x *ListCloudDiskTypesRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *ListCloudDiskTypesRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ListCloudDiskTypesRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListCloudDiskTypesRequest) GetInstanceFamilies() []string {
	if x != nil {
		return x.InstanceFamilies
	}
	return nil
}

func (x *ListCloudDiskTypesRequest) GetZones() []string {
	if x != nil {
		return x.Zones
	}
	return nil
}

func (x *ListCloudDiskTypesRequest) GetDiskChargeType() string {
	if x != nil {
		return x.DiskChargeType
	}
	return ""
}

func (x *ListCloudDiskTypesRequest) GetCpu() uint64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *ListCloudDiskTypesRequest) GetMemory() uint64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

type ListCloudDiskTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool             `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*DiskConfigSet `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudDiskTypesResponse) Reset() {
	*x = ListCloudDiskTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudDiskTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudDiskTypesResponse) ProtoMessage() {}

func (x *ListCloudDiskTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudDiskTypesResponse.ProtoReflect.Descriptor instead.
func (*ListCloudDiskTypesResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{303}
}

func (x *ListCloudDiskTypesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCloudDiskTypesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCloudDiskTypesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListCloudDiskTypesResponse) GetData() []*DiskConfigSet {
	if x != nil {
		return x.Data
	}
	return nil
}

type DiskConfigSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskType     string `protobuf:"bytes,1,opt,name=diskType,proto3" json:"diskType,omitempty"`
	DiskTypeName string `protobuf:"bytes,2,opt,name=diskTypeName,proto3" json:"diskTypeName,omitempty"`
	DiskUsage    string `protobuf:"bytes,3,opt,name=diskUsage,proto3" json:"diskUsage,omitempty"`
	MinDiskSize  int32  `protobuf:"varint,4,opt,name=minDiskSize,proto3" json:"minDiskSize,omitempty"`
	MaxDiskSize  int32  `protobuf:"varint,5,opt,name=maxDiskSize,proto3" json:"maxDiskSize,omitempty"`
	StepSize     int32  `protobuf:"varint,6,opt,name=stepSize,proto3" json:"stepSize,omitempty"`
}

func (x *DiskConfigSet) Reset() {
	*x = DiskConfigSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskConfigSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskConfigSet) ProtoMessage() {}

func (x *DiskConfigSet) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskConfigSet.ProtoReflect.Descriptor instead.
func (*DiskConfigSet) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{304}
}

func (x *DiskConfigSet) GetDiskType() string {
	if x != nil {
		return x.DiskType
	}
	return ""
}

func (x *DiskConfigSet) GetDiskTypeName() string {
	if x != nil {
		return x.DiskTypeName
	}
	return ""
}

func (x *DiskConfigSet) GetDiskUsage() string {
	if x != nil {
		return x.DiskUsage
	}
	return ""
}

func (x *DiskConfigSet) GetMinDiskSize() int32 {
	if x != nil {
		return x.MinDiskSize
	}
	return 0
}

func (x *DiskConfigSet) GetMaxDiskSize() int32 {
	if x != nil {
		return x.MaxDiskSize
	}
	return 0
}

func (x *DiskConfigSet) GetStepSize() int32 {
	if x != nil {
		return x.StepSize
	}
	return 0
}

type GetMasterSuggestedMachinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID   string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Region    string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Level     string `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	AccountID string `protobuf:"bytes,4,opt,name=accountID,proto3" json:"accountID,omitempty"`
	VpcID     string `protobuf:"bytes,5,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	Cpu       uint32 `protobuf:"varint,6,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory    uint32 `protobuf:"varint,7,opt,name=memory,proto3" json:"memory,omitempty"`
	Zones     string `protobuf:"bytes,8,opt,name=zones,proto3" json:"zones,omitempty"`
}

func (x *GetMasterSuggestedMachinesRequest) Reset() {
	*x = GetMasterSuggestedMachinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMasterSuggestedMachinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMasterSuggestedMachinesRequest) ProtoMessage() {}

func (x *GetMasterSuggestedMachinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMasterSuggestedMachinesRequest.ProtoReflect.Descriptor instead.
func (*GetMasterSuggestedMachinesRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{305}
}

func (x *GetMasterSuggestedMachinesRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *GetMasterSuggestedMachinesRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetMasterSuggestedMachinesRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *GetMasterSuggestedMachinesRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *GetMasterSuggestedMachinesRequest) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *GetMasterSuggestedMachinesRequest) GetCpu() uint32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *GetMasterSuggestedMachinesRequest) GetMemory() uint32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *GetMasterSuggestedMachinesRequest) GetZones() string {
	if x != nil {
		return x.Zones
	}
	return ""
}

type GetMasterSuggestedMachinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                      `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*InstanceTemplateConfig `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetMasterSuggestedMachinesResponse) Reset() {
	*x = GetMasterSuggestedMachinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMasterSuggestedMachinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMasterSuggestedMachinesResponse) ProtoMessage() {}

func (x *GetMasterSuggestedMachinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMasterSuggestedMachinesResponse.ProtoReflect.Descriptor instead.
func (*GetMasterSuggestedMachinesResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{306}
}

func (x *GetMasterSuggestedMachinesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetMasterSuggestedMachinesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetMasterSuggestedMachinesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetMasterSuggestedMachinesResponse) GetData() []*InstanceTemplateConfig {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCloudInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID   string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Region    string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	AccountID string `protobuf:"bytes,3,opt,name=accountID,proto3" json:"accountID,omitempty"`
	IpList    string `protobuf:"bytes,4,opt,name=ipList,proto3" json:"ipList,omitempty"`
}

func (x *ListCloudInstancesRequest) Reset() {
	*x = ListCloudInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudInstancesRequest) ProtoMessage() {}

func (x *ListCloudInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudInstancesRequest.ProtoReflect.Descriptor instead.
func (*ListCloudInstancesRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{307}
}

func (x *ListCloudInstancesRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *ListCloudInstancesRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListCloudInstancesRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ListCloudInstancesRequest) GetIpList() string {
	if x != nil {
		return x.IpList
	}
	return ""
}

type ListCloudInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool         `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*CloudNode `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudInstancesResponse) Reset() {
	*x = ListCloudInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudInstancesResponse) ProtoMessage() {}

func (x *ListCloudInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudInstancesResponse.ProtoReflect.Descriptor instead.
func (*ListCloudInstancesResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{308}
}

func (x *ListCloudInstancesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCloudInstancesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCloudInstancesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListCloudInstancesResponse) GetData() []*CloudNode {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloudNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeID          string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	InnerIP         string `protobuf:"bytes,2,opt,name=innerIP,proto3" json:"innerIP,omitempty"`
	InstanceType    string `protobuf:"bytes,3,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Cpu             uint32 `protobuf:"varint,4,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Mem             uint32 `protobuf:"varint,5,opt,name=mem,proto3" json:"mem,omitempty"`
	Gpu             uint32 `protobuf:"varint,6,opt,name=gpu,proto3" json:"gpu,omitempty"`
	Vpc             string `protobuf:"bytes,7,opt,name=vpc,proto3" json:"vpc,omitempty"`
	Region          string `protobuf:"bytes,8,opt,name=region,proto3" json:"region,omitempty"`
	InnerIPv6       string `protobuf:"bytes,9,opt,name=innerIPv6,proto3" json:"innerIPv6,omitempty"`
	ZoneID          string `protobuf:"bytes,10,opt,name=zoneID,proto3" json:"zoneID,omitempty"`
	Zone            string `protobuf:"bytes,11,opt,name=zone,proto3" json:"zone,omitempty"`
	ZoneName        string `protobuf:"bytes,12,opt,name=zoneName,proto3" json:"zoneName,omitempty"`
	CloudRegionNode bool   `protobuf:"varint,13,opt,name=cloudRegionNode,proto3" json:"cloudRegionNode,omitempty"`
}

func (x *CloudNode) Reset() {
	*x = CloudNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudNode) ProtoMessage() {}

func (x *CloudNode) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudNode.ProtoReflect.Descriptor instead.
func (*CloudNode) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{309}
}

func (x *CloudNode) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *CloudNode) GetInnerIP() string {
	if x != nil {
		return x.InnerIP
	}
	return ""
}

func (x *CloudNode) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *CloudNode) GetCpu() uint32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *CloudNode) GetMem() uint32 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *CloudNode) GetGpu() uint32 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *CloudNode) GetVpc() string {
	if x != nil {
		return x.Vpc
	}
	return ""
}

func (x *CloudNode) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CloudNode) GetInnerIPv6() string {
	if x != nil {
		return x.InnerIPv6
	}
	return ""
}

func (x *CloudNode) GetZoneID() string {
	if x != nil {
		return x.ZoneID
	}
	return ""
}

func (x *CloudNode) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *CloudNode) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *CloudNode) GetCloudRegionNode() bool {
	if x != nil {
		return x.CloudRegionNode
	}
	return false
}

type GetCloudAccountTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID   string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Region    string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	AccountID string `protobuf:"bytes,3,opt,name=accountID,proto3" json:"accountID,omitempty"`
}

func (x *GetCloudAccountTypeRequest) Reset() {
	*x = GetCloudAccountTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudAccountTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudAccountTypeRequest) ProtoMessage() {}

func (x *GetCloudAccountTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudAccountTypeRequest.ProtoReflect.Descriptor instead.
func (*GetCloudAccountTypeRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{310}
}

func (x *GetCloudAccountTypeRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *GetCloudAccountTypeRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetCloudAccountTypeRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

type GetCloudAccountTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *CloudAccountType `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCloudAccountTypeResponse) Reset() {
	*x = GetCloudAccountTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudAccountTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudAccountTypeResponse) ProtoMessage() {}

func (x *GetCloudAccountTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudAccountTypeResponse.ProtoReflect.Descriptor instead.
func (*GetCloudAccountTypeResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{311}
}

func (x *GetCloudAccountTypeResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCloudAccountTypeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCloudAccountTypeResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetCloudAccountTypeResponse) GetData() *CloudAccountType {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloudAccountType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CloudAccountType) Reset() {
	*x = CloudAccountType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAccountType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAccountType) ProtoMessage() {}

func (x *CloudAccountType) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAccountType.ProtoReflect.Descriptor instead.
func (*CloudAccountType) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{312}
}

func (x *CloudAccountType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GetCloudBandwidthPackagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID   string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Region    string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	AccountID string `protobuf:"bytes,3,opt,name=accountID,proto3" json:"accountID,omitempty"`
}

func (x *GetCloudBandwidthPackagesRequest) Reset() {
	*x = GetCloudBandwidthPackagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudBandwidthPackagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudBandwidthPackagesRequest) ProtoMessage() {}

func (x *GetCloudBandwidthPackagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudBandwidthPackagesRequest.ProtoReflect.Descriptor instead.
func (*GetCloudBandwidthPackagesRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{313}
}

func (x *GetCloudBandwidthPackagesRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *GetCloudBandwidthPackagesRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetCloudBandwidthPackagesRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

type GetCloudBandwidthPackagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                    `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*BandwidthPackageInfo `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCloudBandwidthPackagesResponse) Reset() {
	*x = GetCloudBandwidthPackagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudBandwidthPackagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudBandwidthPackagesResponse) ProtoMessage() {}

func (x *GetCloudBandwidthPackagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudBandwidthPackagesResponse.ProtoReflect.Descriptor instead.
func (*GetCloudBandwidthPackagesResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{314}
}

func (x *GetCloudBandwidthPackagesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCloudBandwidthPackagesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCloudBandwidthPackagesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetCloudBandwidthPackagesResponse) GetData() []*BandwidthPackageInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type BandwidthPackageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NetworkType string `protobuf:"bytes,3,opt,name=networkType,proto3" json:"networkType,omitempty"`
	Status      string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Bandwidth   int32  `protobuf:"varint,5,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
}

func (x *BandwidthPackageInfo) Reset() {
	*x = BandwidthPackageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BandwidthPackageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BandwidthPackageInfo) ProtoMessage() {}

func (x *BandwidthPackageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BandwidthPackageInfo.ProtoReflect.Descriptor instead.
func (*BandwidthPackageInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{315}
}

func (x *BandwidthPackageInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BandwidthPackageInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BandwidthPackageInfo) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *BandwidthPackageInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BandwidthPackageInfo) GetBandwidth() int32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

type ListCloudOsImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID   string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Region    string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	AccountID string `protobuf:"bytes,3,opt,name=accountID,proto3" json:"accountID,omitempty"`
	Provider  string `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
	ProjectID string `protobuf:"bytes,5,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (x *ListCloudOsImageRequest) Reset() {
	*x = ListCloudOsImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudOsImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudOsImageRequest) ProtoMessage() {}

func (x *ListCloudOsImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudOsImageRequest.ProtoReflect.Descriptor instead.
func (*ListCloudOsImageRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{316}
}

func (x *ListCloudOsImageRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *ListCloudOsImageRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListCloudOsImageRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ListCloudOsImageRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListCloudOsImageRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

type ListCloudOsImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool       `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*OsImage `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudOsImageResponse) Reset() {
	*x = ListCloudOsImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudOsImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudOsImageResponse) ProtoMessage() {}

func (x *ListCloudOsImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudOsImageResponse.ProtoReflect.Descriptor instead.
func (*ListCloudOsImageResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{317}
}

func (x *ListCloudOsImageResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCloudOsImageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCloudOsImageResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListCloudOsImageResponse) GetData() []*OsImage {
	if x != nil {
		return x.Data
	}
	return nil
}

type OsImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageID         string         `protobuf:"bytes,1,opt,name=imageID,proto3" json:"imageID,omitempty"`
	Alias           string         `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	Arch            string         `protobuf:"bytes,3,opt,name=arch,proto3" json:"arch,omitempty"`
	OsCustomizeType string         `protobuf:"bytes,4,opt,name=osCustomizeType,proto3" json:"osCustomizeType,omitempty"`
	OsName          string         `protobuf:"bytes,5,opt,name=osName,proto3" json:"osName,omitempty"`
	SeriesName      string         `protobuf:"bytes,6,opt,name=seriesName,proto3" json:"seriesName,omitempty"`
	Status          string         `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Provider        string         `protobuf:"bytes,8,opt,name=provider,proto3" json:"provider,omitempty"`
	Clusters        []*ClusterInfo `protobuf:"bytes,9,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *OsImage) Reset() {
	*x = OsImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsImage) ProtoMessage() {}

func (x *OsImage) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsImage.ProtoReflect.Descriptor instead.
func (*OsImage) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{318}
}

func (x *OsImage) GetImageID() string {
	if x != nil {
		return x.ImageID
	}
	return ""
}

func (x *OsImage) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *OsImage) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *OsImage) GetOsCustomizeType() string {
	if x != nil {
		return x.OsCustomizeType
	}
	return ""
}

func (x *OsImage) GetOsName() string {
	if x != nil {
		return x.OsName
	}
	return ""
}

func (x *OsImage) GetSeriesName() string {
	if x != nil {
		return x.SeriesName
	}
	return ""
}

func (x *OsImage) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OsImage) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *OsImage) GetClusters() []*ClusterInfo {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type ClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
}

func (x *ClusterInfo) Reset() {
	*x = ClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfo) ProtoMessage() {}

func (x *ClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfo.ProtoReflect.Descriptor instead.
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{319}
}

func (x *ClusterInfo) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterInfo) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

type ListCloudRuntimeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	CloudID   string `protobuf:"bytes,2,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
}

func (x *ListCloudRuntimeInfoRequest) Reset() {
	*x = ListCloudRuntimeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudRuntimeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudRuntimeInfoRequest) ProtoMessage() {}

func (x *ListCloudRuntimeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudRuntimeInfoRequest.ProtoReflect.Descriptor instead.
func (*ListCloudRuntimeInfoRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{320}
}

func (x *ListCloudRuntimeInfoRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ListCloudRuntimeInfoRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

type ListCloudRuntimeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                       `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    map[string]*RunTimeVersion `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListCloudRuntimeInfoResponse) Reset() {
	*x = ListCloudRuntimeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudRuntimeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudRuntimeInfoResponse) ProtoMessage() {}

func (x *ListCloudRuntimeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudRuntimeInfoResponse.ProtoReflect.Descriptor instead.
func (*ListCloudRuntimeInfoResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{321}
}

func (x *ListCloudRuntimeInfoResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCloudRuntimeInfoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCloudRuntimeInfoResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListCloudRuntimeInfoResponse) GetData() map[string]*RunTimeVersion {
	if x != nil {
		return x.Data
	}
	return nil
}

type RunTimeVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version []string `protobuf:"bytes,1,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *RunTimeVersion) Reset() {
	*x = RunTimeVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunTimeVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTimeVersion) ProtoMessage() {}

func (x *RunTimeVersion) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTimeVersion.ProtoReflect.Descriptor instead.
func (*RunTimeVersion) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{322}
}

func (x *RunTimeVersion) GetVersion() []string {
	if x != nil {
		return x.Version
	}
	return nil
}

type ListCloudProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID   string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Region    string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	AccountID string `protobuf:"bytes,3,opt,name=accountID,proto3" json:"accountID,omitempty"`
}

func (x *ListCloudProjectsRequest) Reset() {
	*x = ListCloudProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudProjectsRequest) ProtoMessage() {}

func (x *ListCloudProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudProjectsRequest.ProtoReflect.Descriptor instead.
func (*ListCloudProjectsRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{323}
}

func (x *ListCloudProjectsRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *ListCloudProjectsRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListCloudProjectsRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

type ListCloudProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*CloudProject `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudProjectsResponse) Reset() {
	*x = ListCloudProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudProjectsResponse) ProtoMessage() {}

func (x *ListCloudProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudProjectsResponse.ProtoReflect.Descriptor instead.
func (*ListCloudProjectsResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{324}
}

func (x *ListCloudProjectsResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCloudProjectsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCloudProjectsResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListCloudProjectsResponse) GetData() []*CloudProject {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloudProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID   uint64 `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *CloudProject) Reset() {
	*x = CloudProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudProject) ProtoMessage() {}

func (x *CloudProject) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudProject.ProtoReflect.Descriptor instead.
func (*CloudProject) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{325}
}

func (x *CloudProject) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *CloudProject) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type ListCloudVpcsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID           string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Region            string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	AccountID         string `protobuf:"bytes,3,opt,name=accountID,proto3" json:"accountID,omitempty"`
	VpcID             string `protobuf:"bytes,4,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	ResourceGroupName string `protobuf:"bytes,5,opt,name=resourceGroupName,proto3" json:"resourceGroupName,omitempty"`
}

func (x *ListCloudVpcsRequest) Reset() {
	*x = ListCloudVpcsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudVpcsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudVpcsRequest) ProtoMessage() {}

func (x *ListCloudVpcsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudVpcsRequest.ProtoReflect.Descriptor instead.
func (*ListCloudVpcsRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{326}
}

func (x *ListCloudVpcsRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *ListCloudVpcsRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListCloudVpcsRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ListCloudVpcsRequest) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *ListCloudVpcsRequest) GetResourceGroupName() string {
	if x != nil {
		return x.ResourceGroupName
	}
	return ""
}

type ListCloudVpcsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool        `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*CloudVpc `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudVpcsResponse) Reset() {
	*x = ListCloudVpcsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudVpcsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudVpcsResponse) ProtoMessage() {}

func (x *ListCloudVpcsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudVpcsResponse.ProtoReflect.Descriptor instead.
func (*ListCloudVpcsResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{327}
}

func (x *ListCloudVpcsResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCloudVpcsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCloudVpcsResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListCloudVpcsResponse) GetData() []*CloudVpc {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloudVpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	VpcId         string           `protobuf:"bytes,2,opt,name=vpcId,proto3" json:"vpcId,omitempty"`
	Ipv4Cidr      string           `protobuf:"bytes,3,opt,name=ipv4Cidr,proto3" json:"ipv4Cidr,omitempty"`
	Ipv6Cidr      string           `protobuf:"bytes,4,opt,name=ipv6Cidr,proto3" json:"ipv6Cidr,omitempty"`
	Cidrs         []*AssistantCidr `protobuf:"bytes,5,rep,name=cidrs,proto3" json:"cidrs,omitempty"`
	AllocateIpNum uint32           `protobuf:"varint,6,opt,name=allocateIpNum,proto3" json:"allocateIpNum,omitempty"`
}

func (x *CloudVpc) Reset() {
	*x = CloudVpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudVpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudVpc) ProtoMessage() {}

func (x *CloudVpc) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudVpc.ProtoReflect.Descriptor instead.
func (*CloudVpc) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{328}
}

func (x *CloudVpc) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudVpc) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *CloudVpc) GetIpv4Cidr() string {
	if x != nil {
		return x.Ipv4Cidr
	}
	return ""
}

func (x *CloudVpc) GetIpv6Cidr() string {
	if x != nil {
		return x.Ipv6Cidr
	}
	return ""
}

func (x *CloudVpc) GetCidrs() []*AssistantCidr {
	if x != nil {
		return x.Cidrs
	}
	return nil
}

func (x *CloudVpc) GetAllocateIpNum() uint32 {
	if x != nil {
		return x.AllocateIpNum
	}
	return 0
}

type AssistantCidr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cidr string `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
	// 辅助CIDR类型（0：普通辅助CIDR，1：容器辅助CIDR），默认都是0。
	CidrType int32 `protobuf:"varint,2,opt,name=cidrType,proto3" json:"cidrType,omitempty"`
}

func (x *AssistantCidr) Reset() {
	*x = AssistantCidr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistantCidr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistantCidr) ProtoMessage() {}

func (x *AssistantCidr) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistantCidr.ProtoReflect.Descriptor instead.
func (*AssistantCidr) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{329}
}

func (x *AssistantCidr) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *AssistantCidr) GetCidrType() int32 {
	if x != nil {
		return x.CidrType
	}
	return 0
}

type ListCloudSubnetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID           string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Region            string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	AccountID         string `protobuf:"bytes,3,opt,name=accountID,proto3" json:"accountID,omitempty"`
	VpcID             string `protobuf:"bytes,4,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	Zone              string `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone,omitempty"`
	SubnetID          string `protobuf:"bytes,6,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
	InjectCluster     bool   `protobuf:"varint,7,opt,name=injectCluster,proto3" json:"injectCluster,omitempty"`
	ResourceGroupName string `protobuf:"bytes,8,opt,name=resourceGroupName,proto3" json:"resourceGroupName,omitempty"`
	Name              string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListCloudSubnetsRequest) Reset() {
	*x = ListCloudSubnetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudSubnetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudSubnetsRequest) ProtoMessage() {}

func (x *ListCloudSubnetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudSubnetsRequest.ProtoReflect.Descriptor instead.
func (*ListCloudSubnetsRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{330}
}

func (x *ListCloudSubnetsRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *ListCloudSubnetsRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListCloudSubnetsRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ListCloudSubnetsRequest) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *ListCloudSubnetsRequest) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ListCloudSubnetsRequest) GetSubnetID() string {
	if x != nil {
		return x.SubnetID
	}
	return ""
}

func (x *ListCloudSubnetsRequest) GetInjectCluster() bool {
	if x != nil {
		return x.InjectCluster
	}
	return false
}

func (x *ListCloudSubnetsRequest) GetResourceGroupName() string {
	if x != nil {
		return x.ResourceGroupName
	}
	return ""
}

func (x *ListCloudSubnetsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListCloudSubnetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool      `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*Subnet `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudSubnetsResponse) Reset() {
	*x = ListCloudSubnetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudSubnetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudSubnetsResponse) ProtoMessage() {}

func (x *ListCloudSubnetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudSubnetsResponse.ProtoReflect.Descriptor instead.
func (*ListCloudSubnetsResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{331}
}

func (x *ListCloudSubnetsResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCloudSubnetsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCloudSubnetsResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListCloudSubnetsResponse) GetData() []*Subnet {
	if x != nil {
		return x.Data
	}
	return nil
}

type Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VpcID                   string       `protobuf:"bytes,1,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	SubnetID                string       `protobuf:"bytes,2,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
	SubnetName              string       `protobuf:"bytes,3,opt,name=subnetName,proto3" json:"subnetName,omitempty"`
	CidrRange               string       `protobuf:"bytes,4,opt,name=cidrRange,proto3" json:"cidrRange,omitempty"`
	Ipv6CidrRange           string       `protobuf:"bytes,5,opt,name=ipv6CidrRange,proto3" json:"ipv6CidrRange,omitempty"`
	Zone                    string       `protobuf:"bytes,6,opt,name=zone,proto3" json:"zone,omitempty"`
	AvailableIPAddressCount uint64       `protobuf:"varint,7,opt,name=availableIPAddressCount,proto3" json:"availableIPAddressCount,omitempty"`
	ZoneName                string       `protobuf:"bytes,8,opt,name=zoneName,proto3" json:"zoneName,omitempty"`
	Cluster                 *ClusterInfo `protobuf:"bytes,9,opt,name=cluster,proto3" json:"cluster,omitempty"`
	HwNeutronSubnetID       string       `protobuf:"bytes,10,opt,name=hwNeutronSubnetID,proto3" json:"hwNeutronSubnetID,omitempty"`
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{332}
}

func (x *Subnet) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *Subnet) GetSubnetID() string {
	if x != nil {
		return x.SubnetID
	}
	return ""
}

func (x *Subnet) GetSubnetName() string {
	if x != nil {
		return x.SubnetName
	}
	return ""
}

func (x *Subnet) GetCidrRange() string {
	if x != nil {
		return x.CidrRange
	}
	return ""
}

func (x *Subnet) GetIpv6CidrRange() string {
	if x != nil {
		return x.Ipv6CidrRange
	}
	return ""
}

func (x *Subnet) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *Subnet) GetAvailableIPAddressCount() uint64 {
	if x != nil {
		return x.AvailableIPAddressCount
	}
	return 0
}

func (x *Subnet) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *Subnet) GetCluster() *ClusterInfo {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *Subnet) GetHwNeutronSubnetID() string {
	if x != nil {
		return x.HwNeutronSubnetID
	}
	return ""
}

type CheckCidrConflictFromVpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID           string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	VpcId             string `protobuf:"bytes,2,opt,name=vpcId,proto3" json:"vpcId,omitempty"`
	Cidr              string `protobuf:"bytes,3,opt,name=cidr,proto3" json:"cidr,omitempty"`
	Region            string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	AccountID         string `protobuf:"bytes,5,opt,name=accountID,proto3" json:"accountID,omitempty"`
	ResourceGroupName string `protobuf:"bytes,6,opt,name=resourceGroupName,proto3" json:"resourceGroupName,omitempty"`
}

func (x *CheckCidrConflictFromVpcRequest) Reset() {
	*x = CheckCidrConflictFromVpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCidrConflictFromVpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCidrConflictFromVpcRequest) ProtoMessage() {}

func (x *CheckCidrConflictFromVpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCidrConflictFromVpcRequest.ProtoReflect.Descriptor instead.
func (*CheckCidrConflictFromVpcRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{333}
}

func (x *CheckCidrConflictFromVpcRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *CheckCidrConflictFromVpcRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *CheckCidrConflictFromVpcRequest) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *CheckCidrConflictFromVpcRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CheckCidrConflictFromVpcRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CheckCidrConflictFromVpcRequest) GetResourceGroupName() string {
	if x != nil {
		return x.ResourceGroupName
	}
	return ""
}

type CheckCidrConflictFromVpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool          `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *ConflictInfo `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CheckCidrConflictFromVpcResponse) Reset() {
	*x = CheckCidrConflictFromVpcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCidrConflictFromVpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCidrConflictFromVpcResponse) ProtoMessage() {}

func (x *CheckCidrConflictFromVpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCidrConflictFromVpcResponse.ProtoReflect.Descriptor instead.
func (*CheckCidrConflictFromVpcResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{334}
}

func (x *CheckCidrConflictFromVpcResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CheckCidrConflictFromVpcResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CheckCidrConflictFromVpcResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CheckCidrConflictFromVpcResponse) GetData() *ConflictInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConflictInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cidrs []string `protobuf:"bytes,1,rep,name=cidrs,proto3" json:"cidrs,omitempty"`
}

func (x *ConflictInfo) Reset() {
	*x = ConflictInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConflictInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConflictInfo) ProtoMessage() {}

func (x *ConflictInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConflictInfo.ProtoReflect.Descriptor instead.
func (*ConflictInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{335}
}

func (x *ConflictInfo) GetCidrs() []string {
	if x != nil {
		return x.Cidrs
	}
	return nil
}

type ListCloudSecurityGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID           string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Region            string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	AccountID         string `protobuf:"bytes,3,opt,name=accountID,proto3" json:"accountID,omitempty"`
	ResourceGroupName string `protobuf:"bytes,4,opt,name=resourceGroupName,proto3" json:"resourceGroupName,omitempty"`
}

func (x *ListCloudSecurityGroupsRequest) Reset() {
	*x = ListCloudSecurityGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudSecurityGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudSecurityGroupsRequest) ProtoMessage() {}

func (x *ListCloudSecurityGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudSecurityGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListCloudSecurityGroupsRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{336}
}

func (x *ListCloudSecurityGroupsRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *ListCloudSecurityGroupsRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListCloudSecurityGroupsRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ListCloudSecurityGroupsRequest) GetResourceGroupName() string {
	if x != nil {
		return x.ResourceGroupName
	}
	return ""
}

type ListCloudSecurityGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool             `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*SecurityGroup `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudSecurityGroupsResponse) Reset() {
	*x = ListCloudSecurityGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudSecurityGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudSecurityGroupsResponse) ProtoMessage() {}

func (x *ListCloudSecurityGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudSecurityGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListCloudSecurityGroupsResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{337}
}

func (x *ListCloudSecurityGroupsResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCloudSecurityGroupsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCloudSecurityGroupsResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListCloudSecurityGroupsResponse) GetData() []*SecurityGroup {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListKeyPairsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID           string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Region            string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	AccountID         string `protobuf:"bytes,3,opt,name=accountID,proto3" json:"accountID,omitempty"`
	ResourceGroupName string `protobuf:"bytes,4,opt,name=resourceGroupName,proto3" json:"resourceGroupName,omitempty"`
}

func (x *ListKeyPairsRequest) Reset() {
	*x = ListKeyPairsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKeyPairsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeyPairsRequest) ProtoMessage() {}

func (x *ListKeyPairsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeyPairsRequest.ProtoReflect.Descriptor instead.
func (*ListKeyPairsRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{338}
}

func (x *ListKeyPairsRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *ListKeyPairsRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListKeyPairsRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ListKeyPairsRequest) GetResourceGroupName() string {
	if x != nil {
		return x.ResourceGroupName
	}
	return ""
}

type ListKeyPairsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool       `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*KeyPair `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListKeyPairsResponse) Reset() {
	*x = ListKeyPairsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKeyPairsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeyPairsResponse) ProtoMessage() {}

func (x *ListKeyPairsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeyPairsResponse.ProtoReflect.Descriptor instead.
func (*ListKeyPairsResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{339}
}

func (x *ListKeyPairsResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListKeyPairsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListKeyPairsResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListKeyPairsResponse) GetData() []*KeyPair {
	if x != nil {
		return x.Data
	}
	return nil
}

type KeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyID       string `protobuf:"bytes,1,opt,name=KeyID,proto3" json:"KeyID,omitempty"`
	KeyName     string `protobuf:"bytes,2,opt,name=KeyName,proto3" json:"KeyName,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *KeyPair) Reset() {
	*x = KeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPair) ProtoMessage() {}

func (x *KeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPair.ProtoReflect.Descriptor instead.
func (*KeyPair) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{340}
}

func (x *KeyPair) GetKeyID() string {
	if x != nil {
		return x.KeyID
	}
	return ""
}

func (x *KeyPair) GetKeyName() string {
	if x != nil {
		return x.KeyName
	}
	return ""
}

func (x *KeyPair) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ListOperationLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType string `protobuf:"bytes,1,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceID   string `protobuf:"bytes,2,opt,name=resourceID,proto3" json:"resourceID,omitempty"`
	StartTime    uint64 `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime      uint64 `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Limit        uint32 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Page         uint32 `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	Simple       bool   `protobuf:"varint,7,opt,name=simple,proto3" json:"simple,omitempty"`
	TaskIDNull   bool   `protobuf:"varint,8,opt,name=taskIDNull,proto3" json:"taskIDNull,omitempty"`
	ClusterID    string `protobuf:"bytes,9,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ProjectID    string `protobuf:"bytes,10,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Status       string `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	TaskType     string `protobuf:"bytes,12,opt,name=taskType,proto3" json:"taskType,omitempty"`
	V2           bool   `protobuf:"varint,13,opt,name=v2,proto3" json:"v2,omitempty"`
	IpList       string `protobuf:"bytes,14,opt,name=ipList,proto3" json:"ipList,omitempty"`
	TaskID       string `protobuf:"bytes,15,opt,name=taskID,proto3" json:"taskID,omitempty"`
	TaskName     string `protobuf:"bytes,16,opt,name=taskName,proto3" json:"taskName,omitempty"`
	ResourceName string `protobuf:"bytes,17,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	OpUser       string `protobuf:"bytes,18,opt,name=opUser,proto3" json:"opUser,omitempty"`
}

func (x *ListOperationLogsRequest) Reset() {
	*x = ListOperationLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOperationLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOperationLogsRequest) ProtoMessage() {}

func (x *ListOperationLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOperationLogsRequest.ProtoReflect.Descriptor instead.
func (*ListOperationLogsRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{341}
}

func (x *ListOperationLogsRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ListOperationLogsRequest) GetResourceID() string {
	if x != nil {
		return x.ResourceID
	}
	return ""
}

func (x *ListOperationLogsRequest) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ListOperationLogsRequest) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ListOperationLogsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListOperationLogsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListOperationLogsRequest) GetSimple() bool {
	if x != nil {
		return x.Simple
	}
	return false
}

func (x *ListOperationLogsRequest) GetTaskIDNull() bool {
	if x != nil {
		return x.TaskIDNull
	}
	return false
}

func (x *ListOperationLogsRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ListOperationLogsRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListOperationLogsRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListOperationLogsRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *ListOperationLogsRequest) GetV2() bool {
	if x != nil {
		return x.V2
	}
	return false
}

func (x *ListOperationLogsRequest) GetIpList() string {
	if x != nil {
		return x.IpList
	}
	return ""
}

func (x *ListOperationLogsRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *ListOperationLogsRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ListOperationLogsRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ListOperationLogsRequest) GetOpUser() string {
	if x != nil {
		return x.OpUser
	}
	return ""
}

type ListTaskStepLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID   string `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	StepName string `protobuf:"bytes,2,opt,name=stepName,proto3" json:"stepName,omitempty"`
	Page     uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit    uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListTaskStepLogsRequest) Reset() {
	*x = ListTaskStepLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTaskStepLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskStepLogsRequest) ProtoMessage() {}

func (x *ListTaskStepLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskStepLogsRequest.ProtoReflect.Descriptor instead.
func (*ListTaskStepLogsRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{342}
}

func (x *ListTaskStepLogsRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *ListTaskStepLogsRequest) GetStepName() string {
	if x != nil {
		return x.StepName
	}
	return ""
}

func (x *ListTaskStepLogsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListTaskStepLogsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListOperationLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                           `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *ListOperationLogsResponseData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListOperationLogsResponse) Reset() {
	*x = ListOperationLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOperationLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOperationLogsResponse) ProtoMessage() {}

func (x *ListOperationLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOperationLogsResponse.ProtoReflect.Descriptor instead.
func (*ListOperationLogsResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{343}
}

func (x *ListOperationLogsResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListOperationLogsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListOperationLogsResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListOperationLogsResponse) GetData() *ListOperationLogsResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListTaskRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID string `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *ListTaskRecordsRequest) Reset() {
	*x = ListTaskRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTaskRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskRecordsRequest) ProtoMessage() {}

func (x *ListTaskRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskRecordsRequest.ProtoReflect.Descriptor instead.
func (*ListTaskRecordsRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{344}
}

func (x *ListTaskRecordsRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

type ListTaskRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                     `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *TaskRecordsResponseData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListTaskRecordsResponse) Reset() {
	*x = ListTaskRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTaskRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskRecordsResponse) ProtoMessage() {}

func (x *ListTaskRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskRecordsResponse.ProtoReflect.Descriptor instead.
func (*ListTaskRecordsResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{345}
}

func (x *ListTaskRecordsResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListTaskRecordsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListTaskRecordsResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListTaskRecordsResponse) GetData() *TaskRecordsResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type TaskRecordsResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string            `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Step   []*TaskRecordStep `protobuf:"bytes,2,rep,name=step,proto3" json:"step,omitempty"`
}

func (x *TaskRecordsResponseData) Reset() {
	*x = TaskRecordsResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRecordsResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRecordsResponseData) ProtoMessage() {}

func (x *TaskRecordsResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRecordsResponseData.ProtoReflect.Descriptor instead.
func (*TaskRecordsResponseData) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{346}
}

func (x *TaskRecordsResponseData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskRecordsResponseData) GetStep() []*TaskRecordStep {
	if x != nil {
		return x.Step
	}
	return nil
}

type TaskRecordStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status     string                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	StartTime  int64                 `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime    int64                 `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Data       []*TaskRecordStepData `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
	AllowSkip  bool                  `protobuf:"varint,7,opt,name=allowSkip,proto3" json:"allowSkip,omitempty"`
	AllowRetry bool                  `protobuf:"varint,8,opt,name=allowRetry,proto3" json:"allowRetry,omitempty"`
}

func (x *TaskRecordStep) Reset() {
	*x = TaskRecordStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRecordStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRecordStep) ProtoMessage() {}

func (x *TaskRecordStep) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRecordStep.ProtoReflect.Descriptor instead.
func (*TaskRecordStep) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{347}
}

func (x *TaskRecordStep) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskRecordStep) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskRecordStep) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TaskRecordStep) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *TaskRecordStep) GetData() []*TaskRecordStepData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TaskRecordStep) GetAllowSkip() bool {
	if x != nil {
		return x.AllowSkip
	}
	return false
}

func (x *TaskRecordStep) GetAllowRetry() bool {
	if x != nil {
		return x.AllowRetry
	}
	return false
}

type TaskRecordStepData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Log       string `protobuf:"bytes,1,opt,name=log,proto3" json:"log,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Level     string `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *TaskRecordStepData) Reset() {
	*x = TaskRecordStepData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRecordStepData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRecordStepData) ProtoMessage() {}

func (x *TaskRecordStepData) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRecordStepData.ProtoReflect.Descriptor instead.
func (*TaskRecordStepData) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{348}
}

func (x *TaskRecordStepData) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *TaskRecordStepData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TaskRecordStepData) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

type ListOperationLogsResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   uint32                `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Results []*OperationLogDetail `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListOperationLogsResponseData) Reset() {
	*x = ListOperationLogsResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOperationLogsResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOperationLogsResponseData) ProtoMessage() {}

func (x *ListOperationLogsResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOperationLogsResponseData.ProtoReflect.Descriptor instead.
func (*ListOperationLogsResponseData) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{349}
}

func (x *ListOperationLogsResponseData) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListOperationLogsResponseData) GetResults() []*OperationLogDetail {
	if x != nil {
		return x.Results
	}
	return nil
}

type OperationLogDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType string `protobuf:"bytes,1,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceID   string `protobuf:"bytes,2,opt,name=resourceID,proto3" json:"resourceID,omitempty"`
	TaskID       string `protobuf:"bytes,3,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Message      string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	OpUser       string `protobuf:"bytes,5,opt,name=opUser,proto3" json:"opUser,omitempty"`
	CreateTime   string `protobuf:"bytes,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Task         *Task  `protobuf:"bytes,7,opt,name=task,proto3" json:"task,omitempty"`
	TaskType     string `protobuf:"bytes,8,opt,name=taskType,proto3" json:"taskType,omitempty"`
	Status       string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	ResourceName string `protobuf:"bytes,10,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	AllowRetry   bool   `protobuf:"varint,11,opt,name=allowRetry,proto3" json:"allowRetry,omitempty"`
	AllowSkip    bool   `protobuf:"varint,12,opt,name=allowSkip,proto3" json:"allowSkip,omitempty"`
}

func (x *OperationLogDetail) Reset() {
	*x = OperationLogDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationLogDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationLogDetail) ProtoMessage() {}

func (x *OperationLogDetail) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationLogDetail.ProtoReflect.Descriptor instead.
func (*OperationLogDetail) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{350}
}

func (x *OperationLogDetail) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *OperationLogDetail) GetResourceID() string {
	if x != nil {
		return x.ResourceID
	}
	return ""
}

func (x *OperationLogDetail) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *OperationLogDetail) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OperationLogDetail) GetOpUser() string {
	if x != nil {
		return x.OpUser
	}
	return ""
}

func (x *OperationLogDetail) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *OperationLogDetail) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *OperationLogDetail) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *OperationLogDetail) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OperationLogDetail) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *OperationLogDetail) GetAllowRetry() bool {
	if x != nil {
		return x.AllowRetry
	}
	return false
}

func (x *OperationLogDetail) GetAllowSkip() bool {
	if x != nil {
		return x.AllowSkip
	}
	return false
}

type ListTaskStepLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                          `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *ListTaskStepLogsResponseData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListTaskStepLogsResponse) Reset() {
	*x = ListTaskStepLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTaskStepLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskStepLogsResponse) ProtoMessage() {}

func (x *ListTaskStepLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskStepLogsResponse.ProtoReflect.Descriptor instead.
func (*ListTaskStepLogsResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{351}
}

func (x *ListTaskStepLogsResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListTaskStepLogsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListTaskStepLogsResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListTaskStepLogsResponse) GetData() *ListTaskStepLogsResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListTaskStepLogsResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   uint32               `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Results []*TaskStepLogDetail `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListTaskStepLogsResponseData) Reset() {
	*x = ListTaskStepLogsResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTaskStepLogsResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskStepLogsResponseData) ProtoMessage() {}

func (x *ListTaskStepLogsResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskStepLogsResponseData.ProtoReflect.Descriptor instead.
func (*ListTaskStepLogsResponseData) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{352}
}

func (x *ListTaskStepLogsResponseData) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListTaskStepLogsResponseData) GetResults() []*TaskStepLogDetail {
	if x != nil {
		return x.Results
	}
	return nil
}

type TaskStepLogDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID     string `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	StepName   string `protobuf:"bytes,2,opt,name=stepName,proto3" json:"stepName,omitempty"`
	Level      string `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	Message    string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	CreateTime string `protobuf:"bytes,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *TaskStepLogDetail) Reset() {
	*x = TaskStepLogDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStepLogDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStepLogDetail) ProtoMessage() {}

func (x *TaskStepLogDetail) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStepLogDetail.ProtoReflect.Descriptor instead.
func (*TaskStepLogDetail) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{353}
}

func (x *TaskStepLogDetail) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *TaskStepLogDetail) GetStepName() string {
	if x != nil {
		return x.StepName
	}
	return ""
}

func (x *TaskStepLogDetail) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *TaskStepLogDetail) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskStepLogDetail) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type CleanDbHistoryDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType  string `protobuf:"bytes,1,opt,name=dataType,proto3" json:"dataType,omitempty"`
	StartTime uint64 `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   uint64 `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *CleanDbHistoryDataRequest) Reset() {
	*x = CleanDbHistoryDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanDbHistoryDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanDbHistoryDataRequest) ProtoMessage() {}

func (x *CleanDbHistoryDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanDbHistoryDataRequest.ProtoReflect.Descriptor instead.
func (*CleanDbHistoryDataRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{354}
}

func (x *CleanDbHistoryDataRequest) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *CleanDbHistoryDataRequest) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *CleanDbHistoryDataRequest) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type CleanDbHistoryDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CleanDbHistoryDataResponse) Reset() {
	*x = CleanDbHistoryDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanDbHistoryDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanDbHistoryDataResponse) ProtoMessage() {}

func (x *CleanDbHistoryDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanDbHistoryDataResponse.ProtoReflect.Descriptor instead.
func (*CleanDbHistoryDataResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{355}
}

func (x *CleanDbHistoryDataResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CleanDbHistoryDataResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CleanDbHistoryDataResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type SecurityGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityGroupID   string `protobuf:"bytes,1,opt,name=securityGroupID,proto3" json:"securityGroupID,omitempty"`
	SecurityGroupName string `protobuf:"bytes,2,opt,name=securityGroupName,proto3" json:"securityGroupName,omitempty"`
	Description       string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *SecurityGroup) Reset() {
	*x = SecurityGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityGroup) ProtoMessage() {}

func (x *SecurityGroup) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityGroup.ProtoReflect.Descriptor instead.
func (*SecurityGroup) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{356}
}

func (x *SecurityGroup) GetSecurityGroupID() string {
	if x != nil {
		return x.SecurityGroupID
	}
	return ""
}

func (x *SecurityGroup) GetSecurityGroupName() string {
	if x != nil {
		return x.SecurityGroupName
	}
	return ""
}

func (x *SecurityGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type NodeOperationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fail    []*NodeOperationStatusInfo `protobuf:"bytes,1,rep,name=fail,proto3" json:"fail,omitempty"`
	Success []*NodeOperationStatusInfo `protobuf:"bytes,2,rep,name=success,proto3" json:"success,omitempty"`
}

func (x *NodeOperationStatus) Reset() {
	*x = NodeOperationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeOperationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeOperationStatus) ProtoMessage() {}

func (x *NodeOperationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeOperationStatus.ProtoReflect.Descriptor instead.
func (*NodeOperationStatus) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{357}
}

func (x *NodeOperationStatus) GetFail() []*NodeOperationStatusInfo {
	if x != nil {
		return x.Fail
	}
	return nil
}

func (x *NodeOperationStatus) GetSuccess() []*NodeOperationStatusInfo {
	if x != nil {
		return x.Success
	}
	return nil
}

type NodeOperationStatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName string `protobuf:"bytes,1,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *NodeOperationStatusInfo) Reset() {
	*x = NodeOperationStatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeOperationStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeOperationStatusInfo) ProtoMessage() {}

func (x *NodeOperationStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeOperationStatusInfo.ProtoReflect.Descriptor instead.
func (*NodeOperationStatusInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{358}
}

func (x *NodeOperationStatusInfo) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeOperationStatusInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DrainNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerIPs                        []string `protobuf:"bytes,1,rep,name=innerIPs,proto3" json:"innerIPs,omitempty"`
	ClusterID                       string   `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Nodes                           []string `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Force                           bool     `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	GracePeriodSeconds              int32    `protobuf:"varint,5,opt,name=gracePeriodSeconds,proto3" json:"gracePeriodSeconds,omitempty"`
	IgnoreAllDaemonSets             bool     `protobuf:"varint,6,opt,name=ignoreAllDaemonSets,proto3" json:"ignoreAllDaemonSets,omitempty"`
	Timeout                         uint32   `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	DeleteLocalData                 bool     `protobuf:"varint,8,opt,name=deleteLocalData,proto3" json:"deleteLocalData,omitempty"`
	Selector                        string   `protobuf:"bytes,9,opt,name=selector,proto3" json:"selector,omitempty"`
	PodSelector                     string   `protobuf:"bytes,10,opt,name=podSelector,proto3" json:"podSelector,omitempty"`
	DisableEviction                 bool     `protobuf:"varint,11,opt,name=disableEviction,proto3" json:"disableEviction,omitempty"`
	SkipWaitForDeleteTimeoutSeconds uint32   `protobuf:"varint,12,opt,name=skipWaitForDeleteTimeoutSeconds,proto3" json:"skipWaitForDeleteTimeoutSeconds,omitempty"`
	DryRun                          bool     `protobuf:"varint,13,opt,name=dryRun,proto3" json:"dryRun,omitempty"`
	Operator                        string   `protobuf:"bytes,14,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *DrainNodeRequest) Reset() {
	*x = DrainNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrainNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrainNodeRequest) ProtoMessage() {}

func (x *DrainNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrainNodeRequest.ProtoReflect.Descriptor instead.
func (*DrainNodeRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{359}
}

func (x *DrainNodeRequest) GetInnerIPs() []string {
	if x != nil {
		return x.InnerIPs
	}
	return nil
}

func (x *DrainNodeRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *DrainNodeRequest) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *DrainNodeRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *DrainNodeRequest) GetGracePeriodSeconds() int32 {
	if x != nil {
		return x.GracePeriodSeconds
	}
	return 0
}

func (x *DrainNodeRequest) GetIgnoreAllDaemonSets() bool {
	if x != nil {
		return x.IgnoreAllDaemonSets
	}
	return false
}

func (x *DrainNodeRequest) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *DrainNodeRequest) GetDeleteLocalData() bool {
	if x != nil {
		return x.DeleteLocalData
	}
	return false
}

func (x *DrainNodeRequest) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *DrainNodeRequest) GetPodSelector() string {
	if x != nil {
		return x.PodSelector
	}
	return ""
}

func (x *DrainNodeRequest) GetDisableEviction() bool {
	if x != nil {
		return x.DisableEviction
	}
	return false
}

func (x *DrainNodeRequest) GetSkipWaitForDeleteTimeoutSeconds() uint32 {
	if x != nil {
		return x.SkipWaitForDeleteTimeoutSeconds
	}
	return 0
}

func (x *DrainNodeRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *DrainNodeRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type DrainNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *Task  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DrainNodeResponse) Reset() {
	*x = DrainNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrainNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrainNodeResponse) ProtoMessage() {}

func (x *DrainNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrainNodeResponse.ProtoReflect.Descriptor instead.
func (*DrainNodeResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{360}
}

func (x *DrainNodeResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DrainNodeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DrainNodeResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DrainNodeResponse) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

type CheckDrainNodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodName            string          `protobuf:"bytes,1,opt,name=podName,proto3" json:"podName,omitempty"`
	NameSpace          string          `protobuf:"bytes,2,opt,name=nameSpace,proto3" json:"nameSpace,omitempty"`
	PodStatus          string          `protobuf:"bytes,3,opt,name=podStatus,proto3" json:"podStatus,omitempty"`
	PodServiceAccount  string          `protobuf:"bytes,4,opt,name=podServiceAccount,proto3" json:"podServiceAccount,omitempty"`
	Node               string          `protobuf:"bytes,5,opt,name=node,proto3" json:"node,omitempty"`
	GracePeriodSeconds uint32          `protobuf:"varint,6,opt,name=gracePeriodSeconds,proto3" json:"gracePeriodSeconds,omitempty"`
	EvictionRisk       []*EvictionRisk `protobuf:"bytes,7,rep,name=evictionRisk,proto3" json:"evictionRisk,omitempty"`
	WillBeEvicted      bool            `protobuf:"varint,8,opt,name=willBeEvicted,proto3" json:"willBeEvicted,omitempty"`
}

func (x *CheckDrainNodeData) Reset() {
	*x = CheckDrainNodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDrainNodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDrainNodeData) ProtoMessage() {}

func (x *CheckDrainNodeData) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDrainNodeData.ProtoReflect.Descriptor instead.
func (*CheckDrainNodeData) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{361}
}

func (x *CheckDrainNodeData) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *CheckDrainNodeData) GetNameSpace() string {
	if x != nil {
		return x.NameSpace
	}
	return ""
}

func (x *CheckDrainNodeData) GetPodStatus() string {
	if x != nil {
		return x.PodStatus
	}
	return ""
}

func (x *CheckDrainNodeData) GetPodServiceAccount() string {
	if x != nil {
		return x.PodServiceAccount
	}
	return ""
}

func (x *CheckDrainNodeData) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *CheckDrainNodeData) GetGracePeriodSeconds() uint32 {
	if x != nil {
		return x.GracePeriodSeconds
	}
	return 0
}

func (x *CheckDrainNodeData) GetEvictionRisk() []*EvictionRisk {
	if x != nil {
		return x.EvictionRisk
	}
	return nil
}

func (x *CheckDrainNodeData) GetWillBeEvicted() bool {
	if x != nil {
		return x.WillBeEvicted
	}
	return false
}

type EvictionRisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RiskParameter   string `protobuf:"bytes,1,opt,name=riskParameter,proto3" json:"riskParameter,omitempty"`
	RiskDescription string `protobuf:"bytes,2,opt,name=riskDescription,proto3" json:"riskDescription,omitempty"`
}

func (x *EvictionRisk) Reset() {
	*x = EvictionRisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvictionRisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvictionRisk) ProtoMessage() {}

func (x *EvictionRisk) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvictionRisk.ProtoReflect.Descriptor instead.
func (*EvictionRisk) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{362}
}

func (x *EvictionRisk) GetRiskParameter() string {
	if x != nil {
		return x.RiskParameter
	}
	return ""
}

func (x *EvictionRisk) GetRiskDescription() string {
	if x != nil {
		return x.RiskDescription
	}
	return ""
}

type CheckDrainNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerIPs            []string `protobuf:"bytes,1,rep,name=innerIPs,proto3" json:"innerIPs,omitempty"`
	ClusterID           string   `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Nodes               []string `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Force               bool     `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	GracePeriodSeconds  int32    `protobuf:"varint,5,opt,name=gracePeriodSeconds,proto3" json:"gracePeriodSeconds,omitempty"`
	IgnoreAllDaemonSets bool     `protobuf:"varint,6,opt,name=ignoreAllDaemonSets,proto3" json:"ignoreAllDaemonSets,omitempty"`
	DeleteLocalData     bool     `protobuf:"varint,7,opt,name=deleteLocalData,proto3" json:"deleteLocalData,omitempty"`
	Selector            string   `protobuf:"bytes,8,opt,name=selector,proto3" json:"selector,omitempty"`
	PodSelector         string   `protobuf:"bytes,9,opt,name=podSelector,proto3" json:"podSelector,omitempty"`
	DisableEviction     bool     `protobuf:"varint,10,opt,name=disableEviction,proto3" json:"disableEviction,omitempty"`
}

func (x *CheckDrainNodeRequest) Reset() {
	*x = CheckDrainNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDrainNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDrainNodeRequest) ProtoMessage() {}

func (x *CheckDrainNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDrainNodeRequest.ProtoReflect.Descriptor instead.
func (*CheckDrainNodeRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{363}
}

func (x *CheckDrainNodeRequest) GetInnerIPs() []string {
	if x != nil {
		return x.InnerIPs
	}
	return nil
}

func (x *CheckDrainNodeRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *CheckDrainNodeRequest) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *CheckDrainNodeRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *CheckDrainNodeRequest) GetGracePeriodSeconds() int32 {
	if x != nil {
		return x.GracePeriodSeconds
	}
	return 0
}

func (x *CheckDrainNodeRequest) GetIgnoreAllDaemonSets() bool {
	if x != nil {
		return x.IgnoreAllDaemonSets
	}
	return false
}

func (x *CheckDrainNodeRequest) GetDeleteLocalData() bool {
	if x != nil {
		return x.DeleteLocalData
	}
	return false
}

func (x *CheckDrainNodeRequest) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *CheckDrainNodeRequest) GetPodSelector() string {
	if x != nil {
		return x.PodSelector
	}
	return ""
}

func (x *CheckDrainNodeRequest) GetDisableEviction() bool {
	if x != nil {
		return x.DisableEviction
	}
	return false
}

type CheckDrainNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                  `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*CheckDrainNodeData `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CheckDrainNodeResponse) Reset() {
	*x = CheckDrainNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDrainNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDrainNodeResponse) ProtoMessage() {}

func (x *CheckDrainNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDrainNodeResponse.ProtoReflect.Descriptor instead.
func (*CheckDrainNodeResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{364}
}

func (x *CheckDrainNodeResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CheckDrainNodeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CheckDrainNodeResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CheckDrainNodeResponse) GetData() []*CheckDrainNodeData {
	if x != nil {
		return x.Data
	}
	return nil
}

type NodeAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName    string            `protobuf:"bytes,1,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	Annotations map[string]string `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NodeAnnotation) Reset() {
	*x = NodeAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAnnotation) ProtoMessage() {}

func (x *NodeAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAnnotation.ProtoReflect.Descriptor instead.
func (*NodeAnnotation) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{365}
}

func (x *NodeAnnotation) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeAnnotation) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type UpdateNodeAnnotationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID string            `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Nodes     []*NodeAnnotation `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *UpdateNodeAnnotationsRequest) Reset() {
	*x = UpdateNodeAnnotationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeAnnotationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeAnnotationsRequest) ProtoMessage() {}

func (x *UpdateNodeAnnotationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeAnnotationsRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeAnnotationsRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{366}
}

func (x *UpdateNodeAnnotationsRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *UpdateNodeAnnotationsRequest) GetNodes() []*NodeAnnotation {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type UpdateNodeAnnotationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                 `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *NodeOperationStatus `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateNodeAnnotationsResponse) Reset() {
	*x = UpdateNodeAnnotationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeAnnotationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeAnnotationsResponse) ProtoMessage() {}

func (x *UpdateNodeAnnotationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeAnnotationsResponse.ProtoReflect.Descriptor instead.
func (*UpdateNodeAnnotationsResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{367}
}

func (x *UpdateNodeAnnotationsResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateNodeAnnotationsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateNodeAnnotationsResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateNodeAnnotationsResponse) GetData() *NodeOperationStatus {
	if x != nil {
		return x.Data
	}
	return nil
}

type NodeLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName string            `protobuf:"bytes,1,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	Labels   map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NodeLabel) Reset() {
	*x = NodeLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeLabel) ProtoMessage() {}

func (x *NodeLabel) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeLabel.ProtoReflect.Descriptor instead.
func (*NodeLabel) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{368}
}

func (x *NodeLabel) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeLabel) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type UpdateNodeLabelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes     []*NodeLabel `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	ClusterID string       `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
}

func (x *UpdateNodeLabelsRequest) Reset() {
	*x = UpdateNodeLabelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeLabelsRequest) ProtoMessage() {}

func (x *UpdateNodeLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeLabelsRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeLabelsRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{369}
}

func (x *UpdateNodeLabelsRequest) GetNodes() []*NodeLabel {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *UpdateNodeLabelsRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

type UpdateNodeLabelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                 `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *NodeOperationStatus `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateNodeLabelsResponse) Reset() {
	*x = UpdateNodeLabelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeLabelsResponse) ProtoMessage() {}

func (x *UpdateNodeLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeLabelsResponse.ProtoReflect.Descriptor instead.
func (*UpdateNodeLabelsResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{370}
}

func (x *UpdateNodeLabelsResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateNodeLabelsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateNodeLabelsResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateNodeLabelsResponse) GetData() *NodeOperationStatus {
	if x != nil {
		return x.Data
	}
	return nil
}

type NodeTaint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName string   `protobuf:"bytes,1,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	Taints   []*Taint `protobuf:"bytes,2,rep,name=taints,proto3" json:"taints,omitempty"`
}

func (x *NodeTaint) Reset() {
	*x = NodeTaint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeTaint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeTaint) ProtoMessage() {}

func (x *NodeTaint) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeTaint.ProtoReflect.Descriptor instead.
func (*NodeTaint) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{371}
}

func (x *NodeTaint) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeTaint) GetTaints() []*Taint {
	if x != nil {
		return x.Taints
	}
	return nil
}

type UpdateNodeTaintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes     []*NodeTaint `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	ClusterID string       `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
}

func (x *UpdateNodeTaintsRequest) Reset() {
	*x = UpdateNodeTaintsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeTaintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeTaintsRequest) ProtoMessage() {}

func (x *UpdateNodeTaintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeTaintsRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeTaintsRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{372}
}

func (x *UpdateNodeTaintsRequest) GetNodes() []*NodeTaint {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *UpdateNodeTaintsRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

type UpdateNodeTaintsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                 `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *NodeOperationStatus `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateNodeTaintsResponse) Reset() {
	*x = UpdateNodeTaintsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeTaintsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeTaintsResponse) ProtoMessage() {}

func (x *UpdateNodeTaintsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeTaintsResponse.ProtoReflect.Descriptor instead.
func (*UpdateNodeTaintsResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{373}
}

func (x *UpdateNodeTaintsResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateNodeTaintsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateNodeTaintsResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateNodeTaintsResponse) GetData() *NodeOperationStatus {
	if x != nil {
		return x.Data
	}
	return nil
}

type HealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthRequest) Reset() {
	*x = HealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthRequest) ProtoMessage() {}

func (x *HealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthRequest.ProtoReflect.Descriptor instead.
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{374}
}

type HealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Available string `protobuf:"bytes,3,opt,name=available,proto3" json:"available,omitempty"`
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{375}
}

func (x *HealthResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *HealthResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HealthResponse) GetAvailable() string {
	if x != nil {
		return x.Available
	}
	return ""
}

type ListResourceSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
}

func (x *ListResourceSchemaRequest) Reset() {
	*x = ListResourceSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResourceSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourceSchemaRequest) ProtoMessage() {}

func (x *ListResourceSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourceSchemaRequest.ProtoReflect.Descriptor instead.
func (*ListResourceSchemaRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{376}
}

func (x *ListResourceSchemaRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

type GetResourceSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetResourceSchemaRequest) Reset() {
	*x = GetResourceSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceSchemaRequest) ProtoMessage() {}

func (x *GetResourceSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetResourceSchemaRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{377}
}

func (x *GetResourceSchemaRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *GetResourceSchemaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type QueryPermByActionIDReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId  string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	TemplateId string `protobuf:"bytes,4,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	AccountId  string `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Operator   string `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *QueryPermByActionIDReqData) Reset() {
	*x = QueryPermByActionIDReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPermByActionIDReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPermByActionIDReqData) ProtoMessage() {}

func (x *QueryPermByActionIDReqData) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPermByActionIDReqData.ProtoReflect.Descriptor instead.
func (*QueryPermByActionIDReqData) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{378}
}

func (x *QueryPermByActionIDReqData) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *QueryPermByActionIDReqData) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *QueryPermByActionIDReqData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryPermByActionIDReqData) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *QueryPermByActionIDReqData) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *QueryPermByActionIDReqData) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type QueryPermByActionIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionID string                      `protobuf:"bytes,1,opt,name=actionID,proto3" json:"actionID,omitempty"`
	PermCtx  *QueryPermByActionIDReqData `protobuf:"bytes,2,opt,name=perm_ctx,json=permCtx,proto3" json:"perm_ctx,omitempty"`
}

func (x *QueryPermByActionIDRequest) Reset() {
	*x = QueryPermByActionIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPermByActionIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPermByActionIDRequest) ProtoMessage() {}

func (x *QueryPermByActionIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPermByActionIDRequest.ProtoReflect.Descriptor instead.
func (*QueryPermByActionIDRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{379}
}

func (x *QueryPermByActionIDRequest) GetActionID() string {
	if x != nil {
		return x.ActionID
	}
	return ""
}

func (x *QueryPermByActionIDRequest) GetPermCtx() *QueryPermByActionIDReqData {
	if x != nil {
		return x.PermCtx
	}
	return nil
}

type Perms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Perms map[string]*_struct.Value `protobuf:"bytes,1,rep,name=perms,proto3" json:"perms,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Perms) Reset() {
	*x = Perms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Perms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Perms) ProtoMessage() {}

func (x *Perms) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Perms.ProtoReflect.Descriptor instead.
func (*Perms) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{380}
}

func (x *Perms) GetPerms() map[string]*_struct.Value {
	if x != nil {
		return x.Perms
	}
	return nil
}

type QueryPermByActionIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data *Perms `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryPermByActionIDResponse) Reset() {
	*x = QueryPermByActionIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPermByActionIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPermByActionIDResponse) ProtoMessage() {}

func (x *QueryPermByActionIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPermByActionIDResponse.ProtoReflect.Descriptor instead.
func (*QueryPermByActionIDResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{381}
}

func (x *QueryPermByActionIDResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryPermByActionIDResponse) GetData() *Perms {
	if x != nil {
		return x.Data
	}
	return nil
}

type CommonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CommonResp) Reset() {
	*x = CommonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResp) ProtoMessage() {}

func (x *CommonResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResp.ProtoReflect.Descriptor instead.
func (*CommonResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{382}
}

func (x *CommonResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CommonResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommonResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CommonResp) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type CommonListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool               `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.ListValue `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CommonListResp) Reset() {
	*x = CommonListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonListResp) ProtoMessage() {}

func (x *CommonListResp) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonListResp.ProtoReflect.Descriptor instead.
func (*CommonListResp) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{383}
}

func (x *CommonListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CommonListResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommonListResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CommonListResp) GetData() *_struct.ListValue {
	if x != nil {
		return x.Data
	}
	return nil
}

// 获取云区域列表请求
type ListBKCloudRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBKCloudRequest) Reset() {
	*x = ListBKCloudRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBKCloudRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBKCloudRequest) ProtoMessage() {}

func (x *ListBKCloudRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBKCloudRequest.ProtoReflect.Descriptor instead.
func (*ListBKCloudRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{384}
}

// 获取业务主机模块拓扑请求
type ListCCTopologyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID   string              `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	BizID       string              `protobuf:"bytes,2,opt,name=bizID,proto3" json:"bizID,omitempty"`
	FilterInter *wrappers.BoolValue `protobuf:"bytes,3,opt,name=filterInter,proto3" json:"filterInter,omitempty"`
}

func (x *ListCCTopologyRequest) Reset() {
	*x = ListCCTopologyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCCTopologyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCCTopologyRequest) ProtoMessage() {}

func (x *ListCCTopologyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCCTopologyRequest.ProtoReflect.Descriptor instead.
func (*ListCCTopologyRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{385}
}

func (x *ListCCTopologyRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ListCCTopologyRequest) GetBizID() string {
	if x != nil {
		return x.BizID
	}
	return ""
}

func (x *ListCCTopologyRequest) GetFilterInter() *wrappers.BoolValue {
	if x != nil {
		return x.FilterInter
	}
	return nil
}

type GetBkSopsTemplateListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessID     string `protobuf:"bytes,1,opt,name=businessID,proto3" json:"businessID,omitempty"`
	Operator       string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	TemplateSource string `protobuf:"bytes,3,opt,name=templateSource,proto3" json:"templateSource,omitempty"`
	Scope          string `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *GetBkSopsTemplateListRequest) Reset() {
	*x = GetBkSopsTemplateListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBkSopsTemplateListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBkSopsTemplateListRequest) ProtoMessage() {}

func (x *GetBkSopsTemplateListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBkSopsTemplateListRequest.ProtoReflect.Descriptor instead.
func (*GetBkSopsTemplateListRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{386}
}

func (x *GetBkSopsTemplateListRequest) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *GetBkSopsTemplateListRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *GetBkSopsTemplateListRequest) GetTemplateSource() string {
	if x != nil {
		return x.TemplateSource
	}
	return ""
}

func (x *GetBkSopsTemplateListRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type GetBkSopsTemplateListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*TemplateInfo `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetBkSopsTemplateListResponse) Reset() {
	*x = GetBkSopsTemplateListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBkSopsTemplateListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBkSopsTemplateListResponse) ProtoMessage() {}

func (x *GetBkSopsTemplateListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBkSopsTemplateListResponse.ProtoReflect.Descriptor instead.
func (*GetBkSopsTemplateListResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{387}
}

func (x *GetBkSopsTemplateListResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetBkSopsTemplateListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetBkSopsTemplateListResponse) GetData() []*TemplateInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type TemplateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateName string `protobuf:"bytes,1,opt,name=templateName,proto3" json:"templateName,omitempty"`
	TemplateID   string `protobuf:"bytes,2,opt,name=templateID,proto3" json:"templateID,omitempty"`
	BusinessID   uint32 `protobuf:"varint,3,opt,name=businessID,proto3" json:"businessID,omitempty"`
	BusinessName string `protobuf:"bytes,4,opt,name=businessName,proto3" json:"businessName,omitempty"`
	Creator      string `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	Editor       string `protobuf:"bytes,6,opt,name=editor,proto3" json:"editor,omitempty"`
	ProjectID    string `protobuf:"bytes,7,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (x *TemplateInfo) Reset() {
	*x = TemplateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateInfo) ProtoMessage() {}

func (x *TemplateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateInfo.ProtoReflect.Descriptor instead.
func (*TemplateInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{388}
}

func (x *TemplateInfo) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *TemplateInfo) GetTemplateID() string {
	if x != nil {
		return x.TemplateID
	}
	return ""
}

func (x *TemplateInfo) GetBusinessID() uint32 {
	if x != nil {
		return x.BusinessID
	}
	return 0
}

func (x *TemplateInfo) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *TemplateInfo) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *TemplateInfo) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *TemplateInfo) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

type GetBkSopsTemplateInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessID     string `protobuf:"bytes,1,opt,name=businessID,proto3" json:"businessID,omitempty"`
	TemplateID     string `protobuf:"bytes,2,opt,name=templateID,proto3" json:"templateID,omitempty"`
	Operator       string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	TemplateSource string `protobuf:"bytes,4,opt,name=templateSource,proto3" json:"templateSource,omitempty"`
	Scope          string `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *GetBkSopsTemplateInfoRequest) Reset() {
	*x = GetBkSopsTemplateInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBkSopsTemplateInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBkSopsTemplateInfoRequest) ProtoMessage() {}

func (x *GetBkSopsTemplateInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBkSopsTemplateInfoRequest.ProtoReflect.Descriptor instead.
func (*GetBkSopsTemplateInfoRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{389}
}

func (x *GetBkSopsTemplateInfoRequest) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *GetBkSopsTemplateInfoRequest) GetTemplateID() string {
	if x != nil {
		return x.TemplateID
	}
	return ""
}

func (x *GetBkSopsTemplateInfoRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *GetBkSopsTemplateInfoRequest) GetTemplateSource() string {
	if x != nil {
		return x.TemplateSource
	}
	return ""
}

func (x *GetBkSopsTemplateInfoRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type GetBkSopsTemplateInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *TemplateDetailInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetBkSopsTemplateInfoResponse) Reset() {
	*x = GetBkSopsTemplateInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBkSopsTemplateInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBkSopsTemplateInfoResponse) ProtoMessage() {}

func (x *GetBkSopsTemplateInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBkSopsTemplateInfoResponse.ProtoReflect.Descriptor instead.
func (*GetBkSopsTemplateInfoResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{390}
}

func (x *GetBkSopsTemplateInfoResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetBkSopsTemplateInfoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetBkSopsTemplateInfoResponse) GetData() *TemplateDetailInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type TemplateDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateUrl string           `protobuf:"bytes,1,opt,name=templateUrl,proto3" json:"templateUrl,omitempty"`
	Values      []*ConstantValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *TemplateDetailInfo) Reset() {
	*x = TemplateDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateDetailInfo) ProtoMessage() {}

func (x *TemplateDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateDetailInfo.ProtoReflect.Descriptor instead.
func (*TemplateDetailInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{391}
}

func (x *TemplateDetailInfo) GetTemplateUrl() string {
	if x != nil {
		return x.TemplateUrl
	}
	return ""
}

func (x *TemplateDetailInfo) GetValues() []*ConstantValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type ConstantValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Index uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Desc  string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *ConstantValue) Reset() {
	*x = ConstantValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstantValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstantValue) ProtoMessage() {}

func (x *ConstantValue) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstantValue.ProtoReflect.Descriptor instead.
func (*ConstantValue) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{392}
}

func (x *ConstantValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ConstantValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConstantValue) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ConstantValue) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type GetInnerTemplateValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Operator  string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *GetInnerTemplateValuesRequest) Reset() {
	*x = GetInnerTemplateValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInnerTemplateValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInnerTemplateValuesRequest) ProtoMessage() {}

func (x *GetInnerTemplateValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInnerTemplateValuesRequest.ProtoReflect.Descriptor instead.
func (*GetInnerTemplateValuesRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{393}
}

func (x *GetInnerTemplateValuesRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *GetInnerTemplateValuesRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type GetInnerTemplateValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*TemplateValue `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetInnerTemplateValuesResponse) Reset() {
	*x = GetInnerTemplateValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInnerTemplateValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInnerTemplateValuesResponse) ProtoMessage() {}

func (x *GetInnerTemplateValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInnerTemplateValuesResponse.ProtoReflect.Descriptor instead.
func (*GetInnerTemplateValuesResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{394}
}

func (x *GetInnerTemplateValuesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetInnerTemplateValuesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetInnerTemplateValuesResponse) GetData() []*TemplateValue {
	if x != nil {
		return x.Data
	}
	return nil
}

type TemplateValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Desc  string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Refer string `protobuf:"bytes,3,opt,name=refer,proto3" json:"refer,omitempty"`
	Trans string `protobuf:"bytes,4,opt,name=trans,proto3" json:"trans,omitempty"`
	Value string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TemplateValue) Reset() {
	*x = TemplateValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateValue) ProtoMessage() {}

func (x *TemplateValue) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateValue.ProtoReflect.Descriptor instead.
func (*TemplateValue) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{395}
}

func (x *TemplateValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TemplateValue) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *TemplateValue) GetRefer() string {
	if x != nil {
		return x.Refer
	}
	return ""
}

func (x *TemplateValue) GetTrans() string {
	if x != nil {
		return x.Trans
	}
	return ""
}

func (x *TemplateValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type DebugBkSopsTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessID     string            `protobuf:"bytes,1,opt,name=businessID,proto3" json:"businessID,omitempty"`
	TemplateID     string            `protobuf:"bytes,2,opt,name=templateID,proto3" json:"templateID,omitempty"`
	Operator       string            `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	TemplateSource string            `protobuf:"bytes,4,opt,name=templateSource,proto3" json:"templateSource,omitempty"`
	Constant       map[string]string `protobuf:"bytes,5,rep,name=constant,proto3" json:"constant,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DebugBkSopsTaskRequest) Reset() {
	*x = DebugBkSopsTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugBkSopsTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugBkSopsTaskRequest) ProtoMessage() {}

func (x *DebugBkSopsTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugBkSopsTaskRequest.ProtoReflect.Descriptor instead.
func (*DebugBkSopsTaskRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{396}
}

func (x *DebugBkSopsTaskRequest) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *DebugBkSopsTaskRequest) GetTemplateID() string {
	if x != nil {
		return x.TemplateID
	}
	return ""
}

func (x *DebugBkSopsTaskRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *DebugBkSopsTaskRequest) GetTemplateSource() string {
	if x != nil {
		return x.TemplateSource
	}
	return ""
}

func (x *DebugBkSopsTaskRequest) GetConstant() map[string]string {
	if x != nil {
		return x.Constant
	}
	return nil
}

type DebugBkSopsTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *DebugBkSopsTaskInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DebugBkSopsTaskResponse) Reset() {
	*x = DebugBkSopsTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugBkSopsTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugBkSopsTaskResponse) ProtoMessage() {}

func (x *DebugBkSopsTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugBkSopsTaskResponse.ProtoReflect.Descriptor instead.
func (*DebugBkSopsTaskResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{397}
}

func (x *DebugBkSopsTaskResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DebugBkSopsTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DebugBkSopsTaskResponse) GetData() *DebugBkSopsTaskInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type DebugBkSopsTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *DebugBkSopsTaskInfo) Reset() {
	*x = DebugBkSopsTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugBkSopsTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugBkSopsTaskInfo) ProtoMessage() {}

func (x *DebugBkSopsTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugBkSopsTaskInfo.ProtoReflect.Descriptor instead.
func (*DebugBkSopsTaskInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{398}
}

func (x *DebugBkSopsTaskInfo) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

// cloud account manage
type CloudModuleFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID       string       `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Version       string       `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	ModuleID      string       `protobuf:"bytes,3,opt,name=moduleID,proto3" json:"moduleID,omitempty"`
	FlagName      string       `protobuf:"bytes,4,opt,name=flagName,proto3" json:"flagName,omitempty"`
	FlagDesc      string       `protobuf:"bytes,5,opt,name=flagDesc,proto3" json:"flagDesc,omitempty"`
	DefaultValue  string       `protobuf:"bytes,6,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	Enable        bool         `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
	Creator       string       `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater       string       `protobuf:"bytes,9,opt,name=updater,proto3" json:"updater,omitempty"`
	CreatTime     string       `protobuf:"bytes,10,opt,name=creatTime,proto3" json:"creatTime,omitempty"`
	UpdateTime    string       `protobuf:"bytes,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	FlagType      string       `protobuf:"bytes,12,opt,name=flagType,proto3" json:"flagType,omitempty"`
	FlagValueList []string     `protobuf:"bytes,13,rep,name=flagValueList,proto3" json:"flagValueList,omitempty"`
	Regex         *ValueRegex  `protobuf:"bytes,14,opt,name=regex,proto3" json:"regex,omitempty"`
	Range         *NumberRange `protobuf:"bytes,15,opt,name=range,proto3" json:"range,omitempty"`
	NetworkType   string       `protobuf:"bytes,16,opt,name=networkType,proto3" json:"networkType,omitempty"`
}

func (x *CloudModuleFlag) Reset() {
	*x = CloudModuleFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudModuleFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudModuleFlag) ProtoMessage() {}

func (x *CloudModuleFlag) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudModuleFlag.ProtoReflect.Descriptor instead.
func (*CloudModuleFlag) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{399}
}

func (x *CloudModuleFlag) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *CloudModuleFlag) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CloudModuleFlag) GetModuleID() string {
	if x != nil {
		return x.ModuleID
	}
	return ""
}

func (x *CloudModuleFlag) GetFlagName() string {
	if x != nil {
		return x.FlagName
	}
	return ""
}

func (x *CloudModuleFlag) GetFlagDesc() string {
	if x != nil {
		return x.FlagDesc
	}
	return ""
}

func (x *CloudModuleFlag) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *CloudModuleFlag) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *CloudModuleFlag) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CloudModuleFlag) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *CloudModuleFlag) GetCreatTime() string {
	if x != nil {
		return x.CreatTime
	}
	return ""
}

func (x *CloudModuleFlag) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CloudModuleFlag) GetFlagType() string {
	if x != nil {
		return x.FlagType
	}
	return ""
}

func (x *CloudModuleFlag) GetFlagValueList() []string {
	if x != nil {
		return x.FlagValueList
	}
	return nil
}

func (x *CloudModuleFlag) GetRegex() *ValueRegex {
	if x != nil {
		return x.Regex
	}
	return nil
}

func (x *CloudModuleFlag) GetRange() *NumberRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *CloudModuleFlag) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

type FlagInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlagName      string              `protobuf:"bytes,1,opt,name=flagName,proto3" json:"flagName,omitempty"`
	FlagDesc      string              `protobuf:"bytes,2,opt,name=flagDesc,proto3" json:"flagDesc,omitempty"`
	DefaultValue  string              `protobuf:"bytes,3,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	Enable        *wrappers.BoolValue `protobuf:"bytes,4,opt,name=enable,proto3" json:"enable,omitempty"`
	FlagType      string              `protobuf:"bytes,5,opt,name=flagType,proto3" json:"flagType,omitempty"`
	FlagValueList []string            `protobuf:"bytes,6,rep,name=flagValueList,proto3" json:"flagValueList,omitempty"`
	Regex         *ValueRegex         `protobuf:"bytes,7,opt,name=regex,proto3" json:"regex,omitempty"`
	Range         *NumberRange        `protobuf:"bytes,8,opt,name=range,proto3" json:"range,omitempty"`
	NetworkType   string              `protobuf:"bytes,9,opt,name=networkType,proto3" json:"networkType,omitempty"`
}

func (x *FlagInfo) Reset() {
	*x = FlagInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagInfo) ProtoMessage() {}

func (x *FlagInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagInfo.ProtoReflect.Descriptor instead.
func (*FlagInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{400}
}

func (x *FlagInfo) GetFlagName() string {
	if x != nil {
		return x.FlagName
	}
	return ""
}

func (x *FlagInfo) GetFlagDesc() string {
	if x != nil {
		return x.FlagDesc
	}
	return ""
}

func (x *FlagInfo) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *FlagInfo) GetEnable() *wrappers.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *FlagInfo) GetFlagType() string {
	if x != nil {
		return x.FlagType
	}
	return ""
}

func (x *FlagInfo) GetFlagValueList() []string {
	if x != nil {
		return x.FlagValueList
	}
	return nil
}

func (x *FlagInfo) GetRegex() *ValueRegex {
	if x != nil {
		return x.Regex
	}
	return nil
}

func (x *FlagInfo) GetRange() *NumberRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *FlagInfo) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

type ValueRegex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ValueRegex) Reset() {
	*x = ValueRegex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueRegex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueRegex) ProtoMessage() {}

func (x *ValueRegex) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueRegex.ProtoReflect.Descriptor instead.
func (*ValueRegex) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{401}
}

func (x *ValueRegex) GetValidator() string {
	if x != nil {
		return x.Validator
	}
	return ""
}

func (x *ValueRegex) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type NumberRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min int32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max int32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *NumberRange) Reset() {
	*x = NumberRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberRange) ProtoMessage() {}

func (x *NumberRange) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberRange.ProtoReflect.Descriptor instead.
func (*NumberRange) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{402}
}

func (x *NumberRange) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *NumberRange) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type CreateCloudModuleFlagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID  string      `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Version  string      `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	ModuleID string      `protobuf:"bytes,3,opt,name=moduleID,proto3" json:"moduleID,omitempty"`
	FlagList []*FlagInfo `protobuf:"bytes,4,rep,name=flagList,proto3" json:"flagList,omitempty"`
	Operator string      `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *CreateCloudModuleFlagRequest) Reset() {
	*x = CreateCloudModuleFlagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudModuleFlagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudModuleFlagRequest) ProtoMessage() {}

func (x *CreateCloudModuleFlagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudModuleFlagRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudModuleFlagRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{403}
}

func (x *CreateCloudModuleFlagRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *CreateCloudModuleFlagRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateCloudModuleFlagRequest) GetModuleID() string {
	if x != nil {
		return x.ModuleID
	}
	return ""
}

func (x *CreateCloudModuleFlagRequest) GetFlagList() []*FlagInfo {
	if x != nil {
		return x.FlagList
	}
	return nil
}

func (x *CreateCloudModuleFlagRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type CreateCloudModuleFlagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateCloudModuleFlagResponse) Reset() {
	*x = CreateCloudModuleFlagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudModuleFlagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudModuleFlagResponse) ProtoMessage() {}

func (x *CreateCloudModuleFlagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudModuleFlagResponse.ProtoReflect.Descriptor instead.
func (*CreateCloudModuleFlagResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{404}
}

func (x *CreateCloudModuleFlagResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateCloudModuleFlagResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateCloudModuleFlagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID  string      `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Version  string      `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	ModuleID string      `protobuf:"bytes,3,opt,name=moduleID,proto3" json:"moduleID,omitempty"`
	FlagList []*FlagInfo `protobuf:"bytes,4,rep,name=flagList,proto3" json:"flagList,omitempty"`
	Operator string      `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *UpdateCloudModuleFlagRequest) Reset() {
	*x = UpdateCloudModuleFlagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloudModuleFlagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudModuleFlagRequest) ProtoMessage() {}

func (x *UpdateCloudModuleFlagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudModuleFlagRequest.ProtoReflect.Descriptor instead.
func (*UpdateCloudModuleFlagRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{405}
}

func (x *UpdateCloudModuleFlagRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *UpdateCloudModuleFlagRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpdateCloudModuleFlagRequest) GetModuleID() string {
	if x != nil {
		return x.ModuleID
	}
	return ""
}

func (x *UpdateCloudModuleFlagRequest) GetFlagList() []*FlagInfo {
	if x != nil {
		return x.FlagList
	}
	return nil
}

func (x *UpdateCloudModuleFlagRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type UpdateCloudModuleFlagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateCloudModuleFlagResponse) Reset() {
	*x = UpdateCloudModuleFlagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloudModuleFlagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudModuleFlagResponse) ProtoMessage() {}

func (x *UpdateCloudModuleFlagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudModuleFlagResponse.ProtoReflect.Descriptor instead.
func (*UpdateCloudModuleFlagResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{406}
}

func (x *UpdateCloudModuleFlagResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateCloudModuleFlagResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteCloudModuleFlagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID      string   `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Version      string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	ModuleID     string   `protobuf:"bytes,3,opt,name=moduleID,proto3" json:"moduleID,omitempty"`
	FlagNameList []string `protobuf:"bytes,4,rep,name=flagNameList,proto3" json:"flagNameList,omitempty"`
	Operator     string   `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *DeleteCloudModuleFlagRequest) Reset() {
	*x = DeleteCloudModuleFlagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudModuleFlagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudModuleFlagRequest) ProtoMessage() {}

func (x *DeleteCloudModuleFlagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudModuleFlagRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloudModuleFlagRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{407}
}

func (x *DeleteCloudModuleFlagRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *DeleteCloudModuleFlagRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeleteCloudModuleFlagRequest) GetModuleID() string {
	if x != nil {
		return x.ModuleID
	}
	return ""
}

func (x *DeleteCloudModuleFlagRequest) GetFlagNameList() []string {
	if x != nil {
		return x.FlagNameList
	}
	return nil
}

func (x *DeleteCloudModuleFlagRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type DeleteCloudModuleFlagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteCloudModuleFlagResponse) Reset() {
	*x = DeleteCloudModuleFlagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudModuleFlagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudModuleFlagResponse) ProtoMessage() {}

func (x *DeleteCloudModuleFlagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudModuleFlagResponse.ProtoReflect.Descriptor instead.
func (*DeleteCloudModuleFlagResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{408}
}

func (x *DeleteCloudModuleFlagResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteCloudModuleFlagResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListCloudModuleFlagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID      string   `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	Version      string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	ModuleID     string   `protobuf:"bytes,3,opt,name=moduleID,proto3" json:"moduleID,omitempty"`
	FlagNameList []string `protobuf:"bytes,4,rep,name=flagNameList,proto3" json:"flagNameList,omitempty"`
	Operator     string   `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *ListCloudModuleFlagRequest) Reset() {
	*x = ListCloudModuleFlagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudModuleFlagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudModuleFlagRequest) ProtoMessage() {}

func (x *ListCloudModuleFlagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudModuleFlagRequest.ProtoReflect.Descriptor instead.
func (*ListCloudModuleFlagRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{409}
}

func (x *ListCloudModuleFlagRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *ListCloudModuleFlagRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ListCloudModuleFlagRequest) GetModuleID() string {
	if x != nil {
		return x.ModuleID
	}
	return ""
}

func (x *ListCloudModuleFlagRequest) GetFlagNameList() []string {
	if x != nil {
		return x.FlagNameList
	}
	return nil
}

func (x *ListCloudModuleFlagRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type ListCloudModuleFlagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*CloudModuleFlag `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudModuleFlagResponse) Reset() {
	*x = ListCloudModuleFlagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudModuleFlagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudModuleFlagResponse) ProtoMessage() {}

func (x *ListCloudModuleFlagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudModuleFlagResponse.ProtoReflect.Descriptor instead.
func (*ListCloudModuleFlagResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{410}
}

func (x *ListCloudModuleFlagResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCloudModuleFlagResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCloudModuleFlagResponse) GetData() []*CloudModuleFlag {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetExternalNodeScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeGroupID string `protobuf:"bytes,1,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	Operator    string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Internal    bool   `protobuf:"varint,3,opt,name=internal,proto3" json:"internal,omitempty"`
}

func (x *GetExternalNodeScriptRequest) Reset() {
	*x = GetExternalNodeScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExternalNodeScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExternalNodeScriptRequest) ProtoMessage() {}

func (x *GetExternalNodeScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExternalNodeScriptRequest.ProtoReflect.Descriptor instead.
func (*GetExternalNodeScriptRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{411}
}

func (x *GetExternalNodeScriptRequest) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *GetExternalNodeScriptRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *GetExternalNodeScriptRequest) GetInternal() bool {
	if x != nil {
		return x.Internal
	}
	return false
}

type GetExternalNodeScriptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           string            `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetExternalNodeScriptResponse) Reset() {
	*x = GetExternalNodeScriptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExternalNodeScriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExternalNodeScriptResponse) ProtoMessage() {}

func (x *GetExternalNodeScriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExternalNodeScriptResponse.ProtoReflect.Descriptor instead.
func (*GetExternalNodeScriptResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{412}
}

func (x *GetExternalNodeScriptResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetExternalNodeScriptResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetExternalNodeScriptResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetExternalNodeScriptResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *GetExternalNodeScriptResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type MapStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values map[string]string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapStruct) Reset() {
	*x = MapStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStruct) ProtoMessage() {}

func (x *MapStruct) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStruct.ProtoReflect.Descriptor instead.
func (*MapStruct) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{413}
}

func (x *MapStruct) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

// IP 选择器 前置说明
// URL中的/scope/{scopeType}/{scopeId}部分, 用于指定用户操作所处的资源范围（业务/业务集）
// scopeType：资源范围类型，取值：业务：biz，业务集：biz_set
// scopeId：资源范围ID, 取值为业务ID/业务集ID
type GetBatchCustomSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeType  string   `protobuf:"bytes,1,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeId    string   `protobuf:"bytes,2,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	ModuleList []string `protobuf:"bytes,3,rep,name=moduleList,proto3" json:"moduleList,omitempty"`
}

func (x *GetBatchCustomSettingRequest) Reset() {
	*x = GetBatchCustomSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBatchCustomSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchCustomSettingRequest) ProtoMessage() {}

func (x *GetBatchCustomSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchCustomSettingRequest.ProtoReflect.Descriptor instead.
func (*GetBatchCustomSettingRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{414}
}

func (x *GetBatchCustomSettingRequest) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *GetBatchCustomSettingRequest) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

func (x *GetBatchCustomSettingRequest) GetModuleList() []string {
	if x != nil {
		return x.ModuleList
	}
	return nil
}

type GetBatchCustomSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success   bool            `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMsg  string          `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	RequestId string          `protobuf:"bytes,4,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Data      *_struct.Struct `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetBatchCustomSettingResponse) Reset() {
	*x = GetBatchCustomSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBatchCustomSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchCustomSettingResponse) ProtoMessage() {}

func (x *GetBatchCustomSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchCustomSettingResponse.ProtoReflect.Descriptor instead.
func (*GetBatchCustomSettingResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{415}
}

func (x *GetBatchCustomSettingResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetBatchCustomSettingResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetBatchCustomSettingResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *GetBatchCustomSettingResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetBatchCustomSettingResponse) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type ScopeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeType string `protobuf:"bytes,1,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeId   string `protobuf:"bytes,2,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
}

func (x *ScopeInfo) Reset() {
	*x = ScopeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeInfo) ProtoMessage() {}

func (x *ScopeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeInfo.ProtoReflect.Descriptor instead.
func (*ScopeInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{416}
}

func (x *ScopeInfo) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *ScopeInfo) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

type GetBizTopologyHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeType string       `protobuf:"bytes,1,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeId   string       `protobuf:"bytes,2,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	AllScope  bool         `protobuf:"varint,3,opt,name=allScope,proto3" json:"allScope,omitempty"`
	ScopeList []*ScopeInfo `protobuf:"bytes,4,rep,name=scopeList,proto3" json:"scopeList,omitempty"`
}

func (x *GetBizTopologyHostRequest) Reset() {
	*x = GetBizTopologyHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBizTopologyHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBizTopologyHostRequest) ProtoMessage() {}

func (x *GetBizTopologyHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBizTopologyHostRequest.ProtoReflect.Descriptor instead.
func (*GetBizTopologyHostRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{417}
}

func (x *GetBizTopologyHostRequest) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *GetBizTopologyHostRequest) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

func (x *GetBizTopologyHostRequest) GetAllScope() bool {
	if x != nil {
		return x.AllScope
	}
	return false
}

func (x *GetBizTopologyHostRequest) GetScopeList() []*ScopeInfo {
	if x != nil {
		return x.ScopeList
	}
	return nil
}

type GetBizTopologyHostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success   bool               `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMsg  string             `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	RequestId string             `protobuf:"bytes,4,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Data      *_struct.ListValue `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetBizTopologyHostResponse) Reset() {
	*x = GetBizTopologyHostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBizTopologyHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBizTopologyHostResponse) ProtoMessage() {}

func (x *GetBizTopologyHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBizTopologyHostResponse.ProtoReflect.Descriptor instead.
func (*GetBizTopologyHostResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{418}
}

func (x *GetBizTopologyHostResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetBizTopologyHostResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetBizTopologyHostResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *GetBizTopologyHostResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetBizTopologyHostResponse) GetData() *_struct.ListValue {
	if x != nil {
		return x.Data
	}
	return nil
}

type NodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId   string `protobuf:"bytes,1,opt,name=objectId,proto3" json:"objectId,omitempty"`
	InstanceId uint64 `protobuf:"varint,2,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
}

func (x *NodeData) Reset() {
	*x = NodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeData) ProtoMessage() {}

func (x *NodeData) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeData.ProtoReflect.Descriptor instead.
func (*NodeData) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{419}
}

func (x *NodeData) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *NodeData) GetInstanceId() uint64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

type GetTopologyNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeType         string               `protobuf:"bytes,1,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeId           string               `protobuf:"bytes,2,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	NodeList          []*NodeData          `protobuf:"bytes,3,rep,name=nodeList,proto3" json:"nodeList,omitempty"`
	SearchContent     string               `protobuf:"bytes,4,opt,name=searchContent,proto3" json:"searchContent,omitempty"`
	Alive             *wrappers.Int32Value `protobuf:"bytes,5,opt,name=alive,proto3" json:"alive,omitempty"`
	Start             uint64               `protobuf:"varint,6,opt,name=start,proto3" json:"start,omitempty"`
	PageSize          int32                `protobuf:"varint,7,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	ShowAvailableNode bool                 `protobuf:"varint,8,opt,name=showAvailableNode,proto3" json:"showAvailableNode,omitempty"`
}

func (x *GetTopologyNodesRequest) Reset() {
	*x = GetTopologyNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopologyNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopologyNodesRequest) ProtoMessage() {}

func (x *GetTopologyNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopologyNodesRequest.ProtoReflect.Descriptor instead.
func (*GetTopologyNodesRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{420}
}

func (x *GetTopologyNodesRequest) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *GetTopologyNodesRequest) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

func (x *GetTopologyNodesRequest) GetNodeList() []*NodeData {
	if x != nil {
		return x.NodeList
	}
	return nil
}

func (x *GetTopologyNodesRequest) GetSearchContent() string {
	if x != nil {
		return x.SearchContent
	}
	return ""
}

func (x *GetTopologyNodesRequest) GetAlive() *wrappers.Int32Value {
	if x != nil {
		return x.Alive
	}
	return nil
}

func (x *GetTopologyNodesRequest) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *GetTopologyNodesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetTopologyNodesRequest) GetShowAvailableNode() bool {
	if x != nil {
		return x.ShowAvailableNode
	}
	return false
}

type GetTopologyNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success   bool                  `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMsg  string                `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	RequestId string                `protobuf:"bytes,4,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Data      *GetTopologyNodesData `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTopologyNodesResponse) Reset() {
	*x = GetTopologyNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopologyNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopologyNodesResponse) ProtoMessage() {}

func (x *GetTopologyNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopologyNodesResponse.ProtoReflect.Descriptor instead.
func (*GetTopologyNodesResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{421}
}

func (x *GetTopologyNodesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTopologyNodesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetTopologyNodesResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *GetTopologyNodesResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetTopologyNodesResponse) GetData() *GetTopologyNodesData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetTopologyNodesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start    uint64      `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	PageSize int32       `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Total    uint64      `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Data     []*HostData `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTopologyNodesData) Reset() {
	*x = GetTopologyNodesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopologyNodesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopologyNodesData) ProtoMessage() {}

func (x *GetTopologyNodesData) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopologyNodesData.ProtoReflect.Descriptor instead.
func (*GetTopologyNodesData) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{422}
}

func (x *GetTopologyNodesData) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *GetTopologyNodesData) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetTopologyNodesData) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetTopologyNodesData) GetData() []*HostData {
	if x != nil {
		return x.Data
	}
	return nil
}

type HostData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId    uint64         `protobuf:"varint,1,opt,name=hostId,proto3" json:"hostId,omitempty"`
	Ip        string         `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Ipv6      string         `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	HostName  string         `protobuf:"bytes,4,opt,name=hostName,proto3" json:"hostName,omitempty"`
	Alive     uint32         `protobuf:"varint,5,opt,name=alive,proto3" json:"alive,omitempty"`
	OsName    string         `protobuf:"bytes,6,opt,name=osName,proto3" json:"osName,omitempty"`
	CloudArea *HostCloudArea `protobuf:"bytes,7,opt,name=cloudArea,proto3" json:"cloudArea,omitempty"`
}

func (x *HostData) Reset() {
	*x = HostData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostData) ProtoMessage() {}

func (x *HostData) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostData.ProtoReflect.Descriptor instead.
func (*HostData) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{423}
}

func (x *HostData) GetHostId() uint64 {
	if x != nil {
		return x.HostId
	}
	return 0
}

func (x *HostData) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *HostData) GetIpv6() string {
	if x != nil {
		return x.Ipv6
	}
	return ""
}

func (x *HostData) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *HostData) GetAlive() uint32 {
	if x != nil {
		return x.Alive
	}
	return 0
}

func (x *HostData) GetOsName() string {
	if x != nil {
		return x.OsName
	}
	return ""
}

func (x *HostData) GetCloudArea() *HostCloudArea {
	if x != nil {
		return x.CloudArea
	}
	return nil
}

type HostCloudArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *HostCloudArea) Reset() {
	*x = HostCloudArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostCloudArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostCloudArea) ProtoMessage() {}

func (x *HostCloudArea) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostCloudArea.ProtoReflect.Descriptor instead.
func (*HostCloudArea) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{424}
}

func (x *HostCloudArea) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HostCloudArea) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetTopologyHostIdsNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeType     string               `protobuf:"bytes,1,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeId       string               `protobuf:"bytes,2,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	NodeList      []*NodeData          `protobuf:"bytes,3,rep,name=nodeList,proto3" json:"nodeList,omitempty"`
	SearchContent string               `protobuf:"bytes,4,opt,name=searchContent,proto3" json:"searchContent,omitempty"`
	Alive         *wrappers.Int32Value `protobuf:"bytes,5,opt,name=alive,proto3" json:"alive,omitempty"`
	Start         uint64               `protobuf:"varint,6,opt,name=start,proto3" json:"start,omitempty"`
	PageSize      int32                `protobuf:"varint,7,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *GetTopologyHostIdsNodesRequest) Reset() {
	*x = GetTopologyHostIdsNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopologyHostIdsNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopologyHostIdsNodesRequest) ProtoMessage() {}

func (x *GetTopologyHostIdsNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopologyHostIdsNodesRequest.ProtoReflect.Descriptor instead.
func (*GetTopologyHostIdsNodesRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{425}
}

func (x *GetTopologyHostIdsNodesRequest) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *GetTopologyHostIdsNodesRequest) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

func (x *GetTopologyHostIdsNodesRequest) GetNodeList() []*NodeData {
	if x != nil {
		return x.NodeList
	}
	return nil
}

func (x *GetTopologyHostIdsNodesRequest) GetSearchContent() string {
	if x != nil {
		return x.SearchContent
	}
	return ""
}

func (x *GetTopologyHostIdsNodesRequest) GetAlive() *wrappers.Int32Value {
	if x != nil {
		return x.Alive
	}
	return nil
}

func (x *GetTopologyHostIdsNodesRequest) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *GetTopologyHostIdsNodesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetTopologyHostIdsNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32                       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success   bool                         `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMsg  string                       `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	RequestId string                       `protobuf:"bytes,4,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Data      *GetTopologyHostIdsNodesData `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTopologyHostIdsNodesResponse) Reset() {
	*x = GetTopologyHostIdsNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopologyHostIdsNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopologyHostIdsNodesResponse) ProtoMessage() {}

func (x *GetTopologyHostIdsNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopologyHostIdsNodesResponse.ProtoReflect.Descriptor instead.
func (*GetTopologyHostIdsNodesResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{426}
}

func (x *GetTopologyHostIdsNodesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTopologyHostIdsNodesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetTopologyHostIdsNodesResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *GetTopologyHostIdsNodesResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetTopologyHostIdsNodesResponse) GetData() *GetTopologyHostIdsNodesData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetTopologyHostIdsNodesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start    uint64             `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	PageSize int32              `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Total    uint64             `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Data     []*HostIDsNodeData `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTopologyHostIdsNodesData) Reset() {
	*x = GetTopologyHostIdsNodesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopologyHostIdsNodesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopologyHostIdsNodesData) ProtoMessage() {}

func (x *GetTopologyHostIdsNodesData) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopologyHostIdsNodesData.ProtoReflect.Descriptor instead.
func (*GetTopologyHostIdsNodesData) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{427}
}

func (x *GetTopologyHostIdsNodesData) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *GetTopologyHostIdsNodesData) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetTopologyHostIdsNodesData) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetTopologyHostIdsNodesData) GetData() []*HostIDsNodeData {
	if x != nil {
		return x.Data
	}
	return nil
}

type HostIDsNodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId uint64 `protobuf:"varint,1,opt,name=hostId,proto3" json:"hostId,omitempty"`
	Meta   *Meta  `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *HostIDsNodeData) Reset() {
	*x = HostIDsNodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostIDsNodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostIDsNodeData) ProtoMessage() {}

func (x *HostIDsNodeData) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostIDsNodeData.ProtoReflect.Descriptor instead.
func (*HostIDsNodeData) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{428}
}

func (x *HostIDsNodeData) GetHostId() uint64 {
	if x != nil {
		return x.HostId
	}
	return 0
}

func (x *HostIDsNodeData) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeType string `protobuf:"bytes,1,opt,name=scope_type,json=scopeType,proto3" json:"scope_type,omitempty"`
	ScopeId   string `protobuf:"bytes,2,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty"`
	BkBizId   string `protobuf:"bytes,3,opt,name=bk_biz_id,json=bkBizId,proto3" json:"bk_biz_id,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{429}
}

func (x *Meta) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *Meta) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

func (x *Meta) GetBkBizId() string {
	if x != nil {
		return x.BkBizId
	}
	return ""
}

type GetHostsDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeType string             `protobuf:"bytes,1,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeId   string             `protobuf:"bytes,2,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	HostList  []*HostIDsNodeData `protobuf:"bytes,3,rep,name=hostList,proto3" json:"hostList,omitempty"`
}

func (x *GetHostsDetailsRequest) Reset() {
	*x = GetHostsDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostsDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostsDetailsRequest) ProtoMessage() {}

func (x *GetHostsDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostsDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetHostsDetailsRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{430}
}

func (x *GetHostsDetailsRequest) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *GetHostsDetailsRequest) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

func (x *GetHostsDetailsRequest) GetHostList() []*HostIDsNodeData {
	if x != nil {
		return x.HostList
	}
	return nil
}

type GetHostsDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success   bool                `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMsg  string              `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	RequestId string              `protobuf:"bytes,4,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Data      []*HostDataWithMeta `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetHostsDetailsResponse) Reset() {
	*x = GetHostsDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostsDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostsDetailsResponse) ProtoMessage() {}

func (x *GetHostsDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostsDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetHostsDetailsResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{431}
}

func (x *GetHostsDetailsResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetHostsDetailsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetHostsDetailsResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *GetHostsDetailsResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetHostsDetailsResponse) GetData() []*HostDataWithMeta {
	if x != nil {
		return x.Data
	}
	return nil
}

type HostDataWithMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId    uint64         `protobuf:"varint,1,opt,name=hostId,proto3" json:"hostId,omitempty"`
	Ip        string         `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Ipv6      string         `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	HostName  string         `protobuf:"bytes,4,opt,name=hostName,proto3" json:"hostName,omitempty"`
	Alive     uint32         `protobuf:"varint,5,opt,name=alive,proto3" json:"alive,omitempty"`
	OsName    string         `protobuf:"bytes,6,opt,name=osName,proto3" json:"osName,omitempty"`
	CloudArea *HostCloudArea `protobuf:"bytes,7,opt,name=cloudArea,proto3" json:"cloudArea,omitempty"`
	Meta      *Meta          `protobuf:"bytes,8,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *HostDataWithMeta) Reset() {
	*x = HostDataWithMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[432]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostDataWithMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostDataWithMeta) ProtoMessage() {}

func (x *HostDataWithMeta) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[432]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostDataWithMeta.ProtoReflect.Descriptor instead.
func (*HostDataWithMeta) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{432}
}

func (x *HostDataWithMeta) GetHostId() uint64 {
	if x != nil {
		return x.HostId
	}
	return 0
}

func (x *HostDataWithMeta) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *HostDataWithMeta) GetIpv6() string {
	if x != nil {
		return x.Ipv6
	}
	return ""
}

func (x *HostDataWithMeta) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *HostDataWithMeta) GetAlive() uint32 {
	if x != nil {
		return x.Alive
	}
	return 0
}

func (x *HostDataWithMeta) GetOsName() string {
	if x != nil {
		return x.OsName
	}
	return ""
}

func (x *HostDataWithMeta) GetCloudArea() *HostCloudArea {
	if x != nil {
		return x.CloudArea
	}
	return nil
}

func (x *HostDataWithMeta) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type GetScopeHostCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeType         string   `protobuf:"bytes,1,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeId           string   `protobuf:"bytes,2,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	IpList            []string `protobuf:"bytes,3,rep,name=ipList,proto3" json:"ipList,omitempty"`
	Ipv6List          []string `protobuf:"bytes,4,rep,name=ipv6List,proto3" json:"ipv6List,omitempty"`
	KeyList           []string `protobuf:"bytes,5,rep,name=keyList,proto3" json:"keyList,omitempty"`
	ShowAvailableNode bool     `protobuf:"varint,6,opt,name=showAvailableNode,proto3" json:"showAvailableNode,omitempty"`
}

func (x *GetScopeHostCheckRequest) Reset() {
	*x = GetScopeHostCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[433]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScopeHostCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScopeHostCheckRequest) ProtoMessage() {}

func (x *GetScopeHostCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[433]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScopeHostCheckRequest.ProtoReflect.Descriptor instead.
func (*GetScopeHostCheckRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{433}
}

func (x *GetScopeHostCheckRequest) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *GetScopeHostCheckRequest) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

func (x *GetScopeHostCheckRequest) GetIpList() []string {
	if x != nil {
		return x.IpList
	}
	return nil
}

func (x *GetScopeHostCheckRequest) GetIpv6List() []string {
	if x != nil {
		return x.Ipv6List
	}
	return nil
}

func (x *GetScopeHostCheckRequest) GetKeyList() []string {
	if x != nil {
		return x.KeyList
	}
	return nil
}

func (x *GetScopeHostCheckRequest) GetShowAvailableNode() bool {
	if x != nil {
		return x.ShowAvailableNode
	}
	return false
}

type GetScopeHostCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success   bool        `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMsg  string      `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	RequestId string      `protobuf:"bytes,4,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Data      []*HostData `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetScopeHostCheckResponse) Reset() {
	*x = GetScopeHostCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[434]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScopeHostCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScopeHostCheckResponse) ProtoMessage() {}

func (x *GetScopeHostCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[434]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScopeHostCheckResponse.ProtoReflect.Descriptor instead.
func (*GetScopeHostCheckResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{434}
}

func (x *GetScopeHostCheckResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetScopeHostCheckResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetScopeHostCheckResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *GetScopeHostCheckResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetScopeHostCheckResponse) GetData() []*HostData {
	if x != nil {
		return x.Data
	}
	return nil
}

// NotifyConfig notify config
type NotifyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server      string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	DataId      uint64 `protobuf:"varint,2,opt,name=dataId,proto3" json:"dataId,omitempty"`
	AccessToken string `protobuf:"bytes,3,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
}

func (x *NotifyConfig) Reset() {
	*x = NotifyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[435]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyConfig) ProtoMessage() {}

func (x *NotifyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[435]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyConfig.ProtoReflect.Descriptor instead.
func (*NotifyConfig) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{435}
}

func (x *NotifyConfig) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *NotifyConfig) GetDataId() uint64 {
	if x != nil {
		return x.DataId
	}
	return 0
}

func (x *NotifyConfig) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

// NotifyData notify body
type NotifyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable  bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Title   string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *NotifyData) Reset() {
	*x = NotifyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[436]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyData) ProtoMessage() {}

func (x *NotifyData) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[436]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyData.ProtoReflect.Descriptor instead.
func (*NotifyData) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{436}
}

func (x *NotifyData) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *NotifyData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NotifyData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// NotifyTemplate for system notify
type NotifyTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifyTemplateID  string        `protobuf:"bytes,1,opt,name=notifyTemplateID,proto3" json:"notifyTemplateID,omitempty"`
	Name              string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectID         string        `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	NotifyType        string        `protobuf:"bytes,4,opt,name=notifyType,proto3" json:"notifyType,omitempty"`
	Desc              string        `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	Enable            bool          `protobuf:"varint,6,opt,name=enable,proto3" json:"enable,omitempty"`
	Config            *NotifyConfig `protobuf:"bytes,7,opt,name=config,proto3" json:"config,omitempty"`
	CreateCluster     *NotifyData   `protobuf:"bytes,8,opt,name=createCluster,proto3" json:"createCluster,omitempty"`
	DeleteCluster     *NotifyData   `protobuf:"bytes,9,opt,name=deleteCluster,proto3" json:"deleteCluster,omitempty"`
	CreateNodeGroup   *NotifyData   `protobuf:"bytes,10,opt,name=createNodeGroup,proto3" json:"createNodeGroup,omitempty"`
	DeleteNodeGroup   *NotifyData   `protobuf:"bytes,11,opt,name=deleteNodeGroup,proto3" json:"deleteNodeGroup,omitempty"`
	UpdateNodeGroup   *NotifyData   `protobuf:"bytes,12,opt,name=updateNodeGroup,proto3" json:"updateNodeGroup,omitempty"`
	GroupScaleOutNode *NotifyData   `protobuf:"bytes,13,opt,name=groupScaleOutNode,proto3" json:"groupScaleOutNode,omitempty"`
	GroupScaleInNode  *NotifyData   `protobuf:"bytes,14,opt,name=groupScaleInNode,proto3" json:"groupScaleInNode,omitempty"`
	Receivers         string        `protobuf:"bytes,15,opt,name=receivers,proto3" json:"receivers,omitempty"`
	Creator           string        `protobuf:"bytes,16,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater           string        `protobuf:"bytes,17,opt,name=updater,proto3" json:"updater,omitempty"`
	CreateTime        string        `protobuf:"bytes,18,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime        string        `protobuf:"bytes,19,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *NotifyTemplate) Reset() {
	*x = NotifyTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[437]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyTemplate) ProtoMessage() {}

func (x *NotifyTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[437]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyTemplate.ProtoReflect.Descriptor instead.
func (*NotifyTemplate) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{437}
}

func (x *NotifyTemplate) GetNotifyTemplateID() string {
	if x != nil {
		return x.NotifyTemplateID
	}
	return ""
}

func (x *NotifyTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NotifyTemplate) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *NotifyTemplate) GetNotifyType() string {
	if x != nil {
		return x.NotifyType
	}
	return ""
}

func (x *NotifyTemplate) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *NotifyTemplate) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *NotifyTemplate) GetConfig() *NotifyConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *NotifyTemplate) GetCreateCluster() *NotifyData {
	if x != nil {
		return x.CreateCluster
	}
	return nil
}

func (x *NotifyTemplate) GetDeleteCluster() *NotifyData {
	if x != nil {
		return x.DeleteCluster
	}
	return nil
}

func (x *NotifyTemplate) GetCreateNodeGroup() *NotifyData {
	if x != nil {
		return x.CreateNodeGroup
	}
	return nil
}

func (x *NotifyTemplate) GetDeleteNodeGroup() *NotifyData {
	if x != nil {
		return x.DeleteNodeGroup
	}
	return nil
}

func (x *NotifyTemplate) GetUpdateNodeGroup() *NotifyData {
	if x != nil {
		return x.UpdateNodeGroup
	}
	return nil
}

func (x *NotifyTemplate) GetGroupScaleOutNode() *NotifyData {
	if x != nil {
		return x.GroupScaleOutNode
	}
	return nil
}

func (x *NotifyTemplate) GetGroupScaleInNode() *NotifyData {
	if x != nil {
		return x.GroupScaleInNode
	}
	return nil
}

func (x *NotifyTemplate) GetReceivers() string {
	if x != nil {
		return x.Receivers
	}
	return ""
}

func (x *NotifyTemplate) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *NotifyTemplate) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *NotifyTemplate) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *NotifyTemplate) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type CreateNotifyTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID         string              `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Name              string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc              string              `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	NotifyType        string              `protobuf:"bytes,4,opt,name=notifyType,proto3" json:"notifyType,omitempty"`
	Enable            *wrappers.BoolValue `protobuf:"bytes,5,opt,name=enable,proto3" json:"enable,omitempty"`
	CreateCluster     *NotifyData         `protobuf:"bytes,6,opt,name=createCluster,proto3" json:"createCluster,omitempty"`
	DeleteCluster     *NotifyData         `protobuf:"bytes,7,opt,name=deleteCluster,proto3" json:"deleteCluster,omitempty"`
	CreateNodeGroup   *NotifyData         `protobuf:"bytes,8,opt,name=createNodeGroup,proto3" json:"createNodeGroup,omitempty"`
	DeleteNodeGroup   *NotifyData         `protobuf:"bytes,9,opt,name=deleteNodeGroup,proto3" json:"deleteNodeGroup,omitempty"`
	UpdateNodeGroup   *NotifyData         `protobuf:"bytes,10,opt,name=updateNodeGroup,proto3" json:"updateNodeGroup,omitempty"`
	GroupScaleOutNode *NotifyData         `protobuf:"bytes,11,opt,name=groupScaleOutNode,proto3" json:"groupScaleOutNode,omitempty"`
	GroupScaleInNode  *NotifyData         `protobuf:"bytes,12,opt,name=groupScaleInNode,proto3" json:"groupScaleInNode,omitempty"`
	Config            *NotifyConfig       `protobuf:"bytes,13,opt,name=config,proto3" json:"config,omitempty"`
	Receivers         string              `protobuf:"bytes,14,opt,name=receivers,proto3" json:"receivers,omitempty"`
	Creator           string              `protobuf:"bytes,15,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (x *CreateNotifyTemplateRequest) Reset() {
	*x = CreateNotifyTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[438]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotifyTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotifyTemplateRequest) ProtoMessage() {}

func (x *CreateNotifyTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[438]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotifyTemplateRequest.ProtoReflect.Descriptor instead.
func (*CreateNotifyTemplateRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{438}
}

func (x *CreateNotifyTemplateRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CreateNotifyTemplateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNotifyTemplateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CreateNotifyTemplateRequest) GetNotifyType() string {
	if x != nil {
		return x.NotifyType
	}
	return ""
}

func (x *CreateNotifyTemplateRequest) GetEnable() *wrappers.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *CreateNotifyTemplateRequest) GetCreateCluster() *NotifyData {
	if x != nil {
		return x.CreateCluster
	}
	return nil
}

func (x *CreateNotifyTemplateRequest) GetDeleteCluster() *NotifyData {
	if x != nil {
		return x.DeleteCluster
	}
	return nil
}

func (x *CreateNotifyTemplateRequest) GetCreateNodeGroup() *NotifyData {
	if x != nil {
		return x.CreateNodeGroup
	}
	return nil
}

func (x *CreateNotifyTemplateRequest) GetDeleteNodeGroup() *NotifyData {
	if x != nil {
		return x.DeleteNodeGroup
	}
	return nil
}

func (x *CreateNotifyTemplateRequest) GetUpdateNodeGroup() *NotifyData {
	if x != nil {
		return x.UpdateNodeGroup
	}
	return nil
}

func (x *CreateNotifyTemplateRequest) GetGroupScaleOutNode() *NotifyData {
	if x != nil {
		return x.GroupScaleOutNode
	}
	return nil
}

func (x *CreateNotifyTemplateRequest) GetGroupScaleInNode() *NotifyData {
	if x != nil {
		return x.GroupScaleInNode
	}
	return nil
}

func (x *CreateNotifyTemplateRequest) GetConfig() *NotifyConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateNotifyTemplateRequest) GetReceivers() string {
	if x != nil {
		return x.Receivers
	}
	return ""
}

func (x *CreateNotifyTemplateRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

type CreateNotifyTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *CreateNotifyTemplateResponse) Reset() {
	*x = CreateNotifyTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[439]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotifyTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotifyTemplateResponse) ProtoMessage() {}

func (x *CreateNotifyTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[439]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotifyTemplateResponse.ProtoReflect.Descriptor instead.
func (*CreateNotifyTemplateResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{439}
}

func (x *CreateNotifyTemplateResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateNotifyTemplateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateNotifyTemplateResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CreateNotifyTemplateResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type DeleteNotifyTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID        string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	NotifyTemplateID string `protobuf:"bytes,2,opt,name=notifyTemplateID,proto3" json:"notifyTemplateID,omitempty"`
}

func (x *DeleteNotifyTemplateRequest) Reset() {
	*x = DeleteNotifyTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[440]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNotifyTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNotifyTemplateRequest) ProtoMessage() {}

func (x *DeleteNotifyTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[440]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNotifyTemplateRequest.ProtoReflect.Descriptor instead.
func (*DeleteNotifyTemplateRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{440}
}

func (x *DeleteNotifyTemplateRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *DeleteNotifyTemplateRequest) GetNotifyTemplateID() string {
	if x != nil {
		return x.NotifyTemplateID
	}
	return ""
}

type DeleteNotifyTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	WebAnnotations *WebAnnotationsV2 `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *DeleteNotifyTemplateResponse) Reset() {
	*x = DeleteNotifyTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[441]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNotifyTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNotifyTemplateResponse) ProtoMessage() {}

func (x *DeleteNotifyTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[441]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNotifyTemplateResponse.ProtoReflect.Descriptor instead.
func (*DeleteNotifyTemplateResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{441}
}

func (x *DeleteNotifyTemplateResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteNotifyTemplateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteNotifyTemplateResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteNotifyTemplateResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListNotifyTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID        string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	NotifyTemplateID string `protobuf:"bytes,2,opt,name=notifyTemplateID,proto3" json:"notifyTemplateID,omitempty"`
}

func (x *ListNotifyTemplateRequest) Reset() {
	*x = ListNotifyTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[442]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNotifyTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNotifyTemplateRequest) ProtoMessage() {}

func (x *ListNotifyTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[442]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNotifyTemplateRequest.ProtoReflect.Descriptor instead.
func (*ListNotifyTemplateRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{442}
}

func (x *ListNotifyTemplateRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListNotifyTemplateRequest) GetNotifyTemplateID() string {
	if x != nil {
		return x.NotifyTemplateID
	}
	return ""
}

type ListNotifyTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*NotifyTemplate `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListNotifyTemplateResponse) Reset() {
	*x = ListNotifyTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[443]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNotifyTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNotifyTemplateResponse) ProtoMessage() {}

func (x *ListNotifyTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[443]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNotifyTemplateResponse.ProtoReflect.Descriptor instead.
func (*ListNotifyTemplateResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{443}
}

func (x *ListNotifyTemplateResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListNotifyTemplateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListNotifyTemplateResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListNotifyTemplateResponse) GetData() []*NotifyTemplate {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetProviderResourceUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderID   string                `protobuf:"bytes,1,opt,name=providerID,proto3" json:"providerID,omitempty"`
	Region       string                `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	InstanceType string                `protobuf:"bytes,3,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Ratio        *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Available    *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=available,proto3" json:"available,omitempty"`
}

func (x *GetProviderResourceUsageRequest) Reset() {
	*x = GetProviderResourceUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[444]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProviderResourceUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProviderResourceUsageRequest) ProtoMessage() {}

func (x *GetProviderResourceUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[444]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProviderResourceUsageRequest.ProtoReflect.Descriptor instead.
func (*GetProviderResourceUsageRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{444}
}

func (x *GetProviderResourceUsageRequest) GetProviderID() string {
	if x != nil {
		return x.ProviderID
	}
	return ""
}

func (x *GetProviderResourceUsageRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetProviderResourceUsageRequest) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *GetProviderResourceUsageRequest) GetRatio() *wrappers.UInt32Value {
	if x != nil {
		return x.Ratio
	}
	return nil
}

func (x *GetProviderResourceUsageRequest) GetAvailable() *wrappers.UInt32Value {
	if x != nil {
		return x.Available
	}
	return nil
}

type GetProviderResourceUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProviderResourceUsageResponse) Reset() {
	*x = GetProviderResourceUsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[445]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProviderResourceUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProviderResourceUsageResponse) ProtoMessage() {}

func (x *GetProviderResourceUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[445]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProviderResourceUsageResponse.ProtoReflect.Descriptor instead.
func (*GetProviderResourceUsageResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{445}
}

func (x *GetProviderResourceUsageResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetProviderResourceUsageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProviderResourceUsageResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetProviderResourceUsageResponse) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type BusinessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId     string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ProjectName   string `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ProjectCode   string `protobuf:"bytes,3,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ProjectUsers  string `protobuf:"bytes,4,opt,name=projectUsers,proto3" json:"projectUsers,omitempty"`
	BizId         string `protobuf:"bytes,5,opt,name=bizId,proto3" json:"bizId,omitempty"`
	BizName       string `protobuf:"bytes,6,opt,name=bizName,proto3" json:"bizName,omitempty"`
	BizUsers      string `protobuf:"bytes,7,opt,name=bizUsers,proto3" json:"bizUsers,omitempty"`
	ClusterId     string `protobuf:"bytes,8,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ClusterName   string `protobuf:"bytes,9,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	ClusterRegion string `protobuf:"bytes,10,opt,name=clusterRegion,proto3" json:"clusterRegion,omitempty"`
	ClusterUsers  string `protobuf:"bytes,11,opt,name=clusterUsers,proto3" json:"clusterUsers,omitempty"`
	GroupId       string `protobuf:"bytes,12,opt,name=groupId,proto3" json:"groupId,omitempty"`
	GroupName     string `protobuf:"bytes,13,opt,name=groupName,proto3" json:"groupName,omitempty"`
	InstanceType  string `protobuf:"bytes,14,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Zones         string `protobuf:"bytes,15,opt,name=zones,proto3" json:"zones,omitempty"`
	ConsumerId    string `protobuf:"bytes,16,opt,name=consumerId,proto3" json:"consumerId,omitempty"`
	PoolId        string `protobuf:"bytes,17,opt,name=poolId,proto3" json:"poolId,omitempty"`
	GroupUsers    string `protobuf:"bytes,18,opt,name=groupUsers,proto3" json:"groupUsers,omitempty"`
	Url           string `protobuf:"bytes,19,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *BusinessInfo) Reset() {
	*x = BusinessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[446]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessInfo) ProtoMessage() {}

func (x *BusinessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[446]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessInfo.ProtoReflect.Descriptor instead.
func (*BusinessInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{446}
}

func (x *BusinessInfo) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *BusinessInfo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *BusinessInfo) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *BusinessInfo) GetProjectUsers() string {
	if x != nil {
		return x.ProjectUsers
	}
	return ""
}

func (x *BusinessInfo) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

func (x *BusinessInfo) GetBizName() string {
	if x != nil {
		return x.BizName
	}
	return ""
}

func (x *BusinessInfo) GetBizUsers() string {
	if x != nil {
		return x.BizUsers
	}
	return ""
}

func (x *BusinessInfo) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *BusinessInfo) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *BusinessInfo) GetClusterRegion() string {
	if x != nil {
		return x.ClusterRegion
	}
	return ""
}

func (x *BusinessInfo) GetClusterUsers() string {
	if x != nil {
		return x.ClusterUsers
	}
	return ""
}

func (x *BusinessInfo) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *BusinessInfo) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *BusinessInfo) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *BusinessInfo) GetZones() string {
	if x != nil {
		return x.Zones
	}
	return ""
}

func (x *BusinessInfo) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

func (x *BusinessInfo) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *BusinessInfo) GetGroupUsers() string {
	if x != nil {
		return x.GroupUsers
	}
	return ""
}

func (x *BusinessInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type GetProjectResourceQuotaUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID  string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ProviderID string `protobuf:"bytes,2,opt,name=providerID,proto3" json:"providerID,omitempty"`
}

func (x *GetProjectResourceQuotaUsageRequest) Reset() {
	*x = GetProjectResourceQuotaUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[447]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectResourceQuotaUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectResourceQuotaUsageRequest) ProtoMessage() {}

func (x *GetProjectResourceQuotaUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[447]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectResourceQuotaUsageRequest.ProtoReflect.Descriptor instead.
func (*GetProjectResourceQuotaUsageRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{447}
}

func (x *GetProjectResourceQuotaUsageRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetProjectResourceQuotaUsageRequest) GetProviderID() string {
	if x != nil {
		return x.ProviderID
	}
	return ""
}

type GetProjectResourceQuotaUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool               `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *_struct.ListValue `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotationsV2  `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetProjectResourceQuotaUsageResponse) Reset() {
	*x = GetProjectResourceQuotaUsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[448]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectResourceQuotaUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectResourceQuotaUsageResponse) ProtoMessage() {}

func (x *GetProjectResourceQuotaUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[448]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectResourceQuotaUsageResponse.ProtoReflect.Descriptor instead.
func (*GetProjectResourceQuotaUsageResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{448}
}

func (x *GetProjectResourceQuotaUsageResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetProjectResourceQuotaUsageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProjectResourceQuotaUsageResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetProjectResourceQuotaUsageResponse) GetData() *_struct.ListValue {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetProjectResourceQuotaUsageResponse) GetWebAnnotations() *WebAnnotationsV2 {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ProjectAutoscalerQuota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceType  string   `protobuf:"bytes,1,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Region        string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Zone          string   `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	Total         uint32   `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
	Used          uint32   `protobuf:"varint,6,opt,name=used,proto3" json:"used,omitempty"`
	GroupIds      []string `protobuf:"bytes,7,rep,name=groupIds,proto3" json:"groupIds,omitempty"`
	TotalGroupIds []string `protobuf:"bytes,8,rep,name=totalGroupIds,proto3" json:"totalGroupIds,omitempty"`
}

func (x *ProjectAutoscalerQuota) Reset() {
	*x = ProjectAutoscalerQuota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[449]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectAutoscalerQuota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectAutoscalerQuota) ProtoMessage() {}

func (x *ProjectAutoscalerQuota) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[449]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectAutoscalerQuota.ProtoReflect.Descriptor instead.
func (*ProjectAutoscalerQuota) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{449}
}

func (x *ProjectAutoscalerQuota) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *ProjectAutoscalerQuota) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ProjectAutoscalerQuota) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ProjectAutoscalerQuota) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ProjectAutoscalerQuota) GetUsed() uint32 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *ProjectAutoscalerQuota) GetGroupIds() []string {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

func (x *ProjectAutoscalerQuota) GetTotalGroupIds() []string {
	if x != nil {
		return x.TotalGroupIds
	}
	return nil
}

type ListCloudNodePublicPrefixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudID           string `protobuf:"bytes,1,opt,name=cloudID,proto3" json:"cloudID,omitempty"`
	AccountID         string `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	ResourceGroupName string `protobuf:"bytes,3,opt,name=resourceGroupName,proto3" json:"resourceGroupName,omitempty"`
}

func (x *ListCloudNodePublicPrefixRequest) Reset() {
	*x = ListCloudNodePublicPrefixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[450]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudNodePublicPrefixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudNodePublicPrefixRequest) ProtoMessage() {}

func (x *ListCloudNodePublicPrefixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[450]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudNodePublicPrefixRequest.ProtoReflect.Descriptor instead.
func (*ListCloudNodePublicPrefixRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{450}
}

func (x *ListCloudNodePublicPrefixRequest) GetCloudID() string {
	if x != nil {
		return x.CloudID
	}
	return ""
}

func (x *ListCloudNodePublicPrefixRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ListCloudNodePublicPrefixRequest) GetResourceGroupName() string {
	if x != nil {
		return x.ResourceGroupName
	}
	return ""
}

type ListCloudNodePublicPrefixResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*NodePublicPrefix `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudNodePublicPrefixResponse) Reset() {
	*x = ListCloudNodePublicPrefixResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[451]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudNodePublicPrefixResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudNodePublicPrefixResponse) ProtoMessage() {}

func (x *ListCloudNodePublicPrefixResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[451]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudNodePublicPrefixResponse.ProtoReflect.Descriptor instead.
func (*ListCloudNodePublicPrefixResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{451}
}

func (x *ListCloudNodePublicPrefixResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCloudNodePublicPrefixResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCloudNodePublicPrefixResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListCloudNodePublicPrefixResponse) GetData() []*NodePublicPrefix {
	if x != nil {
		return x.Data
	}
	return nil
}

type NodePublicPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IpPrefix string   `protobuf:"bytes,3,opt,name=ipPrefix,proto3" json:"ipPrefix,omitempty"`
	Zones    []string `protobuf:"bytes,4,rep,name=zones,proto3" json:"zones,omitempty"`
}

func (x *NodePublicPrefix) Reset() {
	*x = NodePublicPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[452]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodePublicPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodePublicPrefix) ProtoMessage() {}

func (x *NodePublicPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[452]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodePublicPrefix.ProtoReflect.Descriptor instead.
func (*NodePublicPrefix) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{452}
}

func (x *NodePublicPrefix) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodePublicPrefix) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodePublicPrefix) GetIpPrefix() string {
	if x != nil {
		return x.IpPrefix
	}
	return ""
}

func (x *NodePublicPrefix) GetZones() []string {
	if x != nil {
		return x.Zones
	}
	return nil
}

type GetClusterSharedProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
}

func (x *GetClusterSharedProjectRequest) Reset() {
	*x = GetClusterSharedProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[453]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterSharedProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterSharedProjectRequest) ProtoMessage() {}

func (x *GetClusterSharedProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[453]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterSharedProjectRequest.ProtoReflect.Descriptor instead.
func (*GetClusterSharedProjectRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{453}
}

func (x *GetClusterSharedProjectRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

type GetClusterSharedProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool               `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.ListValue `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetClusterSharedProjectResponse) Reset() {
	*x = GetClusterSharedProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[454]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterSharedProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterSharedProjectResponse) ProtoMessage() {}

func (x *GetClusterSharedProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[454]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterSharedProjectResponse.ProtoReflect.Descriptor instead.
func (*GetClusterSharedProjectResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{454}
}

func (x *GetClusterSharedProjectResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetClusterSharedProjectResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetClusterSharedProjectResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetClusterSharedProjectResponse) GetData() *_struct.ListValue {
	if x != nil {
		return x.Data
	}
	return nil
}

type GPUArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MigEnable    bool           `protobuf:"varint,1,opt,name=migEnable,proto3" json:"migEnable,omitempty"`
	Driver       *DriverVersion `protobuf:"bytes,2,opt,name=driver,proto3" json:"driver,omitempty"`
	Cuda         *DriverVersion `protobuf:"bytes,3,opt,name=cuda,proto3" json:"cuda,omitempty"`
	Cudnn        *CUDNN         `protobuf:"bytes,4,opt,name=cudnn,proto3" json:"cudnn,omitempty"`
	CustomDriver *CustomDriver  `protobuf:"bytes,5,opt,name=customDriver,proto3" json:"customDriver,omitempty"`
}

func (x *GPUArgs) Reset() {
	*x = GPUArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[455]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUArgs) ProtoMessage() {}

func (x *GPUArgs) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[455]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUArgs.ProtoReflect.Descriptor instead.
func (*GPUArgs) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{455}
}

func (x *GPUArgs) GetMigEnable() bool {
	if x != nil {
		return x.MigEnable
	}
	return false
}

func (x *GPUArgs) GetDriver() *DriverVersion {
	if x != nil {
		return x.Driver
	}
	return nil
}

func (x *GPUArgs) GetCuda() *DriverVersion {
	if x != nil {
		return x.Cuda
	}
	return nil
}

func (x *GPUArgs) GetCudnn() *CUDNN {
	if x != nil {
		return x.Cudnn
	}
	return nil
}

func (x *GPUArgs) GetCustomDriver() *CustomDriver {
	if x != nil {
		return x.CustomDriver
	}
	return nil
}

type DriverVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DriverVersion) Reset() {
	*x = DriverVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[456]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverVersion) ProtoMessage() {}

func (x *DriverVersion) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[456]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverVersion.ProtoReflect.Descriptor instead.
func (*DriverVersion) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{456}
}

func (x *DriverVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DriverVersion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CUDNN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DocName string `protobuf:"bytes,3,opt,name=docName,proto3" json:"docName,omitempty"`
	DevName string `protobuf:"bytes,4,opt,name=devName,proto3" json:"devName,omitempty"`
}

func (x *CUDNN) Reset() {
	*x = CUDNN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[457]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUDNN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUDNN) ProtoMessage() {}

func (x *CUDNN) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[457]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUDNN.ProtoReflect.Descriptor instead.
func (*CUDNN) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{457}
}

func (x *CUDNN) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CUDNN) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CUDNN) GetDocName() string {
	if x != nil {
		return x.DocName
	}
	return ""
}

func (x *CUDNN) GetDevName() string {
	if x != nil {
		return x.DevName
	}
	return ""
}

type CustomDriver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *CustomDriver) Reset() {
	*x = CustomDriver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[458]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDriver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDriver) ProtoMessage() {}

func (x *CustomDriver) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[458]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDriver.ProtoReflect.Descriptor instead.
func (*CustomDriver) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{458}
}

func (x *CustomDriver) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ClusterBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID       string            `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ClusterName     string            `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Provider        string            `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Region          string            `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	VpcID           string            `protobuf:"bytes,5,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	ProjectID       string            `protobuf:"bytes,6,opt,name=projectID,proto3" json:"projectID,omitempty"`
	BusinessID      string            `protobuf:"bytes,7,opt,name=businessID,proto3" json:"businessID,omitempty"`
	Environment     string            `protobuf:"bytes,8,opt,name=environment,proto3" json:"environment,omitempty"`
	EngineType      string            `protobuf:"bytes,9,opt,name=engineType,proto3" json:"engineType,omitempty"`
	ClusterType     string            `protobuf:"bytes,10,opt,name=clusterType,proto3" json:"clusterType,omitempty"`
	Labels          map[string]string `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Creator         string            `protobuf:"bytes,12,opt,name=creator,proto3" json:"creator,omitempty"`
	CreateTime      string            `protobuf:"bytes,13,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime      string            `protobuf:"bytes,14,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	SystemID        string            `protobuf:"bytes,15,opt,name=systemID,proto3" json:"systemID,omitempty"`
	ManageType      string            `protobuf:"bytes,16,opt,name=manageType,proto3" json:"manageType,omitempty"`
	Status          string            `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	Updater         string            `protobuf:"bytes,18,opt,name=updater,proto3" json:"updater,omitempty"`
	NetworkType     string            `protobuf:"bytes,19,opt,name=networkType,proto3" json:"networkType,omitempty"`
	ModuleID        string            `protobuf:"bytes,20,opt,name=moduleID,proto3" json:"moduleID,omitempty"`
	IsCommonCluster bool              `protobuf:"varint,21,opt,name=isCommonCluster,proto3" json:"isCommonCluster,omitempty"`
	Description     string            `protobuf:"bytes,22,opt,name=description,proto3" json:"description,omitempty"`
	ClusterCategory string            `protobuf:"bytes,23,opt,name=clusterCategory,proto3" json:"clusterCategory,omitempty"`
	IsShared        bool              `protobuf:"varint,24,opt,name=is_shared,json=isShared,proto3" json:"is_shared,omitempty"`
}

func (x *ClusterBasicInfo) Reset() {
	*x = ClusterBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[459]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterBasicInfo) ProtoMessage() {}

func (x *ClusterBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[459]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterBasicInfo.ProtoReflect.Descriptor instead.
func (*ClusterBasicInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{459}
}

func (x *ClusterBasicInfo) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ClusterBasicInfo) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterBasicInfo) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ClusterBasicInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ClusterBasicInfo) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *ClusterBasicInfo) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ClusterBasicInfo) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *ClusterBasicInfo) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *ClusterBasicInfo) GetEngineType() string {
	if x != nil {
		return x.EngineType
	}
	return ""
}

func (x *ClusterBasicInfo) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

func (x *ClusterBasicInfo) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ClusterBasicInfo) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ClusterBasicInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ClusterBasicInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ClusterBasicInfo) GetSystemID() string {
	if x != nil {
		return x.SystemID
	}
	return ""
}

func (x *ClusterBasicInfo) GetManageType() string {
	if x != nil {
		return x.ManageType
	}
	return ""
}

func (x *ClusterBasicInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ClusterBasicInfo) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *ClusterBasicInfo) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *ClusterBasicInfo) GetModuleID() string {
	if x != nil {
		return x.ModuleID
	}
	return ""
}

func (x *ClusterBasicInfo) GetIsCommonCluster() bool {
	if x != nil {
		return x.IsCommonCluster
	}
	return false
}

func (x *ClusterBasicInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterBasicInfo) GetClusterCategory() string {
	if x != nil {
		return x.ClusterCategory
	}
	return ""
}

func (x *ClusterBasicInfo) GetIsShared() bool {
	if x != nil {
		return x.IsShared
	}
	return false
}

type TemplateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateConfigID string `protobuf:"bytes,1,opt,name=templateConfigID,proto3" json:"templateConfigID,omitempty"`
	BusinessID       string `protobuf:"bytes,2,opt,name=businessID,proto3" json:"businessID,omitempty"`
	ProjectID        string `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID        string `protobuf:"bytes,4,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Provider         string `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	ConfigType       string `protobuf:"bytes,6,opt,name=configType,proto3" json:"configType,omitempty"`
	ConfigContent    string `protobuf:"bytes,7,opt,name=configContent,proto3" json:"configContent,omitempty"`
	Creator          string `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater          string `protobuf:"bytes,9,opt,name=updater,proto3" json:"updater,omitempty"`
	CreateTime       string `protobuf:"bytes,10,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime       string `protobuf:"bytes,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *TemplateConfig) Reset() {
	*x = TemplateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[460]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateConfig) ProtoMessage() {}

func (x *TemplateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[460]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateConfig.ProtoReflect.Descriptor instead.
func (*TemplateConfig) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{460}
}

func (x *TemplateConfig) GetTemplateConfigID() string {
	if x != nil {
		return x.TemplateConfigID
	}
	return ""
}

func (x *TemplateConfig) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *TemplateConfig) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *TemplateConfig) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *TemplateConfig) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *TemplateConfig) GetConfigType() string {
	if x != nil {
		return x.ConfigType
	}
	return ""
}

func (x *TemplateConfig) GetConfigContent() string {
	if x != nil {
		return x.ConfigContent
	}
	return ""
}

func (x *TemplateConfig) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *TemplateConfig) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *TemplateConfig) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *TemplateConfig) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type TemplateConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateConfigID    string               `protobuf:"bytes,1,opt,name=templateConfigID,proto3" json:"templateConfigID,omitempty"`
	BusinessID          string               `protobuf:"bytes,2,opt,name=businessID,proto3" json:"businessID,omitempty"`
	ProjectID           string               `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID           string               `protobuf:"bytes,4,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Provider            string               `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	ConfigType          string               `protobuf:"bytes,6,opt,name=configType,proto3" json:"configType,omitempty"`
	CloudTemplateConfig *CloudTemplateConfig `protobuf:"bytes,7,opt,name=cloudTemplateConfig,proto3" json:"cloudTemplateConfig,omitempty"`
	Creator             string               `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater             string               `protobuf:"bytes,9,opt,name=updater,proto3" json:"updater,omitempty"`
	CreateTime          string               `protobuf:"bytes,10,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime          string               `protobuf:"bytes,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *TemplateConfigInfo) Reset() {
	*x = TemplateConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[461]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateConfigInfo) ProtoMessage() {}

func (x *TemplateConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[461]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateConfigInfo.ProtoReflect.Descriptor instead.
func (*TemplateConfigInfo) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{461}
}

func (x *TemplateConfigInfo) GetTemplateConfigID() string {
	if x != nil {
		return x.TemplateConfigID
	}
	return ""
}

func (x *TemplateConfigInfo) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *TemplateConfigInfo) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *TemplateConfigInfo) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *TemplateConfigInfo) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *TemplateConfigInfo) GetConfigType() string {
	if x != nil {
		return x.ConfigType
	}
	return ""
}

func (x *TemplateConfigInfo) GetCloudTemplateConfig() *CloudTemplateConfig {
	if x != nil {
		return x.CloudTemplateConfig
	}
	return nil
}

func (x *TemplateConfigInfo) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *TemplateConfigInfo) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *TemplateConfigInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *TemplateConfigInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type CloudTemplateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudNetworkTemplateConfig *CloudNetworkTemplateConfig `protobuf:"bytes,2,opt,name=cloudNetworkTemplateConfig,proto3" json:"cloudNetworkTemplateConfig,omitempty"`
}

func (x *CloudTemplateConfig) Reset() {
	*x = CloudTemplateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[462]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudTemplateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudTemplateConfig) ProtoMessage() {}

func (x *CloudTemplateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[462]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudTemplateConfig.ProtoReflect.Descriptor instead.
func (*CloudTemplateConfig) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{462}
}

func (x *CloudTemplateConfig) GetCloudNetworkTemplateConfig() *CloudNetworkTemplateConfig {
	if x != nil {
		return x.CloudNetworkTemplateConfig
	}
	return nil
}

type CloudNetworkTemplateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CidrSteps         []*EnvCidrStep `protobuf:"bytes,1,rep,name=cidrSteps,proto3" json:"cidrSteps,omitempty"`
	ServiceSteps      []uint32       `protobuf:"varint,2,rep,packed,name=serviceSteps,proto3" json:"serviceSteps,omitempty"`
	PerNodePodNum     []uint32       `protobuf:"varint,3,rep,packed,name=perNodePodNum,proto3" json:"perNodePodNum,omitempty"`
	UnderlaySteps     []uint32       `protobuf:"varint,4,rep,packed,name=underlaySteps,proto3" json:"underlaySteps,omitempty"`
	UnderlayAutoSteps []uint32       `protobuf:"varint,5,rep,packed,name=underlayAutoSteps,proto3" json:"underlayAutoSteps,omitempty"`
}

func (x *CloudNetworkTemplateConfig) Reset() {
	*x = CloudNetworkTemplateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[463]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudNetworkTemplateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudNetworkTemplateConfig) ProtoMessage() {}

func (x *CloudNetworkTemplateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[463]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudNetworkTemplateConfig.ProtoReflect.Descriptor instead.
func (*CloudNetworkTemplateConfig) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{463}
}

func (x *CloudNetworkTemplateConfig) GetCidrSteps() []*EnvCidrStep {
	if x != nil {
		return x.CidrSteps
	}
	return nil
}

func (x *CloudNetworkTemplateConfig) GetServiceSteps() []uint32 {
	if x != nil {
		return x.ServiceSteps
	}
	return nil
}

func (x *CloudNetworkTemplateConfig) GetPerNodePodNum() []uint32 {
	if x != nil {
		return x.PerNodePodNum
	}
	return nil
}

func (x *CloudNetworkTemplateConfig) GetUnderlaySteps() []uint32 {
	if x != nil {
		return x.UnderlaySteps
	}
	return nil
}

func (x *CloudNetworkTemplateConfig) GetUnderlayAutoSteps() []uint32 {
	if x != nil {
		return x.UnderlayAutoSteps
	}
	return nil
}

type CreateTemplateConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessID          string               `protobuf:"bytes,1,opt,name=businessID,proto3" json:"businessID,omitempty"`
	ProjectID           string               `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID           string               `protobuf:"bytes,3,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Provider            string               `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
	ConfigType          string               `protobuf:"bytes,5,opt,name=configType,proto3" json:"configType,omitempty"`
	CloudTemplateConfig *CloudTemplateConfig `protobuf:"bytes,6,opt,name=cloudTemplateConfig,proto3" json:"cloudTemplateConfig,omitempty"`
}

func (x *CreateTemplateConfigRequest) Reset() {
	*x = CreateTemplateConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[464]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTemplateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTemplateConfigRequest) ProtoMessage() {}

func (x *CreateTemplateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[464]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTemplateConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateTemplateConfigRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{464}
}

func (x *CreateTemplateConfigRequest) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *CreateTemplateConfigRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CreateTemplateConfigRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *CreateTemplateConfigRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CreateTemplateConfigRequest) GetConfigType() string {
	if x != nil {
		return x.ConfigType
	}
	return ""
}

func (x *CreateTemplateConfigRequest) GetCloudTemplateConfig() *CloudTemplateConfig {
	if x != nil {
		return x.CloudTemplateConfig
	}
	return nil
}

type CreateTemplateConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateTemplateConfigResponse) Reset() {
	*x = CreateTemplateConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[465]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTemplateConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTemplateConfigResponse) ProtoMessage() {}

func (x *CreateTemplateConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[465]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTemplateConfigResponse.ProtoReflect.Descriptor instead.
func (*CreateTemplateConfigResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{465}
}

func (x *CreateTemplateConfigResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateTemplateConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateTemplateConfigResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type DeleteTemplateConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateConfigID string `protobuf:"bytes,1,opt,name=templateConfigID,proto3" json:"templateConfigID,omitempty"`
	BusinessID       string `protobuf:"bytes,2,opt,name=businessID,proto3" json:"businessID,omitempty"`
	ProjectID        string `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (x *DeleteTemplateConfigRequest) Reset() {
	*x = DeleteTemplateConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[466]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTemplateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTemplateConfigRequest) ProtoMessage() {}

func (x *DeleteTemplateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[466]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTemplateConfigRequest.ProtoReflect.Descriptor instead.
func (*DeleteTemplateConfigRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{466}
}

func (x *DeleteTemplateConfigRequest) GetTemplateConfigID() string {
	if x != nil {
		return x.TemplateConfigID
	}
	return ""
}

func (x *DeleteTemplateConfigRequest) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *DeleteTemplateConfigRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

type DeleteTemplateConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DeleteTemplateConfigResponse) Reset() {
	*x = DeleteTemplateConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[467]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTemplateConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTemplateConfigResponse) ProtoMessage() {}

func (x *DeleteTemplateConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[467]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTemplateConfigResponse.ProtoReflect.Descriptor instead.
func (*DeleteTemplateConfigResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{467}
}

func (x *DeleteTemplateConfigResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteTemplateConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteTemplateConfigResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListTemplateConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessID string `protobuf:"bytes,1,opt,name=businessID,proto3" json:"businessID,omitempty"`
	ProjectID  string `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID  string `protobuf:"bytes,3,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Provider   string `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
	ConfigType string `protobuf:"bytes,5,opt,name=configType,proto3" json:"configType,omitempty"`
}

func (x *ListTemplateConfigRequest) Reset() {
	*x = ListTemplateConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[468]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTemplateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTemplateConfigRequest) ProtoMessage() {}

func (x *ListTemplateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[468]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTemplateConfigRequest.ProtoReflect.Descriptor instead.
func (*ListTemplateConfigRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{468}
}

func (x *ListTemplateConfigRequest) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *ListTemplateConfigRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListTemplateConfigRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ListTemplateConfigRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListTemplateConfigRequest) GetConfigType() string {
	if x != nil {
		return x.ConfigType
	}
	return ""
}

type ListTemplateConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool                  `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*TemplateConfigInfo `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListTemplateConfigResponse) Reset() {
	*x = ListTemplateConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[469]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTemplateConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTemplateConfigResponse) ProtoMessage() {}

func (x *ListTemplateConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[469]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTemplateConfigResponse.ProtoReflect.Descriptor instead.
func (*ListTemplateConfigResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{469}
}

func (x *ListTemplateConfigResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListTemplateConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListTemplateConfigResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListTemplateConfigResponse) GetData() []*TemplateConfigInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateTemplateConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateConfigID    string               `protobuf:"bytes,1,opt,name=templateConfigID,proto3" json:"templateConfigID,omitempty"`
	BusinessID          string               `protobuf:"bytes,2,opt,name=businessID,proto3" json:"businessID,omitempty"`
	ProjectID           string               `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID           string               `protobuf:"bytes,4,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Provider            string               `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	ConfigType          string               `protobuf:"bytes,6,opt,name=configType,proto3" json:"configType,omitempty"`
	CloudTemplateConfig *CloudTemplateConfig `protobuf:"bytes,7,opt,name=cloudTemplateConfig,proto3" json:"cloudTemplateConfig,omitempty"`
}

func (x *UpdateTemplateConfigRequest) Reset() {
	*x = UpdateTemplateConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[470]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTemplateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTemplateConfigRequest) ProtoMessage() {}

func (x *UpdateTemplateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[470]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTemplateConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateTemplateConfigRequest) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{470}
}

func (x *UpdateTemplateConfigRequest) GetTemplateConfigID() string {
	if x != nil {
		return x.TemplateConfigID
	}
	return ""
}

func (x *UpdateTemplateConfigRequest) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *UpdateTemplateConfigRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *UpdateTemplateConfigRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *UpdateTemplateConfigRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *UpdateTemplateConfigRequest) GetConfigType() string {
	if x != nil {
		return x.ConfigType
	}
	return ""
}

func (x *UpdateTemplateConfigRequest) GetCloudTemplateConfig() *CloudTemplateConfig {
	if x != nil {
		return x.CloudTemplateConfig
	}
	return nil
}

type UpdateTemplateConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UpdateTemplateConfigResponse) Reset() {
	*x = UpdateTemplateConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clustermanager_proto_msgTypes[471]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTemplateConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTemplateConfigResponse) ProtoMessage() {}

func (x *UpdateTemplateConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clustermanager_proto_msgTypes[471]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTemplateConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateTemplateConfigResponse) Descriptor() ([]byte, []int) {
	return file_clustermanager_proto_rawDescGZIP(), []int{471}
}

func (x *UpdateTemplateConfigResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateTemplateConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateTemplateConfigResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_clustermanager_proto protoreflect.FileDescriptor

var file_clustermanager_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73,
	0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x2f, 0x0a, 0x07, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85,
	0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49,
	0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53,
	0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x13, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x65, 0x92, 0x41, 0x62, 0x2a, 0x13, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32,
	0x4b, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe8, 0xaf, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe4, 0xb8, 0xba, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7,
	0x9a, 0x84, 0xe4, 0xb8, 0x80, 0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xef, 0xbc, 0x8c, 0xe7, 0x94,
	0xa8, 0xe8, 0xaf, 0xa5, 0x49, 0x44, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe8, 0x81, 0x94, 0xe9,
	0x82, 0xa6, 0x48, 0x6f, 0x73, 0x74, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x13, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x4b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x32, 0x20, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xba, 0x91, 0xe9, 0x85, 0x8d,
	0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xba, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x49, 0x44, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0x92, 0x41, 0x1c, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x05, 0x76, 0x70, 0x63,
	0x49, 0x44, 0x32, 0x2a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8,
	0x76, 0x70, 0x63, 0xef, 0xbc, 0x8c, 0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xe7, 0x8e, 0xaf, 0xe5,
	0xa2, 0x83, 0xe4, 0xb8, 0x8b, 0xe9, 0x9d, 0x9e, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0x52, 0x05,
	0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x1a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe6, 0x89, 0x80, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0x49, 0x44, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x79, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x56, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x49, 0x44, 0x32, 0x48, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbb, 0x91, 0xe5,
	0xae, 0x9a, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x2c, 0x20, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a,
	0x84, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0x49,
	0x44, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xe4, 0xba, 0x8e, 0x43, 0x4d, 0x44, 0x42, 0x52, 0x0a,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x68, 0x0a, 0x0b, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x46, 0x92, 0x41, 0x43, 0x2a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x32, 0x34, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0xaf, 0xb9, 0xe5,
	0xba, 0x94, 0xe7, 0x9a, 0x84, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xef, 0xbc, 0x8c, 0x73, 0x74, 0x61, 0x67, 0xef, 0xbc, 0x8c, 0x64, 0x65, 0x62, 0x75, 0x67,
	0xef, 0xbc, 0x8c, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x0a, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x20, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe7, 0xbc, 0x96, 0xe6, 0x8e, 0x92, 0xe5, 0xbc, 0x95, 0xe6, 0x93, 0x8e, 0xef, 0xbc, 0x8c,
	0x6b, 0x38, 0x73, 0xe3, 0x80, 0x81, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x52, 0x0a, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x69, 0x73, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3b, 0x92, 0x41,
	0x38, 0x2a, 0x0b, 0x69, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x32, 0x29,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe7, 0x8b, 0xac, 0xe5,
	0x8d, 0xa0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0xe4, 0xb8, 0xba, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31,
	0x2a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x32, 0x22, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xe3, 0x80, 0x81, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x32, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x15, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x81, 0x02, 0x0a, 0x09, 0x62, 0x63, 0x73, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x42, 0x63, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0xba, 0x01, 0x92, 0x41, 0xb6, 0x01, 0x2a, 0x09, 0x62, 0x63, 0x73, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x32, 0xa8, 0x01, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe6, 0x97, 0xb6, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0x42, 0x43, 0x53, 0xe5, 0x86,
	0x85, 0xe7, 0xbd, 0xae, 0xe6, 0x8f, 0x92, 0xe4, 0xbb, 0xb6, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85,
	0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe4, 0xbc, 0x9a, 0xe7,
	0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8a, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xbf, 0x9b,
	0xe8, 0xa1, 0x8c, 0xe5, 0xaf, 0xb9, 0xe6, 0xaf, 0x94, 0xe4, 0xb8, 0x8e, 0xe8, 0xa1, 0xa5, 0xe5,
	0x85, 0x85, 0xef, 0xbc, 0x8c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0xe5, 0x9c, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8,
	0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe4, 0xb9, 0x8b, 0xe5, 0x90, 0x8e, 0xe8,
	0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe3, 0x80, 0x82, 0x52, 0x09,
	0x62, 0x63, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x85, 0x02, 0x0a, 0x0b, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0xb8, 0x01, 0x92, 0x41, 0xb4, 0x01,
	0x2a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x32, 0xa4, 0x01,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x97, 0xb6, 0xe9,
	0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbc, 0xa0, 0xe9, 0x80,
	0x92, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5,
	0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xba, 0xe9, 0xa2, 0x84, 0xe7, 0x95, 0x99, 0xe4,
	0xba, 0x8c, 0xe6, 0x96, 0xb9, 0x2f, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0x2f, 0xe6, 0x9c, 0x8d,
	0xe5, 0x8a, 0xa1, 0xe5, 0x95, 0x86, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbd, 0xbf, 0xe7,
	0x94, 0xa8, 0xef, 0xbc, 0x8c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0xe5, 0x9c, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0xe4, 0xb9, 0x8b, 0xe5, 0x90, 0x8e, 0xe8, 0xbf, 0x9b, 0xe8,
	0xa1, 0x8c, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8e, 0xe5, 0xae, 0x89, 0xe8, 0xa3,
	0x85, 0xe3, 0x80, 0x82, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x12, 0x55, 0x0a, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x2a, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x44, 0x32, 0x2a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x9c, 0xa8, 0xe5, 0x90, 0x84, 0xe4, 0xba, 0x91, 0xe5, 0xb9, 0xb3,
	0xe5, 0x8f, 0xb0, 0xe4, 0xb8, 0x8a, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x49, 0x44, 0x52, 0x08,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12, 0xb4, 0x01, 0x0a, 0x0a, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x93, 0x01,
	0x92, 0x41, 0x8f, 0x01, 0x2a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x32, 0x80, 0x01, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe5, 0x85, 0xac, 0xe6, 0x9c, 0x89, 0xe4, 0xba,
	0x91, 0xe6, 0x97, 0xb6, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0xef, 0xbc, 0x8c, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x44, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x28, 0xe4, 0xba, 0x91,
	0xe4, 0xb8, 0x8a, 0xe6, 0x89, 0x98, 0xe7, 0xae, 0xa1, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x29,
	0xef, 0xbc, 0x8c, 0x49, 0x4e, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x28, 0xe7, 0x8b, 0xac, 0xe7, 0xab, 0x8b, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0xe8, 0x87, 0xaa, 0xe8, 0xa1, 0x8c, 0xe7, 0xbb, 0xb4, 0xe6,
	0x8a, 0xa4, 0x29, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x5f, 0x0a, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x32, 0x15, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x20,
	0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x90, 0x01, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x46, 0x92, 0x41, 0x43, 0x2a,
	0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x32, 0x30, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe5, 0x9f,
	0xba, 0xe7, 0xa1, 0x80, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe9, 0x9c, 0x80,
	0xe8, 0xa6, 0x81, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe6, 0x96, 0xb9, 0xe8, 0xae, 0xbe, 0xe7,
	0xbd, 0xae, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0xcb, 0x01, 0x0a, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x92, 0x41, 0x6f, 0x2a, 0x14, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x32, 0x57, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe4,
	0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x89, 0x88, 0xe6, 0x9c,
	0xac, 0xef, 0xbc, 0x8c, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0x76, 0x70, 0x63,
	0xe7, 0xad, 0x89, 0xef, 0xbc, 0x8c, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe6, 0x96, 0xb9, 0xe9,
	0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x52, 0x14, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0xde, 0x01, 0x0a, 0x16, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x7f, 0x92, 0x41, 0x7c, 0x2a, 0x17,
	0x63, 0x6c, 0x75, 0x73, 0x65, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x32, 0x61, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8,
	0xbf, 0x9b, 0xe9, 0x98, 0xb6, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0xe8, 0xae, 0xbe, 0xe7, 0xbd,
	0xae, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8,
	0x69, 0x70, 0x76, 0x73, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0xef, 0xbc, 0x8c, 0xe5, 0xae, 0xb9,
	0xe5, 0x99, 0xa8, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe8, 0xae, 0xbe, 0xe7,
	0xbd, 0xae, 0xe7, 0xad, 0x89, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe6, 0x97, 0xa0, 0xe7, 0x89,
	0xb9, 0xe5, 0x88, 0xab, 0xe9, 0x9c, 0x80, 0xe6, 0xb1, 0x82, 0x52, 0x16, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0xd4, 0x01, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x92, 0x01, 0x92, 0x41, 0x8e, 0x01, 0x2a, 0x0c, 0x6e,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x32, 0x7e, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xef,
	0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0xe6, 0x8c, 0x82, 0xe8, 0xbd, 0xbd, 0xe7, 0x9b,
	0xae, 0xe5, 0xbd, 0x95, 0xef, 0xbc, 0x8c, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe7, 0xad, 0x89, 0xef, 0xbc, 0x8c, 0xe5,
	0xa6, 0x82, 0xe6, 0x97, 0xa0, 0xe7, 0x89, 0xb9, 0xe5, 0x88, 0xab, 0xe9, 0x9c, 0x80, 0xe6, 0xb1,
	0x82, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0x8d, 0xe8, 0xae, 0xbe,
	0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0x42, 0x43, 0x53, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x6e, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xb2, 0x01, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x99, 0x01, 0x92, 0x41, 0x5c,
	0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x52, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0xef, 0xbc, 0x8c,
	0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0xef, 0xbc, 0x8c, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49,
	0x4e, 0x47, 0xef, 0xbc, 0x8c, 0x46, 0x41, 0x4c, 0x55, 0x52, 0x45, 0xef, 0xbc, 0x8c, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0xfa, 0x42, 0x37, 0x72,
	0x35, 0x52, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x52, 0x07, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x52, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x52, 0x06,
	0x46, 0x41, 0x4c, 0x55, 0x52, 0x45, 0x52, 0x0e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x23, 0x92, 0x41, 0x20, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x32, 0x15, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0xe8, 0x80, 0x85, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x75, 0x0a,
	0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x53, 0x92, 0x41, 0x36, 0x2a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x32, 0x27, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbd, 0x91, 0xe7,
	0xbb, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0x28, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x29, 0xfa, 0x42, 0x17,
	0x72, 0x15, 0x52, 0x08, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x07, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x00, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0xce, 0x01, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x93, 0x01, 0x92, 0x41, 0x8f, 0x01, 0x2a, 0x17, 0x61,
	0x75, 0x74, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x32, 0x74, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8,
	0xe5, 0xb7, 0xb2, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x2c,
	0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x20, 0xe5, 0x8d,
	0xb3, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe5, 0xb7, 0xb2, 0xe7, 0xbb, 0x8f, 0xe5, 0xad, 0x98,
	0xe5, 0x9c, 0xa8, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x2c, 0x20, 0xe4, 0xbb,
	0x8e, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0xe4, 0xb8, 0xad, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x52, 0x17, 0x61, 0x75,
	0x74, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0xb2, 0x01, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x6e, 0x92, 0x41, 0x6b, 0x2a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x32,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0xe4, 0xb8, 0xba, 0x74, 0x72, 0x75, 0x65, 0xe6,
	0x97, 0xb6, 0x2c, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe7, 0x94, 0x9f, 0xe6, 0x88, 0x90, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2c, 0x20, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xd1, 0x01, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x8a, 0x01, 0x92, 0x41, 0x86, 0x01, 0x2a, 0x09, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x79, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x2c, 0x20, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x65, 0x73, 0x62, 0x5f, 0x75, 0x72,
	0x6c, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f,
	0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0xe7, 0xad, 0x89, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6,
	0x88, 0x96, 0xe8, 0x80, 0x85, 0xe6, 0x98, 0xaf, 0xe9, 0x92, 0x88, 0xe5, 0xaf, 0xb9, 0xe4, 0xb8,
	0x8d, 0xe5, 0x90, 0x8c, 0xe4, 0xba, 0x91, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0xe5, 0xbc, 0x80,
	0xe5, 0x85, 0xb3, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5f,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x43, 0x92, 0x41, 0x40, 0x2a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x32,
	0x34, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x49, 0x44, 0x28,
	0x43, 0x41, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97,
	0xb6, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe8, 0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0x20, 0xe5, 0xba,
	0x9f, 0xe5, 0xbc, 0x83, 0x29, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12,
	0x7e, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x0e, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x41, 0xe5, 0xaf,
	0xbc, 0xe5, 0x85, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe9, 0xa2, 0x9d,
	0xe5, 0xa4, 0x96, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xe6, 0xa0, 0x87, 0xe8, 0xaf,
	0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x97,
	0xb6, 0xe7, 0xa9, 0xba, 0xe5, 0x80, 0xbc, 0x28, 0xe5, 0xba, 0x9f, 0xe5, 0xbc, 0x83, 0x29, 0x52,
	0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x69, 0x0a, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a, 0x0f, 0x69,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x29,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe5, 0x85, 0xac, 0xe5, 0x85, 0xb1, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x28, 0xe5, 0xba, 0x9f, 0xe5, 0xbc, 0x83, 0x29, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x24, 0x92, 0x41, 0x21, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x32, 0x12, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xae, 0x80, 0xe8, 0xa6, 0x81, 0xe6,
	0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0xa5, 0x01, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7b, 0x92, 0x41,
	0x78, 0x2a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x32, 0x65, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab,
	0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5,
	0x8c, 0xba, 0xe5, 0x88, 0x86, 0xe8, 0xaf, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x98, 0xaf, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0xe3, 0x80, 0x81,
	0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0x28, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2f, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x29, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0xe6, 0x98, 0xaf, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x42, 0x31, 0x92,
	0x41, 0x2e, 0x2a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x32, 0x21, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x08, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x0a, 0x6b, 0x75,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f,
	0x92, 0x41, 0x3c, 0x2a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32,
	0x2e, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x97, 0xb6,
	0xe8, 0x8b, 0xa5, 0xe6, 0x98, 0xaf, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe5, 0x88, 0x99, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0x52,
	0x0a, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa6, 0x01, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x7e, 0x92, 0x41, 0x7b, 0x2a, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x32, 0x69, 0xe5, 0xbd, 0x93, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0xe4, 0xb8, 0xba, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0xe6, 0x97,
	0xb6, 0x2c, 0x20, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5,
	0x8c, 0xba, 0xe5, 0x88, 0x86, 0xe8, 0xaf, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x98,
	0xaf, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8,
	0xba, 0xe7, 0xa9, 0xba, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0xea, 0x01, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc1, 0x01,
	0x92, 0x41, 0xbd, 0x01, 0x2a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x32, 0xaa, 0x01, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0xb3,
	0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x49,
	0x44, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe3, 0x80,
	0x82, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe6, 0x98, 0xaf,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5,
	0x87, 0xad, 0xe8, 0xaf, 0x81, 0xe3, 0x80, 0x82, 0xe7, 0xa7, 0x81, 0xe6, 0x9c, 0x89, 0xe4, 0xba,
	0x91, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xe4, 0xb8, 0x8b, 0xe7, 0xbb, 0x9f, 0xe4, 0xb8, 0x80,
	0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f,
	0xb7, 0xef, 0xbc, 0x8c, 0xe8, 0x80, 0x8c, 0xe5, 0x85, 0xac, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0x91,
	0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xe7, 0xba, 0xb3, 0xe7, 0xae, 0xa1, 0xe4, 0xb8, 0x8d, 0xe5,
	0x90, 0x8c, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x87, 0xad, 0xe8, 0xaf,
	0x81, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x52, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x35, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x2a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe5, 0xbc,
	0x82, 0xe5, 0xb8, 0xb8, 0xe6, 0x97, 0xb6, 0xe7, 0x9a, 0x84, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5,
	0xe5, 0x8e, 0x9f, 0xe5, 0x9b, 0xa0, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x69, 0x73, 0x4d, 0x69, 0x78, 0x65, 0x64,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x2a, 0x07, 0x69, 0x73, 0x4d,
	0x69, 0x78, 0x65, 0x64, 0x32, 0x24, 0xe6, 0xa0, 0x87, 0xe8, 0xae, 0xb0, 0xe8, 0xaf, 0xa5, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x98, 0xaf, 0xe6, 0xb7,
	0xb7, 0xe9, 0x83, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x69,
	0x78, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x61,
	0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x37,
	0x2a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65,
	0x32, 0x25, 0x61, 0x77, 0x73, 0xe7, 0x9a, 0x84, 0x69, 0x61, 0x6d, 0x20, 0x72, 0x6f, 0x6c, 0x65,
	0x2c, 0x20, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x65, 0x6b,
	0x73, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0xa4, 0x02, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x42, 0xda, 0x01, 0x92, 0x41, 0xd6, 0x01, 0x2a, 0x0c, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x32, 0xc5, 0x01, 0xe5, 0x85, 0xb1, 0xe4, 0xba,
	0xab, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x8f, 0xaf, 0xe8, 0xa7, 0x81, 0xe8, 0x8c, 0x83,
	0xe5, 0x9b, 0xb4, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x28, 0xe5, 0xbd, 0x93, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0xe4, 0xb8, 0xba, 0x74, 0x72, 0x75, 0x65, 0xe6, 0x97, 0xb6,
	0xe4, 0xb8, 0x94, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0xe4,
	0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe6, 0x97, 0xb6, 0x2c, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe5,
	0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0xef, 0xbc, 0x9b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0xe4, 0xb8, 0x8d, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe6, 0x97, 0xb6, 0x2c, 0xe5, 0x85, 0xb1,
	0xe4, 0xba, 0xab, 0xe7, 0xbb, 0x99, 0xe6, 0x9f, 0x90, 0xe4, 0xba, 0x9b, 0xe4, 0xb8, 0x9a, 0xe5,
	0x8a, 0xa1, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xef, 0xbc,
	0x8c, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x8f, 0xaa,
	0xe6, 0x9c, 0x89, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x29,
	0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x0e, 0x42, 0x63, 0x73,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x4b,
	0x4f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x4b, 0x4f, 0x70, 0x73,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x4f, 0x0a, 0x0b, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x3d, 0x92, 0x41, 0x3a, 0x0a, 0x38, 0x2a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x32, 0x2d, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe7, 0xbb, 0xb4,
	0xe6, 0x8a, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x22,
	0x55, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x7a, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x62, 0x69, 0x7a, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x4f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x4f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xcf, 0x0f, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x38, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x32, 0x13, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xba, 0x91, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x44, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x07, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a,
	0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x32, 0x11, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0xe4, 0xb8, 0xbb, 0x49, 0x50, 0x52, 0x07, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x49, 0x50, 0x12, 0x5b, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x24, 0xe6,
	0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0xad, 0x97, 0xe7, 0xac,
	0xa6, 0xe4, 0xb8, 0xb2, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba,
	0xe7, 0xa9, 0xba, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x03, 0x43, 0x50, 0x55, 0x32, 0x0f, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0x43, 0x50, 0x55, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x43, 0x50, 0x55, 0x12, 0x2e,
	0x0a, 0x03, 0x6d, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0x92, 0x41, 0x19,
	0x2a, 0x03, 0x6d, 0x65, 0x6d, 0x32, 0x12, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x86, 0x85,
	0xe5, 0xad, 0x98, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x12, 0x38,
	0x0a, 0x03, 0x47, 0x50, 0x55, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x23,
	0x2a, 0x03, 0x47, 0x50, 0x55, 0x32, 0x1c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x47, 0x50, 0x55,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4,
	0xb8, 0xba, 0x30, 0x52, 0x03, 0x47, 0x50, 0x55, 0x12, 0x8f, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x77, 0x92, 0x41, 0x74, 0x2a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x6a, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x88, 0xe6, 0xa0, 0xb9,
	0xe6, 0x8d, 0xae, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xe5,
	0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0x9a, 0x84, 0xef, 0xbc, 0x89, 0xef, 0xbc, 0x8c, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x2c, 0x20, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x49, 0x4e, 0x47,
	0x2c, 0x20, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x2c, 0x20, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x2c, 0x20, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x7a, 0x6f,
	0x6e, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a,
	0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x32, 0x1e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x8f, 0xaf,
	0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4,
	0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x7c, 0x0a,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x5a, 0x92, 0x41, 0x57, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x32, 0x48, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5,
	0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x49,
	0x44, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x28,
	0xe4, 0xbb, 0x85, 0x43, 0x41, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0xbd, 0x92, 0xe5, 0xb1,
	0x9e, 0xe4, 0xba, 0x8e, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x29, 0x52, 0x0b,
	0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28,
	0x92, 0x41, 0x25, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x18,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x03, 0x56, 0x50, 0x43, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x03, 0x56, 0x50, 0x43, 0x32, 0x15, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x56, 0x50, 0x43, 0x20, 0x49,
	0x44, 0x52, 0x03, 0x56, 0x50, 0x43, 0x12, 0x5b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x40, 0x2a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x32, 0x36, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82,
	0xe5, 0xb9, 0xbf, 0xe5, 0xb7, 0x9e, 0xef, 0xbc, 0x8c, 0xe6, 0xb7, 0xb1, 0xe5, 0x9c, 0xb3, 0xef,
	0xbc, 0x8c, 0xe5, 0x8a, 0xa0, 0xe5, 0xb7, 0x9e, 0xe7, 0xad, 0x89, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64,
	0x32, 0x29, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c,
	0x96, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x2c, 0x20, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe8,
	0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe8, 0xa7, 0xa3, 0xe5, 0xaf, 0x86, 0x52, 0x06, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x64, 0x12, 0x5d, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x49, 0x92, 0x41, 0x46, 0x2a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x32, 0x3c,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0x49,
	0x44, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba,
	0x3b, 0x20, 0xe8, 0xaf, 0xa5, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6,
	0x81, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0x43, 0x41, 0x52, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x32, 0x16, 0x43, 0x41, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0xe5, 0x8f, 0xb7, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x65, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92,
	0x41, 0x3a, 0x2a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x44, 0x32, 0x28, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94,
	0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x49,
	0x44, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x52, 0x0e, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x63, 0x0a, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47,
	0x92, 0x41, 0x44, 0x2a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x38, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe4, 0xb8, 0xbb,
	0xe8, 0xa6, 0x81, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0x43, 0x56, 0x4d, 0x2f, 0x49, 0x44, 0x43,
	0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0xe6, 0x98, 0xaf, 0x43, 0x56, 0x4d, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x54, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x35, 0x2a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x32, 0x29, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x2c, 0x20, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe5, 0x90, 0x84, 0xe4, 0xb8, 0xaa, 0xe4, 0xba,
	0x91, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x50, 0x76, 0x36, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x76, 0x36, 0x32, 0x10, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0x69, 0x70, 0x76, 0x36, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x09, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x50, 0x76, 0x36, 0x12, 0x46, 0x0a, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x08,
	0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x1b, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x65, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4d, 0x92, 0x41, 0x4a, 0x2a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32, 0x40, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0xbb,
	0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x2c, 0x20, 0xe4, 0xbb, 0x85, 0xe5, 0x9c, 0xa8, 0xe7, 0x94, 0xb3,
	0xe8, 0xaf, 0xb7, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0x97, 0xb6, 0xe8, 0xbf, 0xbd, 0xe8,
	0xb8, 0xaa, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x55, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41,
	0x2e, 0x2a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x32,
	0x1e, 0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x97, 0xb6, 0xe5, 0x8e, 0x9f, 0xe5, 0x9b, 0xa0, 0x52,
	0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x7e, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x5e, 0x92, 0x41, 0x5b, 0x2a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x32, 0x4d, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe8, 0xae, 0xa1, 0xe8, 0xb4, 0xb9,
	0xe6, 0xa8, 0xa1, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0x50, 0x4f, 0x53, 0x54, 0x50, 0x41, 0x49,
	0x44, 0x5f, 0x42, 0x59, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0xe6, 0x8c, 0x89, 0xe5, 0xb0, 0x8f, 0xe6,
	0x97, 0xb6, 0xe5, 0x90, 0x8e, 0xe4, 0xbb, 0x98, 0xe8, 0xb4, 0xb9, 0xef, 0xbc, 0x8c, 0x50, 0x52,
	0x45, 0x50, 0x41, 0x49, 0x44, 0xe5, 0x8c, 0x85, 0xe5, 0xb9, 0xb4, 0xe5, 0x8c, 0x85, 0xe6, 0x9c,
	0x88, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x59, 0x92,
	0x41, 0x56, 0x0a, 0x54, 0x2a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x32, 0x4c, 0xe8, 0xae, 0xb0, 0xe5,
	0xbd, 0x95, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc,
	0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe7, 0xbb, 0xb4, 0xe6, 0x8a, 0xa4, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x8c, 0xe8, 0xa2, 0xab, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xe4, 0xb8, 0x8e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x22, 0xd0, 0x0e, 0x0a, 0x0e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x56, 0x0a, 0x0f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x50, 0x76, 0x34, 0x43, 0x49, 0x44, 0x52, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x50, 0x76, 0x34, 0x43, 0x49, 0x44, 0x52, 0x32, 0x16, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe6, 0x80, 0xbb, 0x49, 0x50, 0x76, 0x34, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe6,
	0xb1, 0xa0, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x50, 0x76, 0x34, 0x43,
	0x49, 0x44, 0x52, 0x12, 0x63, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50,
	0x76, 0x34, 0x43, 0x49, 0x44, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41,
	0x36, 0x2a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x76, 0x34, 0x43, 0x49,
	0x44, 0x52, 0x32, 0x23, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0x49, 0x50, 0x76, 0x34, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9d, 0x80, 0xe6, 0xb1, 0xa0, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x50, 0x76, 0x34, 0x43, 0x49, 0x44, 0x52, 0x12, 0x52, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x4e,
	0x6f, 0x64, 0x65, 0x50, 0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x2c, 0x92, 0x41, 0x29, 0x2a, 0x0d, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x64,
	0x4e, 0x75, 0x6d, 0x32, 0x18, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb8, 0x8a, 0xe6, 0x9c,
	0x80, 0xe5, 0xa4, 0xa7, 0x50, 0x6f, 0x64, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0d, 0x6d,
	0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x56, 0x0a, 0x0d,
	0x6d, 0x61, 0x78, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x2a, 0x0d, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x32, 0x1c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6,
	0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe7, 0x9a, 0x84, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xe6,
	0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x8d, 0x01, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x50, 0x43, 0x43, 0x6e, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x69, 0x92, 0x41, 0x66,
	0x2a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x50, 0x43, 0x43, 0x6e, 0x69, 0x32, 0x56,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x50, 0x43, 0x43, 0x6e, 0x69, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x56, 0x50, 0x43, 0x2d, 0x43, 0x4e, 0x49, 0xe7,
	0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x28, 0xe4, 0xbd, 0xbf, 0xe8,
	0x83, 0xbd, 0x76, 0x70, 0x63, 0x2d, 0x63, 0x6e, 0x69, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe6,
	0x97, 0xb6, 0x2c, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe5,
	0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x29, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x50,
	0x43, 0x43, 0x6e, 0x69, 0x12, 0x65, 0x0a, 0x0c, 0x65, 0x6e, 0x69, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x44, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x2a,
	0x0c, 0x65, 0x6e, 0x69, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x73, 0x32, 0x2e, 0x56,
	0x50, 0x43, 0x2d, 0x43, 0x4e, 0x49, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0xa8, 0xa1, 0xe5,
	0xbc, 0x8f, 0xe4, 0xb8, 0x8b, 0x2c, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe7, 0xbd, 0x91, 0xe5,
	0x8d, 0xa1, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0x49, 0x44, 0x52, 0x0c, 0x65,
	0x6e, 0x69, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x3e, 0x92, 0x41, 0x3b, 0x2a, 0x0c, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x32, 0x2b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x56, 0x50, 0x43, 0x2d, 0x43,
	0x4e, 0x49, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0x8b, 0xe7, 0x9a, 0x84, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb5,
	0x52, 0x0c, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x80,
	0x01, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x70, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x58, 0x92, 0x41, 0x55, 0x2a, 0x0e, 0x69, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x32, 0x43, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x56, 0x50, 0x43, 0x2d, 0x43, 0x4e, 0x49, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc,
	0x8f, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe9, 0x9d, 0x9e, 0xe5, 0x9b, 0xba,
	0xe5, 0xae, 0x9a, 0x49, 0x50, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x3a, 0x20,
	0x46, 0x41, 0x4c, 0x53, 0x45, 0x20, 0xe9, 0x9d, 0x9e, 0xe5, 0x9b, 0xba, 0xe5, 0xae, 0x9a, 0x49,
	0x50, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x70, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x7d, 0x0a, 0x13, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4b,
	0x92, 0x41, 0x48, 0x2a, 0x13, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x32, 0x31, 0x56, 0x50, 0x43, 0x2d, 0x43, 0x4e,
	0x49, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0x8b,
	0x2c, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe7, 0xbd, 0x91, 0xe5, 0x8d, 0xa1, 0x49, 0x50, 0xe5,
	0x9b, 0x9e, 0xe6, 0x94, 0xb6, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x13, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x6b, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x49, 0x44, 0x52, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a,
	0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x49, 0x44,
	0x52, 0x32, 0x28, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0x43,
	0x49, 0x44, 0x52, 0x2c, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe9,
	0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0x52, 0x10, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x49, 0x44, 0x52, 0x12, 0x75, 0x0a,
	0x08, 0x63, 0x69, 0x64, 0x72, 0x53, 0x74, 0x65, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x59, 0x92, 0x41, 0x56, 0x2a, 0x08, 0x63, 0x69, 0x64, 0x72, 0x53, 0x74, 0x65, 0x70, 0x32, 0x4a,
	0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x88, 0x86, 0xe9, 0x85, 0x8d, 0x63, 0x69, 0x64, 0x72,
	0xe6, 0xad, 0xa5, 0xe9, 0x95, 0xbf, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x28, 0xe9, 0xbb, 0x98,
	0xe8, 0xae, 0xa4, 0xe6, 0x98, 0xaf, 0xe7, 0x94, 0x9f, 0xe4, 0xba, 0xa7, 0xe7, 0x8e, 0xaf, 0xe5,
	0xa2, 0x83, 0x34, 0x30, 0x39, 0x36, 0xe3, 0x80, 0x81, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe7,
	0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0x32, 0x30, 0x34, 0x38, 0x29, 0x52, 0x08, 0x63, 0x69, 0x64, 0x72,
	0x53, 0x74, 0x65, 0x70, 0x12, 0x7f, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x56,
	0x2a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x70, 0x54, 0x79, 0x70, 0x65, 0x32,
	0x45, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84,
	0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x69, 0x70, 0x76,
	0x34, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x64, 0x75, 0x61, 0x6c, 0x29, 0x2c, 0xe7, 0x9b, 0xae,
	0xe5, 0x89, 0x8d, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x98, 0xaf, 0x69, 0x70, 0x76, 0x34,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x50, 0x76, 0x36, 0x43, 0x49, 0x44, 0x52, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c,
	0x92, 0x41, 0x29, 0x2a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x50, 0x76, 0x36,
	0x43, 0x49, 0x44, 0x52, 0x32, 0x16, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x80, 0xbb, 0x49,
	0x50, 0x76, 0x36, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe6, 0xb1, 0xa0, 0x52, 0x0f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x50, 0x76, 0x36, 0x43, 0x49, 0x44, 0x52, 0x12, 0x63, 0x0a,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x76, 0x36, 0x43, 0x49, 0x44, 0x52,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x2a, 0x0f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x76, 0x36, 0x43, 0x49, 0x44, 0x52, 0x32, 0x23, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0xe7, 0x9a, 0x84, 0x49, 0x50, 0x76, 0x36, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe6, 0xb1,
	0xa0, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x76, 0x36, 0x43, 0x49,
	0x44, 0x52, 0x12, 0x6f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x57, 0x92, 0x41, 0x54, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32,
	0x4a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0x2c, 0x20, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf, 0xe5, 0x8f,
	0x98, 0xe6, 0x9b, 0xb4, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6,
	0xe8, 0xbf, 0x87, 0xe7, 0xa8, 0x8b, 0xe4, 0xb8, 0xad, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe7,
	0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0xa2, 0x01, 0x92, 0x41, 0x9e, 0x01,
	0x2a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x32, 0x8e, 0x01,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x56, 0x70, 0x63, 0x43, 0x6e, 0x69, 0xe7, 0xbd, 0x91, 0xe7,
	0xbb, 0x9c, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x28, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe6,
	0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe7, 0xbd, 0x91, 0xe5, 0x8d,
	0xa1, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x74, 0x6b, 0x65, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2d, 0x65, 0x6e, 0x69, 0xe5, 0x92, 0x8c, 0xe7, 0x8b, 0xac, 0xe5, 0x8d, 0xa0, 0xe7, 0xbd, 0x91,
	0xe5, 0x8d, 0xa1, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x74, 0x6b, 0x65, 0x2d, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x2d, 0x65, 0x6e, 0x69, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6,
	0x83, 0x85, 0xe5, 0x86, 0xb5, 0xe4, 0xb8, 0x8b, 0xe6, 0x98, 0xaf, 0xe5, 0x85, 0xb1, 0xe4, 0xba,
	0xab, 0xe7, 0xbd, 0x91, 0xe5, 0x8d, 0xa1, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x29, 0x52, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x0c,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x03,
	0x6e, 0x65, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x03, 0x6e, 0x65, 0x77, 0x32, 0x22,
	0x56, 0x50, 0x43, 0x2d, 0x43, 0x4e, 0x49, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0xa8, 0xa1,
	0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0x8b, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x12, 0x75, 0x0a, 0x07, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65,
	0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x73, 0x42, 0x39, 0x92, 0x41, 0x36, 0x2a,
	0x07, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x32, 0x2b, 0x56, 0x50, 0x43, 0x2d, 0x43, 0x4e,
	0x49, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0xe5, 0xb7, 0xb2, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xe7, 0x9a, 0x84, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x07, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x22, 0x4e,
	0x0a, 0x10, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49,
	0x44, 0x73, 0x12, 0x3a, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x28, 0x92, 0x41, 0x25, 0x2a, 0x03, 0x69, 0x64, 0x73, 0x32, 0x1e, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e,
	0xa5, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe5, 0xb7, 0xb2, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8,
	0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0x49, 0x44, 0x73, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xfa,
	0x01, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x04,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x2a,
	0x04, 0x6d, 0x61, 0x73, 0x6b, 0x32, 0x31, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0x76, 0x70, 0x63,
	0x2d, 0x63, 0x6e, 0x69, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0xe6, 0x97, 0xb6, 0xe7, 0x9a, 0x84, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0x8e, 0xa9, 0xe7,
	0xa0, 0x81, 0xe5, 0xa4, 0xa7, 0xe5, 0xb0, 0x8f, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x50,
	0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41,
	0x39, 0x2a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x32, 0x31, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0x76,
	0x70, 0x63, 0x2d, 0x63, 0x6e, 0x69, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0xe6, 0x97, 0xb6, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0xe4, 0xb8, 0x8b, 0xe7, 0x9a,
	0x84, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x49, 0x0a, 0x05, 0x69, 0x70, 0x43, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x33, 0x92, 0x41, 0x30, 0x2a, 0x05, 0x69, 0x70, 0x43, 0x6e, 0x74, 0x32, 0x27, 0xe7, 0x94, 0xb3,
	0xe8, 0xaf, 0xb7, 0x76, 0x70, 0x63, 0x2d, 0x63, 0x6e, 0x69, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0xe6, 0x97, 0xb6, 0xe7, 0x9a, 0x84, 0x49, 0x50, 0xe4, 0xb8,
	0xaa, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x69, 0x70, 0x43, 0x6e, 0x74, 0x22, 0x71, 0x0a, 0x0d, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x60, 0x0a, 0x0b,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x2a, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x2c, 0x61, 0x77, 0x73, 0x20, 0x45, 0x4b, 0x53, 0xe5, 0x8d, 0x87, 0xe7,
	0xba, 0xa7, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x7c, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44,
	0x29, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xce,
	0x0a, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x63, 0x0a, 0x02, 0x4f, 0x53, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x53, 0x92, 0x41, 0x50, 0x2a, 0x02, 0x4f, 0x53, 0x32, 0x4a, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x4f, 0x53, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x28, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0x49, 0x44, 0x2f, 0xe5, 0x85, 0xac, 0xe5, 0x85,
	0xb1, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0x2c, 0x20, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe6,
	0x97, 0xb6, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe9, 0x95,
	0x9c, 0xe5, 0x83, 0x8f, 0x49, 0x44, 0x29, 0x52, 0x02, 0x4f, 0x53, 0x12, 0x41, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41,
	0x24, 0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x19, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe7,
	0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x95,
	0x02, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0xbc, 0x01, 0x92, 0x41, 0xb8,
	0x01, 0x2a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x32, 0xa8,
	0x01, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0x74, 0x61, 0x67,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe6, 0xa0, 0x87, 0xe7, 0xad,
	0xbe, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0xb3, 0xa8, 0xe5, 0x85, 0xa5, 0x2e, 0x20, 0xe5,
	0x8f, 0xaf, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xae, 0xbe, 0xe7, 0xbd,
	0xae, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe4, 0xb8, 0x8d, 0xe5,
	0x90, 0x8c, 0xe4, 0xba, 0x91, 0xe5, 0xae, 0x9e, 0xe7, 0x8e, 0xb0, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a,
	0xa1, 0xe5, 0xae, 0x9a, 0xe5, 0x88, 0xb6, 0x74, 0x61, 0x67, 0x73, 0x28, 0xe4, 0xbe, 0x8b, 0xe5,
	0xa6, 0x82, 0x3a, 0xe5, 0x8f, 0xaf, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe4, 0xb8, 0x9a, 0xe5,
	0x8a, 0xa1, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x29, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x53, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e,
	0x2a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x1f, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7,
	0x9a, 0x84, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x08,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x74,
	0x92, 0x41, 0x71, 0x2a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x32, 0x65, 0xe5,
	0xbd, 0x93, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0x43, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x20, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0x8f, 0x92, 0xe4,
	0xbb, 0xb6, 0xe6, 0x97, 0xb6, 0xef, 0xbc, 0x8c, 0x54, 0x4b, 0x45, 0xe4, 0xbc, 0x9a, 0xe4, 0xbb,
	0x8e, 0xe8, 0xaf, 0xa5, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0x32, 0xe4, 0xb8, 0xaa, 0x49, 0x50, 0xe7, 0x94, 0xa8, 0xe6, 0x9d, 0xa5, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0xe8, 0xb4, 0x9f, 0xe8, 0xbd, 0xbd, 0xe5, 0x9d,
	0x87, 0xe8, 0xa1, 0xa1, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x12, 0x5e,
	0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x27, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7,
	0xad, 0x89, 0xe7, 0xba, 0xa7, 0xef, 0xbc, 0x8c, 0xe9, 0x92, 0x88, 0xe5, 0xaf, 0xb9, 0xe6, 0x89,
	0x98, 0xe7, 0xae, 0xa1, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88,
	0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x9d,
	0x01, 0x0a, 0x19, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x5f, 0x92, 0x41, 0x5c, 0x2a, 0x19, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x32, 0x3f, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf,
	0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8f, 0x98, 0xe9, 0x85, 0x8d, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xef, 0xbc, 0x8c, 0xe9, 0x92, 0x88, 0xe5, 0xaf,
	0xb9, 0xe6, 0x89, 0x98, 0xe7, 0xae, 0xa1, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x94, 0x9f,
	0xe6, 0x95, 0x88, 0x52, 0x19, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x83,
	0x01, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x72, 0x65, 0x61, 0x42, 0x54, 0x92, 0x41, 0x51, 0x2a, 0x04, 0x61,
	0x72, 0x65, 0x61, 0x32, 0x49, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbb, 0xb4, 0xe5, 0xba,
	0xa6, 0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x28, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0x8d, 0xe6, 0x8c, 0x87,
	0xe5, 0xae, 0x9a, 0x2c, 0x20, 0xe5, 0x88, 0x99, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0x29, 0x52, 0x04,
	0x61, 0x72, 0x65, 0x61, 0x12, 0x5c, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x32, 0x18, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0xe6, 0xa8,
	0xa1, 0xe5, 0x9d, 0x97, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x6b, 0x0a, 0x0d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0d, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0x12, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5,
	0x52, 0x0d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a,
	0x3e, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xda, 0x0a, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x04, 0x49, 0x50, 0x56,
	0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x04, 0x49, 0x50,
	0x56, 0x53, 0x32, 0x2b, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x50, 0x56, 0x53, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0xef, 0xbc,
	0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x04, 0x49, 0x50, 0x56, 0x53, 0x12, 0x7a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4e, 0x92, 0x41, 0x4b, 0x2a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x37, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xae,
	0xb9, 0xe5, 0x99, 0xa8, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe5, 0xae, 0x9e,
	0xe7, 0x8e, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0xe3, 0x80, 0x81, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x52, 0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x0e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x15,
	0xe5, 0xae, 0xb9, 0xe5, 0x99, 0xa8, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe7,
	0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xc7, 0x02, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41,
	0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0xf2, 0x01, 0x92, 0x41, 0xee, 0x01, 0x2a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67,
	0x73, 0x32, 0xe0, 0x01, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x90, 0x84, 0xe6, 0xa8, 0xa1,
	0xe5, 0x9d, 0x97, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe9, 0xa2, 0x84, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0x9a,
	0x84, 0x6b, 0x65, 0x79, 0xe4, 0xb8, 0xba, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x50, 0x49, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0x45, 0x74, 0x63, 0x64, 0xef, 0xbc, 0x8c, 0x4b,
	0x75, 0x62, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0xe3, 0x80, 0x82, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0xe4, 0xb8, 0xba, 0xe5, 0x90, 0x84, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97,
	0xe8, 0xbf, 0x9b, 0xe7, 0xa8, 0x8b, 0xe5, 0x90, 0xaf, 0xe5, 0x8a, 0xa8, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x3b, 0xe9, 0x97,
	0xb4, 0xe9, 0x9a, 0x94, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x45, 0x74, 0x63,
	0x64, 0x3a, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x64, 0x69, 0x72,
	0x3d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x62, 0x63, 0x73, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x65,
	0x74, 0x63, 0x64, 0x3b, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x12,
	0xdf, 0x01, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0xbc, 0x01, 0x92, 0x41, 0xb8, 0x01, 0x2a, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x32, 0xa8, 0x01, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc,
	0x88, 0xe5, 0x8c, 0x85, 0xe6, 0x8b, 0xac, 0x47, 0x52, 0x28, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80,
	0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x29, 0xe5, 0x92, 0x8c, 0x56, 0x50, 0x43, 0x2d, 0x43, 0x4e,
	0x49, 0xe4, 0xb8, 0xa4, 0xe7, 0xa7, 0x8d, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x8c,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x47, 0x52, 0x2e, 0xe4, 0xb9, 0x9f, 0xe6,
	0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x43, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x88, 0x28, 0x66, 0x6c, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0xe3, 0x80, 0x81, 0x63, 0x61, 0x6c, 0x69, 0x63, 0x6f, 0xe3, 0x80, 0x81, 0xe6,
	0x88, 0x96, 0xe8, 0x80, 0x85, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8a, 0xe8, 0x87, 0xaa, 0xe7, 0xa0,
	0x94, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0x8f, 0x92, 0xe4, 0xbb, 0xb6, 0xe7, 0xad, 0x89,
	0x29, 0xef, 0xbc, 0x89, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x67, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x37, 0x92,
	0x41, 0x34, 0x2a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x1e, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x90,
	0xaf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe4, 0xbf, 0x9d, 0xe6, 0x8a, 0xa4, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0c, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x32, 0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90,
	0xaf, 0xe5, 0xae, 0xa1, 0xe8, 0xae, 0xa1, 0xe5, 0xbc, 0x80, 0xe5, 0x85, 0xb3, 0x52, 0x0c, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x08, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x30, 0x92,
	0x41, 0x2d, 0x2a, 0x08, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x32, 0x21, 0xe8, 0x87,
	0xaa, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe9, 0xab, 0x98, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0x52,
	0x08, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x12, 0xb2, 0x01, 0x0a, 0x15, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x55, 0x92, 0x41, 0x52, 0x2a, 0x15, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x32, 0x39, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe5, 0x86, 0x85, 0xe5, 0xa4, 0x96,
	0xe7, 0xbd, 0x91, 0xe8, 0xae, 0xbe, 0xef, 0xbc, 0x8c, 0xe5, 0x85, 0xac, 0xe6, 0x9c, 0x89, 0xe4,
	0xba, 0x91, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe6, 0xad,
	0xa4, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x15, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x3c,
	0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf7, 0x04, 0x0a,
	0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x81, 0x01, 0x0a, 0x0a, 0x69, 0x73, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x61, 0x92, 0x41, 0x5e,
	0x2a, 0x0a, 0x69, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x6e, 0x65, 0x74, 0x32, 0x50, 0x69, 0x73,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x6e, 0x65, 0x74, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x86,
	0x85, 0xe5, 0xa4, 0x96, 0xe7, 0xbd, 0x91, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0x28, 0x74, 0x72,
	0x75, 0x65, 0xe5, 0xa4, 0x96, 0xe7, 0xbd, 0x91, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0x20, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae,
	0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x52, 0x0a,
	0x69, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x6e, 0x65, 0x74, 0x12, 0x62, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41,
	0x43, 0x2a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x32, 0x37, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe7, 0xab, 0xaf, 0xe5, 0x8f, 0xa3, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe7,
	0x9a, 0x84, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0x49, 0x44, 0x28, 0xe5, 0xbc, 0x80, 0xe5, 0x90,
	0xaf, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe6, 0x89, 0x80,
	0xe9, 0x9c, 0x80, 0x29, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b,
	0x92, 0x41, 0x28, 0x2a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x32, 0x1e, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe7,
	0xab, 0xaf, 0xe7, 0x82, 0xb9, 0xe5, 0x9f, 0x9f, 0xe5, 0x90, 0x8d, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x68, 0x92, 0x41, 0x65,
	0x2a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x32,
	0x54, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8,
	0xe7, 0xbb, 0x84, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaa, 0xe6, 0x9c, 0x89, 0xe5, 0xa4, 0x96, 0xe7,
	0xbd, 0x91, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe4, 0xbc,
	0xa0, 0xe9, 0x80, 0x92, 0xef, 0xbc, 0x88, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe5, 0xa4, 0x96,
	0xe7, 0xbd, 0x91, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe6, 0x97, 0xb6, 0xe5, 0xbf, 0x85, 0xe4,
	0xbc, 0xa0, 0xef, 0xbc, 0x89, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x9f, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x5f, 0x92, 0x41, 0x5c,
	0x2a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x32, 0x50, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0x6c, 0x62, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaa,
	0xe6, 0x9c, 0x89, 0xe5, 0xa4, 0x96, 0xe7, 0xbd, 0x91, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe9,
	0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x92, 0xef, 0xbc, 0x88, 0xe5, 0xbc,
	0x80, 0xe5, 0x90, 0xaf, 0xe5, 0xa4, 0x96, 0xe7, 0xbd, 0x91, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae,
	0xe6, 0x97, 0xb6, 0xe5, 0xbf, 0x85, 0xe4, 0xbc, 0xa0, 0xef, 0xbc, 0x89, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x22, 0xcb, 0x0b, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x9d, 0x01, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x73, 0x92, 0x41, 0x70, 0x2a, 0x0f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x32, 0x5d, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbf,
	0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe4, 0xb8, 0xba, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0xe6, 0x97, 0xb6, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xef, 0xbc, 0x8c, 0x42, 0x43,
	0x53, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x62, 0x63, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x64,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x12, 0x5d, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38,
	0x2a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x32, 0x29, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe7, 0x9b, 0x98, 0xe6, 0x8c,
	0x82, 0xe8, 0xbd, 0xbd, 0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x8c, 0x42, 0x43, 0x53, 0xe9, 0xbb, 0x98,
	0xe8, 0xae, 0xa4, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0xbf, 0x01, 0x0a, 0x0d, 0x75, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x98, 0x01,
	0x92, 0x41, 0x94, 0x01, 0x2a, 0x0d, 0x75, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x32, 0x82, 0x01, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe5, 0x8a, 0xa0, 0xe5,
	0x85, 0xa5, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe5, 0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xef, 0xbc, 0x8c,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x80, 0xbc, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba,
	0xe5, 0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xef, 0xbc, 0x8c, 0xe9,
	0x9d, 0x9e, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0x82, 0xe4,
	0xb8, 0x8e, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0x28, 0xe5, 0x8a, 0xa0, 0xe5, 0x85, 0xa5, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe5, 0x8f, 0xaf, 0xe8, 0xa6, 0x86, 0xe7, 0x9b,
	0x96, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x29, 0x52, 0x0d, 0x75, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x69, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x1b, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x88, 0x02, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0xbd, 0x01, 0x92, 0x41, 0xb9, 0x01, 0x2a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x41, 0x72, 0x67, 0x73, 0x32, 0xab, 0x01, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x90, 0x84,
	0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe9, 0xa2, 0x84, 0xe5, 0xae, 0x9a, 0xe4, 0xb9,
	0x89, 0xe7, 0x9a, 0x84, 0x6b, 0x65, 0x79, 0xe4, 0xb8, 0xba, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65,
	0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xe4, 0xb8, 0xba, 0xe5, 0x90, 0x84, 0xe6, 0xa8, 0xa1, 0xe5,
	0x9d, 0x97, 0xe8, 0xbf, 0x9b, 0xe7, 0xa8, 0x8b, 0xe5, 0x90, 0xaf, 0xe5, 0x8a, 0xa8, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x3b,
	0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x4b,
	0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x3a, 0x20, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x64, 0x69, 0x72,
	0x3d, 0x2f, 0x76, 0x61, 0x72, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65,
	0x74, 0x3b, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x12, 0x5a, 0x0a,
	0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x69, 0x6e, 0x74, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x32, 0x1e, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0x9d, 0xe5,
	0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x6b, 0x0a, 0x0b, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x2a, 0x92,
	0x41, 0x27, 0x2a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x32,
	0x18, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x99, 0xbb,
	0xe9, 0x99, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x6b, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x32, 0x18, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x99, 0xbb, 0xe9, 0x99, 0x86,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x6a, 0x0a, 0x14, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x14, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x32, 0x1b, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8,
	0xe7, 0xbb, 0x84, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x52, 0x14, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x6a, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x42, 0x36, 0x92,
	0x41, 0x33, 0x2a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x32, 0x1b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8, 0xe7, 0xbb, 0x84, 0xe8,
	0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x52, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41,
	0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x03, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x63, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x2a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x1d, 0xe6, 0x96, 0xb0, 0xe5, 0xae,
	0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x11,
	0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x57, 0x92, 0x41, 0x54, 0x2a, 0x11, 0x69, 0x6e,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x32,
	0x3f, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b,
	0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2c, 0xe5,
	0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe4, 0xb8, 0x8d, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe7, 0xb3,
	0xbb, 0xe7, 0xbb, 0x9f, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe7, 0x94, 0x9f, 0xe6, 0x88, 0x90,
	0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x81, 0x01, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x4e,
	0x92, 0x41, 0x4b, 0x2a, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x32, 0x40, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xa7, 0x81, 0xe9, 0x92, 0xa5, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x2c, 0x20, 0xe4, 0xb8, 0x8e, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x32, 0xe9, 0x80, 0x89, 0xe4,
	0xb8, 0x80, 0xef, 0xbc, 0x8c, 0x32, 0xe8, 0x80, 0x85, 0xe5, 0x9d, 0x87, 0xe8, 0xae, 0xbe, 0xe7,
	0xbd, 0xae, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe5, 0xaf, 0x86, 0xe9, 0x92, 0xa5, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x22, 0xca, 0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x77, 0x0a, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5f, 0x92, 0x41,
	0x5c, 0x2a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x73, 0x32, 0x52, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e,
	0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe5, 0x8f, 0xaf, 0xe6, 0x94, 0xaf,
	0xe6, 0x8c, 0x81, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4,
	0xb9, 0x89, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0x2c, 0xe4,
	0xb8, 0x8d, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe6, 0x97, 0xb6, 0xe5, 0xa4, 0x8d, 0xe7, 0x94,
	0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x4f, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x69, 0x73, 0x47, 0x50, 0x55, 0x4e, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x09, 0x69,
	0x73, 0x47, 0x50, 0x55, 0x4e, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0x47, 0x50, 0x55, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x52, 0x09, 0x69, 0x73, 0x47, 0x50, 0x55,
	0x4e, 0x6f, 0x64, 0x65, 0x22, 0xdc, 0x03, 0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x3a, 0x3d, 0x92, 0x41, 0x3a, 0x0a, 0x38, 0x2a, 0x11, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x32, 0x23,
	0x62, 0x63, 0x73, 0x2d, 0x6b, 0x75, 0x62, 0x65, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0xe4, 0xb8,
	0x8a, 0xe6, 0x8a, 0xa5, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x22, 0xca, 0x03, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x26, 0x92, 0x41, 0x23, 0x0a, 0x21, 0x2a,
	0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x14, 0xe8, 0xae, 0xb0, 0xe5,
	0xbd, 0x95, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0x6e, 0x73, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x22, 0xdd, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x3a, 0x2e, 0x92, 0x41, 0x2b, 0x0a, 0x29, 0x2a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x32, 0x18, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe8, 0x81,
	0x94, 0xe9, 0x82, 0xa6, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x85, 0x8d, 0xe9, 0xa2, 0x9d,
	0x22, 0x8d, 0x03, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2c, 0x0a,
	0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x67, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x3a, 0x4b, 0x92, 0x41, 0x48, 0x0a, 0x46, 0x2a, 0x0a, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x32, 0x38, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0xae,
	0xb0, 0xe5, 0xbd, 0x95, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe6, 0x88, 0xb7, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe5, 0x85, 0xa8, 0xe9, 0x87,
	0x8f, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0x22, 0x90, 0x05, 0x0a, 0x0b, 0x42, 0x4b, 0x4f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x12, 0x46, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x32, 0x21, 0xe6,
	0x8f, 0x92, 0xe4, 0xbb, 0xb6, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xef, 0xbc, 0x8c, 0xe6, 0x9c,
	0xac, 0xe6, 0x8f, 0x92, 0xe4, 0xbb, 0xb6, 0xe4, 0xb8, 0xba, 0x62, 0x6b, 0x73, 0x6f, 0x70, 0x73,
	0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x5e, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4a, 0x92, 0x41, 0x47, 0x2a, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x32, 0x3f, 0x62, 0x6b, 0x73, 0x6f, 0x70, 0x73, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9,
	0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0x8f,
	0x91, 0xe8, 0xb5, 0xb7, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe8, 0xbf, 0x90, 0xe7, 0xbb, 0xb4,
	0xe4, 0xba, 0x8b, 0xe5, 0x8a, 0xa1, 0xe8, 0xbf, 0x9c, 0xe7, 0xa8, 0x8b, 0xe8, 0xb0, 0x83, 0xe7,
	0x94, 0xa8, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0xa5, 0x01, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x4b, 0x4f, 0x70, 0x73,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x64, 0x92, 0x41, 0x61, 0x2a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x32,
	0x57, 0x62, 0x6b, 0x73, 0x6f, 0x70, 0x73, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0xbb, 0x98,
	0xe8, 0xae, 0xa4, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef,
	0xbc, 0x8c, 0xe5, 0xae, 0x9e, 0xe9, 0x99, 0x85, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe6, 0x97,
	0xb6, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe5, 0xae, 0x9e, 0xe9, 0x99, 0x85, 0xe8, 0xa1, 0x8c,
	0xe4, 0xb8, 0xba, 0xe5, 0x8f, 0xaf, 0xe8, 0xa6, 0x86, 0xe7, 0x9b, 0x96, 0xe6, 0x88, 0x96, 0xe5,
	0xae, 0x9a, 0xe5, 0x88, 0xb6, 0xe5, 0x8c, 0x96, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x9d, 0x01, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x70, 0x57, 0x68,
	0x65, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x6b,
	0x92, 0x41, 0x68, 0x2a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x70, 0x57, 0x68,
	0x65, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x32, 0x51, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53,
	0x6b, 0x69, 0x70, 0x57, 0x68, 0x65, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0xe6, 0x8f, 0x92,
	0xe4, 0xbb, 0xb6, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6,
	0x97, 0xb6, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe8, 0xb7,
	0xb3, 0xe8, 0xbf, 0x87, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0x8d, 0xe5,
	0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0x52, 0x13, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x53, 0x6b, 0x69, 0x70, 0x57, 0x68, 0x65, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x56, 0x92, 0x41, 0x53,
	0x0a, 0x51, 0x2a, 0x0b, 0x42, 0x4b, 0x4f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x32,
	0x42, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe8, 0xbf, 0x90, 0xe7, 0xbb, 0xb4, 0xe6, 0xa8, 0xa1,
	0xe6, 0x9d, 0xbf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xef,
	0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c,
	0x96, 0xe5, 0xb7, 0xa5, 0xe4, 0xbd, 0x9c, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe8, 0xae, 0xb0,
	0xe5, 0xbd, 0x95, 0x22, 0xb2, 0x05, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x0a, 0x70, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x32, 0x45, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xba, 0xe5, 0x89, 0x8d, 0xe7, 0xbd,
	0xae, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc, 0x8c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xe5,
	0x9c, 0xa8, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xba, 0xe5, 0x89,
	0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x78, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53,
	0x2a, 0x0a, 0x70, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x45, 0xe8, 0xa1,
	0x8c, 0xe4, 0xb8, 0xba, 0xe5, 0x90, 0x8e, 0xe7, 0xbd, 0xae, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8,
	0xe5, 0x8c, 0x96, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef,
	0xbc, 0x8c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xe5, 0x9c, 0xa8, 0xe6, 0x93, 0x8d, 0xe4, 0xbd,
	0x9c, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xba, 0xe5, 0x90, 0x8e, 0xe7, 0xbd, 0xae, 0xe6, 0x89, 0xa7,
	0xe8, 0xa1, 0x8c, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x6b, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x07, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x32, 0x1e, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe8, 0xa1, 0x8c, 0xe4,
	0xb8, 0xba, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe5, 0x8a, 0xa8, 0xe4, 0xbd, 0x9c, 0xe5, 0xae,
	0x9a, 0xe4, 0xb9, 0x89, 0x52, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x1a, 0x57, 0x0a,
	0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x42, 0x4b, 0x4f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0xef, 0x01, 0x92, 0x41, 0xeb, 0x01, 0x0a, 0xe8, 0x01,
	0x2a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xdd, 0x01, 0xe8, 0xae, 0xb0, 0xe5, 0xbd,
	0x95, 0xe5, 0x90, 0x84, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd,
	0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xba, 0xe6,
	0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x2c, 0x20, 0xe5, 0xaf, 0xb9, 0xe6, 0x8e, 0xa5, 0x6a, 0x6f, 0x62,
	0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x2c, 0x20, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe8, 0x87,
	0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0x3b, 0x20, 0xe9,
	0x92, 0x88, 0xe5, 0xaf, 0xb9, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe4, 0xba, 0x91, 0xe7, 0x9a,
	0x84, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe6, 0xa8, 0xa1,
	0xe7, 0x89, 0x88, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe9, 0x9c, 0x80, 0xe8, 0x87, 0xaa, 0xe5,
	0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe9, 0x92, 0x88, 0xe5, 0xaf, 0xb9, 0xe5, 0xa4, 0xa7, 0xe9, 0x83,
	0xa8, 0xe5, 0x88, 0x86, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xef, 0xbc, 0x8c, 0xe4, 0xbb, 0x85,
	0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe5, 0x89, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x8a, 0xa8, 0xe4,
	0xbd, 0x9c, 0xe6, 0x88, 0x96, 0xe5, 0x90, 0x8e, 0xe7, 0xbd, 0xae, 0xe5, 0x8a, 0xa8, 0xe4, 0xbd,
	0x9c, 0xe5, 0x8d, 0xb3, 0xe5, 0x8f, 0xaf, 0x2e, 0x20, 0xe5, 0x8f, 0xaf, 0xe8, 0x87, 0xaa, 0xe7,
	0x94, 0xb1, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0x22, 0x88, 0x0b, 0x0a, 0x0a, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x67, 0x72, 0x12, 0x66, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x23, 0xe5, 0xb7, 0xb2, 0xe6, 0x94, 0xaf,
	0xe6, 0x8c, 0x81, 0xe7, 0x9a, 0x84, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x20, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x10, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x7c, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x3e,
	0x92, 0x41, 0x3b, 0x2a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x32, 0x2a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe6, 0x97, 0xb6, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5,
	0x8c, 0x96, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x52, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x7c, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x3e, 0x92, 0x41,
	0x3b, 0x2a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x32, 0x2a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x97,
	0xb6, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96,
	0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x52, 0x0d, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x8b, 0x01, 0x0a, 0x11,
	0x61, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x45, 0x92, 0x41, 0x42, 0x2a, 0x11, 0x61, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x2d, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x88, 0xb0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xb8,
	0xad, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b,
	0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x52, 0x11, 0x61, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x54, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0xa0, 0x01, 0x0a, 0x16, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x50, 0x92, 0x41, 0x4d, 0x2a, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32,
	0x33, 0xe4, 0xbb, 0x8e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe8,
	0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe5, 0xae,
	0x9a, 0xe4, 0xb9, 0x89, 0x52, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x7f, 0x0a, 0x0d,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x41, 0x92, 0x41, 0x3e,
	0x2a, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32,
	0x2d, 0xe7, 0xba, 0xb3, 0xe7, 0xae, 0xa1, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x97, 0xb6,
	0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe7, 0x9a, 0x84, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5,
	0x8c, 0x96, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x7f, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x39, 0x92, 0x41, 0x36, 0x2a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x69, 0x78,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x21, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe6, 0xb7, 0xb7, 0xe9, 0x83, 0xa8, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6,
	0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x52, 0x11, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa0,
	0x01, 0x0a, 0x1c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x44, 0x92,
	0x41, 0x41, 0x2a, 0x1c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x32, 0x21, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe6, 0x96,
	0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb2, 0xe6, 0xa3, 0x80,
	0xe6, 0x9f, 0xa5, 0x52, 0x1c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x84, 0x01, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a, 0x0d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x2b, 0xe6, 0x89,
	0x98, 0xe7, 0xae, 0xa1, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xa7, 0x84, 0xe6, 0xa0, 0xbc,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x2c, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe9, 0x80, 0x82,
	0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0x54, 0x4b, 0x45, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0xb8, 0x01, 0x92, 0x41, 0xb4, 0x01, 0x0a,
	0xb1, 0x01, 0x2a, 0x0a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x67, 0x72, 0x32, 0xa2,
	0x01, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe5, 0xb1, 0x82, 0xe9, 0x9d, 0xa2, 0xe5, 0x9b, 0xba, 0xe5, 0xae, 0x9a, 0xe3,
	0x80, 0x81, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc,
	0x8c, 0xe5, 0xb8, 0xae, 0xe5, 0x8a, 0xa9, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe4, 0xb8, 0x8e, 0xe7, 0xbb, 0xb4, 0xe6, 0x8a, 0xa4, 0x2e, 0xe7, 0x9b, 0xae,
	0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x28, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x2f,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x2f, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x2f,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0x29, 0x22, 0x37, 0x0a, 0x0d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x86, 0x0d, 0x0a,
	0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x67, 0x72, 0x12, 0x85, 0x01,
	0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x43, 0x92, 0x41, 0x40, 0x2a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x2d, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe8,
	0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe5, 0xae,
	0x9a, 0xe4, 0xb9, 0x89, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x85, 0x01, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x43, 0x92, 0x41, 0x40, 0x2a, 0x0f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x2d, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x97,
	0xb6, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96,
	0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x52, 0x0f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xbb, 0x01,
	0x0a, 0x10, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x77, 0x92, 0x41, 0x74, 0x2a, 0x14, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x54, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x5c, 0xe7, 0xa7, 0xbb,
	0xe5, 0x8a, 0xa8, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0x87, 0xb3, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe6, 0x97, 0xb6, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe8, 0x87,
	0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe5, 0xae, 0x9a,
	0xe4, 0xb9, 0x89, 0x28, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe5, 0xa4, 0x96,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xa7, 0xbb, 0xe5, 0x8a, 0xa8, 0xe8, 0x87, 0xb3, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0x29, 0x52, 0x10, 0x6d, 0x6f, 0x76, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xc1, 0x01, 0x0a, 0x14,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x92, 0x41, 0x72, 0x2a, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x32, 0x56, 0xe4, 0xbb, 0x8e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe7, 0x9b,
	0xb8, 0xe5, 0x85, 0xb3, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x81,
	0xe7, 0xa8, 0x8b, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x28, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe7, 0xbb, 0x84, 0xe5, 0xa4, 0x96, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xa7, 0xbb, 0xe9,
	0x99, 0xa4, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0x29, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x91, 0x01, 0x0a, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x4b, 0x92, 0x41, 0x48, 0x2a, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x33, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe8, 0x87, 0xaa, 0xe5, 0x8a,
	0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89,
	0x52, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x91, 0x01, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x49, 0x92, 0x41, 0x46, 0x2a, 0x12, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x32, 0x30, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe6, 0x89, 0xa9, 0xe5,
	0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe8, 0x87,
	0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe5, 0xae, 0x9a,
	0xe4, 0xb9, 0x89, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0xb8, 0x01, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x62, 0x92, 0x41, 0x5f, 0x2a, 0x19, 0x61, 0x64, 0x64, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x32, 0x42, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe4, 0xb8,
	0x8a, 0xe6, 0x9e, 0xb6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x89,
	0xe6, 0x96, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe7, 0x9b, 0xb8, 0xe5,
	0x85, 0xb3, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x81, 0xe7, 0xa8,
	0x8b, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x52, 0x19, 0x61, 0x64, 0x64, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0xc4, 0x01, 0x0a, 0x1e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x64, 0x92, 0x41, 0x61, 0x2a, 0x1e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x3f, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe7, 0xbb, 0x84, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7,
	0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x9b,
	0xb8, 0xe5, 0x85, 0xb3, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x81,
	0xe7, 0xa8, 0x8b, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x52, 0x1e, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x3a, 0xb9, 0x02, 0x92, 0x41, 0xb5, 0x02,
	0x0a, 0xb2, 0x02, 0x2a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x67,
	0x72, 0x32, 0xa1, 0x02, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7,
	0xbc, 0xa9, 0xe5, 0xb1, 0x82, 0xe9, 0x9d, 0xa2, 0xe5, 0x9b, 0xba, 0xe5, 0xae, 0x9a, 0xe3, 0x80,
	0x81, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c,
	0xe5, 0xb8, 0xae, 0xe5, 0x8a, 0xa9, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7,
	0xbc, 0xa9, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xb8, 0x8e, 0xe7, 0xbb, 0xb4, 0xe6, 0x8a,
	0xa4, 0x2c, 0x20, 0xe5, 0x92, 0x8c, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe7, 0x9a, 0x84, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe3,
	0x80, 0x81, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb,
	0x84, 0xe3, 0x80, 0x81, 0xe7, 0xa7, 0xbb, 0xe5, 0x8a, 0xa8, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe8, 0x87, 0xb3, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe3, 0x80, 0x81, 0xe4,
	0xbb, 0x8e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe5, 0x88, 0xa0, 0xe9, 0x99,
	0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe3, 0x80, 0x81, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe7, 0xbb, 0x84, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe3,
	0x80, 0x81, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe6, 0xb8, 0x85, 0xe7, 0x90,
	0x86, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0xb9, 0xb6,
	0xe9, 0x94, 0x80, 0xe6, 0xaf, 0x81, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8, 0xe7, 0xad, 0x89, 0xe6,
	0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0x22, 0xf2, 0x05, 0x0a, 0x06, 0x4f, 0x53, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x82, 0x01, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53,
	0x2a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x32, 0x3f, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6,
	0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe4, 0xb8, 0x80, 0xe4, 0xba, 0x9b, 0xe5, 0x9f, 0xba, 0xe7, 0xa1,
	0x80, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe7, 0x89, 0x88,
	0xe6, 0x9c, 0xac, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x9e, 0x01, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x7a, 0x92, 0x41,
	0x77, 0x2a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32,
	0x67, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x8f, 0x90, 0xe4,
	0xbe, 0x9b, 0xe4, 0xb8, 0x80, 0xe4, 0xba, 0x9b, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x9f,
	0xba, 0xe7, 0xa1, 0x80, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8,
	0xef, 0xbc, 0x8c, 0xe6, 0x96, 0xb9, 0xe4, 0xbe, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5,
	0x9c, 0xa8, 0x63, 0x6c, 0x69, 0xe3, 0x80, 0x81, 0x53, 0x61, 0x61, 0x53, 0xe8, 0xbf, 0x9b, 0xe8,
	0xa1, 0x8c, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x56, 0x2a, 0x15, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x32, 0x3d, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8a,
	0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8, 0xe7, 0xbb, 0x84, 0xef, 0xbc, 0x8c, 0xe6, 0x96, 0xb9, 0xe4,
	0xbe, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x9c, 0xa8, 0x63, 0x6c, 0x69, 0xe3, 0x80,
	0x81, 0x53, 0x61, 0x61, 0x53, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe9, 0x80, 0x89, 0xe6, 0x8b,
	0xa9, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x07, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4f, 0x53, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x59, 0x92, 0x41, 0x56, 0x2a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x4b, 0xe4,
	0xba, 0x91, 0xe4, 0xb8, 0x8a, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe7, 0xbd, 0xae, 0xe5, 0x85,
	0xa5, 0xe7, 0x9a, 0x84, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xef, 0xbc, 0x8c, 0x6b, 0x65, 0x79, 0xe6, 0x98, 0xaf, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4,
	0xb8, 0xb2, 0xef, 0xbc, 0x8c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0xe6, 0x98, 0xaf, 0xe4, 0xb8,
	0xad, 0xe6, 0x96, 0x87, 0xe8, 0xaf, 0xb4, 0xe6, 0x98, 0x8e, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a,
	0x59, 0x92, 0x41, 0x56, 0x0a, 0x54, 0x2a, 0x06, 0x4f, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x4a,
	0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe4, 0xb8, 0x80, 0xe4,
	0xba, 0x9b, 0xe5, 0x9b, 0xba, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb,
	0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e,
	0xe5, 0xb8, 0xae, 0xe5, 0x8a, 0xa9, 0x4f, 0x53, 0xe5, 0xb1, 0x82, 0xe9, 0x9d, 0xa2, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0x22, 0xce, 0x06, 0x0a, 0x07, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x08, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x44, 0x32, 0x17, 0xe8, 0x85, 0xbe, 0xe8, 0xae, 0xaf, 0xe4,
	0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x44,
	0x52, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92,
	0x41, 0x25, 0x2a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x32, 0x18, 0xe8,
	0x85, 0xbe, 0xe8, 0xae, 0xaf, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a,
	0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x32,
	0x0e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x20, 0xe8, 0xae, 0xa2, 0xe9, 0x98, 0x85, 0x49, 0x44, 0x52,
	0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x39, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44,
	0x32, 0x0e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x20, 0xe7, 0xa7, 0x9f, 0xe6, 0x88, 0xb7, 0x49, 0x44,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x5b, 0x0a, 0x11, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x2a, 0x11, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x15, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x20, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xbb, 0x84, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x20, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x20,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x20, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x5b, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a,
	0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x32, 0x24, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x20, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4d, 0x92, 0x41, 0x4a, 0x2a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x32, 0x32, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xe7, 0x9a, 0x84, 0x6a, 0x73, 0x6f, 0x6e,
	0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xa7, 0x98, 0xe9, 0x92, 0xa5, 0x52,
	0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x4c, 0x0a, 0x0c, 0x67, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25,
	0x2a, 0x0c, 0x67, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x15,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0x49, 0x44, 0x52, 0x0c, 0x67, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x3a, 0x56, 0x92, 0x41, 0x53, 0x0a, 0x51, 0x2a, 0x07, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x32, 0x46, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0xad, 0x98, 0xe5, 0x82,
	0xa8, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe7, 0x9a, 0x84, 0xe8,
	0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8,
	0x8d, 0xe5, 0x90, 0x8c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe5,
	0x85, 0xbc, 0xe5, 0xae, 0xb9, 0xe5, 0xa4, 0x84, 0xe7, 0x90, 0x86, 0x22, 0x96, 0x07, 0x0a, 0x0c,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x07,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92,
	0x41, 0x38, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x2d, 0x42, 0x43, 0x53,
	0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe7, 0x9a, 0x84, 0xe4,
	0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xb1, 0xe6, 0x96,
	0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x44, 0x12, 0x67, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0x92, 0x41, 0x46, 0x2a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x39, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0xbf, 0xe4,
	0xba, 0x8e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x92, 0x8c, 0xe8, 0xbf, 0x87, 0xe6, 0xbb,
	0xa4, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x61, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x43, 0x92, 0x41, 0x40, 0x2a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32,
	0x33, 0x42, 0x43, 0x53, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe7, 0x94, 0x9f, 0xe6, 0x88, 0x90,
	0xe7, 0x9a, 0x84, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x49, 0x44, 0x2c, 0x20, 0xe6, 0xa0, 0xbc,
	0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x28, 0x42, 0x43, 0x53, 0x2d, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2d, 0x49, 0x44, 0x29, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x45, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xb4, 0xa6,
	0xe5, 0x8f, 0xb7, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x32,
	0x17, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe6, 0x8f, 0x8f, 0xe8,
	0xbf, 0xb0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x4f,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x32, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x4f, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x37, 0x92, 0x41, 0x34, 0x2a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x2a, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5,
	0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xaf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x37, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32,
	0x0f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x32, 0x0f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x55, 0x92,
	0x41, 0x52, 0x0a, 0x50, 0x2a, 0x0c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x32, 0x40, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86,
	0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe7, 0x9a, 0x84, 0xe8, 0xb4,
	0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x28, 0xe4, 0xbb, 0x85, 0xe7, 0x94,
	0xa8, 0xe4, 0xbd, 0x9c, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x92, 0x8c, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0x29, 0x22, 0xe4, 0x05, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x51, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x19, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x44, 0x32, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x02, 0x18, 0x80, 0x08, 0x32, 0x0f, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x07, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x20, 0x2a,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x11, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x32, 0x17, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x7f, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x2a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x32, 0x3e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6,
	0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe6, 0x9c, 0x89, 0xe6, 0x95,
	0x88, 0xe6, 0x80, 0xa7, 0xe5, 0x8f, 0x8a, 0xe5, 0x85, 0xbc, 0xe5, 0xae, 0xb9, 0xe5, 0xa4, 0x84,
	0xe7, 0x90, 0x86, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x29, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe4, 0xba, 0x91, 0xe8,
	0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90,
	0xaf, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x1f, 0x2a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x14, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xb4,
	0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x08, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x56, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x2e, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x32, 0x21, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x3a, 0x61, 0x92, 0x41, 0x5e, 0x0a, 0x5c, 0x2a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x13, 0xe5, 0xaf, 0xbc, 0xe5,
	0x85, 0xa5, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2,
	0x01, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0xd2, 0x01, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0xd2, 0x01, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x86, 0x02, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xcc, 0x06, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5e, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x44, 0x92, 0x41, 0x26, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x44, 0x32, 0x1b, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe8,
	0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xfa, 0x42,
	0x18, 0x72, 0x16, 0x10, 0x02, 0x18, 0x80, 0x08, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x44, 0x12, 0x59, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x1d, 0x2a, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe4, 0xba, 0x91, 0xe8,
	0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x49, 0x44, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x02, 0x18, 0x80,
	0x08, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d,
	0x2b, 0x24, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x45, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x32, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f,
	0xb7, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x32, 0x17, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x6a, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x29, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe4, 0xba, 0x91, 0xe8,
	0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90,
	0xaf, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e,
	0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x21, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7,
	0x9a, 0x84, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x14, 0x2a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x32, 0x09, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe8, 0x80, 0x85, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x08, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x1a,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0x91, 0xe8, 0xb4,
	0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x3a, 0x9d, 0x01, 0x92, 0x41, 0x99, 0x01, 0x0a, 0x96, 0x01, 0x2a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x59, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe6, 0x9b, 0xb4,
	0xe6, 0x94, 0xb9, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef,
	0xbc, 0x8c, 0xe9, 0x98, 0xb2, 0xe6, 0xad, 0xa2, 0xe5, 0xaf, 0xb9, 0xe5, 0xad, 0x98, 0xe9, 0x87,
	0x8f, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xba, 0xa7, 0xe7, 0x94, 0x9f, 0xe5, 0xbd, 0xb1,
	0xe5, 0x93, 0x8d, 0xd2, 0x01, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0xd2, 0x01, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x22, 0xbb, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xd0, 0x04, 0x0a, 0x1a, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5e, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x44, 0x92, 0x41, 0x26, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32,
	0x1b, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xb1,
	0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xfa, 0x42, 0x18, 0x72,
	0x16, 0x10, 0x02, 0x18, 0x80, 0x08, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0x12, 0x66, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x43, 0x2a, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x73, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x2c, 0xe9, 0x9a, 0x94, 0xe5,
	0xbc, 0x80, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe5, 0xa4,
	0x9a, 0xe4, 0xb8, 0xaa, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x32, 0x10, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x42, 0x7e, 0x92, 0x41, 0x7b, 0x2a, 0x58,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0xe5, 0x8e, 0x9f, 0xe5, 0xa7, 0x8b, 0xe7, 0x9a, 0x84,
	0xe5, 0x8a, 0xa0, 0xe5, 0xaf, 0x86, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xe8, 0xbd, 0xac, 0xe6,
	0x8d, 0xa2, 0xe4, 0xb8, 0xba, 0xe8, 0xaf, 0xa5, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe7, 0x9a,
	0x84, 0xe5, 0x8a, 0xa0, 0xe5, 0xaf, 0x86, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x8c,
	0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe6, 0x98, 0x8e, 0xe6,
	0x96, 0x87, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0x32, 0x1f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0xe5, 0x8e, 0x9f, 0xe5, 0xa7, 0x8b, 0xe5, 0x8a, 0xa0, 0xe5, 0xaf, 0x86, 0xe6, 0x96, 0xb9,
	0xe5, 0xbc, 0x8f, 0xe8, 0xbd, 0xac, 0xe6, 0x8d, 0xa2, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x12, 0x3a, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x28, 0x92, 0x41, 0x25, 0x2a, 0x03, 0x61, 0x6c, 0x6c, 0x32, 0x1e, 0x61, 0x6c, 0x6c, 0xe6, 0x93,
	0x8d, 0xe4, 0xbd, 0x9c, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe7, 0x9a, 0x84, 0xe8, 0xb4, 0xa6,
	0xe5, 0x8f, 0xb7, 0xe8, 0xbf, 0x81, 0xe7, 0xa7, 0xbb, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x3a, 0x74,
	0x92, 0x41, 0x71, 0x0a, 0x6f, 0x2a, 0x1a, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x47, 0xe8, 0xbf, 0x81, 0xe7, 0xa7, 0xbb, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xb4,
	0xa6, 0xe5, 0x8f, 0xb7, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb,
	0xe8, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe5,
	0xad, 0x98, 0xe9, 0x87, 0x8f, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe7, 0x9a, 0x84, 0xe5, 0x8a,
	0xa0, 0xe5, 0xaf, 0x86, 0xe8, 0xbf, 0x81, 0xe7, 0xa7, 0xbb, 0xd2, 0x01, 0x07, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x44, 0x22, 0x51, 0x0a, 0x0d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6b, 0x76, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x6b, 0x76, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x76, 0x22, 0xbc, 0x01, 0x0a, 0x1b, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc4, 0x02, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x92, 0x41, 0x26, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x44, 0x32, 0x1b, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc,
	0x8c, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2,
	0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x02, 0x18, 0x80, 0x08, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x07, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x44, 0x12, 0x5a, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x1e, 0x2a, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xb4,
	0xa6, 0xe6, 0x88, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10,
	0x02, 0x18, 0x80, 0x08, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x3a, 0x6b, 0x92, 0x41, 0x68, 0x0a, 0x66, 0x2a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x37, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8,
	0xb4, 0xa6, 0xe6, 0x88, 0xb7, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x2c, 0x20, 0xe8, 0x8b, 0xa5,
	0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xb8, 0x8d, 0xe5,
	0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xd2, 0x01, 0x07, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x44, 0xd2, 0x01, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x22, 0xbb, 0x01,
	0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xcb, 0x03, 0x0a, 0x1b,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58,
	0x92, 0x41, 0x55, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x48,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xe6, 0x89, 0x80, 0xe5,
	0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0x9a, 0x84, 0xe4,
	0xba, 0x91, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x0f, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f,
	0xb7, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x51, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x1d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xb4, 0xa6, 0xe5,
	0x8f, 0xb7, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0xa1, 0x01, 0x92, 0x41, 0x9d, 0x01, 0x0a, 0x9a, 0x01, 0x2a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x7b, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0xa1, 0xab, 0xe5,
	0x86, 0x99, 0xe4, 0xba, 0x86, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe5, 0xad, 0x97, 0xe6, 0xae,
	0xb5, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x88, 0xe7, 0x9b, 0xae,
	0xe6, 0xa0, 0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xef,
	0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0x85, 0xa8, 0xe4, 0xb8, 0xba, 0xe7, 0xa9,
	0xba, 0xe5, 0x88, 0x99, 0xe4, 0xb8, 0xba, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x85, 0xa8,
	0xe9, 0x87, 0x8f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22, 0xe6, 0x02, 0x0a, 0x1c, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x57, 0x92, 0x41, 0x54, 0x0a, 0x52,
	0x2a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x21,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x8f, 0x04, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b,
	0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x31, 0x92, 0x41, 0x26, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x1b, 0xe4,
	0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xb1, 0xe6, 0x96,
	0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0x80, 0x08, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0x92, 0x41, 0x24, 0x2a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x17,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x76, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0x92, 0x41, 0x55, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x48, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba,
	0x8e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41,
	0x29, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x1d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe6, 0x9d,
	0x83, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x3a, 0x9d, 0x01, 0x92, 0x41, 0x99, 0x01, 0x0a, 0x96, 0x01, 0x2a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x7b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4,
	0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xef, 0xbc,
	0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0xa1, 0xab, 0xe5, 0x86, 0x99, 0xe4, 0xba, 0x86,
	0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xef, 0xbc, 0x8c, 0xe5,
	0x88, 0x99, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x88, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82,
	0xe6, 0x9e, 0x9c, 0xe5, 0x85, 0xa8, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe5, 0x88, 0x99, 0xe4,
	0xb8, 0xba, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x85, 0xa8, 0xe9, 0x87, 0x8f, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x22, 0xfb, 0x02, 0x0a, 0x19, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x51, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x19, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x44, 0x32, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x02, 0x18, 0x80, 0x08, 0x32, 0x0f, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x07, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x32, 0x17,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf,
	0xb0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x7f, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x2a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x3e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe4, 0xba, 0x91, 0xe8,
	0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0xe4, 0xb8, 0x8d, 0xe5,
	0x90, 0x8c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe6, 0x9c, 0x89,
	0xe6, 0x95, 0x88, 0xe6, 0x80, 0xa7, 0xe5, 0x8f, 0x8a, 0xe5, 0x85, 0xbc, 0xe5, 0xae, 0xb9, 0xe5,
	0xa4, 0x84, 0xe7, 0x90, 0x86, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x52,
	0x92, 0x41, 0x4f, 0x0a, 0x4d, 0x2a, 0x19, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x1c, 0xe6, 0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe6, 0x80, 0xa7, 0xd2, 0x01,
	0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0xd2, 0x01, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x1a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x66, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0xdc, 0x03, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x52, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x83, 0x01, 0x0a, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x24, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0x9a, 0x84, 0xe4,
	0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e,
	0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x47,
	0x92, 0x41, 0x44, 0x0a, 0x42, 0x2a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbf, 0x09, 0x0a, 0x08, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x56, 0x50, 0x43, 0x12, 0x46, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x44, 0x32, 0x1e, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc,
	0x8c, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2,
	0xef, 0xbc, 0x8c, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41,
	0x1f, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x15, 0x76, 0x70, 0x63, 0xe6, 0x89,
	0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41,
	0x20, 0x2a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x12, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a,
	0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x32, 0x29, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x2f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x29, 0x52,
	0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x05,
	0x76, 0x70, 0x63, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x2a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x32, 0x0b, 0x76, 0x70, 0x63, 0x49, 0x44, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x07, 0x76,
	0x70, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x2a, 0x07, 0x76, 0x70, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x09, 0x76, 0x70, 0x63, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x07, 0x76, 0x70, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5d,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x32, 0x2f, 0xe8, 0xaf, 0xa5, 0x76, 0x70, 0x63, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5,
	0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0x28, 0x74, 0x72, 0x75, 0x65, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8,
	0xef, 0xbc, 0x8c, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0xaf, 0xe7, 0x94,
	0xa8, 0x29, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41,
	0x1e, 0x2a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x32, 0x15, 0x76, 0x70, 0x63, 0xe6, 0x8f, 0x8f,
	0xe8, 0xbf, 0xb0, 0xe6, 0xa0, 0x87, 0xe8, 0xae, 0xb0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x0f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x37, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x32, 0x0f,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19,
	0x2a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49,
	0x50, 0x4e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x35, 0x92, 0x41, 0x32, 0x2a,
	0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x50, 0x4e, 0x75, 0x6d, 0x32, 0x21,
	0x76, 0x70, 0x63, 0xe9, 0xa2, 0x84, 0xe7, 0x95, 0x99, 0x49, 0x50, 0xe6, 0x95, 0xb0, 0xe9, 0x87,
	0x8f, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0x8d, 0xe9, 0xa2, 0x84, 0xe7, 0x95,
	0x99, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x50, 0x4e, 0x75, 0x6d,
	0x12, 0x59, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x28, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x2c,
	0x20, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0xe9, 0xa2, 0x84, 0xe7, 0x95, 0x99, 0xe7, 0xa7, 0x81,
	0xe6, 0x9c, 0x89, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x76, 0x70, 0x63, 0x52,
	0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x52, 0x0a, 0x07, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x69,
	0x64, 0x72, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x32, 0x14, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x49, 0x50, 0x20, 0x43, 0x49, 0x44, 0x52,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x12,
	0x56, 0x0a, 0x08, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x69, 0x64, 0x72, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x08, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x32, 0x15, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x49, 0x50, 0x20, 0x43, 0x49, 0x44, 0x52, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x08, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x3a, 0x40, 0x92, 0x41, 0x3d, 0x0a, 0x3b, 0x2a, 0x08,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x50, 0x43, 0x32, 0x2f, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e,
	0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe5, 0xaf, 0xb9, 0xe5, 0xba,
	0x94, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe7, 0x9a, 0x84,
	0x76, 0x70, 0x63, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22, 0x83, 0x01, 0x0a, 0x04, 0x43, 0x69,
	0x64, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x63, 0x69, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x69, 0x64, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x63, 0x69,
	0x64, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49,
	0x50, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x49, 0x50, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x69, 0x64, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x69, 0x64, 0x72, 0x73, 0x22,
	0x35, 0x0a, 0x09, 0x43, 0x69, 0x64, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xd6, 0x09, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5d, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x43, 0x92, 0x41, 0x26, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32,
	0x1b, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xb1,
	0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xfa, 0x42, 0x17, 0x72,
	0x15, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12,
	0x75, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x53, 0x92, 0x41, 0x38, 0x2a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x32, 0x29, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28,
	0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x2f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x29, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52,
	0x08, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x1f, 0x2a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x32, 0x15, 0x76, 0x70, 0x63, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0x8c,
	0xba, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10,
	0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x32, 0x12, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4b, 0x0a, 0x07, 0x76, 0x70, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x76, 0x70, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x32, 0x09, 0x76, 0x70, 0x63, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x17, 0x72, 0x15,
	0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x07, 0x76, 0x70, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47,
	0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92,
	0x41, 0x14, 0x2a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x32, 0x0b, 0x76, 0x70, 0x63, 0x49, 0x44,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x64, 0x32,
	0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24,
	0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x6f, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0x92, 0x41, 0x3c, 0x2a,
	0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x2f, 0xe8, 0xaf, 0xa5, 0x76,
	0x70, 0x63, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0x28, 0x74,
	0x72, 0x75, 0x65, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xef, 0xbc, 0x8c, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0x29, 0xfa, 0x42, 0x0f, 0x72, 0x0d,
	0x52, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x32, 0x15, 0x76, 0x70, 0x63, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe6, 0xa0,
	0x87, 0xe8, 0xae, 0xb0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x32, 0x0f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80,
	0x85, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x64, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49,
	0x50, 0x4e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x35, 0x92, 0x41, 0x32, 0x2a,
	0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x50, 0x4e, 0x75, 0x6d, 0x32, 0x21,
	0x76, 0x70, 0x63, 0xe9, 0xa2, 0x84, 0xe7, 0x95, 0x99, 0x49, 0x50, 0xe6, 0x95, 0xb0, 0xe9, 0x87,
	0x8f, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0x8d, 0xe9, 0xa2, 0x84, 0xe7, 0x95,
	0x99, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x50, 0x4e, 0x75, 0x6d,
	0x12, 0x59, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x28, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x2c,
	0x20, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0xe9, 0xa2, 0x84, 0xe7, 0x95, 0x99, 0xe7, 0xa7, 0x81,
	0xe6, 0x9c, 0x89, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x76, 0x70, 0x63, 0x52,
	0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x52, 0x0a, 0x07, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x69,
	0x64, 0x72, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x32, 0x14, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x49, 0x50, 0x20, 0x43, 0x49, 0x44, 0x52,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x12,
	0x56, 0x0a, 0x08, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x69, 0x64, 0x72, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x08, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x32, 0x15, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x49, 0x50, 0x20, 0x43, 0x49, 0x44, 0x52, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x08, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x3a, 0x66, 0x92, 0x41, 0x63, 0x0a, 0x61, 0x2a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x50, 0x43, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x15, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x20, 0x76, 0x70, 0x63, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x07, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0xd2, 0x01, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x07,
	0x76, 0x70, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x22,
	0xb7, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56,
	0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe5, 0x08, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x26, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x44, 0x32, 0x1b, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c,
	0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xfa,
	0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x44, 0x12, 0x5d, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x32, 0x29, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x28, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x2f, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x29, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x15,
	0x76, 0x70, 0x63, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a,
	0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x32, 0x12, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x76, 0x70, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x76, 0x70, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x32, 0x09, 0x76, 0x70, 0x63, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x07, 0x76, 0x70,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x14, 0x2a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44,
	0x32, 0x0b, 0x76, 0x70, 0x63, 0x49, 0x44, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x17,
	0x72, 0x15, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x71,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x53, 0x92, 0x41, 0x3c, 0x2a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x32, 0x2f, 0xe8, 0xaf, 0xa5, 0x76, 0x70, 0x63, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5,
	0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0x28, 0x74, 0x72, 0x75, 0x65, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8,
	0xef, 0xbc, 0x8c, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0xaf, 0xe7, 0x94,
	0xa8, 0x29, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x52, 0x00, 0x52, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x32, 0x09, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x02, 0x18, 0x64, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x6f, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x50, 0x4e, 0x75, 0x6d, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x49, 0x50, 0x4e, 0x75, 0x6d, 0x32, 0x17, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x76, 0x70,
	0x63, 0xe9, 0xa2, 0x84, 0xe7, 0x95, 0x99, 0x49, 0x50, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52,
	0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x50, 0x4e, 0x75, 0x6d, 0x12, 0x77,
	0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x39, 0x92, 0x41, 0x36, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49,
	0x44, 0x32, 0x28, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x2c, 0x20, 0xe4, 0xbd, 0x9c,
	0xe7, 0x94, 0xa8, 0xe9, 0xa2, 0x84, 0xe7, 0x95, 0x99, 0xe7, 0xa7, 0x81, 0xe6, 0x9c, 0x89, 0xe7,
	0x9a, 0x84, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x76, 0x70, 0x63, 0x52, 0x0a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x52, 0x0a, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x69, 0x64, 0x72, 0x42, 0x22,
	0x92, 0x41, 0x1f, 0x2a, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x32, 0x14, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x49, 0x50, 0x20, 0x43, 0x49, 0x44, 0x52, 0xe9, 0x85, 0x8d, 0xe7,
	0xbd, 0xae, 0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x12, 0x56, 0x0a, 0x08, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x69, 0x64, 0x72, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x08, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x32, 0x15, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x49, 0x50, 0x20, 0x43,
	0x49, 0x44, 0x52, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x08, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x3a, 0x4c, 0x92, 0x41, 0x49, 0x0a, 0x47, 0x2a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0x91, 0x56, 0x50, 0x43, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0xd2,
	0x01, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0xd2, 0x01, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x22, 0x8a, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x56, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x51, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x56, 0x50, 0x43, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x90, 0x8e, 0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91, 0x56,
	0x50, 0x43, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x83,
	0x02, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x50,
	0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x26, 0x2a, 0x07,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x1b, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac,
	0xa6, 0xe4, 0xb8, 0xb2, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x07,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x14, 0x2a, 0x05, 0x76, 0x70, 0x63,
	0x49, 0x44, 0x32, 0x0b, 0x76, 0x70, 0x63, 0x49, 0x44, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa,
	0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44,
	0x3a, 0x42, 0x92, 0x41, 0x3f, 0x0a, 0x3d, 0x2a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x56, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe4, 0xba, 0x91, 0x56, 0x50, 0x43, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0xd2, 0x01, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0xd2, 0x01, 0x05, 0x76,
	0x70, 0x63, 0x49, 0x44, 0x22, 0x8a, 0x02, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x56, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x51,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x56, 0x50, 0x43, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x18, 0xe5, 0xb7, 0xb2, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0x9a, 0x84, 0xe4,
	0xba, 0x91, 0x56, 0x50, 0x43, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xb1, 0x04, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56,
	0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x07, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x26, 0x2a,
	0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x1b, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7,
	0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x14, 0x52, 0x07, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x32, 0x15, 0x76, 0x70, 0x63, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0x8c, 0xba,
	0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x32, 0x0b, 0x76, 0x70,
	0x63, 0x49, 0x44, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44,
	0x12, 0x75, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x53, 0x92, 0x41, 0x38, 0x2a, 0x0b, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x32, 0x29, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x28, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x2f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x29, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x52, 0x08, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30,
	0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x22, 0xe4, 0xb8,
	0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x2c, 0x20, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe4, 0xb8,
	0x9a, 0xe5, 0x8a, 0xa1, 0xe7, 0xa7, 0x81, 0xe6, 0x9c, 0x89, 0xe7, 0x9a, 0x84, 0x76, 0x70, 0x63,
	0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x3a, 0x96, 0x01, 0x92,
	0x41, 0x92, 0x01, 0x0a, 0x8f, 0x01, 0x2a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x56, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x78, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe4, 0xba, 0x91, 0x56, 0x50, 0x43, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xef,
	0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0xa1, 0xab, 0xe5, 0x86, 0x99, 0xe4, 0xba,
	0x86, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xef, 0xbc, 0x8c,
	0xe5, 0x88, 0x99, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x88, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xef, 0xbc, 0x8c, 0xe5, 0xa6,
	0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0x85, 0xa8, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe5, 0x88, 0x99,
	0xe4, 0xb8, 0xba, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x85, 0xa8, 0xe9, 0x87, 0x8f, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22, 0xc8, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x56, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x56, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0, 0xe7,
	0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x40,
	0x92, 0x41, 0x3d, 0x0a, 0x3b, 0x2a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x56, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x12, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe4, 0xba, 0x91, 0x56, 0x50, 0x43, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2,
	0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x81, 0x08, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x50, 0x43, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x46, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0x32, 0x1e, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe8, 0x8b,
	0xb1, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xef, 0xbc, 0x8c,
	0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x15, 0x76, 0x70, 0x63, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0a,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x12, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0a,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3b, 0x92, 0x41, 0x38, 0x2a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x32, 0x29, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0xe7, 0xbd,
	0x91, 0xe7, 0xbb, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x2f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x29, 0x52, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x70, 0x63,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x05, 0x76,
	0x70, 0x63, 0x49, 0x44, 0x32, 0x0b, 0x76, 0x70, 0x63, 0x49, 0x44, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x07, 0x76, 0x70, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x07,
	0x76, 0x70, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x09, 0x76, 0x70, 0x63, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0x52, 0x07, 0x76, 0x70, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x09, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f,
	0x92, 0x41, 0x3c, 0x2a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x2f,
	0xe8, 0xaf, 0xa5, 0x76, 0x70, 0x63, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe7,
	0x94, 0xa8, 0x28, 0x74, 0x72, 0x75, 0x65, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xef, 0xbc, 0x8c,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0x29, 0x52,
	0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x32, 0x15, 0x76, 0x70, 0x63, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0,
	0xe6, 0xa0, 0x87, 0xe8, 0xae, 0xb0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x12, 0x5b, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49,
	0x50, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x35, 0x92, 0x41, 0x32, 0x2a,
	0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x50, 0x4e, 0x75, 0x6d, 0x32, 0x21,
	0x76, 0x70, 0x63, 0xe9, 0xa2, 0x84, 0xe7, 0x95, 0x99, 0x49, 0x50, 0xe6, 0x95, 0xb0, 0xe9, 0x87,
	0x8f, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0x8d, 0xe9, 0xa2, 0x84, 0xe7, 0x95,
	0x99, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x50, 0x4e, 0x75, 0x6d,
	0x12, 0x57, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x4e,
	0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x0e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x4e, 0x75, 0x6d, 0x32, 0x1a, 0xe5,
	0xbd, 0x93, 0xe5, 0x89, 0x8d, 0x76, 0x70, 0x63, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a,
	0x84, 0x49, 0x50, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x4e, 0x75, 0x6d, 0x12, 0x5c, 0x0a, 0x07, 0x6f, 0x76, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x69, 0x64, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a,
	0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x32, 0x14, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x49, 0x50, 0x20, 0x43, 0x49, 0x44, 0x52, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x07,
	0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x12, 0x60, 0x0a, 0x08, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x69, 0x64, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x08,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x32, 0x15, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x49, 0x50, 0x20, 0x43, 0x49, 0x44, 0x52, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52,
	0x08, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x12, 0x59, 0x0a, 0x0a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92,
	0x41, 0x36, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x28,
	0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x2c, 0x20, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8,
	0xe9, 0xa2, 0x84, 0xe7, 0x95, 0x99, 0xe7, 0xa7, 0x81, 0xe6, 0x9c, 0x89, 0xe7, 0x9a, 0x84, 0xe4,
	0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x76, 0x70, 0x63, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x49, 0x44, 0x22, 0x8f, 0x01, 0x0a, 0x0e, 0x43, 0x69, 0x64, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x05, 0x63, 0x69, 0x64, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x69, 0x64, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x63, 0x69, 0x64, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x49, 0x50, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x50, 0x4e, 0x75, 0x6d, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x4e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x50, 0x4e, 0x75, 0x6d, 0x22, 0xa1, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4a, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x26, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x44, 0x32, 0x1b, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe8,
	0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x18, 0x14, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x3a, 0x3a,
	0x92, 0x41, 0x37, 0x0a, 0x35, 0x2a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1a,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe7, 0x9a, 0x84, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22, 0xda, 0x02, 0x0a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x4f, 0x92, 0x41, 0x4c, 0x0a, 0x4a, 0x2a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5f, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x56, 0x50, 0x43, 0x43, 0x69, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45,
	0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92,
	0x41, 0x2c, 0x2a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x32, 0x23, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0xe7, 0x9a, 0x84, 0x76, 0x70, 0x63, 0x20, 0x63, 0x69,
	0x64, 0x72, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x52, 0x05,
	0x76, 0x70, 0x63, 0x49, 0x44, 0x3a, 0x30, 0x92, 0x41, 0x2d, 0x0a, 0x2b, 0x2a, 0x11, 0x47, 0x65,
	0x74, 0x56, 0x50, 0x43, 0x43, 0x69, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x16, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x76, 0x70, 0x63, 0xe7, 0x9a, 0x84, 0x63, 0x69, 0x64,
	0x72, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22, 0xc7, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56,
	0x50, 0x43, 0x43, 0x69, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x50, 0x43,
	0x43, 0x69, 0x64, 0x72, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x46, 0x92, 0x41, 0x43, 0x0a, 0x41,
	0x2a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x50, 0x43, 0x43, 0x69, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x56, 0x50, 0x43, 0x20,
	0x63, 0x69, 0x64, 0x72, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x63, 0x0a, 0x07, 0x56, 0x50, 0x43, 0x43, 0x69, 0x64, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x76, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x70, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x50, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x49, 0x50, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd6, 0x15, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x12, 0x45, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x32, 0x1b, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe8,
	0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0x52, 0x07,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x32, 0x15, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe4, 0xb8, 0xad, 0xe6, 0x96,
	0x87, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x83, 0x01,
	0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x67, 0x92, 0x41, 0x64, 0x2a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x32,
	0x58, 0xe5, 0xaf, 0xb9, 0xe4, 0xba, 0x8e, 0x53, 0x61, 0x61, 0x53, 0xe5, 0xb1, 0x82, 0xe9, 0x9d,
	0xa2, 0xe8, 0xaf, 0xa5, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe5, 0x8f, 0xaf, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91, 0xef, 0xbc, 0x8c, 0x42, 0x43, 0x53, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe7, 0x9a, 0x84, 0xe9, 0xa2,
	0x84, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe4, 0xb8, 0x8d,
	0xe5, 0x8f, 0xaf, 0xe7, 0xbc, 0x96, 0xe8, 0xaf, 0x91, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x0a, 0x6f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x44, 0x92, 0x41, 0x41, 0x2a, 0x0a, 0x6f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x32, 0x33, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe8, 0xbf,
	0x90, 0xe7, 0xbb, 0xb4, 0xe5, 0xae, 0x9e, 0xe7, 0x8e, 0xb0, 0xe7, 0x9a, 0x84, 0xe6, 0x89, 0xa9,
	0xe5, 0xb1, 0x95, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe6,
	0x8f, 0x92, 0xe4, 0xbb, 0xb6, 0x52, 0x0a, 0x6f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x12, 0xa8, 0x01, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x5b, 0x92, 0x41, 0x58, 0x2a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x32, 0x48, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x89, 0xa9, 0xe5,
	0xb1, 0x95, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba,
	0x8e, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95,
	0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xe5, 0x85, 0x81, 0xe8,
	0xae, 0xb8, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91, 0x52, 0x0c,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0xe2, 0x01, 0x0a,
	0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x42, 0x9b, 0x01, 0x92, 0x41, 0x97, 0x01, 0x2a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x32, 0x83, 0x01, 0xe8, 0xaf, 0xa5,
	0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8b, 0xe7, 0xbb, 0x9f, 0xe4, 0xb8, 0x80, 0xe5, 0xae, 0x9a, 0xe4,
	0xb9, 0x89, 0xe7, 0x9a, 0x84, 0xe8, 0xb4, 0xa6, 0xe6, 0x88, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba,
	0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9c, 0x89, 0xe9, 0x85, 0x8d, 0xe7,
	0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe5, 0xbd, 0x93, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0xe3, 0x80, 0x81, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0xe4, 0xb8, 0x8b, 0xe6,
	0xb2, 0xa1, 0xe6, 0x9c, 0x89, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe6, 0x97, 0xb6, 0xe4, 0xbc,
	0x9a, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe8, 0xaf, 0xa5, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0x7b, 0x0a, 0x0c, 0x6f, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4f, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x3f, 0x92, 0x41, 0x3c, 0x2a, 0x0c, 0x6f, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x32, 0x2c, 0xe8, 0xaf, 0xa5, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8b, 0x4f, 0x53, 0xe5,
	0xb1, 0x82, 0xe9, 0x9d, 0xa2, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0x9a, 0x84, 0xe7, 0xbb,
	0x9f, 0xe4, 0xb8, 0x80, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x0c, 0x6f, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x92,
	0x01, 0x0a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4d, 0x67, 0x72, 0x42, 0x48, 0x92, 0x41, 0x45, 0x2a, 0x11, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x30,
	0xe8, 0xaf, 0xa5, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7,
	0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0xb1, 0x82, 0xe9, 0x9d, 0xa2, 0xe7, 0x9a, 0x84, 0xe6, 0xb5,
	0x81, 0xe7, 0xa8, 0x8b, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x67, 0x72, 0x42,
	0x3b, 0x92, 0x41, 0x38, 0x2a, 0x13, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x21, 0xe8, 0xaf, 0xa5, 0xe4, 0xba,
	0x91, 0xe4, 0xb8, 0x8b, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9,
	0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x13, 0x6e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x32, 0x0f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80,
	0x85, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a,
	0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x32, 0x0f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0xae,
	0x01, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x87, 0x01, 0x92, 0x41, 0x83, 0x01, 0x2a, 0x0d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x72, 0xe5, 0x8a,
	0x9f, 0xe8, 0x83, 0xbd, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe5, 0xae, 0x9e, 0xe7, 0x8e, 0xb0,
	0xef, 0xbc, 0x8c, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe5, 0xae, 0x9e, 0xe7, 0x8e, 0xb0, 0xe6,
	0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe6, 0x9c, 0x89, 0x71, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x6c, 0x75, 0x65, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x62, 0x6b, 0x73, 0x6f, 0x70, 0x73, 0x2f, 0x61,
	0x77, 0x73, 0xef, 0xbc, 0x8c, 0xe5, 0xae, 0x9e, 0xe7, 0x8e, 0xb0, 0xe5, 0x8f, 0x82, 0xe8, 0x80,
	0x83, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0xe4, 0xb8, 0x8b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x80, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x68, 0x92, 0x41, 0x65, 0x2a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x5b, 0xe6,
	0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x2c, 0x20, 0xe4, 0xbf, 0x9d,
	0xe5, 0xad, 0x98, 0xe9, 0x80, 0x82, 0xe9, 0x85, 0x8d, 0xe5, 0x90, 0x84, 0xe7, 0xa7, 0x8d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0xe7, 0x9a, 0x84, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe4, 0xb8, 0x8d, 0xe5, 0x90,
	0x8c, 0xe7, 0x9a, 0x84, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0xe8, 0xa7,
	0xa3, 0xe6, 0x9e, 0x90, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x51, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x1d, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf,
	0xb0, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbb, 0x8b, 0xe7,
	0xbb, 0x8d, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x0a,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x1b, 0xe5, 0xba, 0x95, 0xe5,
	0xb1, 0x82, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe5, 0xbc, 0x95, 0xe6, 0x93,
	0x8e, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x45, 0x92, 0x41, 0x42, 0x2a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x32, 0x38, 0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x99, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0xe5, 0x8f, 0xaf, 0xe8, 0xa7, 0x81, 0x28, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0xba, 0x74, 0x72, 0x75,
	0x65, 0xe6, 0x88, 0x96, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x7d, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x39, 0x92, 0x41, 0x36, 0x2a, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x27, 0xe8, 0xaf, 0xa5,
	0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8b, 0xe7, 0xbb, 0x9f, 0xe4, 0xb8, 0x80, 0xe5, 0xae, 0x9a, 0xe4,
	0xb9, 0x89, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x6a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x2a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x49,
	0x6e, 0x66, 0x6f, 0x32, 0x1e, 0xe8, 0xaf, 0xa5, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8b, 0xe7, 0xbb,
	0x9f, 0xe4, 0xb8, 0x80, 0xe4, 0xba, 0x91, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x7e, 0x0a,
	0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x31, 0x92, 0x41,
	0x2e, 0x2a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x32,
	0x1e, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe4, 0xba, 0x91,
	0xe7, 0x9a, 0x84, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x5a, 0x0a,
	0x0f, 0x4f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x42, 0x4b, 0x4f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x11, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x42, 0x4b, 0x4f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x84, 0x01, 0x92, 0x41, 0x80, 0x01, 0x0a,
	0x7e, 0x2a, 0x05, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x32, 0x75, 0xe4, 0xba, 0x91, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0xa4, 0x9a, 0xe4, 0xba, 0x91, 0xe7, 0xae, 0xa1, 0xe7,
	0x90, 0x86, 0xe4, 0xb8, 0x8b, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0xae, 0x9a, 0xe4, 0xb9,
	0x89, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c,
	0x42, 0x43, 0x53, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x9c, 0xb0, 0xe6, 0x8f, 0x90, 0xe4,
	0xbe, 0x9b, 0xe8, 0x93, 0x9d, 0xe9, 0xb2, 0xb8, 0xe4, 0xba, 0x91, 0xe9, 0xa2, 0x84, 0xe5, 0xae,
	0x9a, 0xe4, 0xb9, 0x89, 0xef, 0xbc, 0x8c, 0xe8, 0x85, 0xbe, 0xe8, 0xae, 0xaf, 0xe4, 0xba, 0x91,
	0xe9, 0xa2, 0x84, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22,
	0xcd, 0x09, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x69, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x1d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe5, 0x86, 0x85,
	0xe9, 0x83, 0xa8, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x51,
	0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x32, 0x1d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe5, 0x9f, 0x9f, 0xe5, 0x90, 0x8d, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x59, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30, 0x2a, 0x0d, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x32, 0x1f, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0xe5, 0x86, 0x85, 0xe9, 0x83,
	0xa8, 0xe5, 0x9f, 0x9f, 0xe5, 0x90, 0x8d, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x0d, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x72, 0x0a, 0x14,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x2a,
	0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x23, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0x52, 0x14, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x72, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3e,
	0x92, 0x41, 0x3b, 0x2a, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x23, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0xe5, 0xaf, 0xbc, 0xe5,
	0x85, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0x52, 0x14,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x37,
	0x92, 0x41, 0x34, 0x2a, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1,
	0xa0, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x49, 0x0a, 0x09, 0x76, 0x70, 0x63,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41,
	0x28, 0x2a, 0x09, 0x76, 0x70, 0x63, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x32, 0x1b, 0x76, 0x70,
	0x63, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe5, 0x9f, 0x9f,
	0xe5, 0x90, 0x8d, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x09, 0x76, 0x70, 0x63, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x8f, 0x01, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x51, 0x92, 0x41, 0x4e, 0x2a, 0x19, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x32, 0x31, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe6, 0xb1, 0xa0, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x71, 0x75, 0x6f, 0x74, 0x61, 0xe6,
	0xa0, 0xa1, 0xe9, 0xaa, 0x8c, 0xe5, 0xbc, 0x80, 0xe5, 0x85, 0xb3, 0x52, 0x19, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x48, 0x61, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x6c, 0x92, 0x41, 0x69, 0x2a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x48,
	0x61, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x54, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0xe9, 0xab, 0x98, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0xe7, 0x99, 0xbd, 0xe5, 0x90, 0x8d, 0xe5, 0x8d, 0x95, 0x2c, 0x20, 0xe6, 0x9f, 0x90, 0xe4,
	0xba, 0x9b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8,
	0x8d, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0x33, 0xe4, 0xb8, 0xaa, 0xe5, 0x8f, 0x8a, 0xe4, 0xbb,
	0xa5, 0xe4, 0xb8, 0x8a, 0xe9, 0xab, 0x98, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba,
	0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x0c,
	0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x14, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6,
	0x95, 0xb0, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x52, 0x0a, 0x10, 0x77, 0x68, 0x69, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a,
	0x10, 0x77, 0x68, 0x69, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x32, 0x0f, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0xe7, 0x99, 0xbd, 0xe5, 0x90, 0x8d, 0xe5,
	0x8d, 0x95, 0x52, 0x10, 0x77, 0x68, 0x69, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x39, 0x92, 0x41, 0x36, 0x0a, 0x34, 0x2a, 0x0f, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x21, 0xe7, 0x94,
	0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe4, 0xba, 0x91, 0xe5, 0x85, 0xac,
	0xe5, 0x85, 0xb1, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22,
	0x99, 0x07, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x08, 0x63, 0x69, 0x64, 0x72, 0x53, 0x74, 0x65, 0x70,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x08, 0x63, 0x69, 0x64,
	0x72, 0x53, 0x74, 0x65, 0x70, 0x32, 0x1c, 0x63, 0x69, 0x64, 0x72, 0xe8, 0x87, 0xaa, 0xe5, 0x8a,
	0xa8, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0xad, 0xa5, 0xe9, 0x95, 0xbf, 0xe8, 0xae, 0xbe,
	0xe7, 0xbd, 0xae, 0x52, 0x08, 0x63, 0x69, 0x64, 0x72, 0x53, 0x74, 0x65, 0x70, 0x12, 0x87, 0x01,
	0x0a, 0x09, 0x63, 0x69, 0x64, 0x72, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x43, 0x69, 0x64, 0x72, 0x53, 0x74, 0x65, 0x70, 0x42, 0x4c,
	0x92, 0x41, 0x49, 0x2a, 0x09, 0x63, 0x69, 0x64, 0x72, 0x53, 0x74, 0x65, 0x70, 0x73, 0x32, 0x3c,
	0x63, 0x69, 0x64, 0x72, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9,
	0xe6, 0xad, 0xa5, 0xe9, 0x95, 0xbf, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x28, 0xe9, 0x9a, 0x8f,
	0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe9, 0x85, 0x8d, 0xe7,
	0xbd, 0xae, 0xe8, 0x80, 0x8c, 0xe5, 0x8f, 0x98, 0xe5, 0x8c, 0x96, 0x29, 0x52, 0x09, 0x63, 0x69,
	0x64, 0x72, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x32, 0x92,
	0x41, 0x2f, 0x2a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x73,
	0x32, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xe6,
	0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0xad, 0xa5, 0xe9, 0x95, 0xbf, 0xe8, 0xae, 0xbe, 0xe7, 0xbd,
	0xae, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12,
	0x52, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x64, 0x4e, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x0d, 0x70, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x32, 0x18, 0xe5, 0x8d, 0x95, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x70, 0x6f, 0x64, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x64,
	0x4e, 0x75, 0x6d, 0x12, 0x72, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x65, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x2a,
	0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x65, 0x70, 0x73, 0x32, 0x38,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0xa8,
	0xa1, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0x8b, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x8b,
	0xe5, 0x8a, 0xa8, 0xe5, 0x88, 0x86, 0xe9, 0x85, 0x8d, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe7,
	0x9a, 0x84, 0xe6, 0xad, 0xa5, 0xe9, 0x95, 0xbf, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x78, 0x0a, 0x11, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0d, 0x42, 0x4a, 0x92, 0x41, 0x47, 0x2a, 0x11, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x73, 0x32, 0x32, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f,
	0xe4, 0xb8, 0x8b, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x88, 0x86, 0xe9, 0x85, 0x8d, 0xe5,
	0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe7, 0x9a, 0x84, 0xe6, 0xad, 0xa5, 0xe9, 0x95, 0xbf, 0x52, 0x11,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x65, 0x70,
	0x73, 0x12, 0x61, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x11, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x73,
	0x32, 0x23, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c,
	0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0x8b, 0xe7, 0x9a, 0x84, 0xe4, 0xbd, 0xbf, 0xe7,
	0x94, 0xa8, 0xe7, 0x8e, 0x87, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x76, 0x0a, 0x0b, 0x76, 0x70, 0x63, 0x43, 0x6e, 0x69, 0x4d, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x0b, 0x76, 0x70, 0x63,
	0x43, 0x6e, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x32, 0x25, 0x76, 0x70, 0x63, 0x2d, 0x63, 0x6e,
	0x69, 0xe6, 0x8f, 0x92, 0xe4, 0xbb, 0xb6, 0xe4, 0xb8, 0x8b, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81,
	0xe7, 0x9a, 0x84, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x52,
	0x0b, 0x76, 0x70, 0x63, 0x43, 0x6e, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x3a, 0x3d, 0x92, 0x41,
	0x3a, 0x0a, 0x38, 0x2a, 0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x24, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0xae, 0xb0,
	0xe5, 0xbd, 0x95, 0xe5, 0x85, 0xac, 0xe5, 0x85, 0xb1, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe9,
	0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22, 0x33, 0x0a, 0x0b, 0x45,
	0x6e, 0x76, 0x43, 0x69, 0x64, 0x72, 0x53, 0x74, 0x65, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e,
	0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x22, 0x4f, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xa2, 0x16, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x3f, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x32, 0x0b, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb,
	0x84, 0x49, 0x44, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x5f, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x32, 0x31, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe6, 0x89,
	0x80, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0x49, 0x44, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x1e,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe6, 0x89, 0x80, 0xe5, 0x85, 0xb3, 0xe8,
	0x81, 0x94, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x3c, 0x92, 0x41, 0x39, 0x2a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x32, 0x26, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80,
	0xe5, 0x90, 0xaf, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xef,
	0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x6e,
	0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x0b, 0x61, 0x75, 0x74, 0x6f,
	0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x32, 0x18, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4,
	0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x8c,
	0x01, 0x0a, 0x0e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x3f, 0x92, 0x41,
	0x3c, 0x2a, 0x0e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x32, 0x2a, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xe6, 0x97, 0xb6, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe7, 0x9a,
	0x84, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x52, 0x0e, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x69, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x32, 0x1d, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0x9d, 0xe5,
	0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x6d, 0x0a, 0x06, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x32, 0x21, 0xe6, 0x96,
	0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96,
	0xe7, 0x9a, 0x84, 0xe6, 0xb1, 0xa1, 0xe7, 0x82, 0xb9, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x4f,
	0x53, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4e, 0x92, 0x41, 0x4b, 0x2a, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x4f, 0x53, 0x32, 0x41, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe9,
	0x80, 0x89, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x4f, 0x53,
	0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0x82, 0xe7, 0x85, 0xa7, 0xe4, 0xba, 0x91, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xe4, 0xb8, 0xad, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe7, 0x9a, 0x84, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x80, 0xbc, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x53, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6b, 0x92, 0x41, 0x68, 0x2a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x5b, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0xbf, 0xe4, 0xba, 0x8e,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x92, 0x8c, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xef,
	0xbc, 0x8c, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe4, 0xb8, 0x8e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe4, 0xbf, 0x9d, 0xe6, 0x8c, 0x81, 0xe4, 0xb8,
	0x80, 0xe8, 0x87, 0xb4, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12,
	0xd3, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x42, 0xb6, 0x01, 0x92, 0x41, 0xb2, 0x01, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x32, 0xa5, 0x01, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe5,
	0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe5, 0xae, 0x9e, 0xe7, 0x8e, 0xb0, 0xef, 0xbc, 0x8c, 0xe7, 0x94,
	0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0xa6, 0x86, 0xe7, 0x9b, 0x96, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xe4, 0xb8, 0xad, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89,
	0xe7, 0x9a, 0x84, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe8, 0xb0, 0x83, 0xe6, 0x95, 0xb4, 0xe5, 0xae, 0x9e, 0xe7, 0x8e, 0xb0, 0xe7, 0x9a, 0x84,
	0xe7, 0xbb, 0x86, 0xe8, 0x8a, 0x82, 0xe3, 0x80, 0x82, 0xe4, 0xbe, 0xbf, 0xe4, 0xba, 0x8e, 0xe5,
	0x9c, 0xa8, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0x91, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2,
	0x83, 0xe4, 0xb8, 0xad, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a,
	0xe4, 0xb9, 0x89, 0xe7, 0x9a, 0x84, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xef, 0xbc, 0x8c, 0xe4,
	0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0xc8, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0xaf, 0x01, 0x92, 0x41, 0x69, 0x2a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x32, 0x5f, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0xef, 0xbc, 0x8c, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0xef, 0xbc, 0x8c, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e,
	0x47, 0xef, 0xbc, 0x8c, 0x46, 0x41, 0x4c, 0x55, 0x52, 0x45, 0xef, 0xbc, 0x8c, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0xef, 0xbc, 0x8c, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0xfa, 0x42, 0x40, 0x72, 0x3e, 0x52, 0x08, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0x52, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x52, 0x08, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x52, 0x06, 0x46, 0x41, 0x4c, 0x55, 0x52, 0x45, 0x52,
	0x0e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52,
	0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x68, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x48, 0x92, 0x41, 0x45, 0x2a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x49, 0x44, 0x32, 0x37, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49,
	0x44, 0xe5, 0xaf, 0xb9, 0xe6, 0x8e, 0xa5, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe7, 0x94, 0xb3, 0xe8,
	0xaf, 0xb7, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12, 0x72, 0x0a, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x30,
	0x92, 0x41, 0x25, 0x2a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x32, 0x15, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe5, 0xae, 0x9e, 0xe4,
	0xbe, 0x8b, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x62,
	0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x10, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x32,
	0x1f, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0xe5, 0x9c, 0xa8, 0xe5, 0x90,
	0x84, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8a, 0xe7, 0x9a, 0x84, 0x20, 0x49, 0x44,
	0x52, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x12, 0x6b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x2a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x32, 0x27, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7,
	0x8b, 0xe5, 0x8c, 0x96, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xa0, 0x87,
	0xe7, 0xad, 0xbe, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0xb5, 0x01, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x8e, 0x01, 0x92, 0x41, 0x8a, 0x01, 0x2a, 0x0d,
	0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x32, 0x79, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x29, 0xe3,
	0x80, 0x82, 0xe6, 0x99, 0xae, 0xe9, 0x80, 0x9a, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc,
	0xb8, 0xe7, 0xbc, 0xa9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe5, 0x92, 0x8c,
	0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4,
	0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0x2c, 0x20,
	0xe5, 0x8d, 0xb3, 0x43, 0x56, 0x4d, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x88, 0x96, 0x49,
	0x44, 0x43, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x72, 0x65,
	0x61, 0x42, 0x51, 0x92, 0x41, 0x4e, 0x2a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x32, 0x46, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba,
	0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x28, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0xe4, 0xb8, 0x8d, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x2c, 0x20, 0xe5, 0x88, 0x99, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba,
	0xe5, 0x9f, 0x9f, 0x29, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x89, 0x01, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x2a, 0x09, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x31, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe6, 0xb1, 0xa0, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0x2c, 0xe5, 0xad, 0x98,
	0xe5, 0x82, 0xa8, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xe7, 0xad, 0x89, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x3a, 0x51, 0x92, 0x41, 0x4e, 0x0a, 0x4c, 0x2a, 0x09, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x3f, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84,
	0xef, 0xbc, 0x8c, 0xe5, 0xaf, 0xb9, 0xe8, 0x93, 0x9d, 0xe9, 0xb2, 0xb8, 0xe3, 0x80, 0x81, 0xe8,
	0x85, 0xbe, 0xe8, 0xae, 0xaf, 0xe4, 0xba, 0x91, 0xe3, 0x80, 0x81, 0x41, 0x57, 0x53, 0xe5, 0xbc,
	0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0x9b,
	0xe5, 0xb0, 0x81, 0xe8, 0xa3, 0x85, 0x22, 0x8c, 0x01, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x72, 0x65, 0x61, 0x12, 0x3a, 0x0a, 0x09, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x62, 0x6b,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x0c, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5,
	0x9f, 0x9f, 0x20, 0x49, 0x44, 0x52, 0x09, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0x12, 0x43, 0x0a, 0x0b, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0b, 0x62, 0x6b, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5,
	0x9f, 0x9f, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x81, 0x12, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x87, 0x01, 0x0a, 0x0d, 0x61,
	0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x61, 0x92, 0x41, 0x5e, 0x2a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x32, 0x4d, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc,
	0xb8, 0xe7, 0xbc, 0xa9, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe5, 0xbf, 0xbd, 0xe7, 0x95,
	0xa5, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0x49, 0x44, 0xe4, 0xb8, 0xba, 0xe8, 0x87, 0xaa, 0xe5,
	0xbb, 0xba, 0x49, 0x44, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe4, 0xba, 0x91, 0xe8, 0xae, 0xbe,
	0xe6, 0x96, 0xbd, 0x49, 0x44, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x49, 0x44, 0x12, 0x55, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92,
	0x41, 0x28, 0x2a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x32, 0x15, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc,
	0xa9, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f,
	0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x6d,
	0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x30, 0x92, 0x41,
	0x23, 0x2a, 0x07, 0x6d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x18, 0xe4, 0xbc, 0xb8, 0xe7,
	0xbc, 0xa9, 0xe7, 0xbb, 0x84, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe5, 0xae, 0x9e, 0xe4, 0xbe,
	0x8b, 0xe6, 0x95, 0xb0, 0xfa, 0x42, 0x07, 0x2a, 0x05, 0x18, 0xe8, 0x07, 0x28, 0x00, 0x52, 0x07,
	0x6d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x36, 0x92, 0x41, 0x29, 0x2a, 0x07, 0x6d,
	0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x1e, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc,
	0xb8, 0xe7, 0xbc, 0xa9, 0xe7, 0xbb, 0x84, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0xae, 0x9e,
	0xe4, 0xbe, 0x8b, 0xe6, 0x95, 0xb0, 0xfa, 0x42, 0x07, 0x2a, 0x05, 0x18, 0xe8, 0x07, 0x28, 0x00,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2d,
	0x92, 0x41, 0x2a, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65,
	0x32, 0x1b, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xe6, 0x9c,
	0x9f, 0xe6, 0x9c, 0x9b, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe6, 0x95, 0xb0, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x70,
	0x63, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x05,
	0x76, 0x70, 0x63, 0x49, 0x44, 0x32, 0x1b, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8,
	0xe7, 0xbc, 0xa9, 0xe7, 0xbb, 0x84, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0x56, 0x50, 0x43, 0x20,
	0x49, 0x44, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x79, 0x0a, 0x0f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x4f, 0x92, 0x41, 0x4c, 0x2a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x32, 0x39, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7,
	0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xe7, 0xbb, 0x84, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6,
	0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe5, 0x86, 0xb7, 0xe5, 0x8d, 0xb4, 0xe5, 0x91,
	0xa8, 0xe6, 0x9c, 0x9f, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x33, 0x30, 0x30,
	0xe7, 0xa7, 0x92, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6f, 0x6c,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0xa6, 0x01, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49,
	0x44, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x87, 0x01, 0x92, 0x41, 0x83, 0x01, 0x2a,
	0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x73, 0x32, 0x76, 0xe5, 0xbc, 0xb9, 0xe6,
	0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xe7, 0xbb, 0x84, 0xe6, 0x89, 0xa9, 0xe5, 0xae,
	0xb9, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe9, 0xa6, 0x96, 0xe9, 0x80, 0x89, 0xe7, 0x9a, 0x84,
	0xe7, 0x9a, 0x84, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0xa4,
	0x9a, 0xe4, 0xb8, 0xaa, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0x49, 0x44, 0xe6, 0x8c, 0x89, 0xe7,
	0x85, 0xa7, 0xe5, 0x85, 0x88, 0xe5, 0x90, 0x8e, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0xe7, 0xa1,
	0xae, 0xe8, 0xae, 0xa4, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0xef, 0xbc, 0x8c,
	0xe9, 0x9d, 0xa0, 0xe5, 0x89, 0x8d, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0xe9,
	0xab, 0x98, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x73, 0x12, 0x9b, 0x01,
	0x0a, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x84, 0x01,
	0x92, 0x41, 0x80, 0x01, 0x2a, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x32, 0x77, 0xe5, 0xbc, 0xb9,
	0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xe7, 0xbb, 0x84, 0xe6, 0x89, 0xa9, 0xe5,
	0xae, 0xb9, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe9, 0xa6, 0x96, 0xe9, 0x80, 0x89, 0xe7, 0x9a,
	0x84, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5,
	0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe6, 0x8c,
	0x89, 0xe7, 0x85, 0xa7, 0xe5, 0x85, 0x88, 0xe5, 0x90, 0x8e, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f,
	0xe7, 0xa1, 0xae, 0xe8, 0xae, 0xa4, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0xef,
	0xbc, 0x8c, 0xe9, 0x9d, 0xa0, 0xe5, 0x89, 0x8d, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba,
	0xa7, 0xe9, 0xab, 0x98, 0x52, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0xb6, 0x02, 0x0a, 0x0b,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x93, 0x02, 0x92, 0x41, 0x8f, 0x02, 0x2a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0xff, 0x01, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xae,
	0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x97, 0xb6, 0xe7, 0x9a, 0x84,
	0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xef, 0xbc, 0x9a, 0x49,
	0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x28, 0xe6,
	0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0x35, 0xe6, 0xac, 0xa1, 0x29, 0xef, 0xbc, 0x8c, 0x49, 0x4e, 0x43,
	0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41,
	0x4c, 0x53, 0xef, 0xbc, 0x8c, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0xe3, 0x80, 0x82,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0xba, 0x49, 0x4d, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0xe3, 0x80, 0x82, 0xe6, 0x89,
	0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xbc, 0x9a,
	0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x88, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0xe5, 0x92, 0x8c, 0x7a,
	0x6f, 0x6e, 0x65, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe9, 0x80, 0x90, 0xe4, 0xb8, 0x80, 0xe5,
	0xb0, 0x9d, 0xe8, 0xaf, 0x95, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe7, 0x9b, 0xb4, 0xe5, 0x88, 0xb0, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0xa4, 0xb1,
	0xe8, 0xb4, 0xa5, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe6,
	0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x88, 0xe5, 0x85, 0xa8, 0xe5, 0xa4,
	0xb1, 0xe8, 0xb4, 0xa5, 0xe3, 0x80, 0x82, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0xea, 0x01, 0x0a, 0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5a, 0x6f,
	0x6e, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0xb3, 0x01, 0x92, 0x41, 0xaf, 0x01, 0x2a, 0x15, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x32, 0x95, 0x01, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0xe5, 0x80, 0xbc, 0xef, 0xbc,
	0x9a, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0xef, 0xbc, 0x8c, 0x45, 0x51, 0x55, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0xe3, 0x80, 0x82, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0xef,
	0xbc, 0x9a, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x9c, 0xa8, 0xe9, 0xab, 0x98, 0xe4, 0xbc,
	0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91,
	0xe4, 0xb8, 0x8e, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe3, 0x80, 0x82, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x49, 0x54, 0x59, 0xef, 0xbc, 0x9a, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0x8f, 0xaf, 0xe7,
	0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe3, 0x80, 0x81, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe6, 0x9c,
	0xba, 0xe4, 0xbc, 0x9a, 0xe5, 0x9d, 0x87, 0xe8, 0xa1, 0xa1, 0x52, 0x15, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0xa7, 0x01, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x7b, 0x92, 0x41,
	0x78, 0x2a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x32, 0x64, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe7, 0x9b, 0x91, 0xe6, 0x8e,
	0xa7, 0xe4, 0xb8, 0x8d, 0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe6, 0x9b, 0xbf, 0xe6, 0x8d, 0xa2, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xef, 0xbc, 0x8c, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xe3, 0x80, 0x82, 0xe8, 0xbf, 0x9e,
	0xe7, 0xbb, 0xad, 0x31, 0xe5, 0x88, 0x86, 0xe9, 0x92, 0x9f, 0x70, 0x69, 0x6e, 0x67, 0xe4, 0xb8,
	0x8d, 0xe9, 0x80, 0x9a, 0xe5, 0x88, 0x99, 0xe8, 0xa7, 0x86, 0xe4, 0xb8, 0xba, 0xe4, 0xb8, 0x8d,
	0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7, 0xef, 0xbc, 0x81, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0xec, 0x01, 0x0a, 0x0b,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0xc9, 0x01, 0x92, 0x41, 0xc5, 0x01, 0x2a, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x32, 0xb5, 0x01, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0xa8,
	0xa1, 0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x8c, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x5f, 0x53,
	0x43, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x28, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x29, 0xef, 0xbc,
	0x9a, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x97, 0xb6, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xef, 0xbc, 0x8c, 0xe7, 0xbc, 0xa9, 0xe5,
	0xae, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x94, 0x80, 0xe6, 0xaf, 0x81, 0xe5, 0xae, 0x9e, 0xe4, 0xbe,
	0x8b, 0xef, 0xbc, 0x9b, 0x57, 0x41, 0x4b, 0x45, 0x5f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x50, 0x45, 0x44, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0xef, 0xbc, 0x9a, 0xe7, 0xbc,
	0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x97, 0xb6, 0xe5, 0x85, 0xb3, 0xe6, 0x9c, 0xba, 0xe4, 0xb8, 0x8d,
	0xe9, 0x94, 0x80, 0xe6, 0xaf, 0x81, 0xef, 0xbc, 0x8c, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe6,
	0x97, 0xb6, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe5, 0x94, 0xa4, 0xe9, 0x86, 0x92, 0xe5, 0x85,
	0xb3, 0xe6, 0x9c, 0xba, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe3, 0x80, 0x82, 0x52, 0x0b, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x76, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x32, 0x2a, 0xe5, 0xae, 0x9a, 0xe6,
	0x97, 0xb6, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x5f, 0x92, 0x41, 0x5c, 0x2a, 0x0b, 0x61,
	0x75, 0x74, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x32, 0x4d, 0xe5, 0xbc, 0x80, 0xe5,
	0x90, 0xaf, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0x47, 0x4b,
	0x45, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0x2c, 0xe5, 0xa6,
	0x82, 0xe6, 0x9e, 0x9c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xb8, 0xba, 0xe5, 0x8f, 0x91,
	0xe5, 0xb8, 0x83, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x2c, 0xe5, 0x88, 0x99, 0xe5, 0xbc, 0xba,
	0xe5, 0x88, 0xb6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x61, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0x92, 0x41, 0x3c,
	0x2a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x32, 0x2d, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x65, 0x6b, 0x73, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1,
	0xa0, 0xe6, 0x97, 0xb6, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0x69, 0x61, 0x6d,
	0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x32, 0x15, 0xe5, 0xae, 0x9a, 0xe6, 0x97, 0xb6, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0x6a, 0x6f,
	0x62, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80,
	0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x1c, 0x2a, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x32, 0x10, 0xe5, 0xae, 0x9a, 0xe6, 0x97, 0xb6,
	0x63, 0x72, 0x6f, 0x6e, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x02, 0x18, 0x80, 0x08, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x63,
	0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0x92, 0x41,
	0x4c, 0x2a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x32, 0x44, 0xe5, 0xae, 0x9a, 0xe6, 0x97, 0xb6, 0x63,
	0x72, 0x6f, 0x6e, 0xe6, 0x97, 0xb6, 0xe5, 0x8c, 0xba, 0x2c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c,
	0xe4, 0xb8, 0x8d, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe5, 0x8c, 0xba, 0xe5,
	0x88, 0x99, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x98, 0xaf, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a,
	0xa1, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe6, 0x97, 0xb6, 0xe5, 0x8c, 0xba, 0x52, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x0a, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x32, 0x0f, 0xe6, 0x9c, 0x9f, 0xe6, 0x9c, 0x9b,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x95, 0xb0, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x4e, 0x75, 0x6d, 0x3a, 0x2d, 0x92, 0x41, 0x2a, 0x0a, 0x28, 0x2a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x32, 0x1b, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0xe5, 0xae, 0x9a, 0xe6, 0x97, 0xb6, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0x22, 0x8a, 0x02, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73,
	0x6b, 0x12, 0x95, 0x01, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x79, 0x92, 0x41, 0x76, 0x2a, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x6a, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x53,
	0x49, 0x43, 0xef, 0xbc, 0x88, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xef, 0xbc, 0x89, 0x2c, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x53, 0x44, 0x2c, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x42,
	0x41, 0x53, 0x45, 0x2c, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53, 0x53, 0x44, 0x2c, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x28, 0xe9, 0xab, 0x98, 0xe6,
	0x80, 0xa7, 0xe8, 0x83, 0xbd, 0xe4, 0xba, 0x91, 0xe7, 0xa1, 0xac, 0xe7, 0x9b, 0x98, 0x29, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x66, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4a, 0x92, 0x41, 0x47,
	0x2a, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x3b, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe5, 0xa4, 0xa7, 0xe5, 0xb0, 0x8f, 0xef, 0xbc, 0x8c, 0x31, 0x30,
	0x47, 0xe8, 0xb5, 0xb7, 0xe8, 0xb7, 0xb3, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0xe4, 0xb8, 0xba, 0x30, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xba, 0x30, 0xe6, 0x97, 0xb6, 0xe4, 0xb8,
	0x8d, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x8c, 0x05, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x69, 0x73, 0x6b, 0x12, 0x95, 0x01, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x79, 0x92, 0x41, 0x76, 0x2a, 0x08, 0x64, 0x69, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x32, 0x6a, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x42,
	0x41, 0x53, 0x49, 0x43, 0xef, 0xbc, 0x88, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xef, 0xbc, 0x89,
	0x2c, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x53, 0x44, 0x2c, 0x43, 0x4c, 0x4f, 0x55, 0x44,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x2c, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53, 0x53, 0x44, 0x2c,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x28, 0xe9, 0xab,
	0x98, 0xe6, 0x80, 0xa7, 0xe8, 0x83, 0xbd, 0xe4, 0xba, 0x91, 0xe7, 0xa1, 0xac, 0xe7, 0x9b, 0x98,
	0x29, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x66, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4a, 0x92,
	0x41, 0x47, 0x2a, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x3b, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe5, 0xa4, 0xa7, 0xe5, 0xb0, 0x8f, 0xef, 0xbc, 0x8c,
	0x31, 0x30, 0x47, 0xe8, 0xb5, 0xb7, 0xe8, 0xb7, 0xb3, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x30, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xba, 0x30, 0xe6, 0x97, 0xb6,
	0xe4, 0xb8, 0x8d, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x0a, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x32, 0x1b, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6,
	0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x28, 0x65, 0x78, 0x74, 0x33, 0x2f, 0x65, 0x78, 0x74, 0x34,
	0x2f, 0x78, 0x66, 0x73, 0x29, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x6a, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41,
	0x6e, 0x64, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3a, 0x92,
	0x41, 0x37, 0x2a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x6e,
	0x64, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x21, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe8, 0x87,
	0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe7, 0x9b, 0x98,
	0xe5, 0xb9, 0xb6, 0xe6, 0x8c, 0x82, 0xe8, 0xbd, 0xbd, 0x52, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a,
	0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x32, 0x0c, 0xe6, 0x8c, 0x82, 0xe8, 0xbd, 0xbd, 0xe7, 0x9b, 0xae, 0xe5,
	0xbd, 0x95, 0x52, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x7f, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x56, 0x2a, 0x0d, 0x64, 0x69, 0x73,
	0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x45, 0xe6, 0x8c, 0x82, 0xe8,
	0xbd, 0xbd, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x90, 0x8d, 0xe6, 0x88, 0x96, 0xe5, 0x88,
	0x86, 0xe5, 0x8c, 0xba, 0xe5, 0x90, 0x8d, 0xef, 0xbc, 0x8c, 0xe5, 0xbd, 0x93, 0xe4, 0xb8, 0x94,
	0xe4, 0xbb, 0x85, 0xe5, 0xbd, 0x93, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe5, 0xb7, 0xb2, 0xe6,
	0x9c, 0x89, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x9c, 0x80, 0xe8, 0xa6,
	0x81, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xaa, 0x07, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0xa1, 0x02, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0xf0, 0x01, 0x92, 0x41, 0xec, 0x01, 0x2a, 0x12, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32,
	0xd5, 0x01, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe8, 0xae, 0xa1, 0xe8, 0xb4, 0xb9, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xe3, 0x80, 0x82, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48,
	0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x49, 0x44, 0xef, 0xbc, 0x9a, 0xe9, 0xa2, 0x84, 0xe4, 0xbb,
	0x98, 0xe8, 0xb4, 0xb9, 0xe6, 0x8c, 0x89, 0xe5, 0xb8, 0xa6, 0xe5, 0xae, 0xbd, 0xe7, 0xbb, 0x93,
	0xe7, 0xae, 0x97, 0xef, 0xbc, 0x8c, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x4f,
	0x53, 0x54, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0xef, 0xbc,
	0x9a, 0xe6, 0xb5, 0x81, 0xe9, 0x87, 0x8f, 0xe6, 0x8c, 0x89, 0xe5, 0xb0, 0x8f, 0xe6, 0x97, 0xb6,
	0xe5, 0x90, 0x8e, 0xe4, 0xbb, 0x98, 0xe8, 0xb4, 0xb9, 0xef, 0xbc, 0x8c, 0x42, 0x41, 0x4e, 0x44,
	0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x42,
	0x59, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0xef, 0xbc, 0x9a, 0xe5, 0xb8, 0xa6, 0xe5, 0xae, 0xbd, 0xe6,
	0x8c, 0x89, 0xe5, 0xb0, 0x8f, 0xe6, 0x97, 0xb6, 0xe5, 0x90, 0x8e, 0xe4, 0xbb, 0x98, 0xe8, 0xb4,
	0xb9, 0xef, 0xbc, 0x8c, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x50, 0x41,
	0x43, 0x4b, 0x41, 0x47, 0x45, 0xef, 0xbc, 0x9a, 0xe5, 0xb8, 0xa6, 0xe5, 0xae, 0xbd, 0xe5, 0x8c,
	0x85, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x14,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x57, 0x92, 0x41, 0x54, 0x2a,
	0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x32, 0x3c, 0xe5, 0x85, 0xac, 0xe7, 0xbd, 0x91, 0xe5, 0x87, 0xba,
	0xe5, 0xb8, 0xa6, 0xe5, 0xae, 0xbd, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0xef, 0xbc, 0x8c, 0xe5,
	0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xef, 0xbc, 0x9a, 0x4d, 0x62, 0x70, 0x73, 0xe3, 0x80, 0x82, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x80, 0xbc, 0xef, 0xbc, 0x9a, 0x30, 0x4d, 0x62, 0x70, 0x73,
	0xe3, 0x80, 0x82, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x78,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x6b, 0x0a, 0x10, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x50, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x49, 0x50, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x32, 0x28, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe5, 0x88, 0x86, 0xe9, 0x85, 0x8d, 0xe5, 0x85, 0xac, 0xe7, 0xbd, 0x91, 0x49, 0x50,
	0xe3, 0x80, 0x82, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0xe3, 0x80, 0x82, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x12, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x12, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x32, 0x11, 0xe5, 0x85, 0xb1,
	0xe4, 0xba, 0xab, 0xe5, 0xb8, 0xa6, 0xe5, 0xae, 0xbd, 0xe5, 0x8c, 0x85, 0x49, 0x44, 0x52, 0x12,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x49, 0x50, 0x32, 0x0e, 0xe5, 0x85, 0xac, 0xe7, 0xbd, 0x91, 0x69, 0x70, 0xe5, 0x9c, 0xb0,
	0xe5, 0x9d, 0x80, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x12, 0x77, 0x0a,
	0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x69, 0x64,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x49, 0x92, 0x41, 0x46, 0x2a, 0x11, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x69, 0x64, 0x72, 0x73,
	0x32, 0x31, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0xe7, 0x9a, 0x84, 0xe5, 0x85, 0xac, 0xe7, 0xbd, 0x91, 0x49, 0x70, 0x20, 0x63,
	0x69, 0x64, 0x72, 0x52, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x69, 0x64, 0x72, 0x73, 0x12, 0x65, 0x0a, 0x14, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x14, 0x6e, 0x6f, 0x64, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x44, 0x32,
	0x16, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x85, 0xac, 0xe7, 0xbd, 0x91, 0x69, 0x70, 0xe5,
	0x89, 0x8d, 0xe7, 0xbc, 0x80, 0x49, 0x44, 0x52, 0x14, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x50, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x44, 0x22, 0xba, 0x19,
	0x0a, 0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x32, 0x0c, 0xe5, 0x8f,
	0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x32, 0x0e, 0xe7, 0xa7, 0x81,
	0xe6, 0x9c, 0x89, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0x49, 0x44, 0x52, 0x05, 0x76, 0x70, 0x63,
	0x49, 0x44, 0x12, 0x50, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x2a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x44, 0x32, 0x25, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0x49, 0x44, 0x2c, 0x20, 0xe5,
	0x92, 0x8c, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe4, 0xb8,
	0x80, 0xe4, 0xb8, 0x80, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4e, 0x75, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x08, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x4e, 0x75, 0x6d, 0x32, 0x12, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe5, 0xae, 0x9e,
	0xe4, 0xbe, 0x8b, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x4e, 0x75, 0x6d, 0x12, 0x67, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x55, 0x92, 0x41, 0x52, 0x2a, 0x03, 0x43, 0x50, 0x55, 0x32, 0x4b, 0xe6, 0x9c, 0xba, 0xe5,
	0x9e, 0x8b, 0x43, 0x50, 0x55, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8,
	0x8e, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0xe4, 0xba, 0x92, 0xe6, 0x96, 0xa5, 0xef, 0xbc, 0x8c, 0xe6, 0xaf, 0x94, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xe4, 0xbc, 0x98, 0xe5, 0x85,
	0x88, 0xe7, 0xba, 0xa7, 0xe9, 0xab, 0x98, 0x52, 0x03, 0x43, 0x50, 0x55, 0x12, 0x67, 0x0a, 0x03,
	0x4d, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x55, 0x92, 0x41, 0x52, 0x2a, 0x03,
	0x4d, 0x65, 0x6d, 0x32, 0x4b, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x4d, 0x65, 0x6d, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8e, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xe4, 0xba, 0x92, 0xe6,
	0x96, 0xa5, 0xef, 0xbc, 0x8c, 0xe6, 0xaf, 0x94, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0xe9, 0xab, 0x98,
	0x52, 0x03, 0x4d, 0x65, 0x6d, 0x12, 0x77, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x65, 0x92, 0x41, 0x62, 0x2a, 0x03, 0x47, 0x50, 0x55, 0x32, 0x5b, 0xe6, 0x9c,
	0xba, 0xe5, 0x9e, 0x8b, 0x47, 0x50, 0x55, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c,
	0xe4, 0xb8, 0x8e, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0xe4, 0xba, 0x92, 0xe6, 0x96, 0xa5, 0xef, 0xbc, 0x8c, 0xe6, 0xaf,
	0x94, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xe4, 0xbc, 0x98,
	0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0xe9, 0xab, 0x98, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe4,
	0xbb, 0xa5, 0xe4, 0xbc, 0x9a, 0xe4, 0xb8, 0xba, 0x30, 0x52, 0x03, 0x47, 0x50, 0x55, 0x12, 0xa3,
	0x01, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7f, 0x92, 0x41, 0x7c, 0x2a, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x6c, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xef,
	0xbc, 0x8c, 0xe8, 0x8b, 0xa5, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x43, 0x50, 0x55, 0xe5, 0x92,
	0x8c, 0xe5, 0x86, 0x85, 0xe5, 0xad, 0x98, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0xe5, 0x80, 0xbc,
	0xe4, 0xb8, 0x8d, 0xe5, 0xbc, 0xba, 0xe5, 0x88, 0xb6, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0xe8, 0x87, 0xaa, 0xe8, 0xa1, 0x8c, 0xe5, 0x90, 0x91, 0xe4, 0xb8, 0x8a, 0xe5, 0xb0,
	0xb1, 0xe8, 0xbf, 0x91, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0xda, 0x02, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0xa9, 0x02, 0x92, 0x41, 0xfb, 0x01, 0x2a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0xe4, 0x01, 0xe6,
	0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe8, 0xae, 0xa1, 0xe8, 0xb4, 0xb9, 0xe6, 0xa8, 0xa1, 0xe5, 0x9e,
	0x8b, 0xef, 0xbc, 0x8c, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0x50, 0x4f, 0x53, 0x54, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x42,
	0x59, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0xe6, 0x8c, 0x89, 0xe5, 0xb0, 0x8f, 0xe6, 0x97, 0xb6, 0xe5,
	0x90, 0x8e, 0xe4, 0xbb, 0x98, 0xe8, 0xb4, 0xb9, 0xef, 0xbc, 0x8c, 0x53, 0x50, 0x4f, 0x54, 0x50,
	0x41, 0x49, 0x44, 0xe7, 0xab, 0x9e, 0xe4, 0xbb, 0xb7, 0xe4, 0xbb, 0x98, 0xe8, 0xb4, 0xb9, 0xef,
	0xbc, 0x8c, 0x50, 0x52, 0x45, 0x50, 0x41, 0x49, 0x44, 0xe5, 0x8c, 0x85, 0xe5, 0xb9, 0xb4, 0xe5,
	0x8c, 0x85, 0xe6, 0x9c, 0x88, 0xe3, 0x80, 0x82, 0x61, 0x77, 0x73, 0xe5, 0x8c, 0x85, 0xe5, 0x90,
	0xab, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0xe6, 0x8c, 0x89, 0xe9, 0x9c, 0x80,
	0xe4, 0xbb, 0x98, 0xe8, 0xb4, 0xb9, 0x2c, 0x53, 0x50, 0x4f, 0x54, 0xe7, 0xab, 0x9e, 0xe4, 0xbb,
	0xb7, 0xe4, 0xbb, 0x98, 0xe8, 0xb4, 0xb9, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe4, 0xb8, 0x8d,
	0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0x42, 0x43, 0x53, 0xe6, 0x9a, 0x82, 0xe6,
	0x97, 0xb6, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe5, 0x8c,
	0x85, 0xe5, 0xb9, 0xb4, 0xe5, 0x8c, 0x85, 0xe6, 0x9c, 0x88, 0xe7, 0x9a, 0x84, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x27, 0x72, 0x25, 0x52, 0x07, 0x50, 0x52, 0x45, 0x50, 0x41, 0x49,
	0x44, 0x52, 0x10, 0x50, 0x4f, 0x53, 0x54, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x48,
	0x4f, 0x55, 0x52, 0x52, 0x08, 0x53, 0x50, 0x4f, 0x54, 0x50, 0x41, 0x49, 0x44, 0x52, 0x12, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b,
	0x42, 0x53, 0x92, 0x41, 0x50, 0x2a, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73,
	0x6b, 0x32, 0x42, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe7, 0x9b, 0x98, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xef, 0xbc, 0x8c, 0x42, 0x43, 0x53, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe8, 0xae,
	0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0xba, 0xe9, 0xab, 0x98, 0xe6, 0x80, 0xa7, 0xe8, 0x83, 0xbd,
	0xe4, 0xba, 0x91, 0xe7, 0x9b, 0x98, 0xef, 0xbc, 0x8c, 0xe5, 0xa4, 0xa7, 0xe5, 0xb0, 0x8f, 0xe4,
	0xb8, 0xba, 0x35, 0x30, 0x47, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73,
	0x6b, 0x12, 0xac, 0x01, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x42,
	0x74, 0x92, 0x41, 0x71, 0x2a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x32,
	0x64, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xef, 0xbc, 0x8c, 0xe6, 0x97, 0xa0, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe8, 0xae, 0xbe, 0xe7,
	0xbd, 0xae, 0xe5, 0x88, 0x99, 0xe4, 0xb8, 0x8d, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0x28, 0xe5,
	0xb7, 0xb2, 0xe5, 0xba, 0x9f, 0xe5, 0xbc, 0x83, 0xe6, 0x8e, 0x89, 0xef, 0xbc, 0x8c, 0xe7, 0xbb,
	0x9f, 0xe4, 0xb8, 0x80, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe5, 0x85,
	0xbc, 0xe5, 0xae, 0xb9, 0x29, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73,
	0x12, 0x70, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x37,
	0x92, 0x41, 0x34, 0x2a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x27,
	0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x90, 0xaf, 0xe5, 0x8a, 0xa8, 0xe6,
	0x97, 0xb6, 0xe7, 0x9a, 0x84, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0x95, 0x9c, 0xe5, 0x83,
	0x8f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x85, 0x01, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x57,
	0x92, 0x41, 0x54, 0x2a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x32, 0x3f, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe,
	0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x2c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe4, 0xb8, 0x8d, 0xe8,
	0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe8, 0x87, 0xaa, 0xe5, 0x8a,
	0xa8, 0xe7, 0x94, 0x9f, 0xe6, 0x88, 0x90, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x9f, 0x01, 0x0a, 0x10, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x09, 0x42, 0x73, 0x92, 0x41, 0x70, 0x2a, 0x10, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x32, 0x5c, 0xe6, 0x96,
	0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8, 0xe7, 0xbb, 0x84,
	0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0x49, 0x44, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe4, 0xb8, 0x8d, 0xe5, 0xa1, 0xab,
	0xe5, 0x86, 0x99, 0xef, 0xbc, 0x8c, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0xb3, 0xbb, 0xe7,
	0xbb, 0x9f, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe7, 0x9a, 0x84, 0xe5, 0xae, 0x89, 0xe5, 0x85,
	0xa8, 0xe7, 0xbb, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x12, 0x8b, 0x01, 0x0a,
	0x11, 0x69, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x42, 0x5d, 0x92, 0x41, 0x5a, 0x2a, 0x11, 0x69,
	0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x32, 0x45, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x90, 0xaf, 0xe5, 0x8a,
	0xa8, 0xe6, 0x97, 0xb6, 0xe7, 0x9a, 0x84, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80,
	0xe5, 0x90, 0xaf, 0xe4, 0xba, 0x91, 0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8, 0x2c, 0x20, 0xe9, 0x80,
	0x89, 0xe5, 0xa1, 0xab, 0x20, 0x71, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x52, 0x11, 0x69, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x10, 0x69,
	0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x10, 0x69, 0x73, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x32, 0x3f, 0xe6, 0x96,
	0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x90, 0xaf, 0xe5, 0x8a, 0xa8, 0xe6, 0x97, 0xb6,
	0xe7, 0x9a, 0x84, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe4,
	0xba, 0x91, 0xe7, 0x9b, 0x91, 0xe6, 0x8e, 0xa7, 0x2c, 0x20, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab,
	0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x52, 0x10, 0x69,
	0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xf4, 0x01, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73,
	0x6b, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x42, 0xac, 0x01, 0x92, 0x41, 0xa8, 0x01, 0x2a, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x32, 0x95,
	0x01, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x28, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe7, 0xa3, 0x81,
	0xe7, 0x9b, 0x98, 0xe6, 0x8c, 0x82, 0xe8, 0xbd, 0xbd, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe4,
	0xbb, 0xa5, 0xe5, 0x8f, 0x8a, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe5, 0x8c, 0x96, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0x8b, 0xa5,
	0xe4, 0xb8, 0x8d, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe5, 0x8f, 0xaf, 0xe8, 0x87, 0xaa, 0xe8,
	0xa1, 0x8c, 0xe5, 0xa4, 0x84, 0xe7, 0x90, 0x86, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe5, 0x8c,
	0x96, 0xe6, 0x8c, 0x82, 0xe8, 0xbd, 0xbd, 0x29, 0xef, 0xbc, 0x8c, 0xe6, 0x97, 0xa0, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe5, 0x88, 0x99, 0xe4, 0xb8, 0x8d,
	0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x63, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x2a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x1d, 0xe6, 0x96, 0xb0, 0xe5, 0xae,
	0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4b,
	0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x4e, 0x92, 0x41, 0x4b, 0x2a, 0x07, 0x6b, 0x65, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x32, 0x40, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xa7, 0x81, 0xe9,
	0x92, 0xa5, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe4, 0xb8, 0x8e, 0xe5, 0xaf, 0x86,
	0xe7, 0xa0, 0x81, 0x32, 0xe9, 0x80, 0x89, 0xe4, 0xb8, 0x80, 0xef, 0xbc, 0x8c, 0x32, 0xe8, 0x80,
	0x85, 0xe5, 0x9d, 0x87, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88,
	0xe5, 0xaf, 0x86, 0xe9, 0x92, 0xa5, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x85, 0x01, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92, 0x41, 0x58, 0x2a, 0x0f,
	0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x32,
	0x45, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6,
	0xe5, 0xae, 0xb9, 0xe5, 0x99, 0xa8, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xef, 0xbc, 0x8c, 0x42,
	0x43, 0x53, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x62, 0x63, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x12, 0xa2, 0x01, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x85, 0x01, 0x92, 0x41, 0x81,
	0x01, 0x2a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x32, 0x75, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0x2c, 0x20, 0xe5, 0x8f, 0x96, 0xe5, 0x80,
	0xbc, 0x3a, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x54, 0x43, 0x44, 0x2c, 0x20, 0x57,
	0x4f, 0x52, 0x4b, 0x45, 0x52, 0xe3, 0x80, 0x82, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45,
	0x54, 0x43, 0x44, 0xe5, 0x8f, 0xaa, 0xe6, 0x9c, 0x89, 0xe5, 0x9c, 0xa8, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0x20, 0x49, 0x4e, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x20, 0xe7, 0x8b, 0xac, 0xe7, 0xab, 0x8b, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe6, 0x97, 0xb6, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe6, 0x8c, 0x87, 0xe5,
	0xae, 0x9a, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0xa0, 0x01, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x69, 0x64, 0x42, 0x61, 0x92, 0x41, 0x5e, 0x2a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x32, 0x54, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xa1, 0xe8,
	0xb4, 0xb9, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe3, 0x80, 0x82, 0xe5, 0xbd, 0x93, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0xe4, 0xb8, 0xba, 0xe5, 0x8c, 0x85, 0xe5, 0xb9, 0xb4, 0xe5, 0x8c, 0x85, 0xe6, 0x9c, 0x88, 0xe6,
	0x97, 0xb6, 0xef, 0xbc, 0x8c, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe7, 0xbb, 0xad, 0xe8, 0xb4,
	0xb9, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12,
	0x88, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x3c, 0x92, 0x41,
	0x39, 0x2a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x32, 0x27, 0xe5, 0x85, 0xac, 0xe7, 0xbd, 0x91, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8,
	0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x8f,
	0xaf, 0xe9, 0x80, 0x89, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xd3, 0x04, 0x0a, 0x15, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x69, 0x64, 0x12, 0x93, 0x01, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x7b, 0x92, 0x41, 0x78, 0x2a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x32, 0x6e, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b,
	0xe7, 0x9a, 0x84, 0xe6, 0x97, 0xb6, 0xe9, 0x95, 0xbf, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4,
	0xbd, 0x8d, 0xef, 0xbc, 0x9a, 0xe6, 0x9c, 0x88, 0xe3, 0x80, 0x82, 0xe5, 0x8f, 0x96, 0xe5, 0x80,
	0xbc, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xef, 0xbc, 0x9a, 0x31, 0x2c, 0x20, 0x32, 0x2c, 0x20,
	0x33, 0x2c, 0x20, 0x34, 0x2c, 0x20, 0x35, 0x2c, 0x20, 0x36, 0x2c, 0x20, 0x37, 0x2c, 0x20, 0x38,
	0x2c, 0x20, 0x39, 0x2c, 0x20, 0x31, 0x30, 0x2c, 0x20, 0x31, 0x31, 0x2c, 0x20, 0x31, 0x32, 0x2c,
	0x20, 0x32, 0x34, 0x2c, 0x20, 0x33, 0x36, 0x2c, 0x20, 0x34, 0x38, 0x2c, 0x20, 0x36, 0x30, 0xe3,
	0x80, 0x82, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0xa3, 0x03, 0x0a, 0x09, 0x72,
	0x65, 0x6e, 0x65, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x84,
	0x03, 0x92, 0x41, 0x80, 0x03, 0x2a, 0x09, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x46, 0x6c, 0x61, 0x67,
	0x32, 0xf2, 0x02, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe7, 0xbb, 0xad, 0xe8, 0xb4, 0xb9, 0xe6,
	0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe3, 0x80, 0x82, 0xe5, 0x8f, 0x96, 0xe5, 0x80, 0xbc, 0xe8, 0x8c,
	0x83, 0xe5, 0x9b, 0xb4, 0xef, 0xbc, 0x9a, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x4e, 0x45, 0x57, 0xef, 0xbc, 0x9a, 0xe9,
	0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe8, 0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0xe4, 0xb8, 0x94, 0xe8, 0x87,
	0xaa, 0xe5, 0x8a, 0xa8, 0xe7, 0xbb, 0xad, 0xe8, 0xb4, 0xb9, 0x3b, 0x20, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x59, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x45,
	0x4e, 0x45, 0x57, 0xef, 0xbc, 0x9a, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe8, 0xbf, 0x87, 0xe6,
	0x9c, 0x9f, 0xe4, 0xb8, 0x8d, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe7, 0xbb, 0xad, 0xe8, 0xb4,
	0xb9, 0x3b, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59,
	0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x4e, 0x45,
	0x57, 0xef, 0xbc, 0x9a, 0xe4, 0xb8, 0x8d, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe8, 0xbf, 0x87,
	0xe6, 0x9c, 0x9f, 0xe4, 0xb8, 0x8d, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe7, 0xbb, 0xad, 0xe8,
	0xb4, 0xb9, 0x2e, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x8f, 0x96, 0xe5, 0x80, 0xbc,
	0xef, 0xbc, 0x9a, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x41,
	0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x4e, 0x45, 0x57, 0xe3, 0x80, 0x82, 0xe8, 0x8b, 0xa5,
	0xe8, 0xaf, 0xa5, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe4,
	0xb8, 0xba, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x55, 0x54,
	0x4f, 0x5f, 0x52, 0x45, 0x4e, 0x45, 0x57, 0xef, 0xbc, 0x8c, 0xe5, 0x9c, 0xa8, 0xe8, 0xb4, 0xa6,
	0xe6, 0x88, 0xb7, 0xe4, 0xbd, 0x99, 0xe9, 0xa2, 0x9d, 0xe5, 0x85, 0x85, 0xe8, 0xb6, 0xb3, 0xe7,
	0x9a, 0x84, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb5, 0xe4, 0xb8, 0x8b, 0xef, 0xbc, 0x8c, 0xe5, 0xae,
	0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0xb0, 0xe6, 0x9c, 0x9f, 0xe5, 0x90, 0x8e, 0xe5, 0xb0, 0x86,
	0xe6, 0x8c, 0x89, 0xe6, 0x9c, 0x88, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe7, 0xbb, 0xad, 0xe8,
	0xb4, 0xb9, 0xe3, 0x80, 0x82, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x46, 0x6c, 0x61, 0x67,
	0x22, 0xe7, 0x17, 0x0a, 0x13, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7f, 0x0a, 0x15, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0x92, 0x41, 0x46, 0x2a, 0x15, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x32, 0x2d, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe8, 0x87, 0xaa, 0xe5,
	0xbb, 0xba, 0x49, 0x44, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8a,
	0x49, 0x44, 0x52, 0x15, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x5e, 0x0a, 0x13, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x13, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x32, 0x12, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x13, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6d, 0x92,
	0x41, 0x6a, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x5d, 0xe7,
	0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0xa1, 0xa8, 0xe6, 0x98, 0x8e, 0xe8, 0xaf, 0xa5, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0xb1, 0x9e, 0xe4, 0xba, 0x8e, 0xe5, 0x93, 0xaa, 0xe4, 0xb8, 0xaa,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0xbf, 0xe4, 0xba, 0x8e, 0xe9,
	0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0xa4, 0x8d, 0xe7, 0x94, 0xa8, 0xef, 0xbc, 0x8c, 0xe8, 0xaf,
	0xa5, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8d, 0xe6, 0x98, 0xaf, 0x42, 0x43, 0x53,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x67, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x55, 0x92, 0x41, 0x52, 0x2a, 0x03, 0x43, 0x50, 0x55, 0x32, 0x4b,
	0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x43, 0x50, 0x55, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef,
	0xbc, 0x8c, 0xe4, 0xb8, 0x8e, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xe4, 0xba, 0x92, 0xe6, 0x96, 0xa5, 0xef, 0xbc, 0x8c,
	0xe6, 0xaf, 0x94, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xe4,
	0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0xe9, 0xab, 0x98, 0x52, 0x03, 0x43, 0x50, 0x55,
	0x12, 0x67, 0x0a, 0x03, 0x4d, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x55, 0x92,
	0x41, 0x52, 0x2a, 0x03, 0x4d, 0x65, 0x6d, 0x32, 0x4b, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x4d,
	0x65, 0x6d, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8e, 0xe6, 0x9c,
	0xba, 0xe5, 0x9e, 0x8b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0xe4, 0xba, 0x92, 0xe6, 0x96, 0xa5, 0xef, 0xbc, 0x8c, 0xe6, 0xaf, 0x94, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba,
	0xa7, 0xe9, 0xab, 0x98, 0x52, 0x03, 0x4d, 0x65, 0x6d, 0x12, 0x77, 0x0a, 0x03, 0x47, 0x50, 0x55,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x65, 0x92, 0x41, 0x62, 0x2a, 0x03, 0x47, 0x50, 0x55,
	0x32, 0x5b, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x47, 0x50, 0x55, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8e, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xe4, 0xba, 0x92, 0xe6, 0x96, 0xa5, 0xef,
	0xbc, 0x8c, 0xe6, 0xaf, 0x94, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0xe9, 0xab, 0x98, 0xef, 0xbc, 0x8c,
	0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xbc, 0x9a, 0xe4, 0xb8, 0xba, 0x30, 0x52, 0x03, 0x47,
	0x50, 0x55, 0x12, 0xa3, 0x01, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7f, 0x92, 0x41, 0x7c, 0x2a, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x6c, 0xe6, 0x9c,
	0xba, 0xe5, 0x9e, 0x8b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6,
	0xe4, 0xb8, 0xb2, 0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xa5, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x43,
	0x50, 0x55, 0xe5, 0x92, 0x8c, 0xe5, 0x86, 0x85, 0xe5, 0xad, 0x98, 0xef, 0xbc, 0x8c, 0xe8, 0xaf,
	0xa5, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0x8d, 0xe5, 0xbc, 0xba, 0xe5, 0x88, 0xb6, 0xef, 0xbc, 0x8c,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe8, 0x87, 0xaa, 0xe8, 0xa1, 0x8c, 0xe5, 0x90, 0x91, 0xe4,
	0xb8, 0x8a, 0xe5, 0xb0, 0xb1, 0xe8, 0xbf, 0x91, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe6, 0x9c,
	0xba, 0xe5, 0x9e, 0x8b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0xec, 0x01, 0x0a, 0x12, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0xbb, 0x01, 0x92, 0x41, 0xb7, 0x01, 0x2a, 0x12, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x32, 0xa0, 0x01, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe8, 0xae, 0xa1, 0xe8, 0xb4, 0xb9, 0xe6,
	0xa8, 0xa1, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0x50, 0x4f, 0x53, 0x54, 0x50, 0x41, 0x49, 0x44,
	0x5f, 0x42, 0x59, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0xe6, 0x8c, 0x89, 0xe5, 0xb0, 0x8f, 0xe6, 0x97,
	0xb6, 0xe5, 0x90, 0x8e, 0xe4, 0xbb, 0x98, 0xe8, 0xb4, 0xb9, 0xef, 0xbc, 0x8c, 0x53, 0x50, 0x4f,
	0x54, 0x50, 0x41, 0x49, 0x44, 0xe7, 0xab, 0x9e, 0xe4, 0xbb, 0xb7, 0xe4, 0xbb, 0x98, 0xe8, 0xb4,
	0xb9, 0xef, 0xbc, 0x8c, 0x50, 0x52, 0x45, 0x50, 0x41, 0x49, 0x44, 0xe5, 0x8c, 0x85, 0xe5, 0xb9,
	0xb4, 0xe5, 0x8c, 0x85, 0xe6, 0x9c, 0x88, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe4, 0xb8, 0x8d,
	0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0x42, 0x43, 0x53, 0xe6, 0x9a, 0x82, 0xe6,
	0x97, 0xb6, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe5, 0x8c,
	0x85, 0xe5, 0xb9, 0xb4, 0xe5, 0x8c, 0x85, 0xe6, 0x9c, 0x88, 0xe7, 0x9a, 0x84, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x53, 0x92, 0x41, 0x50, 0x2a, 0x0a, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x32, 0x42, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe7,
	0x9b, 0x98, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0x42, 0x43, 0x53, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0xba, 0xe9, 0xab, 0x98,
	0xe6, 0x80, 0xa7, 0xe8, 0x83, 0xbd, 0xe4, 0xba, 0x91, 0xe7, 0x9b, 0x98, 0xef, 0xbc, 0x8c, 0xe5,
	0xa4, 0xa7, 0xe5, 0xb0, 0x8f, 0xe4, 0xb8, 0xba, 0x35, 0x30, 0x47, 0x52, 0x0a, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x75, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x44,
	0x69, 0x73, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x44, 0x69, 0x73, 0x6b, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x2a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x44,
	0x69, 0x73, 0x6b, 0x73, 0x32, 0x2d, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe6, 0x97, 0xa0, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe5, 0x88, 0x99, 0xe4, 0xb8, 0x8d, 0xe8, 0xb4, 0xad,
	0xe4, 0xb9, 0xb0, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x82,
	0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x36, 0x92, 0x41, 0x33,
	0x2a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x32, 0x21, 0xe5, 0x85, 0xac, 0xe7, 0xbd, 0x91, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xae,
	0xbe, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe5, 0xbb, 0xba, 0xe8, 0xae, 0xae, 0xe8, 0xae, 0xbe,
	0xe7, 0xbd, 0xae, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x63, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35,
	0x92, 0x41, 0x32, 0x2a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x32, 0x1d, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe,
	0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0xaf, 0x01, 0x0a, 0x10, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x82, 0x01, 0x92, 0x41, 0x7f, 0x2a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x32, 0x6b, 0xe6, 0x96, 0xb0,
	0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8, 0xe7, 0xbb, 0x84, 0xe5,
	0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0x49, 0x44, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe4, 0xb8, 0x8d, 0xe5, 0xa1, 0xab, 0xe5,
	0x86, 0x99, 0xef, 0xbc, 0x8c, 0x42, 0x43, 0x53, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0xe5, 0x90, 0x84, 0xe4, 0xba, 0x91, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0xad, 0xe9, 0xa2, 0x84, 0xe7, 0x95, 0x99, 0xe7,
	0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x12, 0x70, 0x0a, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x27, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e,
	0xe4, 0xbe, 0x8b, 0xe5, 0x90, 0xaf, 0xe5, 0x8a, 0xa8, 0xe6, 0x97, 0xb6, 0xe7, 0x9a, 0x84, 0xe9,
	0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x8a, 0x01, 0x0a,
	0x11, 0x69, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x5c, 0x92, 0x41, 0x59, 0x2a, 0x11, 0x69,
	0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x32, 0x44, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x90, 0xaf, 0xe5, 0x8a,
	0xa8, 0xe6, 0x97, 0xb6, 0xe7, 0x9a, 0x84, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80,
	0xe5, 0x90, 0xaf, 0xe4, 0xba, 0x91, 0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8, 0x2c, 0x20, 0xe9, 0x80,
	0x89, 0xe5, 0xa1, 0xab, 0x20, 0x79, 0x75, 0x6e, 0x74, 0x69, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0x52, 0x11, 0x69, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x10, 0x69, 0x73,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x10, 0x69, 0x73, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x32, 0x3f, 0xe6, 0x96, 0xb0,
	0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x90, 0xaf, 0xe5, 0x8a, 0xa8, 0xe6, 0x97, 0xb6, 0xe7,
	0x9a, 0x84, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe4, 0xba,
	0x91, 0xe7, 0x9b, 0x91, 0xe6, 0x8e, 0xa7, 0x2c, 0x20, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0x20,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x52, 0x10, 0x69, 0x73,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x57, 0x92, 0x41, 0x54, 0x2a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x32,
	0x48, 0xe7, 0xbb, 0x8f, 0xe8, 0xbf, 0x87, 0x20, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x20, 0xe7,
	0xbc, 0x96, 0xe7, 0xa0, 0x81, 0xe5, 0x90, 0x8e, 0xe7, 0x9a, 0x84, 0xe8, 0x87, 0xaa, 0xe5, 0xae,
	0x9a, 0xe4, 0xb9, 0x89, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0x80,
	0xe5, 0xa4, 0xa7, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0xb6, 0x85, 0xe8,
	0xbf, 0x87, 0x31, 0x36, 0x4b, 0x42, 0xe3, 0x80, 0x82, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x63, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35,
	0x92, 0x41, 0x32, 0x2a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x1d, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe,
	0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x57,
	0x92, 0x41, 0x54, 0x2a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x48, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0xe7, 0x9a, 0x84, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe7, 0xad, 0x96, 0xe7,
	0x95, 0xa5, 0x2c, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe7, 0x94, 0xa8, 0xe4,
	0xbd, 0x9c, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x81, 0x01, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x4e, 0x92, 0x41,
	0x4b, 0x2a, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x32, 0x40, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe7, 0xa7, 0x81, 0xe9, 0x92, 0xa5, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20,
	0xe4, 0xb8, 0x8e, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x32, 0xe9, 0x80, 0x89, 0xe4, 0xb8, 0x80,
	0xef, 0xbc, 0x8c, 0x32, 0xe8, 0x80, 0x85, 0xe5, 0x9d, 0x87, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae,
	0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe5, 0xaf, 0x86, 0xe9, 0x92, 0xa5, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0xa0, 0x01, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x42, 0x61, 0x92,
	0x41, 0x5e, 0x2a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x32, 0x54, 0xe5, 0xae, 0x9e, 0xe4,
	0xbe, 0x8b, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xa1, 0xe8, 0xb4, 0xb9, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc,
	0x8f, 0xe3, 0x80, 0x82, 0xe5, 0xbd, 0x93, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0xe4, 0xb8, 0xba, 0xe5, 0x8c, 0x85, 0xe5,
	0xb9, 0xb4, 0xe5, 0x8c, 0x85, 0xe6, 0x9c, 0x88, 0xe6, 0x97, 0xb6, 0xef, 0xbc, 0x8c, 0xe8, 0xae,
	0xbe, 0xe7, 0xbd, 0xae, 0xe7, 0xbb, 0xad, 0xe8, 0xb4, 0xb9, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x73, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x61, 0x67, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x42, 0x53, 0x92, 0x41,
	0x50, 0x2a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x67, 0x32, 0x42, 0xe7,
	0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0xa0, 0x87, 0xe8, 0xae, 0xb0, 0xef, 0xbc, 0x8c, 0xe6, 0xa0,
	0x87, 0xe8, 0xae, 0xb0, 0xe4, 0xbb, 0xa3, 0xe8, 0xa1, 0xa8, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8,
	0xe4, 0xba, 0x8e, 0xe6, 0xaf, 0x8f, 0xe4, 0xb8, 0xaa, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7,
	0x9a, 0x84, 0xe9, 0x98, 0xb2, 0xe7, 0x81, 0xab, 0xe5, 0xa2, 0x99, 0xe8, 0xa7, 0x84, 0xe5, 0x88,
	0x99, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x67, 0x1a, 0x3b, 0x0a,
	0x0d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xde, 0x01, 0x0a, 0x07, 0x4b,
	0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x44, 0x32, 0x17, 0xe5, 0xaf, 0x86, 0xe9, 0x92, 0xa5, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0xbf,
	0x85, 0xe5, 0xa1, 0xab, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x44, 0x12, 0x4b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x2a, 0x09, 0x6b, 0x65, 0x79, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x32, 0x1d, 0x6b, 0x65, 0x79, 0xe7, 0xa7, 0x81, 0xe9, 0x92, 0xa5, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x28, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0xe5, 0xad, 0x98, 0xe5,
	0x82, 0xa8, 0x29, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x4b,
	0x0a, 0x09, 0x6b, 0x65, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x2a, 0x09, 0x6b, 0x65, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x32, 0x1d, 0x6b, 0x65, 0x79, 0xe5, 0x85, 0xac, 0xe9, 0x92, 0xa5, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x28, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0x29,
	0x52, 0x09, 0x6b, 0x65, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0xaa, 0x02, 0x0a, 0x09,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x07, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a,
	0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x32, 0x17, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f,
	0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0xad, 0x97, 0xe6, 0xae,
	0xb5, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x09, 0xe9,
	0x95, 0x9c, 0xe5, 0x83, 0x8f, 0xe5, 0x90, 0x8d, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0x92, 0x41, 0x4c, 0x2a, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x3f, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x49, 0x4d, 0x41, 0x47,
	0x45, 0x2f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x2f,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x2f, 0x42, 0x43, 0x53,
	0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x29, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4f,
	0x73, 0x32, 0x0c, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x52,
	0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x73, 0x22, 0xdf, 0x2d, 0x0a, 0x18, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x11, 0x69, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x43, 0x92, 0x41, 0x40, 0x2a, 0x11, 0x69, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x2b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d,
	0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2c, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x52, 0x11, 0x69, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x77, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92, 0x41, 0x58, 0x2a,
	0x08, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x32, 0x4c, 0x65, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x2c, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe7, 0xae, 0x97, 0xe6, 0xb3, 0x95,
	0xef, 0xbc, 0x8c, 0xef, 0xbc, 0x88, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xef, 0xbc, 0x89, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2c, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x2d, 0x77, 0x61, 0x73,
	0x74, 0x65, 0x2c, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x2d, 0x70, 0x6f, 0x64, 0x73, 0x2c, 0x20, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x7a, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x75, 0x6c,
	0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4a, 0x92,
	0x41, 0x47, 0x2a, 0x12, 0x6d, 0x61, 0x78, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x75, 0x6c, 0x6b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x32, 0x31, 0x6d, 0x61, 0x78, 0x2d, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2d, 0x62, 0x75, 0x6c, 0x6b, 0x2d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2c, 0xe5, 0x8d,
	0x95, 0xe6, 0xac, 0xa1, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x95, 0xb0, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x7b, 0x0a,
	0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x53, 0x92, 0x41, 0x50, 0x2a, 0x0e, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x32, 0x3e, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe5, 0x90, 0x8e, 0xe5, 0xa4, 0x9a, 0xe9, 0x95,
	0xbf, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe5, 0x88, 0xa4,
	0xe5, 0xae, 0x9a, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0x31, 0x30, 0xe5, 0x88, 0x86, 0xe9, 0x92, 0x9f, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0xc3, 0x01, 0x0a, 0x15, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x8c, 0x01, 0x92, 0x41, 0x88,
	0x01, 0x2a, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x6e, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d,
	0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x75, 0x6e, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0x2c, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe7,
	0xad, 0x89, 0xe5, 0xbe, 0x85, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbf, 0x9e, 0xe7, 0xbb, 0xad, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb2,
	0xe5, 0xa4, 0x9a, 0xe5, 0xb0, 0x91, 0xe5, 0x88, 0x86, 0xe9, 0x92, 0x9f, 0xe5, 0x90, 0x8e, 0xe8,
	0xa2, 0xab, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0x31, 0x30, 0xe5, 0x88, 0x86, 0xe9, 0x92, 0x9f, 0x52, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0xf0, 0x01, 0x0a, 0x1d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0xa9, 0x01, 0x92, 0x41, 0xa5, 0x01, 0x2a,
	0x1d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x68, 0x6f, 0x6c, 0x64, 0x32, 0x83,
	0x01, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x75, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x2c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xef, 0xbc, 0x8c, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9,
	0x87, 0x8f, 0xe4, 0xbd, 0x8e, 0xe4, 0xba, 0x8e, 0xe5, 0xa4, 0x9a, 0xe5, 0xb0, 0x91, 0xe7, 0x99,
	0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0xe5, 0x88, 0xa4, 0xe5, 0xae, 0x9a, 0xe4, 0xb8, 0xba,
	0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb2, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4,
	0xb8, 0xba, 0x35, 0x30, 0x52, 0x1d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x4f, 0x92, 0x41, 0x4c, 0x2a, 0x19, 0x73, 0x6b,
	0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2f, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe6,
	0x9c, 0x89, 0xe6, 0x9c, 0xac, 0xe5, 0x9c, 0xb0, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe7, 0x9a,
	0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0xe4, 0xb8, 0xba, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x17, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x64, 0x92, 0x41, 0x61, 0x2a, 0x17, 0x73, 0x6b, 0x69, 0x70,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x6f, 0x64, 0x73, 0x32, 0x46, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0x6b, 0x75, 0x62, 0x65, 0x2d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x4e, 0x53, 0xe4, 0xb8, 0x8b, 0xe9, 0x9d, 0x9e, 0x44,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe7, 0x9a,
	0x84, 0x50, 0x6f, 0x64, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x8c,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x17, 0x73, 0x6b, 0x69,
	0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x50, 0x6f, 0x64, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x1b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x2a,
	0x1b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x73, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x1e, 0xe5, 0xbf,
	0xbd, 0xe7, 0x95, 0xa5, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0xe7, 0x9a, 0x84,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xae, 0xa1, 0xe7, 0xae, 0x97, 0x52, 0x1b, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x81, 0x01, 0x0a, 0x13, 0x6f, 0x6b,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4f, 0x92, 0x41, 0x4c, 0x2a, 0x13, 0x6f, 0x6b,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x32, 0x35, 0x6f, 0x6b, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8,
	0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7,
	0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x13, 0x6f, 0x6b, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xd2, 0x01,
	0x0a, 0x19, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x93, 0x01, 0x92, 0x41, 0x8f, 0x01, 0x2a, 0x19, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x32, 0x72, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x2c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8,
	0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x80, 0xbb, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x9a, 0x84, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94,
	0xef, 0xbc, 0x8c, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe6, 0xad, 0xa4, 0xe9, 0x98, 0x88, 0xe5,
	0x80, 0xbc, 0xe5, 0x88, 0x99, 0xe5, 0x81, 0x9c, 0xe6, 0xad, 0xa2, 0xe8, 0x87, 0xaa, 0xe5, 0x8a,
	0xa8, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x14, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x5e, 0x92, 0x41, 0x5b, 0x2a, 0x14, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x43, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe7, 0xad, 0x89, 0xe5, 0xbe, 0x85, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe7, 0xa7,
	0x92, 0x52, 0x14, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0xd8, 0x01, 0x0a, 0x1b, 0x75, 0x6e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x95, 0x01,
	0x92, 0x41, 0x91, 0x01, 0x2a, 0x1b, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x32, 0x72, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x6f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0xe7, 0xad, 0x89, 0xe5, 0xbe, 0x85, 0xe5, 0xa4, 0x9a, 0xe9, 0x95,
	0xbf, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe5, 0xb0, 0x86, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe6, 0x9c, 0xaa, 0xe5, 0x9c, 0xa8, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0xe4, 0xb8, 0xad, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x33, 0x30, 0xe5, 0x88, 0x86,
	0xe9, 0x92, 0x9f, 0xef, 0xbc, 0x8c, 0xe6, 0x9a, 0x82, 0xe6, 0x97, 0xb6, 0xe6, 0xb2, 0xa1, 0xe4,
	0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x52, 0x1b, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x20, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0xef,
	0xbc, 0x8c, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x4d, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x1f, 0x42, 0x43, 0x53, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x32, 0x0f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80,
	0x85, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23,
	0x92, 0x41, 0x20, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32,
	0x12, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x32, 0x0f,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41,
	0x20, 0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x12, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0xdc, 0x01,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x42, 0xbf, 0x01, 0x92, 0x41, 0xbb, 0x01, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x32, 0xae, 0x01, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x53,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe5, 0xae, 0x9e, 0xe7,
	0x8e, 0xb0, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0xa6, 0x86, 0xe7, 0x9b,
	0x96, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xe4, 0xb8,
	0xad, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0x9a, 0x84, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xb0, 0x83, 0xe6, 0x95, 0xb4, 0xe5, 0xae,
	0x9e, 0xe7, 0x8e, 0xb0, 0xe7, 0x9a, 0x84, 0xe7, 0xbb, 0x86, 0xe8, 0x8a, 0x82, 0xe3, 0x80, 0x82,
	0xe4, 0xbe, 0xbf, 0xe4, 0xba, 0x8e, 0xe5, 0x9c, 0xa8, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe4,
	0xba, 0x91, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe4, 0xb8, 0xad, 0xe6, 0x89, 0xa9, 0xe5, 0xb1,
	0x95, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0x9a, 0x84, 0xe6, 0xa8, 0xa1,
	0xe6, 0x9d, 0xbf, 0xef, 0xbc, 0x8c, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8d, 0xe5,
	0x90, 0x8c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0xa8, 0x01, 0x0a,
	0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x42, 0x7e, 0x92, 0x41, 0x7b, 0x2a, 0x0f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x32, 0x68, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8,
	0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c, 0xe5, 0xbc, 0x80, 0xe5,
	0x90, 0xaf, 0xe5, 0x90, 0x8e, 0xe4, 0xbc, 0x9a, 0xe5, 0x9c, 0xa8, 0xe8, 0xaf, 0xa5, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0x20, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0xe7, 0xbb,
	0x84, 0xe4, 0xbb, 0xb6, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba,
	0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0xc8, 0x01, 0x0a, 0x13, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x95, 0x01, 0x92, 0x41, 0x91, 0x01, 0x2a, 0x13, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x32, 0x7a, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x2c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6,
	0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x98, 0x88, 0xe5, 0x80,
	0xbc, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0xef, 0xbc, 0x8c, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7,
	0x8e, 0x87, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe8, 0xaf, 0xa5, 0xe5, 0x80, 0xbc, 0xef, 0xbc,
	0x8c, 0xe5, 0x88, 0x99, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9,
	0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x20, 0x31, 0x30, 0x30, 0x52, 0x13, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0xa4, 0x01, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66,
	0x75, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x66, 0x92, 0x41, 0x63, 0x2a, 0x19, 0x6d, 0x61, 0x78,
	0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x32, 0x46, 0x6d, 0x61, 0x78, 0x2d, 0x67, 0x72, 0x61, 0x63,
	0x65, 0x66, 0x75, 0x6c, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x73, 0x65, 0x63, 0x2c, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x97, 0xb6, 0xef, 0xbc,
	0x8c, 0xe7, 0xad, 0x89, 0xe5, 0xbe, 0x85, 0x20, 0x50, 0x6f, 0x64, 0x20, 0xe9, 0x80, 0x80, 0xe5,
	0x87, 0xba, 0xe6, 0x9c, 0x80, 0xe9, 0x95, 0xbf, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x19,
	0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x12, 0x84, 0x01, 0x0a, 0x0c, 0x73, 0x63,
	0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x60, 0x92, 0x41, 0x5d, 0x2a, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x32, 0x4d, 0x73, 0x63, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x2c, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe5,
	0xae, 0xb9, 0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe9, 0x97,
	0xb4, 0xe9, 0x9a, 0x94, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe4, 0xb8, 0xba,
	0xe7, 0xa7, 0x92, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x20,
	0x31, 0x30, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x9e, 0x01, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x6a, 0x92, 0x41, 0x67, 0x2a, 0x14, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x4f, 0x6d, 0x61, 0x78, 0x2d,
	0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x2c, 0xe7, 0xad, 0x89, 0xe5, 0xbe, 0x85, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe6, 0x9c, 0x80, 0xe9, 0x95, 0xbf, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe7, 0xa7, 0x92, 0xef, 0xbc,
	0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x20, 0x39, 0x30, 0x30, 0x52, 0x14, 0x6d, 0x61, 0x78,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x46, 0x72, 0x6f,
	0x6d, 0x5a, 0x65, 0x72, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x57, 0x92, 0x41, 0x54,
	0x2a, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x5a, 0x65, 0x72,
	0x6f, 0x32, 0x41, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x75, 0x70, 0x2d, 0x66, 0x72, 0x6f, 0x6d,
	0x2d, 0x7a, 0x65, 0x72, 0x6f, 0x2c, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe8, 0x87, 0xaa, 0xe5,
	0x8a, 0xa8, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x88, 0xe6, 0xb2, 0xa1, 0xe6, 0x9c,
	0x89, 0x20, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97,
	0xb6, 0xef, 0xbc, 0x89, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x46, 0x72, 0x6f,
	0x6d, 0x5a, 0x65, 0x72, 0x6f, 0x12, 0x9d, 0x01, 0x0a, 0x16, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x65, 0x92, 0x41, 0x62, 0x2a, 0x16, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x32, 0x48, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x2d,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x2c,
	0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe5, 0x90, 0x8e, 0xe5, 0x88, 0xa4, 0xe6, 0x96, 0xad, 0xe7,
	0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe9, 0x97, 0xb4, 0xe9, 0x9a,
	0x94, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe7, 0xa7, 0x92, 0x52, 0x16, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x12, 0xa6, 0x01, 0x0a, 0x19, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x68, 0x92, 0x41, 0x65, 0x2a, 0x19,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x32, 0x48, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x2d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2c, 0xe8, 0xbf, 0x9e, 0xe7, 0xbb, 0xad, 0xe4,
	0xb8, 0xa4, 0xe6, 0xac, 0xa1, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d,
	0xe7, 0xa7, 0x92, 0x52, 0x19, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xad,
	0x01, 0x0a, 0x1a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x6d, 0x92, 0x41, 0x6a, 0x2a, 0x1a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x32, 0x4c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e,
	0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x2d, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x2c, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4,
	0xa5, 0xe5, 0x90, 0x8e, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe7,
	0xa7, 0x92, 0x52, 0x1a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x82,
	0x02, 0x0a, 0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x47, 0x70, 0x75, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0xb5, 0x01, 0x92, 0x41, 0xb1, 0x01,
	0x2a, 0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x47, 0x70, 0x75, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x32, 0x8c, 0x01, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x2d,
	0x67, 0x70, 0x75, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91,
	0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x98, 0x88, 0xe5,
	0x80, 0xbc, 0x28, 0x47, 0x50, 0x55, 0x29, 0xef, 0xbc, 0x8c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x87, 0x8f, 0xe4,
	0xbd, 0x8e, 0xe4, 0xba, 0x8e, 0xe5, 0xa4, 0x9a, 0xe5, 0xb0, 0x91, 0xe7, 0x99, 0xbe, 0xe5, 0x88,
	0x86, 0xe6, 0xaf, 0x94, 0xe5, 0x88, 0xa4, 0xe5, 0xae, 0x9a, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb2, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x35,
	0x30, 0x52, 0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x47, 0x70, 0x75, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x68, 0x92, 0x41, 0x65, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x32, 0x5b, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x2c, 0x20, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x3a, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0xef, 0xbc, 0x8c, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x3a, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x8c,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x2d, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x3a, 0xe6, 0x9b,
	0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xef, 0xbc, 0x8c, 0x53, 0x54, 0x4f,
	0x50, 0x50, 0x45, 0x44, 0x3a, 0xe5, 0xb7, 0xb2, 0xe5, 0x81, 0x9c, 0xe6, 0xad, 0xa2, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x2a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0xd1, 0x01, 0x0a, 0x16,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x70,
	0x75, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x98, 0x01, 0x92,
	0x41, 0x94, 0x01, 0x2a, 0x16, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x70, 0x75, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x32, 0x7a, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x2c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe7, 0x99, 0xbe, 0xe5, 0x88,
	0x86, 0xe6, 0xaf, 0x94, 0xef, 0xbc, 0x8c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x8e, 0x87, 0xe8, 0xb6, 0x85, 0xe8,
	0xbf, 0x87, 0xe8, 0xaf, 0xa5, 0xe5, 0x80, 0xbc, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe8, 0xa7,
	0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98,
	0xe8, 0xae, 0xa4, 0x20, 0x31, 0x30, 0x30, 0x52, 0x16, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x70, 0x75, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0xd1, 0x01, 0x0a, 0x16, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x98, 0x01, 0x92, 0x41, 0x94, 0x01, 0x2a, 0x16, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x32,
	0x7a, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x2c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89, 0xa9,
	0xe5, 0xae, 0xb9, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe7,
	0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0xef, 0xbc, 0x8c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x8e, 0x87,
	0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe8, 0xaf, 0xa5, 0xe5, 0x80, 0xbc, 0xef, 0xbc, 0x8c, 0xe5,
	0x88, 0x99, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc,
	0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x20, 0x31, 0x30, 0x30, 0x52, 0x16, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x6f, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x3b, 0x92, 0x41, 0x38, 0x2a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x32, 0x2e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x2c, 0x20, 0x43, 0x41, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbd, 0xac, 0xe7, 0xa7, 0xbb,
	0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x7f, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x42, 0x48, 0x92, 0x41, 0x45, 0x2a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x32, 0x3a, 0x43, 0x41, 0x20, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0xe6, 0xa8, 0xa1, 0xe5,
	0xbc, 0x8f, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9d, 0x9e, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x52, 0x07, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0xcc, 0x01, 0x0a, 0x1c, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x42, 0x87, 0x01, 0x92,
	0x41, 0x83, 0x01, 0x2a, 0x1c, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x6f, 0x64, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x75, 0x74, 0x6f, 0x66,
	0x66, 0x32, 0x63, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0xe4, 0xbd, 0x8e, 0xe4,
	0xba, 0x8e, 0xe6, 0xad, 0xa4, 0xe5, 0x80, 0xbc, 0xe7, 0x9a, 0x84, 0x20, 0x70, 0x6f, 0x64, 0xef,
	0xbc, 0x8c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0x9a,
	0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c, 0xe7,
	0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x97, 0xb6, 0xe4, 0xbc, 0x9a, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e,
	0xa5, 0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x2c, 0x20, 0x43, 0x41, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0xe5, 0x80, 0xbc, 0x2d, 0x31, 0x30, 0x52, 0x1c, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x75,
	0x74, 0x6f, 0x66, 0x66, 0x12, 0x92, 0x01, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x64, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x62, 0x92, 0x41, 0x58, 0x2a, 0x12, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x64, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x55, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x32, 0x42, 0x6e, 0x65, 0x77, 0x50,
	0x6f, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0xef, 0xbc,
	0x8c, 0xe6, 0x96, 0xb0, 0x70, 0x6f, 0x64, 0xe5, 0xbb, 0xba, 0xe7, 0xab, 0x8b, 0xe5, 0xa4, 0x9a,
	0xe4, 0xb9, 0x85, 0xe4, 0xb9, 0x8b, 0xe5, 0x90, 0x8e, 0xe6, 0x89, 0x8d, 0xe8, 0xa7, 0xa6, 0xe5,
	0x8f, 0x91, 0x43, 0x41, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x20, 0x30, 0xfa, 0x42,
	0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x64, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x55, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x9e, 0x01, 0x0a, 0x12, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6e, 0x92, 0x41, 0x6b, 0x2a, 0x12, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32,
	0x55, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe6, 0x8f, 0x90, 0xe4,
	0xbe, 0x9b, 0xe8, 0x80, 0x85, 0x2c, 0x20, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe5, 0xba, 0x94,
	0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0x87, 0xaa, 0xe7, 0xa0, 0x94, 0xe4, 0xba, 0x91, 0xe4,
	0xba, 0xa7, 0xe5, 0x93, 0x81, 0xe5, 0x8c, 0x96, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0x20, 0x79, 0x75, 0x6e, 0x74, 0x69, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xe3, 0x01, 0x0a, 0x0b, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x2a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x32, 0x33, 0x43, 0x41, 0x20, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0xe6,
	0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x28, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe4, 0xba, 0xa7, 0xe5,
	0x93, 0x81, 0xe5, 0x8c, 0x96, 0xe4, 0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x57, 0x65,
	0x62, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x29, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x47,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f,
	0x92, 0x41, 0x2c, 0x2a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x32, 0x22, 0x43, 0x41, 0x20,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x32, 0x15, 0x43, 0x41, 0x20, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0xe6, 0xa8,
	0xa1, 0xe5, 0xbc, 0x8f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xbe, 0x01, 0x0a, 0x05, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x03, 0x6b, 0x65,
	0x79, 0x32, 0x0a, 0xe6, 0xb1, 0xa1, 0xe7, 0x82, 0xb9, 0x20, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x0c, 0xe6,
	0xb1, 0xa1, 0xe7, 0x82, 0xb9, 0x20, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x5d, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x45, 0x92, 0x41, 0x42, 0x2a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x32,
	0x38, 0xe6, 0xb1, 0xa1, 0xe7, 0x82, 0xb9, 0xe6, 0x95, 0x88, 0xe6, 0x9e, 0x9c, 0xef, 0xbc, 0x8c,
	0x28, 0x4e, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2c, 0x20, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x4e, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2c, 0x20, 0x4e,
	0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x29, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x22, 0xe2, 0x2a, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a,
	0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x32,
	0x0e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0x49, 0x44, 0x52,
	0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12,
	0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92,
	0x41, 0x1a, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x12, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x3c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1,
	0xe7, 0x89, 0x88, 0xe6, 0x89, 0x80, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe9,
	0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0xe4, 0xb8, 0xba, 0xe8, 0x93, 0x9d, 0xe9, 0xb2, 0xb8, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x6c,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x1d, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b,
	0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5a, 0x0a, 0x06,
	0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x69, 0x6e, 0x74, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x32, 0x1e, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7,
	0x8b, 0xe5, 0x8c, 0x96, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x0f, 0x64, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x73, 0x92, 0x41, 0x70, 0x2a, 0x0f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x32, 0x5d, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe4, 0xb8, 0xba, 0x64, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0xe6, 0x97, 0xb6, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xef, 0xbc, 0x8c,
	0x42, 0x43, 0x53, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2f, 0x62, 0x63, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x12, 0xf5, 0x02, 0x0a, 0x0b, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0xd2,
	0x02, 0x92, 0x41, 0xce, 0x02, 0x2a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x32, 0xbe, 0x02, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0xe7, 0x9b, 0x98, 0xe6, 0x8c, 0x82, 0xe8, 0xbd, 0xbd, 0xe7, 0x82, 0xb9, 0x2c, 0x20, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0x8d, 0xe6, 0x8c, 0x82, 0xe8, 0xbd, 0xbd, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe3, 0x80, 0x82, 0xe5, 0xb7, 0xb2, 0xe6, 0xa0, 0xbc,
	0xe5, 0xbc, 0x8f, 0xe5, 0x8c, 0x96, 0xe7, 0x9a, 0x84, 0x20, 0x65, 0x78, 0x74, 0x33, 0xef, 0xbc,
	0x8c, 0x65, 0x78, 0x74, 0x34, 0xef, 0xbc, 0x8c, 0x78, 0x66, 0x73, 0x20, 0xe6, 0x96, 0x87, 0xe4,
	0xbb, 0xb6, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0xe7, 0x9b, 0x98, 0xe5, 0xb0, 0x86, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0xe6, 0x8c, 0x82,
	0xe8, 0xbd, 0xbd, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe7,
	0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe6, 0x88, 0x96, 0xe6, 0x9c, 0xaa, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc,
	0x8f, 0xe5, 0x8c, 0x96, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98,
	0xe5, 0xb0, 0x86, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe5,
	0x8c, 0x96, 0xe4, 0xb8, 0xba, 0x65, 0x78, 0x74, 0x34, 0x20, 0x28, 0x74, 0x6c, 0x69, 0x6e, 0x75,
	0x78, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe5, 0x8c, 0x96,
	0xe6, 0x88, 0x90, 0x78, 0x66, 0x73, 0x29, 0xe5, 0xb9, 0xb6, 0xe6, 0x8c, 0x82, 0xe8, 0xbd, 0xbd,
	0xe3, 0x80, 0x82, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe6,
	0x88, 0x96, 0xe6, 0x9c, 0x89, 0xe5, 0xa4, 0x9a, 0xe5, 0x9d, 0x97, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0xe7, 0x9b, 0x98, 0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba,
	0xe6, 0xad, 0xa4, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0x8d, 0xe7, 0x94, 0x9f, 0xe6,
	0x95, 0x88, 0xe3, 0x80, 0x82, 0x42, 0x43, 0x53, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0xa6, 0x03, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x85, 0x03, 0x92, 0x41, 0x81, 0x03, 0x2a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x32, 0xf2, 0x02, 0xe6, 0x89, 0xa9, 0xe5, 0xae,
	0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8e, 0xe7, 0xbd, 0xae, 0xe8, 0x84, 0x9a,
	0xe6, 0x9c, 0xac, 0x2c, 0x20, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0xe7, 0xbc, 0x96, 0xe7, 0xa0,
	0x81, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac,
	0x2e, 0x20, 0x6b, 0x38, 0x73, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe8, 0xbf, 0x90, 0xe8, 0xa1,
	0x8c, 0xe5, 0x90, 0x8e, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xef, 0xbc, 0x8c, 0xe9, 0x9c, 0x80,
	0xe8, 0xa6, 0x81, 0xe4, 0xbf, 0x9d, 0xe8, 0xaf, 0x81, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac, 0xe7,
	0x9a, 0x84, 0xe5, 0x8f, 0xaf, 0xe9, 0x87, 0x8d, 0xe5, 0x85, 0xa5, 0xe5, 0x92, 0x8c, 0xe9, 0x87,
	0x8d, 0xe8, 0xaf, 0x95, 0xe9, 0x80, 0xbb, 0xe8, 0xbe, 0x91, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82,
	0xe6, 0x9e, 0x9c, 0xe8, 0xa6, 0x81, 0xe6, 0xb1, 0x82, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe9,
	0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe5, 0x9c, 0xa8, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe5, 0x88,
	0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe5, 0x90, 0x8e,
	0xe6, 0x89, 0x8d, 0xe5, 0x8f, 0xaf, 0xe5, 0x8a, 0xa0, 0xe5, 0x85, 0xa5, 0xe8, 0xb0, 0x83, 0xe5,
	0xba, 0xa6, 0xe5, 0x8f, 0xaf, 0xe9, 0x85, 0x8d, 0xe5, 0x90, 0x88, 0x20, 0x75, 0x6e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x2c, 0x20, 0xe5, 0x9c, 0xa8, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe5, 0x88, 0x9d,
	0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe5, 0x90, 0x8e, 0x2c,
	0x20, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0x20, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x74, 0x6c, 0x20,
	0x75, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x2d, 0x2d, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3d, 0x2f,
	0x72, 0x6f, 0x6f, 0x74, 0x2f, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x20, 0xe5, 0x91, 0xbd, 0xe4, 0xbb, 0xa4, 0xe4, 0xbd, 0xbf, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe5, 0x8a, 0xa0, 0xe5, 0x85, 0xa5, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0xbf, 0x01, 0x0a, 0x0d, 0x75, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x98, 0x01, 0x92, 0x41, 0x94, 0x01, 0x2a, 0x0d, 0x75, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x82, 0x01, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae,
	0xe5, 0x8a, 0xa0, 0xe5, 0x85, 0xa5, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe8, 0xb0, 0x83, 0xe5, 0xba,
	0xa6, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x80, 0xbc, 0x30, 0xe8, 0xa1,
	0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6,
	0xef, 0xbc, 0x8c, 0xe9, 0x9d, 0x9e, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x8d,
	0xe5, 0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0x28, 0xe5, 0x8a, 0xa0,
	0xe5, 0x85, 0xa5, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe5, 0x8f, 0xaf, 0xe8,
	0xa6, 0x86, 0xe7, 0x9b, 0x96, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x29, 0x52, 0x0d, 0x75, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xb3, 0x02, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x42, 0xf5,
	0x01, 0x92, 0x41, 0xf1, 0x01, 0x2a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73,
	0x32, 0xe3, 0x01, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe6, 0x97, 0xa0, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe8, 0xae,
	0xbe, 0xe7, 0xbd, 0xae, 0xe5, 0x88, 0x99, 0xe4, 0xb8, 0x8d, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0,
	0x2e, 0x20, 0xe5, 0xa4, 0x9a, 0xe7, 0x9b, 0x98, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b,
	0x98, 0xe6, 0x8c, 0x82, 0xe8, 0xbd, 0xbd, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x9a,
	0xe6, 0x96, 0xb0, 0xe5, 0xbb, 0xba, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe8,
	0xaf, 0xb7, 0xe7, 0xa1, 0xae, 0xe4, 0xbf, 0x9d, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0x43, 0x56,
	0x4d, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x92,
	0xe4, 0xba, 0x86, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe8, 0xaf, 0xa5, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81,
	0xe6, 0x98, 0xaf, 0xe9, 0x92, 0x88, 0xe5, 0xaf, 0xb9, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe7,
	0x94, 0x9f, 0xe4, 0xba, 0xa7, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8, 0xe4, 0xb8, 0x94, 0xe8, 0xae,
	0xbe, 0xe7, 0xbd, 0xae, 0xe5, 0xa4, 0x9a, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98,
	0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b,
	0x73, 0x12, 0x89, 0x02, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0xbd, 0x01, 0x92, 0x41, 0xb9, 0x01, 0x2a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x41, 0x72, 0x67, 0x73, 0x32, 0xab, 0x01, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x90, 0x84,
	0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe9, 0xa2, 0x84, 0xe5, 0xae, 0x9a, 0xe4, 0xb9,
	0x89, 0xe7, 0x9a, 0x84, 0x6b, 0x65, 0x79, 0xe4, 0xb8, 0xba, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65,
	0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xe4, 0xb8, 0xba, 0xe5, 0x90, 0x84, 0xe6, 0xa8, 0xa1, 0xe5,
	0x9d, 0x97, 0xe8, 0xbf, 0x9b, 0xe7, 0xa8, 0x8b, 0xe5, 0x90, 0xaf, 0xe5, 0x8a, 0xa8, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x3b,
	0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x4b,
	0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x3a, 0x20, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x64, 0x69, 0x72,
	0x3d, 0x2f, 0x76, 0x61, 0x72, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65,
	0x74, 0x3b, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x12, 0xcf, 0x01,
	0x0a, 0x12, 0x70, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x9e, 0x01, 0x92, 0x41, 0x9a,
	0x01, 0x2a, 0x12, 0x70, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x32, 0x83, 0x01, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x89, 0x8d, 0xe7, 0xbd, 0xae, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac,
	0x2c, 0x20, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x20, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0xe7,
	0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac, 0x2e, 0x20,
	0xe5, 0x9c, 0xa8, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe4, 0xb9, 0x8b, 0xe5, 0x89, 0x8d, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xef, 0xbc,
	0x8c, 0xe6, 0xb3, 0xa8, 0xe6, 0x84, 0x8f, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe5, 0x8f, 0xaa,
	0xe5, 0xaf, 0xb9, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe5, 0xb7, 0xb2, 0xe6, 0x9c, 0x89, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0x52, 0x12, 0x70, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x89, 0x02, 0x0a, 0x11, 0x62, 0x63, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0xc2, 0x01, 0x92, 0x41, 0xbe, 0x01, 0x2a, 0x11, 0x62, 0x63, 0x73, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x32, 0xa8, 0x01,
	0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe8,
	0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0xae, 0xe6, 0x8f,
	0x92, 0xe4, 0xbb, 0xb6, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe4, 0xbc, 0x9a, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0xe4,
	0xba, 0x91, 0xe4, 0xb8, 0x8a, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe5, 0xaf, 0xb9,
	0xe6, 0xaf, 0x94, 0xe4, 0xb8, 0x8e, 0xe8, 0xa1, 0xa5, 0xe5, 0x85, 0x85, 0xef, 0xbc, 0x8c, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x9c, 0xa8, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b,
	0xe5, 0x8c, 0x96, 0xe4, 0xb9, 0x8b, 0xe5, 0x90, 0x8e, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe8,
	0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe3, 0x80, 0x82, 0x52, 0x11, 0x62, 0x63, 0x73, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x4f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x86, 0x02, 0x0a, 0x10,
	0x62, 0x63, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xc1,
	0x01, 0x92, 0x41, 0xbd, 0x01, 0x2a, 0x10, 0x62, 0x63, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x49,
	0x6e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x32, 0xa8, 0x01, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0x42,
	0x43, 0x53, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0xae, 0xe6, 0x8f, 0x92, 0xe4, 0xbb, 0xb6, 0xe5, 0xae,
	0x89, 0xe8, 0xa3, 0x85, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe4, 0xbc, 0x9a, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8a, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe5, 0xaf, 0xb9, 0xe6, 0xaf, 0x94, 0xe4, 0xb8, 0x8e,
	0xe8, 0xa1, 0xa5, 0xe5, 0x85, 0x85, 0xef, 0xbc, 0x8c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x9c, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0xad,
	0xa3, 0xe5, 0xb8, 0xb8, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe4, 0xb9, 0x8b,
	0xe5, 0x90, 0x8e, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe3,
	0x80, 0x82, 0x52, 0x10, 0x62, 0x63, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x12, 0x91, 0x02, 0x0a, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75,
	0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xc6, 0x01, 0x92, 0x41, 0xc2,
	0x01, 0x2a, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x32, 0xaa, 0x01, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe9, 0xa2,
	0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x92,
	0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0xe9,
	0x83, 0xa8, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xba, 0xe9, 0xa2, 0x84, 0xe7, 0x95, 0x99, 0xe4, 0xba,
	0x8c, 0xe6, 0x96, 0xb9, 0x2f, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0x2f, 0xe6, 0x9c, 0x8d, 0xe5,
	0x8a, 0xa1, 0xe5, 0x95, 0x86, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0xef, 0xbc, 0x8c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0xe5, 0x9c, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6,
	0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0xe4, 0xb9, 0x8b, 0xe5, 0x90, 0x8e, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1,
	0x8c, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8e, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85,
	0xe3, 0x80, 0x82, 0x52, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x88, 0x02, 0x0a, 0x12, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x49, 0x6e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xbf, 0x01,
	0x92, 0x41, 0xbb, 0x01, 0x2a, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x32, 0xa4, 0x01, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e,
	0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96,
	0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x92, 0xe7, 0x9a, 0x84, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0xe9, 0x83, 0xa8, 0xe5, 0x88,
	0x86, 0xe4, 0xb8, 0xba, 0xe9, 0xa2, 0x84, 0xe7, 0x95, 0x99, 0xe4, 0xba, 0x8c, 0xe6, 0x96, 0xb9,
	0x2f, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0x2f, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x95,
	0x86, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xef, 0xbc, 0x8c,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x9c, 0xa8, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0xad, 0xa3, 0xe5, 0xb8,
	0xb8, 0xe4, 0xb9, 0x8b, 0xe5, 0x90, 0x8e, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe8, 0xb0, 0x83,
	0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8e, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe3, 0x80, 0x82, 0x52,
	0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x53, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x53,
	0x32, 0x0e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0x4f, 0x53,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x32, 0x18, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1,
	0xe6, 0x9d, 0xbf, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x75, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x2a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x32, 0x30, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe5, 0x8f, 0xaf, 0xe8, 0xbf,
	0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x83, 0x01, 0x0a,
	0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x4f, 0x92, 0x41, 0x4c, 0x2a, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x32, 0x42, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1,
	0xa0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6,
	0xe6, 0x97, 0xb6, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4,
	0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0xe6, 0xa8,
	0xa1, 0xe5, 0x9d, 0x97, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x79, 0x0a, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x50, 0x72, 0x65,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d, 0x92, 0x41,
	0x4a, 0x2a, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x32, 0x36, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe5, 0x89, 0x8d, 0xe7, 0xbd, 0xae, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac, 0x2c, 0x20, 0x62,
	0x61, 0x73, 0x65, 0x36, 0x34, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0xe7, 0x9a, 0x84, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac, 0x2e, 0x52, 0x10, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x7c, 0x0a,
	0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4e, 0x92, 0x41, 0x4b, 0x2a, 0x11, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x32, 0x36, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x90,
	0x8e, 0xe7, 0xbd, 0xae, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac, 0x2c, 0x20, 0x62, 0x61, 0x73, 0x65,
	0x36, 0x34, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac, 0x2e, 0x52, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49,
	0x6e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x79, 0x0a, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x28, 0x92, 0x41, 0x25, 0x2a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x32, 0x16, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x64,
	0x73, 0x50, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x33,
	0x92, 0x41, 0x30, 0x2a, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x64, 0x73, 0x50, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x32, 0x1e, 0xe6, 0xaf, 0x8f, 0xe4, 0xb8, 0xaa, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe7, 0x9a, 0x84, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0x50, 0x6f, 0x64, 0xe6, 0x95, 0xb0,
	0xe9, 0x87, 0x8f, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x64, 0x73, 0x50, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x6c, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x44, 0x92, 0x41, 0x41,
	0x2a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x69, 0x74,
	0x32, 0x2f, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0xe6, 0x89,
	0xa7, 0xe8, 0xa1, 0x8c, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b,
	0xe5, 0x8c, 0x96, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x89, 0xa7, 0xe8, 0xa1,
	0x8c, 0x52, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x69,
	0x74, 0x12, 0xa2, 0x01, 0x0a, 0x1b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x70, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x57, 0x68, 0x65, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x60, 0x92, 0x41, 0x5d, 0x2a, 0x1b, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x57,
	0x68, 0x65, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x32, 0x3e, 0xe6, 0x89, 0xa9, 0xe5, 0xae,
	0xb9, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x97, 0xb6, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0xe6, 0xb5, 0x81, 0xe7,
	0xa8, 0x8b, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0x8d, 0xe5, 0x85, 0x81,
	0xe8, 0xae, 0xb8, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0x52, 0x1b, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x53, 0x6b, 0x69, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x57, 0x68, 0x65, 0x6e,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x93, 0x01, 0x0a, 0x1a, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x53, 0x6b, 0x69, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x57, 0x68, 0x65, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x42, 0x53, 0x92, 0x41, 0x50,
	0x2a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x69, 0x74,
	0x32, 0x3e, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x97,
	0xb6, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe8, 0xb7, 0xb3,
	0xe8, 0xbf, 0x87, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0xe4, 0xb8, 0x8d, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87,
	0x52, 0x1a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x49, 0x6e, 0x57, 0x68, 0x65, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x32, 0x18, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88,
	0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x67, 0x70, 0x75, 0x41, 0x72, 0x67, 0x73, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x50, 0x55, 0x41, 0x72, 0x67, 0x73, 0x42, 0x1d, 0x92,
	0x41, 0x1a, 0x2a, 0x07, 0x67, 0x70, 0x75, 0x41, 0x72, 0x67, 0x73, 0x32, 0x0f, 0x47, 0x50, 0x55,
	0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x67, 0x70,
	0x75, 0x41, 0x72, 0x67, 0x73, 0x12, 0x79, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x09, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x1e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1,
	0xe7, 0x89, 0x88, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x5d, 0x92, 0x41, 0x5a, 0x0a, 0x58, 0x2a, 0x0c,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x32, 0x48, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0x2c, 0x20, 0xe4, 0xb8, 0xbb, 0xe8,
	0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0xaf, 0xb9, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe7, 0x9a, 0x84, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7,
	0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x22, 0xab, 0x03, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x60, 0x0a, 0x0e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x38, 0x92, 0x41, 0x35, 0x2a, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x44, 0x32, 0x23, 0x43, 0x43, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x49,
	0x44, 0x2c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbd,
	0xac, 0xe7, 0xa7, 0xbb, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x6a, 0x0a, 0x10, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x2a, 0x10, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x27, 0x43, 0x43, 0xe6,
	0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0xe6, 0xa8,
	0xa1, 0xe5, 0x9d, 0x97, 0x52, 0x10, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38,
	0x92, 0x41, 0x35, 0x2a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x44, 0x32, 0x23, 0x43, 0x43, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x49, 0x44, 0x2c,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbd, 0xac, 0xe7,
	0xa7, 0xbb, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x6a, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x2a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x27, 0x43, 0x43, 0xe6, 0xa8, 0xa1,
	0xe5, 0x9d, 0x97, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0xe6, 0xa8, 0xa1, 0xe5,
	0x9d, 0x97, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x05, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x68, 0x0a, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92,
	0x41, 0x39, 0x2a, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x44, 0x32, 0x25, 0x43, 0x43, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x49, 0x44,
	0x2c, 0x43, 0x41, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8,
	0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x52, 0x10, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x4f, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x65, 0x0a,
	0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x0f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x49, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x32, 0x25, 0x43, 0x43,
	0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x49, 0x44, 0x2c, 0x43, 0x41, 0xe7, 0xbc, 0xa9, 0xe5, 0xae,
	0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0xe6, 0xa8, 0xa1,
	0xe5, 0x9d, 0x97, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x44, 0x12, 0x6f, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74,
	0x42, 0x69, 0x7a, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0x92, 0x41, 0x46,
	0x2a, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x42, 0x69, 0x7a, 0x49, 0x44, 0x32,
	0x35, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x43, 0x43, 0xe4,
	0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6,
	0x98, 0xaf, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe4, 0xb8,
	0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74,
	0x42, 0x69, 0x7a, 0x49, 0x44, 0x12, 0x6c, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e,
	0x42, 0x69, 0x7a, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48, 0x92, 0x41, 0x45,
	0x2a, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x42, 0x69, 0x7a, 0x49, 0x44, 0x32, 0x35,
	0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x43, 0x43, 0xe4, 0xb8,
	0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x98,
	0xaf, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe4, 0xb8, 0x9a,
	0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x42, 0x69,
	0x7a, 0x49, 0x44, 0x12, 0x72, 0x0a, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x42, 0x92, 0x41, 0x3f, 0x2a, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x29, 0x43, 0x43, 0xe6, 0xa8, 0xa1, 0xe5,
	0x9d, 0x97, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x43, 0x41, 0xe6, 0x89, 0xa9, 0xe5, 0xae,
	0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0xe6, 0xa8, 0xa1,
	0xe5, 0x9d, 0x97, 0x52, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x49, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x2a, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x29, 0x43, 0x43, 0xe6, 0xa8,
	0xa1, 0xe5, 0x9d, 0x97, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x43, 0x41, 0xe7, 0xbc, 0xa9,
	0xe5, 0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0xe6,
	0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x52, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x0b, 0x52, 0x75, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x0f, 0xe5, 0xae, 0xb9, 0xe5, 0x99,
	0xa8, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0f, 0xe8, 0xbf, 0x90, 0xe8, 0xa1,
	0x8c, 0xe6, 0x97, 0xb6, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd7, 0x20, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48, 0x92, 0x41, 0x2a,
	0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x1d, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7,
	0x9a, 0x84, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10,
	0x01, 0x18, 0x80, 0x10, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0x92, 0x41, 0x1a, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x12, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x32, 0x18, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d,
	0xbf, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x79, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x1d, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4,
	0xbe, 0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5a,
	0x0a, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x69, 0x6e, 0x74, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x06, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x32, 0x1e, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0x9d,
	0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x0f, 0x64,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x73, 0x92, 0x41, 0x70, 0x2a, 0x0f, 0x64, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x32, 0x5d, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe4, 0xb8, 0xba, 0x64, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0xe6, 0x97, 0xb6, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xef,
	0xbc, 0x8c, 0x42, 0x43, 0x53, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe8, 0xae, 0xbe, 0xe7, 0xbd,
	0xae, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x62, 0x63, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x12, 0xf5, 0x02, 0x0a, 0x0b, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0xd2, 0x02, 0x92, 0x41, 0xce, 0x02, 0x2a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x32, 0xbe, 0x02, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe6, 0x8c, 0x82, 0xe8, 0xbd, 0xbd, 0xe7, 0x82, 0xb9, 0x2c,
	0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0x8d, 0xe6, 0x8c, 0x82, 0xe8, 0xbd, 0xbd,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe3, 0x80, 0x82, 0xe5, 0xb7, 0xb2, 0xe6,
	0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe5, 0x8c, 0x96, 0xe7, 0x9a, 0x84, 0x20, 0x65, 0x78, 0x74, 0x33,
	0xef, 0xbc, 0x8c, 0x65, 0x78, 0x74, 0x34, 0xef, 0xbc, 0x8c, 0x78, 0x66, 0x73, 0x20, 0xe6, 0x96,
	0x87, 0xe4, 0xbb, 0xb6, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe5, 0xb0, 0x86, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0xe6,
	0x8c, 0x82, 0xe8, 0xbd, 0xbd, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe6, 0x96, 0x87, 0xe4, 0xbb,
	0xb6, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe6, 0x88, 0x96, 0xe6, 0x9c, 0xaa, 0xe6, 0xa0, 0xbc,
	0xe5, 0xbc, 0x8f, 0xe5, 0x8c, 0x96, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7,
	0x9b, 0x98, 0xe5, 0xb0, 0x86, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc,
	0x8f, 0xe5, 0x8c, 0x96, 0xe4, 0xb8, 0xba, 0x65, 0x78, 0x74, 0x34, 0x20, 0x28, 0x74, 0x6c, 0x69,
	0x6e, 0x75, 0x78, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe5,
	0x8c, 0x96, 0xe6, 0x88, 0x90, 0x78, 0x66, 0x73, 0x29, 0xe5, 0xb9, 0xb6, 0xe6, 0x8c, 0x82, 0xe8,
	0xbd, 0xbd, 0xe3, 0x80, 0x82, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b,
	0x98, 0xe6, 0x88, 0x96, 0xe6, 0x9c, 0x89, 0xe5, 0xa4, 0x9a, 0xe5, 0x9d, 0x97, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0xbb, 0xe6,
	0x9c, 0xba, 0xe6, 0xad, 0xa4, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0x8d, 0xe7, 0x94,
	0x9f, 0xe6, 0x95, 0x88, 0xe3, 0x80, 0x82, 0x42, 0x43, 0x53, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0xfc, 0x01, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0xdb, 0x01, 0x92, 0x41, 0xd7, 0x01, 0x2a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x32, 0xc8, 0x01, 0xe4, 0xb8, 0x8a,
	0xe6, 0x9e, 0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8e, 0xe7, 0xbd, 0xae, 0xe8,
	0x84, 0x9a, 0xe6, 0x9c, 0xac, 0x2c, 0x20, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0xe7, 0xbc, 0x96,
	0xe7, 0xa0, 0x81, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0x84, 0x9a, 0xe6,
	0x9c, 0xac, 0xef, 0xbc, 0x8c, 0x6b, 0x38, 0x73, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe8, 0xbf,
	0x90, 0xe8, 0xa1, 0x8c, 0xe5, 0x90, 0x8e, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xef, 0xbc, 0x8c,
	0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe4, 0xbf, 0x9d, 0xe8, 0xaf, 0x81, 0xe8, 0x84, 0x9a, 0xe6,
	0x9c, 0xac, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0xaf, 0xe9, 0x87, 0x8d, 0xe5, 0x85, 0xa5, 0xe5, 0x92,
	0x8c, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0xe9, 0x80, 0xbb, 0xe8, 0xbe, 0x91, 0xe3, 0x80, 0x82,
	0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe8, 0xa6, 0x81, 0xe6, 0xb1, 0x82, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe5, 0x9c, 0xa8, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1,
	0x8c, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90,
	0xe5, 0x90, 0x8e, 0xe6, 0x89, 0x8d, 0xe5, 0x8f, 0xaf, 0xe5, 0x8a, 0xa0, 0xe5, 0x85, 0xa5, 0xe8,
	0xb0, 0x83, 0xe5, 0xba, 0xa6, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0xbf, 0x01, 0x0a, 0x0d, 0x75, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x98, 0x01, 0x92, 0x41, 0x94, 0x01,
	0x2a, 0x0d, 0x75, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x32,
	0x82, 0x01, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe5, 0x8a, 0xa0, 0xe5, 0x85, 0xa5, 0xe7, 0x9a,
	0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0x82,
	0xe4, 0xb8, 0x8e, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0xe5, 0x80, 0xbc, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0x8f, 0x82, 0xe4,
	0xb8, 0x8e, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xef, 0xbc, 0x8c, 0xe9, 0x9d, 0x9e, 0x30, 0xe8,
	0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe8, 0xb0,
	0x83, 0xe5, 0xba, 0xa6, 0x28, 0xe5, 0x8a, 0xa0, 0xe5, 0x85, 0xa5, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe6, 0x97, 0xb6, 0xe5, 0x8f, 0xaf, 0xe8, 0xa6, 0x86, 0xe7, 0x9b, 0x96, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0x29, 0x52, 0x0d, 0x75, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0xb3, 0x02, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x42, 0xf5, 0x01, 0x92, 0x41, 0xf1, 0x01, 0x2a, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x32, 0xe3, 0x01, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0xe7, 0x9b, 0x98, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe6, 0x97, 0xa0,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe5, 0x88, 0x99, 0xe4,
	0xb8, 0x8d, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0x2e, 0x20, 0xe5, 0xa4, 0x9a, 0xe7, 0x9b, 0x98,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe6, 0x8c, 0x82, 0xe8, 0xbd, 0xbd, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x9a, 0xe6, 0x96, 0xb0, 0xe5, 0xbb, 0xba, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe8, 0xaf, 0xb7, 0xe7, 0xa1, 0xae, 0xe4, 0xbf, 0x9d,
	0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0x43, 0x56, 0x4d, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x92, 0xe4, 0xba, 0x86, 0xe8, 0xb4, 0xad, 0xe4, 0xb9,
	0xb0, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98,
	0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xaf, 0xa5, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf, 0xe9, 0x92, 0x88, 0xe5, 0xaf,
	0xb9, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe7, 0x94, 0x9f, 0xe4, 0xba, 0xa7, 0xe6, 0x9c, 0xba,
	0xe5, 0x99, 0xa8, 0xe4, 0xb8, 0x94, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe5, 0xa4, 0x9a, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x96, 0x02, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0xbd, 0x01, 0x92, 0x41, 0xb9, 0x01, 0x2a, 0x09,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x32, 0xab, 0x01, 0xe9, 0x85, 0x8d, 0xe7,
	0xbd, 0xae, 0xe5, 0x90, 0x84, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe8, 0x87, 0xaa, 0xe5, 0xae,
	0x9a, 0xe4, 0xb9, 0x89, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe9, 0xa2, 0x84,
	0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0x9a, 0x84, 0x6b, 0x65, 0x79, 0xe4, 0xb8, 0xba, 0x6b,
	0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xe4, 0xb8, 0xba, 0xe5, 0x90,
	0x84, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe8, 0xbf, 0x9b, 0xe7, 0xa8, 0x8b, 0xe5, 0x90, 0xaf,
	0xe5, 0x8a, 0xa8, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xa4, 0x9a, 0xe4,
	0xb8, 0xaa, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0x3b, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94, 0xef, 0xbc, 0x8c, 0xe4, 0xbe,
	0x8b, 0xe5, 0xa6, 0x82, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x3a, 0x20, 0x72, 0x6f, 0x6f,
	0x74, 0x2d, 0x64, 0x69, 0x72, 0x3d, 0x2f, 0x76, 0x61, 0x72, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x6b,
	0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x3b, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72,
	0x67, 0x73, 0x12, 0xd1, 0x01, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0xa0, 0x01, 0x92, 0x41, 0x9c, 0x01, 0x2a, 0x12, 0x70, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x32, 0x85, 0x01, 0xe4, 0xb8, 0x8a,
	0xe6, 0x9e, 0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x89, 0x8d, 0xe7, 0xbd, 0xae, 0xe8,
	0x84, 0x9a, 0xe6, 0x9c, 0xac, 0xef, 0xbc, 0x8c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x20, 0xe7,
	0xbc, 0x96, 0xe7, 0xa0, 0x81, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0x84,
	0x9a, 0xe6, 0x9c, 0xac, 0xef, 0xbc, 0x8c, 0xe5, 0x9c, 0xa8, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b,
	0xe5, 0x8c, 0x96, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb9, 0x8b, 0xe5, 0x89, 0x8d, 0xe6,
	0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xef, 0xbc, 0x8c, 0xe6, 0xb3, 0xa8, 0xe6, 0x84, 0x8f, 0xe7, 0x9b,
	0xae, 0xe5, 0x89, 0x8d, 0xe5, 0x8f, 0xaa, 0xe5, 0xaf, 0xb9, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0,
	0xe5, 0xb7, 0xb2, 0xe6, 0x9c, 0x89, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x94, 0x9f, 0xe6,
	0x95, 0x88, 0x52, 0x12, 0x70, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x91, 0x02, 0x0a, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x4f, 0x75, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xc6, 0x01, 0x92,
	0x41, 0xc2, 0x01, 0x2a, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x32, 0xaa, 0x01, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e,
	0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbc, 0xa0, 0xe9,
	0x80, 0x92, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe8, 0xaf,
	0xa5, 0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xba, 0xe9, 0xa2, 0x84, 0xe7, 0x95, 0x99,
	0xe4, 0xba, 0x8c, 0xe6, 0x96, 0xb9, 0x2f, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0x2f, 0xe6, 0x9c,
	0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x95, 0x86, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0xef, 0xbc, 0x8c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0xe5, 0x9c, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0xe4, 0xb9, 0x8b, 0xe5, 0x90, 0x8e, 0xe8, 0xbf, 0x9b,
	0xe8, 0xa1, 0x8c, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8e, 0xe5, 0xae, 0x89, 0xe8,
	0xa3, 0x85, 0xe3, 0x80, 0x82, 0x52, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x88, 0x02, 0x0a, 0x12, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0xbf, 0x01, 0x92, 0x41, 0xbb, 0x01, 0x2a, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x32, 0xa4, 0x01, 0xe4, 0xb8, 0x8b,
	0xe6, 0x9e, 0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0xa2, 0x9d, 0xe5,
	0xa4, 0x96, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x92, 0xe7, 0x9a,
	0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0xe9, 0x83, 0xa8,
	0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xba, 0xe9, 0xa2, 0x84, 0xe7, 0x95, 0x99, 0xe4, 0xba, 0x8c, 0xe6,
	0x96, 0xb9, 0x2f, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0x2f, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1,
	0xe5, 0x95, 0x86, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xef,
	0xbc, 0x8c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x9c,
	0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0xad, 0xa3,
	0xe5, 0xb8, 0xb8, 0xe4, 0xb9, 0x8b, 0xe5, 0x90, 0x8e, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe8,
	0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8e, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe3, 0x80,
	0x82, 0x52, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x53, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x4f, 0x53, 0x32, 0x0e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88,
	0x4f, 0x53, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x53, 0x12, 0x46, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x1f,
	0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x14, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x08, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0xaa, 0x01, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x73, 0x92, 0x41, 0x70, 0x2a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x32,
	0x65, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe5, 0x8f, 0xaf, 0xe8, 0xbf, 0x90, 0xe8,
	0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x2c, 0x20, 0xe8, 0x8b, 0xa5, 0xe4, 0xb8, 0x8d, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe5,
	0x92, 0x8c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97,
	0xb6, 0xe5, 0x92, 0x8c, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0x9d, 0xe6, 0x8c, 0x81,
	0xe4, 0xb8, 0x80, 0xe8, 0x87, 0xb4, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0xb3, 0x01, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x7f, 0x92, 0x41,
	0x7c, 0x2a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x32, 0x72, 0x43, 0x43, 0xe6, 0xa8, 0xa1,
	0xe5, 0x9d, 0x97, 0x49, 0x44, 0x2c, 0x20, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe6,
	0x97, 0xb6, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xb8,
	0x9a, 0xe5, 0x8a, 0xa1, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0xe6, 0xa8, 0xa1,
	0xe5, 0x9d, 0x97, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xa5, 0xe4,
	0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe5, 0x88, 0x99, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8,
	0x8d, 0xe8, 0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x10, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x49,
	0x6e, 0x50, 0x72, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d,
	0x92, 0x41, 0x4a, 0x2a, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x32, 0x36, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8e, 0xe7, 0xbd, 0xae, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac, 0x2c,
	0x20, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0xe7, 0x9a, 0x84,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac, 0x2e, 0x52, 0x10, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x9a, 0x01, 0x0a, 0x11, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x92, 0x41, 0x4b, 0x2a, 0x11,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x32, 0x36, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5,
	0x90, 0x8e, 0xe7, 0xbd, 0xae, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac, 0x2c, 0x20, 0x62, 0x61, 0x73,
	0x65, 0x36, 0x34, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac, 0x2e, 0x52, 0x11, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x6c, 0x0a, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x2f, 0x92, 0x41,
	0x2c, 0x2a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x1d,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x61, 0x0a, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x18, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a,
	0x07, 0x67, 0x70, 0x75, 0x41, 0x72, 0x67, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x47, 0x50, 0x55, 0x41, 0x72, 0x67, 0x73, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x67, 0x70,
	0x75, 0x41, 0x72, 0x67, 0x73, 0x32, 0x0f, 0x47, 0x50, 0x55, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x67, 0x70, 0x75, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x67, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x2e, 0x92,
	0x41, 0x2b, 0x2a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x1e, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4,
	0x96, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x3a, 0x51, 0x92, 0x41, 0x4e, 0x0a, 0x4c, 0x2a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xd2, 0x01, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0xb6, 0x02, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92,
	0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77,
	0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe0, 0x22,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0x92, 0x41, 0x15, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x08,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x62, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x37,
	0x2a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44,
	0x32, 0x25, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6,
	0xa8, 0xa1, 0xe7, 0x89, 0x88, 0x49, 0x44, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x32, 0x12, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x32, 0x18, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d,
	0xbf, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x79, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x1d, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4,
	0xbe, 0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5a,
	0x0a, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x69, 0x6e, 0x74, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x06, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x32, 0x1e, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0x9d,
	0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x0f, 0x64,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x73, 0x92, 0x41, 0x70, 0x2a, 0x0f, 0x64, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x32, 0x5d, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe4, 0xb8, 0xba, 0x64, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0xe6, 0x97, 0xb6, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xef,
	0xbc, 0x8c, 0x42, 0x43, 0x53, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe8, 0xae, 0xbe, 0xe7, 0xbd,
	0xae, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x62, 0x63, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x12, 0xf5, 0x02, 0x0a, 0x0b, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0xd2, 0x02, 0x92, 0x41, 0xce, 0x02, 0x2a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x32, 0xbe, 0x02, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe6, 0x8c, 0x82, 0xe8, 0xbd, 0xbd, 0xe7, 0x82, 0xb9, 0x2c,
	0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0x8d, 0xe6, 0x8c, 0x82, 0xe8, 0xbd, 0xbd,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe3, 0x80, 0x82, 0xe5, 0xb7, 0xb2, 0xe6,
	0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe5, 0x8c, 0x96, 0xe7, 0x9a, 0x84, 0x20, 0x65, 0x78, 0x74, 0x33,
	0xef, 0xbc, 0x8c, 0x65, 0x78, 0x74, 0x34, 0xef, 0xbc, 0x8c, 0x78, 0x66, 0x73, 0x20, 0xe6, 0x96,
	0x87, 0xe4, 0xbb, 0xb6, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe5, 0xb0, 0x86, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0xe6,
	0x8c, 0x82, 0xe8, 0xbd, 0xbd, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe6, 0x96, 0x87, 0xe4, 0xbb,
	0xb6, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe6, 0x88, 0x96, 0xe6, 0x9c, 0xaa, 0xe6, 0xa0, 0xbc,
	0xe5, 0xbc, 0x8f, 0xe5, 0x8c, 0x96, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7,
	0x9b, 0x98, 0xe5, 0xb0, 0x86, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc,
	0x8f, 0xe5, 0x8c, 0x96, 0xe4, 0xb8, 0xba, 0x65, 0x78, 0x74, 0x34, 0x20, 0x28, 0x74, 0x6c, 0x69,
	0x6e, 0x75, 0x78, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe5,
	0x8c, 0x96, 0xe6, 0x88, 0x90, 0x78, 0x66, 0x73, 0x29, 0xe5, 0xb9, 0xb6, 0xe6, 0x8c, 0x82, 0xe8,
	0xbd, 0xbd, 0xe3, 0x80, 0x82, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b,
	0x98, 0xe6, 0x88, 0x96, 0xe6, 0x9c, 0x89, 0xe5, 0xa4, 0x9a, 0xe5, 0x9d, 0x97, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0xbb, 0xe6,
	0x9c, 0xba, 0xe6, 0xad, 0xa4, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0x8d, 0xe7, 0x94,
	0x9f, 0xe6, 0x95, 0x88, 0xe3, 0x80, 0x82, 0x42, 0x43, 0x53, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x8d, 0x03, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0xec, 0x02, 0x92, 0x41, 0xe8, 0x02, 0x2a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x32, 0xd9, 0x02, 0x62, 0x61, 0x73,
	0x65, 0x36, 0x34, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac, 0xef, 0xbc, 0x8c, 0x6b, 0x38, 0x73, 0xe7, 0xbb,
	0x84, 0xe4, 0xbb, 0xb6, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe5, 0x90, 0x8e, 0xe6, 0x89, 0xa7,
	0xe8, 0xa1, 0x8c, 0xef, 0xbc, 0x8c, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe4, 0xbf, 0x9d, 0xe8,
	0xaf, 0x81, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0xaf, 0xe9, 0x87,
	0x8d, 0xe5, 0x85, 0xa5, 0xe5, 0x92, 0x8c, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0xe9, 0x80, 0xbb,
	0xe8, 0xbe, 0x91, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe8, 0xa6, 0x81, 0xe6,
	0xb1, 0x82, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe5, 0x9c,
	0xa8, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96,
	0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe5, 0x90, 0x8e, 0xe6, 0x89, 0x8d, 0xe5, 0x8f, 0xaf, 0xe5,
	0x8a, 0xa0, 0xe5, 0x85, 0xa5, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xe5, 0x8f, 0xaf, 0xe9, 0x85,
	0x8d, 0xe5, 0x90, 0x88, 0x20, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x2c,
	0x20, 0xe5, 0x9c, 0xa8, 0x20, 0x75, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20,
	0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe5,
	0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe5, 0x90, 0x8e, 0x2c, 0x20, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0,
	0x20, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x74, 0x6c, 0x20, 0x75, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x6f,
	0x6e, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2d, 0x2d, 0x6b, 0x75, 0x62,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3d, 0x2f, 0x72, 0x6f, 0x6f, 0x74, 0x2f, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0xe5, 0x91, 0xbd, 0xe4, 0xbb,
	0xa4, 0xe4, 0xbd, 0xbf, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x8a, 0xa0, 0xe5, 0x85, 0xa5,
	0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0xdd, 0x01, 0x0a, 0x0d, 0x75, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x98, 0x01, 0x92, 0x41, 0x94, 0x01, 0x2a,
	0x0d, 0x75, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x82,
	0x01, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe5, 0x8a, 0xa0, 0xe5, 0x85, 0xa5, 0xe7, 0x9a, 0x84,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0x82, 0xe4,
	0xb8, 0x8e, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0xe5, 0x80, 0xbc, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0x8f, 0x82, 0xe4, 0xb8,
	0x8e, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xef, 0xbc, 0x8c, 0xe9, 0x9d, 0x9e, 0x30, 0xe8, 0xa1,
	0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe8, 0xb0, 0x83,
	0xe5, 0xba, 0xa6, 0x28, 0xe5, 0x8a, 0xa0, 0xe5, 0x85, 0xa5, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe6, 0x97, 0xb6, 0xe5, 0x8f, 0xaf, 0xe8, 0xa6, 0x86, 0xe7, 0x9b, 0x96, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x29, 0x52, 0x0d, 0x75, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0xb3, 0x02, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x44, 0x69, 0x73, 0x6b, 0x42, 0xf5, 0x01, 0x92, 0x41, 0xf1, 0x01, 0x2a, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x32, 0xe3, 0x01, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0xe7, 0x9b, 0x98, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe6, 0x97, 0xa0, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe5, 0x88, 0x99, 0xe4, 0xb8,
	0x8d, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0x2e, 0x20, 0xe5, 0xa4, 0x9a, 0xe7, 0x9b, 0x98, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe6, 0x8c, 0x82, 0xe8, 0xbd, 0xbd, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x9a, 0xe6, 0x96, 0xb0, 0xe5, 0xbb, 0xba, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe8, 0xaf, 0xb7, 0xe7, 0xa1, 0xae, 0xe4, 0xbf, 0x9d, 0xe8,
	0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0x43, 0x56, 0x4d, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x92, 0xe4, 0xba, 0x86, 0xe8, 0xb4, 0xad, 0xe4, 0xb9, 0xb0,
	0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe7,
	0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xaf, 0xa5, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf, 0xe9, 0x92, 0x88, 0xe5, 0xaf, 0xb9,
	0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe7, 0x94, 0x9f, 0xe4, 0xba, 0xa7, 0xe6, 0x9c, 0xba, 0xe5,
	0x99, 0xa8, 0xe4, 0xb8, 0x94, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe5, 0xa4, 0x9a, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x96, 0x02, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0xbd, 0x01, 0x92, 0x41, 0xb9, 0x01, 0x2a, 0x09, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x32, 0xab, 0x01, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0xe5, 0x90, 0x84, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a,
	0xe4, 0xb9, 0x89, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe9, 0xa2, 0x84, 0xe5,
	0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0x9a, 0x84, 0x6b, 0x65, 0x79, 0xe4, 0xb8, 0xba, 0x6b, 0x75,
	0x62, 0x65, 0x6c, 0x65, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xe4, 0xb8, 0xba, 0xe5, 0x90, 0x84,
	0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe8, 0xbf, 0x9b, 0xe7, 0xa8, 0x8b, 0xe5, 0x90, 0xaf, 0xe5,
	0x8a, 0xa8, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8,
	0xaa, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0x3b, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b,
	0xe5, 0xa6, 0x82, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x3a, 0x20, 0x72, 0x6f, 0x6f, 0x74,
	0x2d, 0x64, 0x69, 0x72, 0x3d, 0x2f, 0x76, 0x61, 0x72, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x6b, 0x75,
	0x62, 0x65, 0x6c, 0x65, 0x74, 0x3b, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67,
	0x73, 0x12, 0xb5, 0x01, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x84,
	0x01, 0x92, 0x41, 0x80, 0x01, 0x2a, 0x12, 0x70, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x32, 0x6a, 0x62, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x20, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac, 0xef, 0xbc, 0x8c, 0xe5, 0x9c, 0xa8, 0xe5, 0x88, 0x9d,
	0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb9, 0x8b, 0xe5,
	0x89, 0x8d, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xef, 0xbc, 0x8c, 0xe6, 0xb3, 0xa8, 0xe6, 0x84,
	0x8f, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe5, 0x8f, 0xaa, 0xe5, 0xaf, 0xb9, 0xe6, 0xb7, 0xbb,
	0xe5, 0x8a, 0xa0, 0xe5, 0xb7, 0xb2, 0xe6, 0x9c, 0x89, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7,
	0x94, 0x9f, 0xe6, 0x95, 0x88, 0x52, 0x12, 0x70, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x91, 0x02, 0x0a, 0x13, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0xc6, 0x01, 0x92, 0x41, 0xc2, 0x01, 0x2a, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x32, 0xaa, 0x01, 0xe4, 0xb8,
	0x8a, 0xe6, 0x9e, 0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4,
	0xbc, 0xa0, 0xe9, 0x80, 0x92, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc,
	0x8c, 0xe8, 0xaf, 0xa5, 0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xba, 0xe9, 0xa2, 0x84,
	0xe7, 0x95, 0x99, 0xe4, 0xba, 0x8c, 0xe6, 0x96, 0xb9, 0x2f, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9,
	0x2f, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x95, 0x86, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95,
	0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xef, 0xbc, 0x8c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x9c, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0xe4, 0xb9, 0x8b, 0xe5, 0x90, 0x8e,
	0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8e, 0xe5,
	0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe3, 0x80, 0x82, 0x52, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4f,
	0x75, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x88, 0x02,
	0x0a, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0xbf, 0x01, 0x92, 0x41, 0xbb, 0x01, 0x2a, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x49, 0x6e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x32, 0xa4, 0x01,
	0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe9,
	0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbc, 0xa0, 0xe9, 0x80,
	0x92, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5,
	0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xba, 0xe9, 0xa2, 0x84, 0xe7, 0x95, 0x99, 0xe4,
	0xba, 0x8c, 0xe6, 0x96, 0xb9, 0x2f, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0x2f, 0xe6, 0x9c, 0x8d,
	0xe5, 0x8a, 0xa1, 0xe5, 0x95, 0x86, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbd, 0xbf, 0xe7,
	0x94, 0xa8, 0xef, 0xbc, 0x8c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0xe5, 0x9c, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0xe4, 0xb9, 0x8b, 0xe5, 0x90, 0x8e, 0xe8, 0xbf, 0x9b, 0xe8,
	0xa1, 0x8c, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8e, 0xe5, 0xae, 0x89, 0xe8, 0xa3,
	0x85, 0xe3, 0x80, 0x82, 0x52, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x4f, 0x53, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x4f, 0x53, 0x32, 0x0e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1,
	0xe7, 0x89, 0x88, 0x4f, 0x53, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x53, 0x12, 0x3b, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21,
	0x92, 0x41, 0x14, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x32, 0x09, 0xe6, 0x9b,
	0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80,
	0x08, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0xaa, 0x01, 0x0a, 0x07, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x75,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x73, 0x92, 0x41, 0x70, 0x2a, 0x07,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x65, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6,
	0xb1, 0xa0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97,
	0xb6, 0xe5, 0x8f, 0xaf, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe7, 0x89, 0x88,
	0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe8, 0x8b, 0xa5, 0xe4, 0xb8,
	0x8d, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe5, 0x92, 0x8c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe5, 0x92, 0x8c, 0xe7, 0x89, 0x88, 0xe6,
	0x9c, 0xac, 0xe4, 0xbf, 0x9d, 0xe6, 0x8c, 0x81, 0xe4, 0xb8, 0x80, 0xe8, 0x87, 0xb4, 0x52, 0x07,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0xb3, 0x01, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x7f, 0x92, 0x41, 0x7c, 0x2a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x32, 0x72, 0x43, 0x43, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x49, 0x44, 0x2c, 0x20, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb8,
	0x8a, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe6, 0x97, 0xb6, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe4, 0xb8, 0x8b, 0xe8,
	0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xa5, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe5, 0x88, 0x99,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0x8d, 0xe8, 0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0xe6,
	0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x97, 0x01,
	0x0a, 0x10, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x92, 0x41, 0x4a, 0x2a, 0x10, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x32, 0x36, 0xe7,
	0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8e, 0xe7, 0xbd,
	0xae, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac, 0x2c, 0x20, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0xe7,
	0xbc, 0x96, 0xe7, 0xa0, 0x81, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0x84,
	0x9a, 0xe6, 0x9c, 0xac, 0x2e, 0x52, 0x10, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x50, 0x72,
	0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x9a, 0x01, 0x0a, 0x11, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4e, 0x92, 0x41, 0x4b, 0x2a, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x50,
	0x6f, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x32, 0x36, 0xe7, 0xbc, 0xa9, 0xe5, 0xae,
	0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8e, 0xe7, 0xbd, 0xae, 0xe8, 0x84, 0x9a,
	0xe6, 0x9c, 0xac, 0x2c, 0x20, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0xe7, 0xbc, 0x96, 0xe7, 0xa0,
	0x81, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac,
	0x2e, 0x52, 0x11, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x6c, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x1d, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xae,
	0xbe, 0xe7, 0xbd, 0xae, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x61, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x32, 0x18, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x95,
	0x9c, 0xe5, 0x83, 0x8f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a, 0x07, 0x67, 0x70, 0x75, 0x41, 0x72, 0x67, 0x73,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x50, 0x55, 0x41, 0x72, 0x67, 0x73, 0x42,
	0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x67, 0x70, 0x75, 0x41, 0x72, 0x67, 0x73, 0x32, 0x0f, 0x47,
	0x50, 0x55, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x67, 0x70, 0x75, 0x41, 0x72, 0x67, 0x73, 0x12, 0x67, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x09, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x1e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1,
	0xe7, 0x89, 0x88, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0xa4, 0x01, 0x92, 0x41, 0xa0, 0x01,
	0x0a, 0x9d, 0x01, 0x2a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x59,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f,
	0xb7, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe5, 0x85, 0x81,
	0xe8, 0xae, 0xb8, 0xe6, 0x9b, 0xb4, 0xe6, 0x94, 0xb9, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe9, 0x98, 0xb2, 0xe6, 0xad, 0xa2, 0xe5, 0xaf,
	0xb9, 0xe5, 0xad, 0x98, 0xe9, 0x87, 0x8f, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xba, 0xa7,
	0xe7, 0x94, 0x9f, 0xe5, 0xbd, 0xb1, 0xe5, 0x93, 0x8d, 0xd2, 0x01, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0xd2, 0x01, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x22, 0xb6, 0x02, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x79,
	0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa3, 0x02, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x21, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a,
	0x84, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x62, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x44, 0x32, 0x25, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x44, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0x49, 0x44, 0x52, 0x0e, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x3a, 0x51, 0x92, 0x41,
	0x4e, 0x0a, 0x4c, 0x2a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe7,
	0x89, 0x88, 0xd2, 0x01, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0xd2, 0x01,
	0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x22,
	0xb6, 0x02, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x79, 0x0a,
	0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f, 0x77,
	0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x0e, 0x6e,
	0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x32, 0x0e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0x49, 0x44, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a,
	0x16, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe8, 0xaf, 0xa6, 0xe6, 0x83,
	0x85, 0xd2, 0x01, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x0e,
	0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x22, 0xd5,
	0x03, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x12, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe8, 0xaf,
	0xa6, 0xe6, 0x83, 0x85, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x4f, 0x92, 0x41, 0x4c, 0x0a, 0x4a, 0x2a, 0x17, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcd, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x0e, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x32, 0x0e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6,
	0xa8, 0xa1, 0xe7, 0x89, 0x88, 0x49, 0x44, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x3a, 0xac, 0x01, 0x92, 0x41, 0xa8, 0x01, 0x0a, 0xa5,
	0x01, 0x2a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x7e, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0xa1, 0xab,
	0xe5, 0x86, 0x99, 0xe4, 0xba, 0x86, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe5, 0xad, 0x97, 0xe6,
	0xae, 0xb5, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x88, 0xe7, 0x9b,
	0xae, 0xe6, 0xa0, 0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0x85, 0xa8, 0xe4, 0xb8, 0xba, 0xe7,
	0xa9, 0xba, 0xe5, 0x88, 0x99, 0xe4, 0xb8, 0xba, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x85,
	0xa8, 0xe9, 0x87, 0x8f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xd2, 0x01, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x22, 0xd6, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x1d,
	0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x3a, 0x4a, 0x92, 0x41, 0x47, 0x0a, 0x45, 0x2a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xd4, 0x10, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5b, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d,
	0x92, 0x41, 0x3a, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x2d,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0x2c, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4,
	0xb8, 0xba, 0x33, 0x32, 0xe4, 0xbd, 0x8d, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2,
	0x2c, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe7, 0x94, 0x9f, 0xe6, 0x88, 0x90, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x4e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x32, 0x2f, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xef, 0xbc, 0x8c, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8,
	0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7,
	0xac, 0xa6, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x72, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x6c,
	0x69, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0x92,
	0x41, 0x4d, 0x2a, 0x0b, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x32,
	0x3e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9,
	0xe5, 0x86, 0x99, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0x94, 0xaf, 0xe4,
	0xb8, 0x80, 0xef, 0xbc, 0x8c, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83,
	0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x33, 0x32, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52,
	0x0b, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92,
	0x41, 0x1a, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x0f, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x32, 0x15, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x32, 0x2c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0x31, 0x3a, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0xef, 0xbc, 0x8c, 0x32, 0x3a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x78, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x42, 0x4b, 0x52, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x5c, 0x92, 0x41, 0x59, 0x2a, 0x08, 0x75, 0x73, 0x65, 0x42, 0x4b, 0x52, 0x65, 0x73,
	0x32, 0x4d, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe8, 0x93,
	0x9d, 0xe9, 0xb2, 0xb8, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe7,
	0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xae, 0xa1, 0xe8, 0xb4,
	0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x42, 0x4b, 0x52, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0x92, 0x41, 0x21, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x32, 0x12, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xae, 0x80, 0xe8, 0xa6, 0x81, 0xe6, 0x8f,
	0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x54, 0x0a, 0x09, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x09, 0x69, 0x73, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x32, 0x26, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe5, 0xb7, 0xb2, 0xe7, 0xbb, 0x8f, 0xe7, 0xa6, 0xbb, 0xe7, 0xba, 0xbf, 0xef, 0xbc,
	0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x69, 0x73,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x64, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0x92, 0x41, 0x4d, 0x2a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x32, 0x45, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0xad, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89,
	0x6b, 0x38, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0xaa, 0xe6,
	0x9d, 0xa5, 0xe8, 0xaf, 0xa5, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe5, 0x8f, 0xaf, 0xe8, 0x83,
	0xbd, 0xe5, 0xba, 0x9f, 0xe5, 0xbc, 0x83, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x4c, 0x0a,
	0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x49, 0x44, 0x32, 0x1b, 0xe8, 0x93, 0x9d, 0xe9, 0xb2, 0xb8, 0x43, 0x4d, 0x44, 0x42, 0xe4, 0xb8,
	0xad, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x80, 0x01, 0x0a, 0x0a,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x60, 0x92, 0x41, 0x5d, 0x2a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x32, 0x4f, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe7, 0x8b, 0xac, 0xe4, 0xb8,
	0xba, 0xe8, 0x93, 0x9d, 0xe7, 0x9b, 0xbe, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xef, 0xbc, 0x8c,
	0x31, 0x3a, 0xe7, 0x89, 0xa9, 0xe7, 0x90, 0x86, 0xe6, 0x9c, 0xba, 0xe9, 0x83, 0xa8, 0xe7, 0xbd,
	0xb2, 0xef, 0xbc, 0x8c, 0x32, 0x3a, 0xe5, 0xae, 0xb9, 0xe5, 0x99, 0xa8, 0xe9, 0x83, 0xa8, 0xe7,
	0xbd, 0xb2, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40,
	0x0a, 0x04, 0x62, 0x67, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41,
	0x29, 0x2a, 0x04, 0x62, 0x67, 0x49, 0x44, 0x32, 0x21, 0xe4, 0xba, 0x8b, 0xe4, 0xb8, 0x9a, 0xe7,
	0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xe4, 0xba, 0x8e,
	0xe8, 0x93, 0x9d, 0xe9, 0xb2, 0xb8, 0x43, 0x4d, 0x44, 0x42, 0x52, 0x04, 0x62, 0x67, 0x49, 0x44,
	0x12, 0x4a, 0x0a, 0x06, 0x62, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x32, 0x92, 0x41, 0x2f, 0x2a, 0x06, 0x62, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x25, 0xe4,
	0xba, 0x8b, 0xe4, 0xb8, 0x9a, 0xe7, 0xbe, 0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xef, 0xbc,
	0x8c, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xe4, 0xba, 0x8e, 0xe8, 0x93, 0x9d, 0xe9, 0xb2, 0xb8,
	0x43, 0x4d, 0x44, 0x42, 0x52, 0x06, 0x62, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x06,
	0x64, 0x65, 0x70, 0x74, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41,
	0x28, 0x2a, 0x06, 0x64, 0x65, 0x70, 0x74, 0x49, 0x44, 0x32, 0x1e, 0xe9, 0x83, 0xa8, 0xe9, 0x97,
	0xa8, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xe4, 0xba, 0x8e, 0xe8,
	0x93, 0x9d, 0xe9, 0xb2, 0xb8, 0x43, 0x4d, 0x44, 0x42, 0x52, 0x06, 0x64, 0x65, 0x70, 0x74, 0x49,
	0x44, 0x12, 0x4d, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x32, 0x22, 0xe9, 0x83, 0xa8, 0xe9, 0x97, 0xa8, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0xef, 0xbc, 0x8c, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xe4, 0xba, 0x8e, 0xe8, 0x93, 0x9d, 0xe9,
	0xb2, 0xb8, 0x43, 0x4d, 0x44, 0x42, 0x52, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x49, 0x0a, 0x08, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x2a, 0x08, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x32, 0x1e, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0x9d,
	0xa5, 0xe6, 0xba, 0x90, 0xe4, 0xba, 0x8e, 0xe8, 0x93, 0x9d, 0xe9, 0xb2, 0xb8, 0x43, 0x4d, 0x44,
	0x42, 0x52, 0x08, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x53, 0x0a, 0x0a, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x33, 0x92, 0x41, 0x30, 0x2a, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x32, 0x22, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xef, 0xbc,
	0x8c, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xe4, 0xba, 0x8e, 0xe8, 0x93, 0x9d, 0xe9, 0xb2, 0xb8,
	0x43, 0x4d, 0x44, 0x42, 0x52, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x51, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x35, 0x92, 0x41, 0x32, 0x2a, 0x08, 0x69, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x32, 0x26, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe4, 0xbf, 0x9d, 0xe5,
	0xaf, 0x86, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0xe4, 0xb8, 0xba, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0xaa, 0x01, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x5e, 0x92, 0x41, 0x5b, 0x2a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x32, 0x4c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8b,
	0xe7, 0x95, 0x99, 0xe5, 0xad, 0x98, 0xe7, 0x9a, 0x84, 0xe5, 0x90, 0x84, 0xe4, 0xba, 0x91, 0xe7,
	0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe4, 0xb8, 0x8b, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a,
	0x84, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xef, 0xbc, 0x8c, 0x6b, 0x65, 0x79, 0xe4, 0xb8, 0xba, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x12, 0x3a, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x32, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x5a, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x6d, 0x92, 0x41, 0x6a, 0x0a, 0x68, 0x2a, 0x07,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x32, 0x5d, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe4, 0xbd, 0x93, 0xe5, 0xaf,
	0xb9, 0xe9, 0xbd, 0x90, 0x64, 0x65, 0x76, 0x6f, 0x70, 0x73, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe3, 0x80, 0x82, 0xe6, 0xaf, 0x8f, 0xe4, 0xb8, 0xaa, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe5,
	0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe6, 0x9c, 0x89, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90,
	0xe9, 0x9a, 0x94, 0xe7, 0xa6, 0xbb, 0x22, 0xe5, 0x0f, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x51, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x39, 0x92, 0x41, 0x36, 0x2a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32, 0x2c, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8,
	0xbf, 0xbd, 0xe6, 0xba, 0xaf, 0xe4, 0xb8, 0x8e, 0xe7, 0xa1, 0xae, 0xe8, 0xae, 0xa4, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x7d, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x61, 0x92, 0x41, 0x5e, 0x2a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x52, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x54, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0xe7, 0xad, 0x89, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x78, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x60, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x0c,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xfa, 0x42, 0x44, 0x72,
	0x42, 0x52, 0x0c, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x52,
	0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x52, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x52, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x52, 0x07, 0x54, 0x49, 0x4d, 0x45,
	0x4f, 0x55, 0x54, 0x52, 0x0e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e,
	0x41, 0x54, 0x45, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5e, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x92, 0x41,
	0x41, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x36, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc,
	0x8c, 0xe6, 0x8a, 0xa5, 0xe9, 0x94, 0x99, 0xe6, 0x97, 0xb6, 0xe4, 0xb8, 0xba, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe3,
	0x80, 0x82, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x32, 0x12, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x90,
	0xaf, 0xe5, 0x8a, 0xa8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x2e, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0x92, 0x41, 0x19, 0x2a, 0x03, 0x65, 0x6e, 0x64, 0x32, 0x12, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1,
	0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x12, 0x4c, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0d, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x12, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x55, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30, 0x2a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x32, 0x21, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0xad,
	0xa3, 0xe5, 0x9c, 0xa8, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe7, 0x9a, 0x84, 0xe6, 0xad, 0xa5,
	0xe9, 0xaa, 0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x49, 0x0a, 0x0c, 0x73, 0x74, 0x65, 0x70, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41,
	0x22, 0x2a, 0x0c, 0x73, 0x74, 0x65, 0x70, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x32,
	0x12, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe6, 0xad, 0xa5,
	0xe9, 0xaa, 0xa4, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x70, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x82, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x4b, 0x92, 0x41, 0x48, 0x2a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x32, 0x3f,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe6, 0xad, 0xa5, 0xe9,
	0xaa, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6,
	0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0xa1, 0xae,
	0xe8, 0xae, 0xa4, 0xef, 0xbc, 0x8c, 0xe5, 0xbc, 0x82, 0xe5, 0xb8, 0xb8, 0xe6, 0x97, 0xb6, 0x52,
	0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x12, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a,
	0xa1, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f,
	0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x12, 0xe4, 0xbb, 0xbb,
	0xe5, 0x8a, 0xa1, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a,
	0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x0f, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a,
	0xa1, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xba, 0xba, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x32, 0x12, 0xe4, 0xb8, 0x8a, 0xe6, 0xac, 0xa1,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x32, 0x0f, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0xba, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x12, 0x6d, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x42, 0x45, 0x92, 0x41, 0x42, 0x2a, 0x0e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x32, 0x30,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0xba, 0xe5,
	0xbc, 0xba, 0xe5, 0x88, 0xb6, 0xe7, 0xbb, 0x88, 0xe6, 0xad, 0xa2, 0xef, 0xbc, 0x8c, 0xe7, 0x94,
	0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6,
	0x52, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x12, 0x8d, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x41, 0x92, 0x41, 0x3e, 0x2a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x32, 0x2e, 0xe5, 0x85, 0xac, 0xe5, 0x85, 0xb1, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0xbf, 0xe4, 0xba, 0x8e, 0xe8, 0xb7, 0xa8, 0x53, 0x74, 0x65, 0x70,
	0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe4, 0xbc, 0xa0, 0xe9,
	0x80, 0x92, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x43, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x32, 0x18, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe4,
	0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0a,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x1d, 0xe5, 0xbd, 0x93, 0xe5,
	0x89, 0x8d, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0x9a,
	0x84, 0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x2a,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x32, 0x2e, 0xe8, 0xae,
	0xb0, 0xe5, 0xbd, 0x95, 0x43, 0x41, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe6,
	0x97, 0xb6, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe7, 0x9a,
	0x84, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x0b, 0x6e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x1a, 0x4e, 0x0a, 0x0a, 0x53, 0x74, 0x65,
	0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x91, 0x01, 0x92, 0x41, 0x8d,
	0x01, 0x0a, 0x8a, 0x01, 0x2a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x32, 0x81, 0x01, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xef, 0xbc, 0x8c, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe8, 0x83, 0x8c, 0xe5, 0x90, 0x8e, 0xe6, 0x89,
	0x80, 0xe6, 0x98, 0xa0, 0xe5, 0xb0, 0x84, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf, 0xe5,
	0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c,
	0x96, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xef, 0xbc, 0x88, 0xe6, 0x95, 0xb4, 0xe5, 0x90, 0x88,
	0xe4, 0xba, 0x91, 0x61, 0x70, 0x69, 0xe4, 0xb8, 0x8e, 0xe8, 0x93, 0x9d, 0xe9, 0xb2, 0xb8, 0xe6,
	0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe8, 0xbf, 0x90, 0xe7, 0xbb, 0xb4, 0xef, 0xbc, 0x89, 0x22, 0xe3,
	0x0d, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x32, 0x0c, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x2a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x32, 0x25, 0xe6, 0x89, 0x80, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe7,
	0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x62, 0x6b,
	0x73, 0x6f, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23,
	0x92, 0x41, 0x20, 0x2a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x32, 0x18, 0xe8, 0xa1, 0xa5, 0xe5, 0x85,
	0x85, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x89, 0x80,
	0xe7, 0x94, 0xa8, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x6d, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x33, 0x92, 0x41, 0x30,
	0x2a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x32, 0x26, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4,
	0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef,
	0xbc, 0x8c, 0x6b, 0x65, 0x79, 0xe3, 0x80, 0x81, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xe5, 0xaf, 0xb9,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x05, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x32, 0x15, 0xe8, 0xaf, 0xa5, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe9, 0x87,
	0x8d, 0xe8, 0xaf, 0x95, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x32, 0x0c, 0xe5, 0x90,
	0xaf, 0xe5, 0x8a, 0xa8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x28, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16,
	0x92, 0x41, 0x13, 0x2a, 0x03, 0x65, 0x6e, 0x64, 0x32, 0x0c, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x46, 0x0a, 0x0d, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x7a, 0x92, 0x41, 0x32, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x32, 0x28, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef,
	0xbc, 0x8c, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8,
	0xba, 0x4e, 0x4f, 0x54, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0xfa, 0x42, 0x42, 0x72, 0x40,
	0x52, 0x0a, 0x4e, 0x4f, 0x54, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x52, 0x07, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x52, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x07,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x52, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x52, 0x0e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x2a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x33, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe6,
	0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8,
	0xbb, 0xe8, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba,
	0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x32, 0x18, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe4, 0xb8, 0x8a, 0xe6, 0xac, 0xa1, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x4a, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x32, 0x19, 0x74, 0x61, 0x73, 0x6b, 0xe5, 0xaf, 0xb9, 0xe5, 0xba,
	0x94, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xe5, 0x87, 0xbd, 0xe6, 0x95, 0xb0,
	0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x44, 0x0a, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28,
	0x92, 0x41, 0x25, 0x2a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x19, 0x74,
	0x61, 0x73, 0x6b, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0xad, 0xe6,
	0x96, 0x87, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x4f, 0x6e, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x9a, 0x01, 0x92, 0x41, 0x96, 0x01,
	0x2a, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x32, 0x85,
	0x01, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x97, 0xb6, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8,
	0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0xe6, 0x9f, 0x90, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0x2c,
	0xe7, 0x94, 0xb1, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe3,
	0x80, 0x82, 0xe5, 0xbd, 0x93, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4,
	0xa5, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0xe6, 0x97, 0xb6, 0xef, 0xbc, 0x8c, 0xe7, 0xb3, 0xbb,
	0xe7, 0xbb, 0x9f, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0xe5,
	0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0xad, 0xa5, 0xe9, 0xaa,
	0xa4, 0xef, 0xbc, 0x8c, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe5, 0x90, 0x8e, 0xe7, 0xbb, 0xad,
	0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x4f, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x6f, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0x92, 0x41, 0x4e, 0x2a, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x32, 0x41, 0xe8, 0xa7, 0xa3, 0xe5, 0x86, 0xb3, 0xe5,
	0xbd, 0x93, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe5, 0x90, 0x8c, 0xe4, 0xb8, 0x80, 0x74, 0x61,
	0x73, 0x6b, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0xe6, 0x97, 0xb6, 0x2c, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe8, 0xbd, 0xac, 0xe6, 0x8d, 0xa2, 0xe7, 0xbf, 0xbb, 0xe8, 0xaf, 0x91, 0xe5, 0xb1,
	0x95, 0xe7, 0xa4, 0xba, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xcc, 0x01, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53,
	0x6b, 0x69, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x42, 0xad, 0x01, 0x92, 0x41, 0xa9, 0x01,
	0x2a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x70, 0x32, 0x9b, 0x01, 0xe6, 0xa0,
	0x87, 0xe8, 0xaf, 0x86, 0xe8, 0xaf, 0xa5, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe5, 0xa4, 0xb1,
	0xe8, 0xb4, 0xa5, 0xe6, 0x97, 0xb6, 0xe5, 0x80, 0x99, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5,
	0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x8b, 0xe5, 0x8a,
	0xa8, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0xe3, 0x80, 0x82, 0xe5, 0xbd, 0x93, 0xe4, 0xb8, 0xba,
	0x74, 0x72, 0x75, 0x65, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x97, 0xb6, 0xe5, 0x80, 0x99,
	0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x8b, 0xe5,
	0x8a, 0xa8, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0x2c, 0x20, 0xe4, 0xb8, 0xba, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x97, 0xb6, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0xe4, 0xbb, 0x85, 0xe8, 0x83, 0xbd, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe9, 0x87, 0x8d,
	0xe8, 0xaf, 0x95, 0xe8, 0xa7, 0xa3, 0xe5, 0x86, 0xb3, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x53, 0x6b, 0x69, 0x70, 0x12, 0x46, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x08, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x32, 0x1b, 0xe8, 0xaf, 0xa5, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4,
	0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0xe6, 0xac, 0xa1, 0xe6,
	0x95, 0xb0, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x1a, 0x39, 0x0a, 0x0b,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x8a, 0x01, 0x92, 0x41, 0x86, 0x01, 0x0a, 0x83,
	0x01, 0x2a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x32, 0x7b, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6,
	0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe7, 0x9a, 0x84, 0xe5, 0x8a, 0xa8, 0xe4, 0xbd, 0x9c, 0xe6, 0xad,
	0xa5, 0xe9, 0xaa, 0xa4, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0xae, 0x9a,
	0xe4, 0xb9, 0x89, 0xe9, 0x95, 0xbf, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe8, 0xbf, 0x90, 0xe8,
	0xa1, 0x8c, 0xe7, 0x9a, 0x84, 0xe5, 0xbc, 0x82, 0xe6, 0xad, 0xa5, 0xe5, 0x8a, 0xa8, 0xe4, 0xbd,
	0x9c, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8,
	0xe9, 0x87, 0x8d, 0xe6, 0x96, 0xb0, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xef,
	0xbc, 0x8c, 0xe6, 0x8f, 0x92, 0xe4, 0xbb, 0xb6, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe7, 0xad,
	0x89, 0xe3, 0x80, 0x82, 0x22, 0xa1, 0x03, 0x0a, 0x07, 0x54, 0x6b, 0x65, 0x43, 0x69, 0x64, 0x72,
	0x12, 0x34, 0x0a, 0x03, 0x56, 0x50, 0x43, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92,
	0x41, 0x1f, 0x2a, 0x03, 0x56, 0x50, 0x43, 0x32, 0x18, 0xe7, 0xbd, 0x91, 0xe6, 0xae, 0xb5, 0xe6,
	0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x56, 0x50, 0x43, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x03, 0x56, 0x50, 0x43, 0x12, 0x2b, 0x0a, 0x04, 0x43, 0x49, 0x44, 0x52, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x43, 0x49, 0x44, 0x52, 0x32,
	0x0c, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe7, 0xbd, 0x91, 0xe6, 0xae, 0xb5, 0x52, 0x04, 0x43,
	0x49, 0x44, 0x52, 0x12, 0x45, 0x0a, 0x08, 0x49, 0x50, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x08, 0x49, 0x50, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x32, 0x1a, 0xe7, 0xbd, 0x91, 0xe6, 0xae, 0xb5, 0xe5, 0x8c, 0x85, 0xe5,
	0x90, 0xab, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0x49, 0x50, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80,
	0x52, 0x08, 0x49, 0x50, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x12, 0xe7, 0xbd, 0x91, 0xe6, 0xae, 0xb5, 0xe5,
	0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x32, 0x12, 0xe7, 0xbd, 0x91, 0xe6, 0xae, 0xb5, 0xe5, 0xbd, 0x92, 0xe5, 0xb1, 0x9e,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a,
	0x37, 0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a, 0x07, 0x54, 0x6b, 0x65, 0x43, 0x69, 0x64, 0x72, 0x32,
	0x27, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0x54, 0x4b, 0x45,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbd, 0x91, 0xe6, 0xae, 0xb5, 0xe5, 0x88, 0x92, 0xe5,
	0x88, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22, 0x95, 0x01, 0x0a, 0x0c, 0x54, 0x6b, 0x65,
	0x43, 0x69, 0x64, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x56, 0x50, 0x43, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x50,
	0x43, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x50, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x49, 0x50, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x29, 0x92, 0x41, 0x26, 0x0a, 0x24, 0x2a, 0x0c, 0x54, 0x6b,
	0x65, 0x43, 0x69, 0x64, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x14, 0x54, 0x4b, 0x45, 0x20,
	0x43, 0x49, 0x44, 0x52, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x22, 0x8d, 0x34, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x91, 0x01, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x73, 0x92, 0x41, 0x70, 0x2a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x63, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x42, 0x43, 0x53, 0x2d,
	0x4b, 0x38, 0x53, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x28, 0xe5, 0x86, 0x99, 0xe5, 0x85,
	0xa5, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x97, 0xb6, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5,
	0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xef,
	0xbc, 0x8c, 0xe6, 0x96, 0xb0, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x9c,
	0x80, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe7, 0x94, 0x9f, 0xe6, 0x88, 0x90, 0x29, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28,
	0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x32, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x73, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x57, 0x92, 0x41, 0x4d, 0x2a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x41, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x8f,
	0x90, 0xe4, 0xbe, 0x9b, 0xe8, 0x80, 0x85, 0xef, 0xbc, 0x8c, 0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1,
	0xe6, 0x9d, 0xbf, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0xbd, 0xb1, 0xe5, 0x93, 0x8d, 0xe5, 0x85,
	0xb7, 0xe4, 0xbd, 0x93, 0xe4, 0xba, 0x91, 0xe8, 0xae, 0xbe, 0xe6, 0x96, 0xbd, 0xe7, 0xae, 0xa1,
	0xe7, 0x90, 0x86, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x1c, 0x2a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6,
	0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xfa, 0x42, 0x17, 0x72, 0x15,
	0x10, 0x01, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a,
	0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41,
	0x32, 0x2a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x32, 0x29, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe7, 0xa7, 0x81, 0xe6, 0x9c, 0x89, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0x69, 0x64, 0xef, 0xbc,
	0x8c, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xa1, 0xab,
	0xe5, 0x86, 0x99, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x28, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49,
	0x44, 0x12, 0x4e, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0xfa, 0x42,
	0x15, 0x72, 0x13, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x55, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x0c, 0x43, 0x4d, 0x44, 0x42, 0xe4, 0xb8, 0x9a, 0xe5,
	0x8a, 0xa1, 0x49, 0x44, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x73, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0x92,
	0x41, 0x36, 0x2a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x32,
	0x27, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0x2c, 0x20, 0xe4,
	0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x5b, 0x70, 0x72, 0x6f, 0x64, 0x2c, 0x20, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x2c, 0x20, 0x73, 0x74, 0x61, 0x67, 0x5d, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x52, 0x04, 0x73,
	0x74, 0x61, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64,
	0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a,
	0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3a, 0x92, 0x41, 0x26, 0x2a, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x32, 0x18, 0xe5, 0xbc, 0x95, 0xe6, 0x93, 0x8e, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x6b, 0x38, 0x73, 0xfa, 0x42, 0x0e, 0x72,
	0x0c, 0x52, 0x03, 0x6b, 0x38, 0x73, 0x52, 0x05, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x52, 0x0a, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x69, 0x73, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2d,
	0x92, 0x41, 0x2a, 0x2a, 0x0b, 0x69, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x32, 0x1b, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a,
	0xa1, 0xe7, 0x8b, 0xac, 0xe5, 0x8d, 0xa0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x52, 0x0b, 0x69,
	0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x89, 0x01, 0x92, 0x41, 0x85, 0x01, 0x2a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x32, 0x76, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x2c, 0x20, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x5b, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5d, 0x2c, 0x20,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba,
	0xe4, 0xb8, 0xba, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xef,
	0xbc, 0x8c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe7, 0x8b,
	0xac, 0xe7, 0xab, 0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98,
	0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x13, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x65, 0x92, 0x41, 0x62, 0x2a, 0x13, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x32, 0x4b, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe8, 0xaf, 0xa5, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe4, 0xb8, 0xba, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0x80, 0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xef, 0xbc, 0x8c,
	0xe7, 0x94, 0xa8, 0xe8, 0xaf, 0xa5, 0x49, 0x44, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe8, 0x81,
	0x94, 0xe9, 0x82, 0xa6, 0x48, 0x6f, 0x73, 0x74, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x13,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0xa2, 0x01, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x5c, 0x92, 0x41, 0x51, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32,
	0x47, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0x90, 0xba, 0xe5, 0xb8, 0xa6, 0xe9,
	0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc,
	0x8c, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe4, 0xb8, 0x8d, 0xe5, 0xbe, 0x97, 0xe8, 0xb6, 0x85,
	0xe8, 0xbf, 0x87, 0x32, 0x30, 0xe4, 0xb8, 0xaa, 0xfa, 0x42, 0x05, 0x9a, 0x01, 0x02, 0x10, 0x14,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x14, 0x2a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4,
	0xba, 0xba, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x14, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x81, 0x01, 0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x59, 0x92,
	0x41, 0x56, 0x2a, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x32, 0x44, 0xe4, 0xbb, 0x85, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe8,
	0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0xe4, 0xb8, 0xba, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xef, 0x01, 0x0a, 0x09, 0x62, 0x63, 0x73,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x42,
	0x63, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x9f, 0x01,
	0x92, 0x41, 0x9b, 0x01, 0x2a, 0x09, 0x62, 0x63, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x32,
	0x8d, 0x01, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x97,
	0xb6, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0xae,
	0xe6, 0x8f, 0x92, 0xe4, 0xbb, 0xb6, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xef, 0xbc, 0x8c, 0xe8,
	0xaf, 0xa5, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe4, 0xbc, 0x9a, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc,
	0x95, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8a, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe9, 0x85, 0x8d,
	0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe5,
	0xaf, 0xb9, 0xe6, 0xaf, 0x94, 0xe4, 0xb8, 0x8e, 0xe8, 0xa1, 0xa5, 0xe5, 0x85, 0x85, 0xef, 0xbc,
	0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0xa1, 0xab, 0xe5, 0x86, 0x99, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0xe6, 0x8a, 0xa5, 0xe9, 0x94, 0x99, 0x52,
	0x09, 0x62, 0x63, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0xe6, 0x01, 0x0a, 0x0b, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x90, 0x01, 0x92, 0x41, 0x8c, 0x01, 0x2a, 0x0b, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x32, 0x7d, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x97, 0xb6, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x89,
	0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x92, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xe4,
	0xb8, 0xba, 0xe9, 0xa2, 0x84, 0xe7, 0x95, 0x99, 0xe4, 0xba, 0x8c, 0xe6, 0x96, 0xb9, 0x2f, 0xe4,
	0xb8, 0x89, 0xe6, 0x96, 0xb9, 0x2f, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x95, 0x86, 0xe6,
	0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0xa6,
	0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0xa1, 0xab, 0xe9, 0x94, 0x99, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5,
	0xe6, 0x8a, 0xa5, 0xe9, 0x94, 0x99, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x44, 0x32, 0x1b, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xb8, 0x8a, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x49, 0x44, 0x52,
	0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0xbe, 0x01, 0x0a, 0x0a, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x9d, 0x01,
	0x92, 0x41, 0x99, 0x01, 0x2a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x32, 0x8a, 0x01, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe5, 0x85, 0xac, 0xe6, 0x9c, 0x89, 0xe4, 0xba,
	0x91, 0xe6, 0x97, 0xb6, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0xef, 0xbc, 0x8c, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x44, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x28, 0xe4, 0xba, 0x91,
	0xe4, 0xb8, 0x8a, 0xe6, 0x89, 0x98, 0xe7, 0xae, 0xa1, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x29,
	0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x98, 0xaf, 0x20, 0x49, 0x4e, 0x44,
	0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52,
	0x28, 0xe7, 0x8b, 0xac, 0xe7, 0xab, 0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c,
	0xe8, 0x87, 0xaa, 0xe8, 0xa1, 0x8c, 0xe7, 0xbb, 0xb4, 0xe6, 0x8a, 0xa4, 0x29, 0x52, 0x0a, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x06,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x32, 0x15, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x20, 0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x06, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x32, 0x13, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x49, 0x50, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x98, 0x01, 0x0a,
	0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x4e, 0x92, 0x41, 0x43, 0x2a, 0x0f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x32, 0x30, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80,
	0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe8,
	0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe6, 0x96, 0xb9, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xfa, 0x42,
	0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xd3, 0x01, 0x0a, 0x14, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x7a, 0x92, 0x41, 0x6f,
	0x2a, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x32, 0x57, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x9f,
	0xba, 0xe7, 0xa1, 0x80, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae,
	0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7,
	0x89, 0x88, 0xe6, 0x9c, 0xac, 0xef, 0xbc, 0x8c, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a,
	0x84, 0x76, 0x70, 0x63, 0xe7, 0xad, 0x89, 0xef, 0xbc, 0x8c, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8,
	0xe6, 0x96, 0xb9, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xfa,
	0x42, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xe2, 0x01,
	0x0a, 0x16, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x82, 0x01, 0x92, 0x41, 0x7f, 0x2a, 0x17, 0x63, 0x6c, 0x75,
	0x73, 0x65, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x32, 0x64, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xbf, 0x9b, 0xe9,
	0x98, 0xb6, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xef, 0xbc,
	0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x69, 0x70, 0x76,
	0x73, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0xef, 0xbc, 0x8c, 0xe5, 0xae, 0xb9, 0xe5, 0x99, 0xa8,
	0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe7,
	0xad, 0x89, 0xe3, 0x80, 0x82, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe8, 0xb0, 0x83, 0xe7, 0x94,
	0xa8, 0xe6, 0x96, 0xb9, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x52, 0x16, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0xd4, 0x01, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x92, 0x01, 0x92, 0x41, 0x8e, 0x01, 0x2a, 0x0c, 0x6e,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x32, 0x7e, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xef,
	0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0xe6, 0x8c, 0x82, 0xe8, 0xbd, 0xbd, 0xe7, 0x9b,
	0xae, 0xe5, 0xbd, 0x95, 0xef, 0xbc, 0x8c, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe7, 0xad, 0x89, 0xef, 0xbc, 0x8c, 0xe5,
	0xa6, 0x82, 0xe6, 0x97, 0xa0, 0xe7, 0x89, 0xb9, 0xe5, 0x88, 0xab, 0xe9, 0x9c, 0x80, 0xe6, 0xb1,
	0x82, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0x8d, 0xe8, 0xae, 0xbe,
	0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0x42, 0x43, 0x53, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x6e, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x0f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x58, 0x92, 0x41, 0x55, 0x2a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x32, 0x42, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe9, 0x87, 0x8d, 0xe8, 0xa3, 0x85, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe7, 0x9a, 0x84, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xef, 0xbc, 0x8c, 0xe6,
	0x9c, 0xba, 0xe5, 0x99, 0xa8, 0xe8, 0xa2, 0xab, 0xe6, 0x89, 0x98, 0xe7, 0xae, 0xa1, 0xe6, 0x83,
	0x85, 0xe5, 0x86, 0xb5, 0xe4, 0xb8, 0x8b, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x52, 0x0f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x99,
	0x01, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6b, 0x92, 0x41, 0x68, 0x2a,
	0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x32, 0x53, 0xe9, 0x87, 0x8d, 0xe8, 0xa3, 0x85, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x9a, 0x84, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe6,
	0x97, 0xb6, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8, 0xe8,
	0xa2, 0xab, 0xe6, 0x89, 0x98, 0xe7, 0xae, 0xa1, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb5, 0xe4, 0xb8,
	0x8b, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x58, 0x0a, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x36, 0x92, 0x41, 0x33, 0x2a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x32, 0x24, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x2f, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x29, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x8b, 0x01, 0x92, 0x41, 0x87, 0x01, 0x2a, 0x17, 0x61,
	0x75, 0x74, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x32, 0x6c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe5,
	0xb7, 0xb2, 0xe6, 0x9c, 0x89, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x3b, 0x20, 0xe4, 0xb8, 0xba,
	0x74, 0x72, 0x75, 0x65, 0xe6, 0x97, 0xb6, 0x2c, 0x20, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe7,
	0x94, 0x9f, 0xe6, 0x88, 0x90, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0xf0, 0x01,
	0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0xa9, 0x01, 0x92, 0x41, 0xa5, 0x01,
	0x2a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x32, 0x97, 0x01, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x97, 0xb6, 0x20, 0x61, 0x75,
	0x74, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0xe4, 0xb8, 0xba, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0xe7,
	0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe7, 0x94, 0x9f, 0xe6, 0x88,
	0x90, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x2c, 0x20, 0xe9,
	0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0xe7, 0x94, 0x9f, 0xe6, 0x88, 0x90, 0xe7, 0x9a, 0x84, 0xe9, 0x85, 0x8d,
	0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81,
	0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe5,
	0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0xb4, 0x01, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x20,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x65, 0x92, 0x41, 0x62, 0x2a, 0x09, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x55, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c,
	0x20, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x65, 0x73, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x2f, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0xe7, 0xad, 0x89,
	0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x60, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x44, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x92, 0x41, 0x41, 0x2a, 0x08,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x32, 0x35, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x49, 0x44, 0x28, 0x43, 0x41, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a,
	0xa0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97,
	0xe8, 0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0x29, 0x28, 0xe5, 0xba, 0x9f, 0xe5, 0xbc, 0x83, 0x29, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x7e, 0x0a, 0x0e, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x41, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x97, 0xb6, 0xe7, 0xa9, 0xba, 0xe5, 0x80,
	0xbc, 0x28, 0xe5, 0xba, 0x9f, 0xe5, 0xbc, 0x83, 0x29, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x69, 0x0a, 0x0f, 0x69, 0x73, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x29, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe4, 0xb8, 0xba, 0xe5, 0x85, 0xac, 0xe5, 0x85, 0xb1, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x2c,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x28, 0xe5, 0xba, 0x9f, 0xe5,
	0xbc, 0x83, 0x29, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe7, 0xae, 0x80, 0xe8, 0xa6, 0x81, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa5, 0x01, 0x0a,
	0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7b, 0x92, 0x41, 0x78, 0x2a, 0x0f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x32, 0x65, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb,
	0xe8, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0x8c, 0xba, 0xe5, 0x88, 0x86, 0xe8,
	0xaf, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x98,
	0xaf, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0xe3, 0x80, 0x81, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5,
	0x28, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x29, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x98, 0xaf, 0xe8, 0x87, 0xaa,
	0xe5, 0xbb, 0xba, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x09, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x32, 0x21, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4,
	0xb8, 0xba, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x2c, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x69, 0x73, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x12, 0xea, 0x01, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc1, 0x01,
	0x92, 0x41, 0xbd, 0x01, 0x2a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x32, 0xaa, 0x01, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0xb3,
	0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x49,
	0x44, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe3, 0x80,
	0x82, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe6, 0x98, 0xaf,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5,
	0x87, 0xad, 0xe8, 0xaf, 0x81, 0xe3, 0x80, 0x82, 0xe7, 0xa7, 0x81, 0xe6, 0x9c, 0x89, 0xe4, 0xba,
	0x91, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xe4, 0xb8, 0x8b, 0xe7, 0xbb, 0x9f, 0xe4, 0xb8, 0x80,
	0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f,
	0xb7, 0xef, 0xbc, 0x8c, 0xe8, 0x80, 0x8c, 0xe5, 0x85, 0xac, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0x91,
	0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xe7, 0xba, 0xb3, 0xe7, 0xae, 0xa1, 0xe4, 0xb8, 0x8d, 0xe5,
	0x90, 0x8c, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x87, 0xad, 0xe8, 0xaf,
	0x81, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x67, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a, 0x0e,
	0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x32, 0x2a,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xb8, 0x8a, 0xe6,
	0x9e, 0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe7, 0x9a, 0x84, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x6d, 0x0a, 0x0a, 0x6e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x2a, 0x0a,
	0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x32, 0x21, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x97, 0xb6, 0xe7, 0x9a, 0x84, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0a, 0x6e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x5c, 0x0a, 0x07, 0x69, 0x73, 0x4d,
	0x69, 0x78, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x2a,
	0x07, 0x69, 0x73, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x32, 0x34, 0xe6, 0xa0, 0x87, 0xe8, 0xae, 0xb0,
	0xe8, 0xaf, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6,
	0x98, 0xaf, 0xe6, 0xb7, 0xb7, 0xe9, 0x83, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x2c, 0x20,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x98, 0xaf, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07,
	0x69, 0x73, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3a, 0x92, 0x41, 0x37, 0x2a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x61, 0x6d,
	0x52, 0x6f, 0x6c, 0x65, 0x32, 0x25, 0x61, 0x77, 0x73, 0xe7, 0x9a, 0x84, 0x69, 0x61, 0x6d, 0x20,
	0x72, 0x6f, 0x6c, 0x65, 0x2c, 0x20, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0x65, 0x6b, 0x73, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x52, 0x0e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0xa4, 0x02, 0x0a, 0x0c,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0xda, 0x01, 0x92, 0x41, 0xd6, 0x01, 0x2a, 0x0c,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x32, 0xc5, 0x01, 0xe5,
	0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x8f, 0xaf, 0xe8, 0xa7,
	0x81, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x28, 0xe5, 0xbd,
	0x93, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0xe4, 0xb8, 0xba, 0x74, 0x72, 0x75,
	0x65, 0xe6, 0x97, 0xb6, 0xe4, 0xb8, 0x94, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe6, 0x97, 0xb6, 0x2c, 0xe5, 0x85, 0xb1,
	0xe4, 0xba, 0xab, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe9,
	0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xef, 0xbc, 0x9b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0xe4, 0xb8, 0x8d, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe6, 0x97, 0xb6,
	0x2c, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe7, 0xbb, 0x99, 0xe6, 0x9f, 0x90, 0xe4, 0xba, 0x9b,
	0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0xef, 0xbc, 0x8c, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0xe5, 0x8f, 0xaa, 0xe6, 0x9c, 0x89, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x9d, 0x83,
	0xe9, 0x99, 0x90, 0x29, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x85, 0x01, 0x92, 0x41, 0x81, 0x01, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x32, 0x77, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0xe6, 0x97, 0xb6, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x83,
	0x85, 0xe5, 0x86, 0xb5, 0xe4, 0xb8, 0x8b, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe7, 0xa9, 0xba,
	0xe5, 0x8d, 0xb3, 0xe5, 0x8f, 0xaf, 0x2c, 0xe4, 0xbb, 0x85, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0xe4, 0xb8, 0xba, 0x74, 0x72, 0x75, 0x65, 0xe6,
	0x97, 0xb6, 0xe8, 0xb5, 0xb7, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59,
	0x0a, 0x0e, 0x42, 0x63, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x42, 0x4b, 0x4f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x10, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x42, 0x4b, 0x4f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x3a, 0x89, 0x02, 0x92, 0x41, 0x85, 0x02, 0x0a, 0x82, 0x02, 0x2a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x32, 0x66, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe5, 0xb7, 0xb2, 0xe7, 0xbb, 0x8f, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xef,
	0xbc, 0x8c, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0xe6, 0x8a, 0xa5, 0xe9, 0x94, 0x99, 0xe3, 0x80,
	0x82, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe8, 0xaf, 0xb7, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0xd2, 0x01, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xd2, 0x01, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0xd2, 0x01, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0xd2,
	0x01, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0xd2, 0x01, 0x0a,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0b, 0x69, 0x73, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0xd2, 0x01, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x22, 0xca, 0x04, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32,
	0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x23, 0x92, 0x41,
	0x20, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0xe8, 0xa2, 0xab, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x7d, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x53, 0x92, 0x41, 0x50,
	0x2a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x32, 0x48, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xef, 0xbc, 0x88, 0xe5, 0xa6, 0x82,
	0xe6, 0x9e, 0x9c, 0xe6, 0x9c, 0x89, 0xef, 0xbc, 0x89, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe7,
	0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x87, 0xaa, 0xe5, 0x8a,
	0xa8, 0xe5, 0x8c, 0x96, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c,
	0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x7c, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56,
	0x32, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x1b, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6,
	0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d,
	0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x47, 0x92, 0x41, 0x44, 0x0a, 0x42, 0x2a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x32, 0x15,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcc, 0x02,
	0x0a, 0x15, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x56, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x15, 0x2a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x01, 0x18, 0x64, 0x32, 0x0f, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04,
	0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x58, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x22, 0x92,
	0x41, 0x1f, 0x2a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x32, 0x15, 0xe6, 0xb7, 0xbb, 0xe5,
	0x8a, 0xa0, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4,
	0xbd, 0x9c, 0xe4, 0xba, 0xba, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a,
	0x4b, 0x92, 0x41, 0x48, 0x0a, 0x46, 0x2a, 0x15, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x54, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x32, 0x18, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe5, 0xad, 0x90, 0xe7, 0xbd,
	0x91, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0xd2, 0x01, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x82, 0x03, 0x0a,
	0x16, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x7c, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56,
	0x32, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x1b, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6,
	0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d,
	0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x4b, 0x92, 0x41, 0x48, 0x0a, 0x46, 0x2a, 0x16, 0x41, 0x64, 0x64,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x32, 0x1b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a,
	0xa0, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x97, 0x05, 0x0a, 0x1f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x56, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x49, 0x44, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x01, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43,
	0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x4e, 0x0a,
	0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x34,
	0x92, 0x41, 0x31, 0x2a, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x26, 0xe5, 0xbc,
	0x80, 0xe5, 0x85, 0xb3, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c,
	0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x89,
	0x93, 0xe5, 0xbc, 0x80, 0x52, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x58, 0x0a,
	0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x22, 0x92, 0x41, 0x1f,
	0x2a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x32, 0x15, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0,
	0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x52,
	0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x57, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x49, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x70,
	0x4d, 0x6f, 0x64, 0x65, 0x32, 0x1a, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5,
	0x90, 0xaf, 0xe9, 0x9d, 0x99, 0xe6, 0x80, 0x81, 0x49, 0x50, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f,
	0x52, 0x0e, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x70, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x7d, 0x0a, 0x13, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4b, 0x92,
	0x41, 0x48, 0x2a, 0x13, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x32, 0x31, 0x56, 0x50, 0x43, 0x2d, 0x43, 0x4e, 0x49,
	0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0x8b, 0x2c,
	0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe7, 0xbd, 0x91, 0xe5, 0x8d, 0xa1, 0x49, 0x50, 0xe5, 0x9b,
	0x9e, 0xe6, 0x94, 0xb6, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x13, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x64, 0x92, 0x41, 0x61, 0x0a, 0x5f, 0x2a, 0x1f, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x32, 0x26, 0xe5,
	0x88, 0x87, 0xe6, 0x8d, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0xd2, 0x01, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xed, 0x04, 0x0a, 0x20,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x7d, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x42, 0x53, 0x92, 0x41, 0x50, 0x2a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x32, 0x48,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xef, 0xbc, 0x88, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9c, 0x89, 0xef, 0xbc,
	0x89, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x7c,
	0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0x1b, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65,
	0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x3a, 0x58, 0x92, 0x41, 0x55, 0x0a, 0x53, 0x2a, 0x20, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x32, 0x1e, 0xe5, 0x88, 0x87, 0xe6,
	0x8d, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0xa8,
	0xa1, 0xe5, 0xbc, 0x8f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8d, 0x1c, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x91, 0x01, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x73, 0x92, 0x41, 0x70,
	0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x63, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x42, 0x43,
	0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x28, 0xe5, 0x86, 0x99,
	0xe5, 0x85, 0xa5, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x97, 0xb6, 0xe7, 0x9b, 0xb4, 0xe6,
	0x8e, 0xa5, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0xef, 0xbc, 0x8c, 0xe6, 0x96, 0xb0, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6,
	0xe9, 0x9c, 0x80, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe7, 0x94, 0x9f, 0xe6, 0x88, 0x90, 0x29,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x28, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x32, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x73, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x57, 0x92, 0x41, 0x4d, 0x2a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x41, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe8, 0x80, 0x85, 0xef, 0xbc, 0x8c, 0xe4, 0xba, 0x91, 0xe6,
	0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0xbd, 0xb1, 0xe5, 0x93, 0x8d,
	0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe4, 0xba, 0x91, 0xe8, 0xae, 0xbe, 0xe6, 0x96, 0xbd, 0xe7,
	0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x20, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41,
	0x1c, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xfa, 0x42, 0x17,
	0x72, 0x15, 0x10, 0x01, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x52, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c,
	0x92, 0x41, 0x32, 0x2a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x32, 0x29, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe7, 0xa7, 0x81, 0xe6, 0x9c, 0x89, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0x69, 0x64,
	0xef, 0xbc, 0x8c, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5,
	0xa1, 0xab, 0xe5, 0x86, 0x99, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20, 0x52, 0x05, 0x76, 0x70,
	0x63, 0x49, 0x44, 0x12, 0x4e, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44,
	0xfa, 0x42, 0x15, 0x72, 0x13, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x55, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49,
	0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x0c, 0x43, 0x4d, 0x44, 0x42, 0xe4, 0xb8,
	0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x18, 0x64, 0x32, 0x0f, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0a,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x73, 0x0a, 0x0b, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x51, 0x92, 0x41, 0x36, 0x2a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x32, 0x27, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0x2c,
	0x20, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x5b, 0x70, 0x72, 0x6f, 0x64, 0x2c, 0x20, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x2c, 0x20, 0x73, 0x74, 0x61, 0x67, 0x5d, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x52,
	0x04, 0x73, 0x74, 0x61, 0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x70, 0x72,
	0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x5a, 0x0a, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x26, 0x2a, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x32, 0x18, 0xe5, 0xbc, 0x95, 0xe6, 0x93, 0x8e, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x6b, 0x38, 0x73, 0xfa, 0x42,
	0x0e, 0x72, 0x0c, 0x52, 0x03, 0x6b, 0x38, 0x73, 0x52, 0x05, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x52,
	0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x69,
	0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x2d, 0x92, 0x41, 0x2a, 0x2a, 0x0b, 0x69, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x76, 0x65, 0x32, 0x1b, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe4, 0xb8, 0x9a,
	0xe5, 0x8a, 0xa1, 0xe7, 0x8b, 0xac, 0xe5, 0x8d, 0xa0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x52,
	0x0b, 0x69, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0xce, 0x01, 0x0a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0xab, 0x01, 0x92, 0x41, 0x85, 0x01, 0x2a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x32, 0x76, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x5b, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5d,
	0x2c, 0x20, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xe8, 0xa1, 0xa8, 0xe7,
	0xa4, 0xba, 0xe4, 0xb8, 0xba, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xef, 0xbc, 0x8c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba,
	0xe7, 0x8b, 0xac, 0xe7, 0xab, 0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0xfa, 0x42,
	0x1f, 0x72, 0x1d, 0x52, 0x0a, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x07, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x85, 0x01,
	0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5f, 0x92, 0x41, 0x5c, 0x2a, 0x0d, 0x68, 0x6f, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x4b, 0x68, 0x6f, 0x73, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xe8, 0x99, 0x9a, 0xe6, 0x8b, 0x9f, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbe, 0x9d, 0xe6, 0x89, 0x98, 0xe7, 0x9a, 0x84, 0x68, 0x6f, 0x73,
	0x74, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0xe8, 0xaf,
	0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xb8, 0xba, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x52, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0xb3, 0x01, 0x0a, 0x12, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x82, 0x01, 0x92, 0x41, 0x6b, 0x2a, 0x12, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x32, 0x55, 0x68, 0x6f,
	0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x28, 0x64, 0x65, 0x76, 0x6e, 0x65, 0x74, 0x2f, 0x69, 0x64, 0x63, 0x29, 0xef, 0xbc,
	0x8c, 0xe5, 0x8f, 0x96, 0xe5, 0x86, 0xb3, 0xe4, 0xba, 0x8e, 0x68, 0x6f, 0x73, 0x74, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x52, 0x06, 0x64, 0x65, 0x76, 0x6e, 0x65, 0x74,
	0x52, 0x03, 0x69, 0x64, 0x63, 0x52, 0x00, 0x52, 0x12, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0xa9, 0x01, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x5c, 0x92, 0x41, 0x51, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x47,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0xef,
	0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0x90, 0xba, 0xe5, 0xb8, 0xa6, 0xe9, 0xa2,
	0x9d, 0xe5, 0xa4, 0x96, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c,
	0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe4, 0xb8, 0x8d, 0xe5, 0xbe, 0x97, 0xe8, 0xb6, 0x85, 0xe8,
	0xbf, 0x87, 0x32, 0x30, 0xe4, 0xb8, 0xaa, 0xfa, 0x42, 0x05, 0x9a, 0x01, 0x02, 0x10, 0x14, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xba,
	0xba, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x14, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x81, 0x01, 0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x42, 0x59, 0x92, 0x41,
	0x56, 0x2a, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x32, 0x44, 0xe4, 0xbb, 0x85, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe8, 0xbf,
	0x9b, 0xe8, 0xa1, 0x8c, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4,
	0xb8, 0xba, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x06, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x32, 0x15, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x20, 0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x06, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x90, 0x01, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x46, 0x92,
	0x41, 0x43, 0x2a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x32, 0x30, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbd, 0x91, 0xe7, 0xbb,
	0x9c, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c,
	0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe6, 0x96, 0xb9, 0xe8,
	0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xcb, 0x01, 0x0a, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x92, 0x41, 0x6f, 0x2a,
	0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x32, 0x57, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x9f, 0xba,
	0xe7, 0xa1, 0x80, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xef,
	0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x89,
	0x88, 0xe6, 0x9c, 0xac, 0xef, 0xbc, 0x8c, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84,
	0x76, 0x70, 0x63, 0xe7, 0xad, 0x89, 0xef, 0xbc, 0x8c, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe6,
	0x96, 0xb9, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x52, 0x14,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0xe2, 0x01, 0x0a, 0x16, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x82, 0x01, 0x92,
	0x41, 0x7f, 0x2a, 0x17, 0x63, 0x6c, 0x75, 0x73, 0x65, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x32, 0x64, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe8, 0xbf, 0x9b, 0xe9, 0x98, 0xb6, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0xe8,
	0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0xe5, 0x90,
	0xaf, 0xe7, 0x94, 0xa8, 0x69, 0x70, 0x76, 0x73, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0xef, 0xbc,
	0x8c, 0xe5, 0xae, 0xb9, 0xe5, 0x99, 0xa8, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6,
	0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe7, 0xad, 0x89, 0xe3, 0x80, 0x82, 0xe9, 0x9c, 0x80, 0xe8,
	0xa6, 0x81, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe6, 0x96, 0xb9, 0xe8, 0xae, 0xbe, 0xe7, 0xbd,
	0xae, 0x52, 0x16, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xd4, 0x01, 0x0a, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x92, 0x01,
	0x92, 0x41, 0x8e, 0x01, 0x2a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x32, 0x7e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0xe6,
	0x8c, 0x82, 0xe8, 0xbd, 0xbd, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xef, 0xbc, 0x8c, 0x64, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95,
	0xe7, 0xad, 0x89, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x97, 0xa0, 0xe7, 0x89, 0xb9, 0xe5,
	0x88, 0xab, 0xe9, 0x9c, 0x80, 0xe6, 0xb1, 0x82, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb,
	0xa5, 0xe4, 0xb8, 0x8d, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0x42, 0x43, 0x53,
	0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0xbb, 0x01, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x65, 0x92, 0x41,
	0x62, 0x2a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x55, 0xe5, 0xad,
	0x98, 0xe5, 0x82, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x65, 0x73,
	0x62, 0x5f, 0x75, 0x72, 0x6c, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0xe7, 0xad, 0x89, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xae, 0x80,
	0xe8, 0xa6, 0x81, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x02, 0x6e, 0x73, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x51, 0x92, 0x41, 0x4e, 0x2a, 0x02, 0x6e, 0x73, 0x32, 0x48, 0xe5, 0x91, 0xbd,
	0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c,
	0x20, 0xe8, 0x99, 0x9a, 0xe6, 0x8b, 0x9f, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbe, 0x9d,
	0xe6, 0x89, 0x98, 0xe4, 0xba, 0x8e, 0x68, 0x6f, 0x73, 0x74, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe7, 0x9a, 0x84, 0xe6, 0x9f, 0x90, 0xe4, 0xb8, 0xaa, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7,
	0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x02, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0x92, 0x41, 0x19, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x32, 0x0a, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x3a, 0x96, 0x02, 0x92, 0x41, 0x92, 0x02, 0x0a, 0x8f, 0x02, 0x2a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x32, 0x6c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x99, 0x9a,
	0xe6, 0x8b, 0x9f, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xef,
	0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xb7,
	0xb2, 0xe7, 0xbb, 0x8f, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xef, 0xbc, 0x8c, 0xe7, 0x9b, 0xb4,
	0xe6, 0x8e, 0xa5, 0xe6, 0x8a, 0xa5, 0xe9, 0x94, 0x99, 0xe3, 0x80, 0x82, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xaf,
	0xb7, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0xe6, 0x8e, 0xa5,
	0xe5, 0x8f, 0xa3, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xd2,
	0x01, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0xd2, 0x01, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x0a,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0xd2, 0x01, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0xd2, 0x01, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0b, 0x69, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0xd2, 0x01, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0xd2, 0x01, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xf4, 0x03, 0x0a, 0x0d,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a,
	0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x12, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x62, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1f, 0x92, 0x41, 0x1c,
	0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x12, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d,
	0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x76, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x12, 0xe5, 0x91, 0xbd,
	0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe6, 0xb3, 0xa8, 0xe8, 0xa7, 0xa3, 0x52,
	0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x05,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x23, 0x92, 0x41, 0x20,
	0x2a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x32, 0x17, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7,
	0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x71, 0x75, 0x6f, 0x74, 0x61, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6,
	0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x70, 0x75, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x22, 0xde, 0x04, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x18, 0xe8, 0xa2, 0xab, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x7d, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x42, 0x53, 0x92, 0x41, 0x50, 0x2a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x32, 0x48,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xef, 0xbc, 0x88, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9c, 0x89, 0xef, 0xbc,
	0x89, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x7c,
	0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0x1b, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65,
	0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x54, 0x92, 0x41,
	0x51, 0x0a, 0x4f, 0x2a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x32, 0x1b, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x99, 0x9a, 0xe6, 0x8b, 0x9f, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xc2, 0x04, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71,
	0x12, 0x62, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x48, 0x92, 0x41, 0x3b, 0x2a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x32, 0x2e, 0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0x49, 0x44, 0x2c, 0x20,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe4, 0xba, 0x91, 0xe8,
	0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe7, 0xae, 0xa1, 0xe7, 0x90,
	0x86, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x07, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x44, 0x12, 0xa3, 0x01, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x84, 0x01, 0x92, 0x41, 0x79, 0x2a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x6c, 0xe5, 0xaf, 0xbc, 0xe5, 0x85,
	0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x3b,
	0x20, 0xe5, 0xbd, 0x93, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe6, 0x97, 0xb6, 0x2c, 0x20, 0xe5,
	0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe5, 0x87, 0xad, 0xe8, 0xaf,
	0x81, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x08, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x4f, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x1c, 0x2a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6,
	0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xfa, 0x42, 0x15, 0x72, 0x13,
	0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d,
	0x5d, 0x2b, 0x24, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x11, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x2a, 0x11, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x1d,
	0x41, 0x4b, 0x53, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x3a, 0x65, 0x92, 0x41, 0x62, 0x0a, 0x60, 0x2a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x52,
	0x65, 0x71, 0x32, 0x2d, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x97, 0xb6, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0xe7,
	0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0xd2, 0x01, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0xd2, 0x01, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xed, 0x02, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x4f, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c,
	0x2a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x53, 0x32, 0x12, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x4f, 0x53, 0x12, 0xa3, 0x01, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7f, 0x92, 0x41, 0x7c,
	0x2a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x6c,
	0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0xad, 0x97, 0xe7,
	0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xa5, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0x43, 0x50, 0x55, 0xe5, 0x92, 0x8c, 0xe5, 0x86, 0x85, 0xe5, 0xad, 0x98, 0xef, 0xbc, 0x8c,
	0xe8, 0xaf, 0xa5, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0x8d, 0xe5, 0xbc, 0xba, 0xe5, 0x88, 0xb6, 0xef,
	0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe8, 0x87, 0xaa, 0xe8, 0xa1, 0x8c, 0xe5, 0x90,
	0x91, 0xe4, 0xb8, 0x8a, 0xe5, 0xb0, 0xb1, 0xe8, 0xbf, 0x91, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d,
	0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x12, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32,
	0x0c, 0xe8, 0xae, 0xa1, 0xe8, 0xb4, 0xb9, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x52, 0x12, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x24, 0x92, 0x41, 0x21, 0x0a, 0x1f, 0x2a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x32, 0x0c, 0xe5, 0xae, 0x9e, 0xe4, 0xbe,
	0x8b, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x22, 0xd0, 0x05, 0x0a, 0x0f, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x03, 0x43,
	0x50, 0x55, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x55, 0x92, 0x41, 0x52, 0x2a, 0x03, 0x43,
	0x50, 0x55, 0x32, 0x4b, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x43, 0x50, 0x55, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8e, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xe4, 0xba, 0x92, 0xe6, 0x96,
	0xa5, 0xef, 0xbc, 0x8c, 0xe6, 0xaf, 0x94, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0xe9, 0xab, 0x98, 0x52,
	0x03, 0x43, 0x50, 0x55, 0x12, 0x67, 0x0a, 0x03, 0x4d, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x55, 0x92, 0x41, 0x52, 0x2a, 0x03, 0x4d, 0x65, 0x6d, 0x32, 0x4b, 0xe6, 0x9c, 0xba,
	0xe5, 0x9e, 0x8b, 0x4d, 0x65, 0x6d, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4,
	0xb8, 0x8e, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0xe4, 0xba, 0x92, 0xe6, 0x96, 0xa5, 0xef, 0xbc, 0x8c, 0xe6, 0xaf, 0x94,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xe4, 0xbc, 0x98, 0xe5,
	0x85, 0x88, 0xe7, 0xba, 0xa7, 0xe9, 0xab, 0x98, 0x52, 0x03, 0x4d, 0x65, 0x6d, 0x12, 0x77, 0x0a,
	0x03, 0x47, 0x50, 0x55, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x65, 0x92, 0x41, 0x62, 0x2a,
	0x03, 0x47, 0x50, 0x55, 0x32, 0x5b, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x47, 0x50, 0x55, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8e, 0xe6, 0x9c, 0xba, 0xe5, 0x9e,
	0x8b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xe4, 0xba, 0x92,
	0xe6, 0x96, 0xa5, 0xef, 0xbc, 0x8c, 0xe6, 0xaf, 0x94, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0xe9, 0xab,
	0x98, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xbc, 0x9a, 0xe4, 0xb8, 0xba,
	0x30, 0x52, 0x03, 0x47, 0x50, 0x55, 0x12, 0x9f, 0x01, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x65, 0x92, 0x41, 0x62, 0x2a, 0x0a, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x32, 0x54, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe7, 0xb3,
	0xbb, 0xe7, 0xbb, 0x9f, 0xe7, 0x9b, 0x98, 0x2c, 0x20, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe7,
	0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe6, 0xb1, 0xa0, 0x2e, 0x20, 0xe4, 0xbb, 0x85, 0xe4, 0xbb, 0x85, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0xe4, 0xb8, 0xba, 0x73, 0x65, 0x6c, 0x66, 0xe6, 0x97, 0xb6, 0x2c, 0x20,
	0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe5, 0x85, 0xb3, 0xe6, 0xb3, 0xa8, 0x52, 0x0a, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x9c, 0x01, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x64, 0x92, 0x41, 0x61, 0x2a, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x32, 0x54, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0x2c, 0x20, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe7,
	0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe6, 0xb1, 0xa0, 0x2e, 0x20, 0xe4, 0xbb, 0x85, 0xe4, 0xbb, 0x85, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0xe4, 0xb8, 0xba, 0x73, 0x65, 0x6c, 0x66, 0xe6, 0x97, 0xb6, 0x2c, 0x20,
	0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe5, 0x85, 0xb3, 0xe6, 0xb3, 0xa8, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x3a, 0x31, 0x92, 0x41, 0x2e, 0x0a, 0x2c, 0x2a, 0x0f,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x32,
	0x19, 0x43, 0x50, 0x55, 0xe3, 0x80, 0x81, 0x4d, 0x45, 0x4d, 0xe3, 0x80, 0x81, 0x44, 0x49, 0x53,
	0x4b, 0xe7, 0xad, 0x89, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x73,
	0x32, 0x08, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0x49, 0x44, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x49, 0x44, 0x73, 0x12, 0x6b, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49,
	0x50, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x3f, 0x92, 0x41, 0x3c, 0x2a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x32, 0x28, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x88,
	0x86, 0xe9, 0x85, 0x8d, 0xe5, 0x85, 0xac, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0xe3, 0x80, 0x82, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xe3, 0x80, 0x82,
	0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x3a, 0x29, 0x92, 0x41, 0x26, 0x0a, 0x24, 0x2a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x32, 0x12, 0xe7, 0xbd, 0x91, 0xe7, 0xbb,
	0x9c, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x22, 0xa4, 0x02,
	0x0a, 0x0e, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x50, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x36, 0x92, 0x41, 0x29, 0x2a, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x32,
	0x1e, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xe7, 0xbb, 0x84,
	0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe6, 0x95, 0xb0, 0xfa,
	0x42, 0x07, 0x2a, 0x05, 0x18, 0xe8, 0x07, 0x28, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x28, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x0c, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x07, 0x2a, 0x05, 0x18, 0xe8, 0x07, 0x28,
	0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x43,
	0x0a, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9,
	0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x3a, 0x2f, 0x92, 0x41, 0x2c, 0x0a, 0x2a, 0x2a, 0x0e, 0x53, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x32, 0x18, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0x22, 0xb7, 0x06, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x12,
	0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe6, 0xb1, 0xa0, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x5d, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30, 0x2a, 0x0f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x1d,
	0x61, 0x77, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1,
	0xa0, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0x52, 0x0f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x73,
	0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x0f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x32, 0x12,
	0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe9, 0x85, 0x8d, 0xe7,
	0xbd, 0xae, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x73, 0x0a, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x28, 0x92,
	0x41, 0x25, 0x2a, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x32, 0x12, 0xe7, 0xa1, 0xac, 0xe4, 0xbb, 0xb6, 0xe7, 0x9b, 0xb8, 0xe5, 0x85,
	0xb3, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x6f, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x32, 0x12, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe7, 0x9b, 0xb8,
	0xe5, 0x85, 0xb3, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x6c, 0x0a, 0x0e, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x32, 0x0f, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae,
	0xb9, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x2a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x32, 0x25, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x2c, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x7c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a,
	0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41,
	0x1e, 0x2a, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x32, 0x15, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe6, 0xb1, 0xa0, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0x52,
	0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x3a, 0x46, 0x92, 0x41, 0x43, 0x0a, 0x41, 0x2a, 0x16, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x32, 0x27, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe6, 0x97, 0xb6, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0xe7, 0x9a, 0x84, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x22, 0x80,
	0x03, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0xe6,
	0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1,
	0xa0, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x62, 0x92,
	0x41, 0x5f, 0x0a, 0x5d, 0x2a, 0x1a, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73, 0x70,
	0x32, 0x27, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x97,
	0xb6, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe6, 0xb1, 0xa0, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xa6, 0x01, 0x0a, 0x0d, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x4e, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x24, 0x2a, 0x0a, 0x6b, 0x75,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x16, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x3a, 0x45, 0x92, 0x41, 0x42, 0x0a, 0x40, 0x2a, 0x0d, 0x4b, 0x75, 0x62, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x32, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0xe8, 0xbe, 0x93, 0xe5, 0x85, 0xa5, 0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b, 0x6b, 0x75, 0x62,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xd2, 0x01, 0x0a,
	0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x96, 0x06, 0x0a, 0x14, 0x4b,
	0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x55, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x27, 0xe4, 0xba, 0x91, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x49, 0x44, 0x28, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x3a, 0x20, 0xe8, 0x85, 0xbe, 0xe8,
	0xae, 0xaf, 0xe4, 0xba, 0x91, 0x3a, 0x20, 0x63, 0x6c, 0x73, 0x2d, 0x78, 0x78, 0x78, 0x29, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x71, 0x0a, 0x0a, 0x69, 0x73,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x51,
	0x92, 0x41, 0x4e, 0x2a, 0x0a, 0x69, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x6e, 0x65, 0x74, 0x32,
	0x40, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0xef, 0xbc, 0x8c, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xa4, 0x96, 0xe7, 0xbd, 0x91, 0xe8, 0xae,
	0xbf, 0xe9, 0x97, 0xae, 0xe7, 0x9a, 0x84, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x6e, 0x65, 0x74, 0x12, 0x62, 0x0a,
	0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48,
	0x92, 0x41, 0x3b, 0x2a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79, 0x70, 0x65, 0x32, 0x2e,
	0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0x49, 0x44, 0x2c, 0x20, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe4, 0xba, 0x91, 0xe8, 0xbf, 0x9b, 0xe8,
	0xa1, 0x8c, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x44, 0x12, 0xa3, 0x01, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x84, 0x01, 0x92, 0x41, 0x79, 0x2a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x6c, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20,
	0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x3b, 0x20, 0xe5, 0xbd,
	0x93, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe6, 0x97, 0xb6, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe4,
	0xbb, 0xa5, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x08, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x4f, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5,
	0x9c, 0xa8, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x18, 0x64, 0x32,
	0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x2a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x1d, 0x41, 0x4b, 0x53,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x74, 0x92,
	0x41, 0x71, 0x0a, 0x6f, 0x2a, 0x14, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x32, 0x41, 0xe6, 0xa3, 0x80, 0xe6,
	0xb5, 0x8b, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a,
	0x84, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xe8, 0xae, 0xbf, 0xe9, 0x97,
	0xae, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x86, 0x85, 0x2f, 0xe5, 0xa4, 0x96, 0xe7, 0xbd,
	0x91, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0xd2, 0x01, 0x07,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x85, 0x02, 0x0a, 0x0e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32,
	0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a, 0x0e, 0x4b, 0x75,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x32, 0x25, 0xe6, 0xa3,
	0x80, 0xe6, 0xb5, 0x8b, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xe5, 0x8f,
	0xaf, 0xe7, 0x94, 0xa8, 0xe6, 0x80, 0xa7, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8c, 0x02, 0x0a, 0x15,
	0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a, 0x0e, 0x4b, 0x75, 0x62,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x32, 0x25, 0xe6, 0xa3, 0x80,
	0xe6, 0xb5, 0x8b, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xe5, 0x8f, 0xaf,
	0xe7, 0x94, 0xa8, 0xe6, 0x80, 0xa7, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd5, 0x04, 0x0a, 0x0f, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4f,
	0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x35, 0x92, 0x41, 0x32, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x27, 0xe4,
	0xba, 0x91, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x28, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6,
	0x82, 0x3a, 0x20, 0xe8, 0x85, 0xbe, 0xe8, 0xae, 0xaf, 0xe4, 0xba, 0x91, 0x3a, 0x20, 0x63, 0x6c,
	0x73, 0x2d, 0x78, 0x78, 0x78, 0x29, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12,
	0x47, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x32, 0x16, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x6b, 0x75, 0x62, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0x52, 0x0a, 0x6b, 0x75,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7e, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x68, 0x92, 0x41, 0x65, 0x2a, 0x05, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x32, 0x5c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0xa4, 0x96, 0xe7, 0xbd,
	0x91, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0x2c, 0x20, 0xe4,
	0xb8, 0xba, 0x74, 0x72, 0x75, 0x65, 0xe6, 0x97, 0xb6, 0xe5, 0x80, 0x99, 0xe4, 0xbb, 0xa5, 0xe5,
	0x86, 0x85, 0xe7, 0xbd, 0x91, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xe5, 0xaf, 0xbc, 0xe5, 0x85,
	0xa5, 0x2e, 0x20, 0xe8, 0xaf, 0xa5, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe4, 0xbb, 0x85, 0xe5,
	0xaf, 0xb9, 0xe4, 0xba, 0x91, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe7, 0x94, 0x9f, 0xe6, 0x95,
	0x88, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x36, 0x92, 0x41, 0x33, 0x2a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x32, 0x22, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0x9c,
	0xa8, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xbb, 0x84, 0x28, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0xe4, 0xba, 0x91, 0x29, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x92, 0x01, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x78, 0x92, 0x41, 0x75, 0x2a, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x70, 0x73, 0x32, 0x6a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x2c, 0x20, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81,
	0xe6, 0x8f, 0x90, 0xe5, 0x89, 0x8d, 0xe7, 0xba, 0xb3, 0xe7, 0xae, 0xa1, 0xe8, 0x87, 0xb3, 0xe8,
	0x93, 0x9d, 0xe9, 0xb2, 0xb8, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe3, 0x80, 0x82, 0xe9, 0x80,
	0x9a, 0xe8, 0xbf, 0x87, 0xe5, 0x8f, 0x8d, 0xe5, 0x90, 0x91, 0xe4, 0xbb, 0xa3, 0xe7, 0x90, 0x86,
	0xe5, 0xae, 0x9e, 0xe7, 0x8e, 0xb0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xba, 0xb3, 0xe7,
	0xae, 0xa1, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x73, 0x3a, 0x35, 0x92, 0x41, 0x32,
	0x0a, 0x30, 0x2a, 0x0f, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x32, 0x1d, 0xe4, 0xba, 0x91, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0xa8, 0xa1, 0xe5,
	0xbc, 0x8f, 0x22, 0xe1, 0x18, 0x0a, 0x10, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x9d, 0x01, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7f, 0x92, 0x41, 0x7c,
	0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x6f, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x42, 0x43,
	0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x28, 0xe6, 0x89, 0x8b,
	0xe5, 0x8a, 0xa8, 0xe5, 0xbd, 0x95, 0xe5, 0x85, 0xa5, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6,
	0x97, 0xb6, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x2c, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0xaf,
	0xbc, 0xe5, 0x85, 0xa5, 0xe4, 0xbc, 0x9a, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe7, 0x94, 0x9f,
	0xe6, 0x88, 0x90, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x29, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41,
	0x1b, 0x2a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe7, 0xae, 0x80, 0xe8, 0xa6, 0x81, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0x92,
	0x41, 0x3a, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x2e, 0xe4, 0xba,
	0x91, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0x49, 0x44, 0x2c, 0x20, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe4, 0xba, 0x91, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c,
	0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x4f, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x37, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f,
	0x9f, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x5a, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x32, 0x12, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5,
	0xb1, 0x9e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x01, 0x18,
	0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d,
	0x2b, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x57, 0x0a,
	0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x37, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x49, 0x44, 0x32, 0x0c, 0x43, 0x4d, 0x44, 0x42, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44,
	0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x01, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x73, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0x92, 0x41, 0x36,
	0x2a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x27, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0x2c, 0x20, 0xe4, 0xbe, 0x8b,
	0xe5, 0xa6, 0x82, 0x5b, 0x70, 0x72, 0x6f, 0x64, 0x2c, 0x20, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2c,
	0x20, 0x73, 0x74, 0x61, 0x67, 0x5d, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x52, 0x04, 0x73, 0x74, 0x61,
	0x67, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x0a, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3c, 0x92, 0x41, 0x26, 0x2a, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x32, 0x18, 0xe5, 0xbc, 0x95, 0xe6, 0x93, 0x8e, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc,
	0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x6b, 0x38, 0x73, 0xfa, 0x42, 0x10, 0x72, 0x0e, 0x52,
	0x03, 0x6b, 0x38, 0x73, 0x52, 0x05, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x52, 0x00, 0x52, 0x0a, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x79, 0x0a, 0x0b, 0x69, 0x73, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a,
	0x0b, 0x69, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x32, 0x29, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe7, 0x8b, 0xac,
	0xe5, 0x8d, 0xa0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0xe4, 0xb8, 0xba, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x12, 0xc7, 0x01, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0xa4, 0x01, 0x92, 0x41, 0x85,
	0x01, 0x2a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x32, 0x76,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe4, 0xbe,
	0x8b, 0xe5, 0xa6, 0x82, 0x5b, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c,
	0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5d, 0x2c, 0x20, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0xba, 0xe8, 0x81, 0x94,
	0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe7, 0x8b, 0xac, 0xe7, 0xab, 0x8b, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x52, 0x0a, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52,
	0x00, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xa2,
	0x01, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x5c, 0x92,
	0x41, 0x51, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x47, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0xef, 0xbc, 0x8c, 0xe7, 0x94,
	0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0x90, 0xba, 0xe5, 0xb8, 0xa6, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96,
	0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0x80, 0xe5,
	0xa4, 0xa7, 0xe4, 0xb8, 0x8d, 0xe5, 0xbe, 0x97, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x32, 0x30,
	0xe4, 0xb8, 0xaa, 0xfa, 0x42, 0x05, 0x9a, 0x01, 0x02, 0x10, 0x14, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x32, 0x09, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xba, 0xba, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0xb1, 0x01, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x72, 0x92, 0x41, 0x67, 0x2a, 0x09, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x32, 0x5a, 0xe7, 0xba, 0xb3, 0xe7, 0xae, 0xa1, 0xe4, 0xba, 0x91,
	0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0x32, 0xe7, 0xa7, 0x8d, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f,
	0x3a, 0x20, 0xe4, 0xba, 0x91, 0x49, 0x44, 0xe5, 0x92, 0x8c, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2c, 0x20, 0xe4, 0xbb, 0xbb, 0xe6, 0x84, 0x8f, 0xe4, 0xb8, 0x80, 0xe7,
	0xa7, 0x8d, 0xe5, 0x8d, 0xb3, 0xe5, 0x8f, 0xaf, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0xe4, 0xbb, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xe4, 0xb8, 0xba, 0xe5, 0x87,
	0x86, 0xfa, 0x42, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0xbe, 0x01, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x9d, 0x01, 0x92, 0x41, 0x99, 0x01,
	0x2a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x8a, 0x01, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xef, 0xbc, 0x8c, 0xe5, 0x85, 0xac, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0x91, 0xe6, 0x97, 0xb6,
	0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0xef, 0xbc, 0x8c, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44,
	0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x28, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8a, 0xe6,
	0x89, 0x98, 0xe7, 0xae, 0xa1, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x29, 0xef, 0xbc, 0x8c, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x98, 0xaf, 0x20, 0x49, 0x4e, 0x44, 0x45, 0x50, 0x45, 0x4e,
	0x44, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x28, 0xe7, 0x8b, 0xac,
	0xe7, 0xab, 0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0xe8, 0x87, 0xaa, 0xe8,
	0xa1, 0x8c, 0xe7, 0xbb, 0xb4, 0xe6, 0x8a, 0xa4, 0x29, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0x92, 0x41, 0x44, 0x2a,
	0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x32, 0x35, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x28, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x29, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x98, 0xaf, 0x6f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0xb4, 0x01, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x65, 0x92, 0x41, 0x62, 0x2a, 0x09, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x55, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c,
	0x20, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x65, 0x73, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x2f, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0xe7, 0xad, 0x89,
	0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x76, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4e, 0x92, 0x41, 0x4b, 0x2a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x32, 0x39, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x49, 0x44, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x97, 0xb6, 0xe7, 0xa9, 0xba, 0xe5, 0x80, 0xbc, 0x52,
	0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0xa5, 0x01, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7b, 0x92, 0x41, 0x78, 0x2a, 0x0f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x32,
	0x65, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xef, 0xbc, 0x8c,
	0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0x8c, 0xba, 0xe5,
	0x88, 0x86, 0xe8, 0xaf, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe6, 0x98, 0xaf, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0xe3, 0x80, 0x81, 0xe5, 0xaf, 0xbc,
	0xe5, 0x85, 0xa5, 0x28, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x29, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x98, 0xaf,
	0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a,
	0x09, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x32, 0x21, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x69,
	0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x23, 0x2a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x08, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0xa3, 0x01, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x84, 0x01, 0x92, 0x41, 0x79, 0x2a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x6c, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20,
	0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x3b, 0x20, 0xe5, 0xbd,
	0x93, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe6, 0x97, 0xb6, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe4,
	0xbb, 0xa5, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x08, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x85, 0x01, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x72, 0x65,
	0x61, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x32, 0x4b, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91,
	0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x28, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe4, 0xb8, 0x8d, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x2c, 0x20, 0xe5, 0x88,
	0x99, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xba, 0x91,
	0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0x20, 0x30, 0x29, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0xbb, 0x01, 0x92, 0x41, 0xb7, 0x01, 0x0a,
	0xb4, 0x01, 0x2a, 0x10, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x32, 0x2d, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0xb7, 0xb2, 0xe5,
	0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xaf,
	0xbc, 0xe5, 0x85, 0xa5, 0x42, 0x43, 0x53, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe7, 0xba, 0xb3,
	0xe7, 0xae, 0xa1, 0xd2, 0x01, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0xd2, 0x01, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xd2, 0x01, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x44, 0xd2, 0x01, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0xd2, 0x01, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0xd2, 0x01, 0x0b, 0x69, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0xd2, 0x01,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xd0, 0x02, 0x0a, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x53, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1b, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe5, 0x92, 0x8c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x3a, 0x47, 0x92, 0x41, 0x44, 0x0a, 0x42, 0x2a, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x32, 0x15, 0xe5, 0xaf, 0xbc, 0xe5,
	0x85, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xda, 0x03, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x56, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x49, 0x44, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x01, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43,
	0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0xe4, 0x01,
	0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0xbb, 0x01, 0x92, 0x41, 0xb7, 0x01, 0x2a, 0x0e, 0x6f,
	0x6e, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xa4, 0x01,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xe3, 0x80,
	0x82, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0xba, 0x74, 0x72, 0x75, 0x65, 0xe6, 0x97,
	0xb6, 0xef, 0xbc, 0x8c, 0xe4, 0xbb, 0x85, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0xe6, 0x89, 0x80, 0xe8,
	0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc,
	0x8c, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0x9a, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe4, 0xbb, 0xbb,
	0xe4, 0xbd, 0x95, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x81, 0xe7,
	0xa8, 0x8b, 0xe3, 0x80, 0x82, 0xe8, 0xaf, 0xa5, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe5, 0x8f,
	0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0x8e, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0xe5,
	0x90, 0x8c, 0xe6, 0x97, 0xb6, 0xe5, 0x8d, 0x8f, 0xe5, 0x90, 0x8c, 0xe5, 0xb7, 0xa5, 0xe4, 0xbd,
	0x9c, 0xe3, 0x80, 0x82, 0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x15, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x3e, 0x92, 0x41, 0x3b, 0x0a, 0x39, 0x2a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x32, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0xba, 0x04, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x56, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x1e, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0xb7, 0xb2, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x60, 0x0a, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x36,
	0x92, 0x41, 0x33, 0x2a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x32, 0x2a, 0xe5, 0x88, 0xa0, 0xe9,
	0x99, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe8, 0x87, 0xaa, 0xe5, 0x8a,
	0xa8, 0xe5, 0x8c, 0x96, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82,
	0xe6, 0x9e, 0x9c, 0xe6, 0x9c, 0x89, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x7c, 0x0a, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x1b, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x47, 0x92, 0x41, 0x44, 0x0a,
	0x42, 0x2a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x32, 0x15, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xdc, 0x02, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x12, 0x56, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49,
	0x44, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x01, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53,
	0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x4d, 0x0a, 0x05,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x2a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x32, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x61, 0xe9, 0x99,
	0x90, 0xe5, 0x88, 0xb6, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x32, 0x12, 0xe6, 0x93, 0x8d, 0xe4,
	0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe5, 0x91, 0x98, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0x80, 0x08, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x3a,
	0x51, 0x92, 0x41, 0x4e, 0x0a, 0x4c, 0x2a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x32, 0x18, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x99, 0x9a, 0xe6,
	0x8b, 0x9f, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x85, 0x8d, 0xe9, 0xa2, 0x9d, 0xd2, 0x01,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x05, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x22, 0x89, 0x03, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x63, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x24, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x90, 0x8e, 0xe7, 0x9a, 0x84,
	0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe9, 0x85, 0x8d, 0xe7,
	0xbd, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x64, 0x92, 0x41, 0x61, 0x0a, 0x5f, 0x2a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x32, 0x2d,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x99, 0x9a, 0xe6, 0x8b, 0x9f, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe9, 0x85,
	0x8d, 0xe9, 0xa2, 0x9d, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xad,
	0x08, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x56, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44,
	0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x01, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0xb1, 0x02, 0x0a, 0x08,
	0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x94,
	0x02, 0x92, 0x41, 0x90, 0x02, 0x2a, 0x08, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x32,
	0x83, 0x02, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0xba, 0xe5, 0x88, 0xb6, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0xe3, 0x80, 0x82, 0xe5, 0xbc, 0xba, 0xe5, 0x88, 0xb6, 0xe5, 0x88, 0xa0, 0xe9, 0x99,
	0xa4, 0xe4, 0xbc, 0x9a, 0xe4, 0xb8, 0x80, 0xe5, 0xb9, 0xb6, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0xe7, 0xae,
	0xa1, 0xe7, 0x90, 0x86, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xef, 0xbc, 0x8c,
	0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x8c, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe7, 0xad, 0x89, 0xe3, 0x80, 0x82, 0xe5, 0xbc,
	0xba, 0xe5, 0x88, 0xb6, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0x91, 0xa8, 0xe6, 0x9c, 0x9f,
	0xe8, 0xbe, 0x83, 0xe9, 0x95, 0xbf, 0xef, 0xbc, 0x8c, 0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86, 0xe5,
	0xb7, 0xa5, 0xe4, 0xbd, 0x9c, 0xe4, 0xbc, 0x9a, 0xe8, 0xbf, 0x9b, 0xe5, 0x85, 0xa5, 0xe9, 0x95,
	0xbf, 0xe5, 0x90, 0x8e, 0xe5, 0x8f, 0xb0, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xbf, 0x90,
	0xe8, 0xa1, 0x8c, 0xef, 0xbc, 0x8c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0x9a, 0xe7, 0xab, 0x8b, 0xe5, 0x88, 0xbb, 0xe8, 0xa2,
	0xab, 0xe6, 0xb8, 0x85, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe8, 0x80, 0x8c, 0xe6, 0x98, 0xaf,
	0xe5, 0xa4, 0x84, 0xe4, 0xba, 0x8e, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0xe3, 0x80, 0x82, 0x52, 0x08, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x12,
	0x9f, 0x01, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6f, 0x92, 0x41,
	0x6c, 0x2a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x32, 0x56, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xae, 0x9e,
	0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x97, 0xb6, 0xe7, 0xad, 0x96, 0xe7,
	0x95, 0xa5, 0x3a, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x28, 0xe9, 0x94,
	0x80, 0xe6, 0xaf, 0x81, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0x29, 0x20, 0x72, 0x65, 0x74, 0x61,
	0x69, 0x6e, 0x28, 0xe4, 0xbb, 0x85, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0x2c, 0xe4, 0xbf, 0x9d,
	0xe7, 0x95, 0x99, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0x29, 0xe3, 0x80, 0x82, 0x52, 0x12, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0xe4, 0x01, 0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0xbb, 0x01, 0x92, 0x41, 0xb7,
	0x01, 0x2a, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x32, 0xa4, 0x01, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0xe3, 0x80, 0x82, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0xba, 0x74, 0x72,
	0x75, 0x65, 0xe6, 0x97, 0xb6, 0xef, 0xbc, 0x8c, 0xe4, 0xbb, 0x85, 0xe5, 0x88, 0xa0, 0xe9, 0x99,
	0xa4, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0xe6, 0x89, 0x80, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0x9a, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f,
	0x91, 0xe4, 0xbb, 0xbb, 0xe4, 0xbd, 0x95, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96,
	0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe3, 0x80, 0x82, 0xe8, 0xaf, 0xa5, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0x8e, 0x69, 0x73, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x64, 0xe5, 0x90, 0x8c, 0xe6, 0x97, 0xb6, 0xe5, 0x8d, 0x8f, 0xe5, 0x90, 0x8c, 0xe5,
	0xb7, 0xa5, 0xe4, 0xbd, 0x9c, 0xe3, 0x80, 0x82, 0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x15, 0xe5, 0x88, 0xa0, 0xe9, 0x99,
	0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x88, 0x01, 0x0a, 0x13, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x13, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x32, 0x3c, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x91, 0x98, 0xe6, 0x93, 0x8d,
	0xe4, 0xbd, 0x9c, 0x2c, 0x20, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x74, 0x72, 0x75, 0x65, 0xe6,
	0x97, 0xb6, 0xe4, 0xbb, 0x85, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xba, 0x93, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95,
	0x52, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x3a, 0x37, 0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x32, 0x12,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0xac,
	0x04, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x56, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1e, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0xb7, 0xb2,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x60, 0x0a, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42,
	0x36, 0x92, 0x41, 0x33, 0x2a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x32, 0x2a, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe8, 0x87, 0xaa, 0xe5,
	0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xef, 0xbc, 0x8c, 0xe5, 0xa6,
	0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9c, 0x89, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x7c, 0x0a,
	0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x0f, 0x77,
	0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x1b,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x40, 0x92, 0x41, 0x3d,
	0x0a, 0x3b, 0x2a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x32, 0x15, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x91, 0x2e,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x55, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x2c, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x1f, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef,
	0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x08, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x32, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x74, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0x92,
	0x41, 0x4d, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x41, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe8, 0x80, 0x85, 0xef, 0xbc, 0x8c,
	0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0xbd,
	0xb1, 0xe5, 0x93, 0x8d, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe4, 0xba, 0x91, 0xe8, 0xae, 0xbe,
	0xe6, 0x96, 0xbd, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x08, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x12,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9f, 0x9f, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x70,
	0x63, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92, 0x41, 0x32, 0x2a, 0x05,
	0x76, 0x70, 0x63, 0x49, 0x44, 0x32, 0x29, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xa7, 0x81,
	0xe6, 0x9c, 0x89, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0x69, 0x64, 0xef, 0xbc, 0x8c, 0xe4, 0xba,
	0x91, 0xe4, 0xb8, 0x8a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xa1, 0xab, 0xe5, 0x86, 0x99,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x08, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12,
	0x3e, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x32, 0x08, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0x80, 0x08, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x45, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x49, 0x44, 0x32, 0x0c, 0x43, 0x4d, 0x44, 0x42, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1,
	0x49, 0x44, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x08, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x5b, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36,
	0x2a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x27, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0x2c, 0x20, 0xe4, 0xbe, 0x8b,
	0xe5, 0xa6, 0x82, 0x5b, 0x70, 0x72, 0x6f, 0x64, 0x2c, 0x20, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2c,
	0x20, 0x73, 0x74, 0x61, 0x67, 0x5d, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x35, 0x2a, 0x0a, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x27, 0xe5, 0xbc, 0x95, 0xe6, 0x93, 0x8e,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0x5b, 0x6b, 0x38, 0x73, 0x2c, 0x20, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x5d, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x6b, 0x38,
	0x73, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a,
	0x0b, 0x69, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d,
	0x92, 0x41, 0x2a, 0x2a, 0x0b, 0x69, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x32, 0x1b, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a,
	0xa1, 0xe7, 0x8b, 0xac, 0xe5, 0x8d, 0xa0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x52, 0x0b, 0x69,
	0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x89, 0x01, 0x92, 0x41, 0x85, 0x01, 0x2a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x32, 0x76, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x2c, 0x20, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x5b, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5d, 0x2c, 0x20,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba,
	0xe4, 0xb8, 0xba, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xef,
	0xbc, 0x8c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe7, 0x8b,
	0xac, 0xe7, 0xab, 0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98,
	0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x13, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x65, 0x92, 0x41, 0x62, 0x2a, 0x13, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x32, 0x4b, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe8, 0xaf, 0xa5, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe4, 0xb8, 0xba, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0x80, 0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xef, 0xbc, 0x8c,
	0xe7, 0x94, 0xa8, 0xe8, 0xaf, 0xa5, 0x49, 0x44, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe8, 0x81,
	0x94, 0xe9, 0x82, 0xa6, 0x48, 0x6f, 0x73, 0x74, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x13,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0xad, 0x01, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x67, 0x92, 0x41, 0x5c, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32,
	0x52, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0x90, 0xba, 0xe5, 0xb8, 0xa6, 0xe9,
	0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc,
	0x8c, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe4, 0xb8, 0x8d, 0xe5, 0xbe, 0x97, 0xe8, 0xb6, 0x85,
	0xe8, 0xbf, 0x87, 0x32, 0x30, 0xe4, 0xb8, 0xaa, 0x2c, 0x20, 0xe5, 0xb7, 0xb2, 0xe5, 0xba, 0x9f,
	0xe5, 0xbc, 0x83, 0xfa, 0x42, 0x05, 0x9a, 0x01, 0x02, 0x10, 0x14, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x32, 0x12, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe5, 0x91, 0x98,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x08, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0xf6, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0xdd, 0x01, 0x92, 0x41, 0x66, 0x2a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x5c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0xef, 0xbc, 0x8c, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0xef, 0xbc, 0x8c, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47,
	0xef, 0xbc, 0x8c, 0x46, 0x41, 0x4c, 0x55, 0x52, 0x45, 0xef, 0xbc, 0x8c, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0xef, 0xbc, 0x8c, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0xfa, 0x42, 0x71, 0x72, 0x6f, 0x52, 0x0e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x52, 0x0e, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x2d, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x52, 0x0f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x2d, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x52, 0x0e, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x2d, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x52, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x52, 0x07, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x52, 0x0e, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x2d, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x52, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0xef, 0x01, 0x0a, 0x09, 0x62, 0x63, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x42, 0x63, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x9f, 0x01, 0x92, 0x41, 0x9b, 0x01, 0x2a, 0x09, 0x62, 0x63,
	0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x32, 0x8d, 0x01, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x97, 0xb6, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0x42,
	0x43, 0x53, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0xae, 0xe6, 0x8f, 0x92, 0xe4, 0xbb, 0xb6, 0xe5, 0xae,
	0x89, 0xe8, 0xa3, 0x85, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe4, 0xbc, 0x9a, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8a, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe5, 0xaf, 0xb9, 0xe6, 0xaf, 0x94, 0xe4, 0xb8, 0x8e,
	0xe8, 0xa1, 0xa5, 0xe5, 0x85, 0x85, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5,
	0xa1, 0xab, 0xe5, 0x86, 0x99, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e,
	0xa5, 0xe6, 0x8a, 0xa5, 0xe9, 0x94, 0x99, 0x52, 0x09, 0x62, 0x63, 0x73, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x12, 0xe6, 0x01, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x90, 0x01, 0x92, 0x41,
	0x8c, 0x01, 0x2a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x32,
	0x7d, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x97, 0xb6,
	0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbc, 0xa0, 0xe9,
	0x80, 0x92, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe8, 0xaf,
	0xa5, 0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xba, 0xe9, 0xa2, 0x84, 0xe7, 0x95, 0x99,
	0xe4, 0xba, 0x8c, 0xe6, 0x96, 0xb9, 0x2f, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0x2f, 0xe6, 0x9c,
	0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x95, 0x86, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0xa1, 0xab, 0xe9,
	0x94, 0x99, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0xe6, 0x8a, 0xa5, 0xe9, 0x94, 0x99, 0x52, 0x0b,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x08, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92,
	0x41, 0x36, 0x2a, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x32, 0x2a, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x9c,
	0xa8, 0xe5, 0x90, 0x84, 0xe4, 0xba, 0x91, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe4, 0xb8, 0x8a,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x49, 0x44, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x44, 0x12, 0xb4, 0x01, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x93, 0x01, 0x92, 0x41, 0x8f, 0x01, 0x2a, 0x0a,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x80, 0x01, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef,
	0xbc, 0x8c, 0xe5, 0x85, 0xac, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0x91, 0xe6, 0x97, 0xb6, 0xe7, 0x94,
	0x9f, 0xe6, 0x95, 0x88, 0xef, 0xbc, 0x8c, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x43,
	0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x28, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8a, 0xe6, 0x89, 0x98,
	0xe7, 0xae, 0xa1, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x29, 0xef, 0xbc, 0x8c, 0x49, 0x4e, 0x44,
	0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52,
	0x28, 0xe7, 0x8b, 0xac, 0xe7, 0xab, 0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c,
	0xe8, 0x87, 0xaa, 0xe8, 0xa1, 0x8c, 0xe7, 0xbb, 0xb4, 0xe6, 0x8a, 0xa4, 0x29, 0x52, 0x0a, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x06,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x32, 0x15, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x20, 0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x06, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x90, 0x01, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42,
	0x46, 0x92, 0x41, 0x43, 0x2a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x32, 0x30, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbd, 0x91,
	0xe7, 0xbb, 0x9c, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xef,
	0xbc, 0x8c, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe6, 0x96,
	0xb9, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xcb, 0x01, 0x0a, 0x14, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x92, 0x41,
	0x6f, 0x2a, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x32, 0x57, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5,
	0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xae, 0xbe, 0xe7, 0xbd,
	0xae, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8,
	0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xef, 0xbc, 0x8c, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7,
	0x9a, 0x84, 0x76, 0x70, 0x63, 0xe7, 0xad, 0x89, 0xef, 0xbc, 0x8c, 0xe8, 0xb0, 0x83, 0xe7, 0x94,
	0xa8, 0xe6, 0x96, 0xb9, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae,
	0x52, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xe2, 0x01, 0x0a, 0x16, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x82,
	0x01, 0x92, 0x41, 0x7f, 0x2a, 0x17, 0x63, 0x6c, 0x75, 0x73, 0x65, 0x74, 0x65, 0x72, 0x41, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x32, 0x64, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xbf, 0x9b, 0xe9, 0x98, 0xb6, 0xe7, 0x89, 0xb9, 0xe6, 0x80,
	0xa7, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82,
	0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x69, 0x70, 0x76, 0x73, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7,
	0xef, 0xbc, 0x8c, 0xe5, 0xae, 0xb9, 0xe5, 0x99, 0xa8, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6,
	0x97, 0xb6, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe7, 0xad, 0x89, 0xe3, 0x80, 0x82, 0xe9, 0x9c,
	0x80, 0xe8, 0xa6, 0x81, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe6, 0x96, 0xb9, 0xe8, 0xae, 0xbe,
	0xe7, 0xbd, 0xae, 0x52, 0x16, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xd4, 0x01, 0x0a, 0x0c,
	0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42,
	0x92, 0x01, 0x92, 0x41, 0x8e, 0x01, 0x2a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x32, 0x7e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6,
	0x82, 0xe6, 0x8c, 0x82, 0xe8, 0xbd, 0xbd, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xef, 0xbc, 0x8c,
	0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0xae, 0xe5,
	0xbd, 0x95, 0xe7, 0xad, 0x89, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x97, 0xa0, 0xe7, 0x89,
	0xb9, 0xe5, 0x88, 0xab, 0xe9, 0x9c, 0x80, 0xe6, 0xb1, 0x82, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf,
	0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0x8d, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0x42,
	0x43, 0x53, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x58, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x32, 0x24, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x29, 0x52,
	0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0xb4, 0x01, 0x0a,
	0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x65, 0x92, 0x41, 0x62, 0x2a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x32, 0x55, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6,
	0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe4, 0xbe, 0x8b,
	0xe5, 0xa6, 0x82, 0x65, 0x73, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0xe7, 0xad, 0x89, 0xe6, 0x89, 0xa9, 0xe5,
	0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x2a, 0x08, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x44, 0x32, 0x2d, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0xa8, 0xa1, 0xe5,
	0x9d, 0x97, 0x49, 0x44, 0x28, 0x43, 0x41, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe8, 0xbd, 0xac, 0xe7,
	0xa7, 0xbb, 0x29, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x76, 0x0a,
	0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4e, 0x92, 0x41, 0x4b, 0x2a, 0x0e, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x39, 0xe5, 0xaf, 0xbc, 0xe5,
	0x85, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4,
	0x96, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x97, 0xb6, 0xe7,
	0xa9, 0xba, 0xe5, 0x80, 0xbc, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x7d, 0x0a, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a,
	0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x32, 0x21, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe5, 0x85, 0xac, 0xe5, 0x85,
	0xb1, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe7, 0xae, 0x80, 0xe8, 0xa6, 0x81, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa5, 0x01, 0x0a, 0x0f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x7b, 0x92, 0x41, 0x78, 0x2a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x32, 0x65, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6,
	0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0x8c, 0xba, 0xe5, 0x88, 0x86, 0xe8, 0xaf, 0xa5,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x98, 0xaf, 0xe8,
	0x87, 0xaa, 0xe5, 0xbb, 0xba, 0xe3, 0x80, 0x81, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0x28, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x29,
	0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x98, 0xaf, 0xe8, 0x87, 0xaa, 0xe5, 0xbb,
	0xba, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x6a, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x32, 0x21, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe5, 0x85, 0xb1, 0xe4,
	0xba, 0xab, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x74,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x54, 0x92, 0x41, 0x51, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x32, 0x43, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0xe6, 0xa0,
	0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x28, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4e, 0x6f, 0x77,
	0x28, 0x29, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x28, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x52,
	0x46, 0x43, 0x33, 0x33, 0x33, 0x39, 0x29, 0x29, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x32, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xba, 0xba, 0xe5, 0x91,
	0x98, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x08, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xa6, 0x01, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x7e, 0x92, 0x41, 0x7b, 0x2a, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x32, 0x69, 0xe5, 0xbd, 0x93, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xe4, 0xb8, 0xba, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0xe6, 0x97, 0xb6, 0x2c, 0x20,
	0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0x8c, 0xba, 0xe5,
	0x88, 0x86, 0xe8, 0xaf, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x98, 0xaf, 0x6b, 0x75,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe5, 0xaf,
	0xbc, 0xe5, 0x85, 0xa5, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe7, 0xa9,
	0xba, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0xea, 0x01, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc1, 0x01, 0x92, 0x41, 0xbd,
	0x01, 0x2a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x32, 0xaa, 0x01, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94,
	0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x49, 0x44, 0x2c, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe3, 0x80, 0x82, 0xe4, 0xb8,
	0xbb, 0xe8, 0xa6, 0x81, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe6, 0x98, 0xaf, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x87, 0xad, 0xe8,
	0xaf, 0x81, 0xe3, 0x80, 0x82, 0xe7, 0xa7, 0x81, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0x91, 0xe5, 0x9c,
	0xba, 0xe6, 0x99, 0xaf, 0xe4, 0xb8, 0x8b, 0xe7, 0xbb, 0x9f, 0xe4, 0xb8, 0x80, 0xe7, 0xae, 0xa1,
	0xe7, 0x90, 0x86, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xef, 0xbc,
	0x8c, 0xe8, 0x80, 0x8c, 0xe5, 0x85, 0xac, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0x91, 0xe5, 0x9c, 0xba,
	0xe6, 0x99, 0xaf, 0xe7, 0xba, 0xb3, 0xe7, 0xae, 0xa1, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe4,
	0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81, 0x52, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x68,
	0x0a, 0x07, 0x69, 0x73, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x92, 0x41, 0x2f,
	0x2a, 0x07, 0x69, 0x73, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x32, 0x24, 0xe6, 0xa0, 0x87, 0xe8, 0xae,
	0xb0, 0xe8, 0xaf, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe6, 0x98, 0xaf, 0xe6, 0xb7, 0xb7, 0xe9, 0x83, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x52,
	0x07, 0x69, 0x73, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x12, 0xa4, 0x02, 0x0a, 0x0c, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x42, 0xda, 0x01, 0x92, 0x41, 0xd6, 0x01, 0x2a, 0x0c, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x32, 0xc5, 0x01, 0xe5, 0x85, 0xb1, 0xe4,
	0xba, 0xab, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x8f, 0xaf, 0xe8, 0xa7, 0x81, 0xe8, 0x8c,
	0x83, 0xe5, 0x9b, 0xb4, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x28, 0xe5, 0xbd, 0x93, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0xe4, 0xb8, 0xba, 0x74, 0x72, 0x75, 0x65, 0xe6, 0x97,
	0xb6, 0xe4, 0xb8, 0x94, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe6, 0x97, 0xb6, 0x2c, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab,
	0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0xef, 0xbc, 0x9b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0xe4, 0xb8, 0x8d, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe6, 0x97, 0xb6, 0x2c, 0xe5, 0x85,
	0xb1, 0xe4, 0xba, 0xab, 0xe7, 0xbb, 0x99, 0xe6, 0x9f, 0x90, 0xe4, 0xba, 0x9b, 0xe4, 0xb8, 0x9a,
	0xe5, 0x8a, 0xa1, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xef,
	0xbc, 0x8c, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x8f,
	0xaa, 0xe6, 0x9c, 0x89, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90,
	0x29, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x70, 0x0a, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x3b, 0x92, 0x41, 0x38,
	0x2a, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x32, 0x2d, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe7, 0x9a, 0x84, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8,
	0xe4, 0xba, 0x8e, 0xe6, 0x90, 0xba, 0xe5, 0xb8, 0xa6, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe7,
	0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x32, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x0e,
	0x42, 0x63, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x42, 0x4b, 0x4f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x4b,
	0x4f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x3a, 0xdc, 0x01, 0x92, 0x41, 0xd8, 0x01, 0x0a, 0xd5, 0x01, 0x2a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x32, 0xb4,
	0x01, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0xe6,
	0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe4, 0xbb, 0x85, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x92, 0x8c, 0xe4, 0xbf, 0xae,
	0xe6, 0xad, 0xa3, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0x9a, 0xe8, 0xa7, 0xa6, 0xe5,
	0x8f, 0x91, 0xe4, 0xbb, 0xbb, 0xe4, 0xbd, 0x95, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xba, 0xe5, 0x8a,
	0xa8, 0xe4, 0xbd, 0x9c, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe9, 0x9c, 0x80,
	0xe8, 0xa6, 0x81, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5,
	0x8c, 0x96, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xef, 0xbc,
	0x8c, 0xe8, 0xaf, 0xb7, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81,
	0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe7, 0x9a, 0x84, 0xe6,
	0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x22, 0xca, 0x03, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x53, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x26, 0x92,
	0x41, 0x23, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1b, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x90, 0x8e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x7c, 0x0a, 0x0f, 0x77,
	0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x1b, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x43, 0x92, 0x41, 0x40, 0x0a, 0x3e,
	0x2a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x32, 0x18, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd8,
	0x01, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x3d, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a,
	0x48, 0x92, 0x41, 0x45, 0x0a, 0x43, 0x2a, 0x15, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x32, 0x1e, 0xe9,
	0x87, 0x8d, 0xe6, 0x96, 0xb0, 0xe4, 0xb8, 0x8b, 0xe5, 0x8f, 0x91, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0xa9, 0x03, 0x0a, 0x16, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x15, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x9a, 0x84,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x04, 0x74, 0x61, 0x73,
	0x6b, 0x32, 0x15, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x3a, 0x55,
	0x92, 0x41, 0x52, 0x0a, 0x50, 0x2a, 0x16, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x32, 0x1e, 0xe9,
	0x87, 0x8d, 0xe6, 0x96, 0xb0, 0xe4, 0xb8, 0x8b, 0xe5, 0x8f, 0x91, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfa, 0x02, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x56, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x15, 0x2a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x01, 0x18, 0x64, 0x32, 0x0f, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04,
	0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x6c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x4e, 0x92, 0x41, 0x4b, 0x2a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x32, 0x3e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94,
	0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xbb, 0x8e, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe5, 0xba, 0x93, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6d, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4f, 0x92, 0x41, 0x4c, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x32, 0x3f, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x9c,
	0xa8, 0xe8, 0x87, 0xaa, 0xe8, 0xba, 0xab, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8b,
	0xe5, 0xba, 0x94, 0xe8, 0xaf, 0xa5, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe4, 0xb8, 0xba, 0xe7,
	0x8b, 0xac, 0xe7, 0xab, 0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xa4, 0x84, 0xe7, 0x90,
	0x86, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x3a, 0x34, 0x92, 0x41,
	0x31, 0x0a, 0x2f, 0x2a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x22, 0xa6, 0x04, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x15, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x9a,
	0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x65, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x2a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x32, 0x21, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x7c, 0x0a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x1b, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x41, 0x92, 0x41, 0x3e, 0x0a, 0x3c, 0x2a,
	0x0e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x32,
	0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x10, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x67, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x40, 0x2a, 0x0c, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x32, 0x30, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe5, 0xba, 0x95, 0xe5, 0xb1, 0x82, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe5,
	0xbc, 0x95, 0xe6, 0x93, 0x8e, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x74, 0x6b, 0x65, 0x2f,
	0x6b, 0x38, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x29, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x73, 0x32,
	0x14, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x73, 0x3a,
	0x44, 0x92, 0x41, 0x41, 0x0a, 0x3f, 0x2a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1f, 0xe6, 0xa3, 0x80, 0xe6, 0x9f,
	0xa5, 0x6e, 0x6f, 0x64, 0x65, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xad, 0x98, 0xe5, 0x9c,
	0xa8, 0x62, 0x63, 0x73, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xd2, 0x01, 0x08, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x49, 0x50, 0x73, 0x22, 0xb6, 0x03, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6c, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x1f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x6e, 0x6f, 0x64, 0x65, 0xe6, 0xa3,
	0x80, 0xe6, 0x9f, 0xa5, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x2c, 0x6b, 0x65, 0x79, 0xe6, 0x98,
	0xaf, 0x49, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x53, 0x0a, 0x09, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x3e,
	0x92, 0x41, 0x3b, 0x0a, 0x39, 0x2a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xd2, 0x01, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe3,
	0x01, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x0a,
	0x07, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x29,
	0x92, 0x41, 0x26, 0x2a, 0x07, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x32, 0x1b, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xb8, 0xad, 0x52, 0x07, 0x69, 0x73, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x14, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80,
	0xe5, 0x9c, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27,
	0x2a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x18, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd8, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x43, 0x6f, 0x72, 0x64, 0x6f,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x08,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x23,
	0x92, 0x41, 0x20, 0x2a, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x73, 0x32, 0x14, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x52, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x73, 0x12, 0x53, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x35, 0x92, 0x41, 0x2b, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x32, 0x1e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89,
	0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x72, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x5c, 0x92, 0x41, 0x59, 0x2a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x32, 0x50, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0x92, 0x8c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x86, 0x85,
	0xe7, 0xbd, 0x91, 0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xba, 0x8c, 0xe9, 0x80,
	0x89, 0xe4, 0xb8, 0x80, 0xef, 0xbc, 0x8c, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x3a, 0x37, 0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a, 0x13, 0x55,
	0x6e, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x1b, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe5, 0x8f, 0xaf, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x22,
	0xd2, 0x02, 0x0a, 0x14, 0x55, 0x6e, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7,
	0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x49, 0x92, 0x41, 0x46, 0x0a, 0x44,
	0x2a, 0x14, 0x55, 0x6e, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1b, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x8f, 0xaf, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xd7, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x50, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41,
	0x20, 0x2a, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x73, 0x32, 0x14, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x52, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x73, 0x12, 0x53, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35,
	0x92, 0x41, 0x2b, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x1e,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5,
	0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x72, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x5c, 0x92, 0x41, 0x59, 0x2a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x32, 0x50, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef,
	0xbc, 0x8c, 0xe5, 0x92, 0x8c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x86, 0x85, 0xe7, 0xbd,
	0x91, 0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xba, 0x8c, 0xe9, 0x80, 0x89, 0xe4,
	0xb8, 0x80, 0xef, 0xbc, 0x8c, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x3a, 0x38, 0x92, 0x41, 0x35, 0x0a, 0x33, 0x2a, 0x11, 0x43, 0x6f, 0x72,
	0x64, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1e,
	0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb8, 0x8d, 0xe5,
	0x8f, 0xaf, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x22, 0xd1,
	0x02, 0x0a, 0x12, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x4a, 0x92, 0x41, 0x47, 0x0a, 0x45, 0x2a, 0x12, 0x43,
	0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x1e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4,
	0xb8, 0x8d, 0xe5, 0x8f, 0xaf, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xba, 0x04, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x08, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x50, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x20, 0x2a,
	0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x73, 0x32, 0x14, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xfa,
	0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x64, 0x52, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x50, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0xa0, 0x01, 0x92, 0x41, 0x58, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x32, 0x4e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x28, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x2f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x2f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x2f, 0x41, 0x44, 0x44, 0x2d, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x2f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x2d, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x29, 0xfa, 0x42, 0x42, 0x72, 0x40, 0x52, 0x0e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x52, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x52, 0x0b, 0x41, 0x44, 0x44, 0x2d,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x52, 0x0e, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x2d,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x52, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x32, 0x1e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x6e, 0x6f, 0x64,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x1e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x38, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x32, 0x09, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x20, 0x01, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x3a, 0x42, 0x92, 0x41, 0x3f,
	0x0a, 0x3d, 0x2a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1d, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x50, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0xd2, 0x01, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x73, 0x22,
	0xe1, 0x02, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32,
	0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x57, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x27, 0x92, 0x41, 0x24, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1c, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe5, 0x92, 0x8c, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4,
	0xa5, 0xe7, 0x9a, 0x84, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x53,
	0x92, 0x41, 0x50, 0x0a, 0x4e, 0x2a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x27, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0xad, 0x98, 0xe5,
	0x9c, 0xa8, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x3e, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x22, 0xcd, 0x02, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x0e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x5c, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42,
	0x25, 0x92, 0x41, 0x22, 0x2a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x32, 0x18, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3b,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1f, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32,
	0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20,
	0x01, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x56, 0x92, 0x41, 0x53,
	0x0a, 0x51, 0x2a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1e,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xbd, 0xac, 0xe7,
	0xa7, 0xbb, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xd2, 0x01,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x06, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x22, 0xef, 0x02, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x56, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42,
	0x23, 0x92, 0x41, 0x20, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x59, 0x92, 0x41, 0x56, 0x0a,
	0x54, 0x2a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x24,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xbd, 0xac, 0xe7,
	0xa7, 0xbb, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x55, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x42, 0x29, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x32, 0x12, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0xe8, 0x07, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x3a, 0x37, 0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a, 0x15, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x11, 0xe5, 0xbd, 0x95, 0xe5, 0x85, 0xa5, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xd2, 0x01, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0xe5, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x50, 0x32, 0x0e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0x49,
	0x50, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x78, 0x01, 0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x50, 0x12, 0x51, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x77, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x77, 0x64,
	0x32, 0x29, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0x28, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0xe4, 0xb8, 0x8d, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0x29, 0x52, 0x07, 0x73, 0x68, 0x6f,
	0x77, 0x50, 0x77, 0x64, 0x3a, 0x41, 0x92, 0x41, 0x3e, 0x0a, 0x3c, 0x2a, 0x0e, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x20, 0xe9, 0x80, 0x9a,
	0xe8, 0xbf, 0x87, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x07,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x22, 0xcf, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x15, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x51, 0x92, 0x41, 0x4e, 0x0a, 0x4c, 0x2a, 0x0f, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x21,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0xad, 0x98, 0xe5, 0x9c,
	0xa8, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa0, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x32,
	0x0e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x78, 0x01, 0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x3a,
	0x4b, 0x92, 0x41, 0x48, 0x0a, 0x46, 0x2a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x26, 0xe9, 0x80, 0x9a, 0xe8,
	0xbf, 0x87, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xd2, 0x01, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x22, 0xe7, 0x02, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x15, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x9a,
	0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x3a, 0x61, 0x92, 0x41, 0x5e, 0x0a, 0x5c, 0x2a, 0x13, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x2d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xaf, 0xa6,
	0xe6, 0x83, 0x85, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xef,
	0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xd2, 0x01,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2,
	0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x80, 0x02, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5b, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x34,
	0x2a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x24,
	0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0xad, 0x97, 0xe7,
	0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8,
	0xba, 0xe7, 0xa9, 0xba, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x03, 0x43, 0x50, 0x55, 0x32, 0x0f, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0x43, 0x50, 0x55, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x43, 0x50, 0x55, 0x12,
	0x2e, 0x0a, 0x03, 0x6d, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0x92, 0x41,
	0x19, 0x2a, 0x03, 0x6d, 0x65, 0x6d, 0x32, 0x12, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x86,
	0x85, 0xe5, 0xad, 0x98, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x12,
	0x38, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41,
	0x23, 0x2a, 0x03, 0x47, 0x50, 0x55, 0x32, 0x1c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x47, 0x50,
	0x55, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd,
	0xe4, 0xb8, 0xba, 0x30, 0x52, 0x03, 0x47, 0x50, 0x55, 0x22, 0xbb, 0x0b, 0x0a, 0x08, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x2a, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x2f, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x20, 0xe6, 0x9f, 0x90, 0xe4, 0xba, 0x9b, 0xe5, 0x9c, 0xba,
	0xe6, 0x99, 0xaf, 0xe4, 0xb8, 0x8b, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4e, 0x92, 0x41, 0x4b, 0x2a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x3f, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x2c, 0x20, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8a, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x92, 0x8c, 0x49, 0x44, 0x43, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0x28, 0x43, 0x56, 0x4d, 0x2f, 0x49, 0x44, 0x43, 0x29, 0x2c, 0xe5, 0x8f, 0xaf, 0xe4, 0xb8,
	0xba, 0xe7, 0xa9, 0xba, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38,
	0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x32, 0x13, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe4, 0xba, 0x91, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x07, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x07,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x32, 0x11, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5,
	0x86, 0x85, 0xe7, 0xbd, 0x91, 0xe4, 0xb8, 0xbb, 0x49, 0x50, 0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x50, 0x12, 0x46, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x18, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89,
	0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x03, 0x56,
	0x50, 0x43, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x03, 0x56,
	0x50, 0x43, 0x32, 0x15, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e,
	0xe7, 0x9a, 0x84, 0x56, 0x50, 0x43, 0x20, 0x49, 0x44, 0x52, 0x03, 0x56, 0x50, 0x43, 0x12, 0x5b,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43,
	0x92, 0x41, 0x40, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x36, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xef,
	0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0xe5, 0xb9, 0xbf, 0xe5, 0xb7, 0x9e, 0xef, 0xbc,
	0x8c, 0xe6, 0xb7, 0xb1, 0xe5, 0x9c, 0xb3, 0xef, 0xbc, 0x8c, 0xe5, 0x8a, 0xa0, 0xe5, 0xb7, 0x9e,
	0xe7, 0xad, 0x89, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92,
	0x41, 0x30, 0x2a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x32, 0x24, 0x43, 0x41,
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49,
	0x44, 0xe5, 0x8f, 0xb7, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7,
	0xa9, 0xba, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0xb4, 0x01, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x9b, 0x01,
	0x92, 0x41, 0x97, 0x01, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x8c, 0x01, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x28, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x20, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x8c, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x20, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xad, 0x2c, 0x20,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x49, 0x4e, 0x47, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe4, 0xb8, 0xad, 0x2c, 0x20, 0x41, 0x44, 0x44, 0x2d, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x20, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x2c, 0x20, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x2d, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x20, 0xe4, 0xb8,
	0x8b, 0xe6, 0x9e, 0xb6, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x29, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x54, 0x92, 0x41, 0x51, 0x2a, 0x0e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x3f, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf, 0xe6, 0x9c, 0xba,
	0xe5, 0x9e, 0x8b, 0xe3, 0x80, 0x81, 0x43, 0x50, 0x55, 0xe3, 0x80, 0x81, 0x4d, 0x45, 0x4d, 0xe3,
	0x80, 0x81, 0x47, 0x50, 0x55, 0xe7, 0xad, 0x89, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x8c,
	0x01, 0x0a, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x56, 0x92, 0x41, 0x53,
	0x2a, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x47, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0xef, 0xbc, 0x8c, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x28, 0x61, 0x70, 0x2d, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x65, 0x6e, 0x2d, 0x34, 0x20, 0x2f, 0x20, 0x33, 0x37, 0x30, 0x30,
	0x30, 0x34, 0x29, 0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x85, 0x01,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x54, 0x92, 0x41, 0x51, 0x2a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x32, 0x48, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5,
	0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x49,
	0x44, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x28,
	0xe4, 0xbb, 0x85, 0x43, 0x41, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0xbd, 0x92, 0xe5, 0xb1,
	0x9e, 0xe4, 0xba, 0x8e, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x29, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x84, 0x01, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x2a,
	0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x32, 0x2f, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x52, 0x0c,
	0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x3a, 0x59, 0x92, 0x41,
	0x56, 0x0a, 0x54, 0x2a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x48, 0xe8,
	0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xaf, 0xa6, 0xe6, 0x83,
	0x85, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81,
	0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0xaf, 0xb9, 0xe6, 0x8e, 0xa5, 0xe5, 0x89, 0x8d, 0xe7,
	0xab, 0xaf, 0xe6, 0x88, 0x96, 0xe5, 0xa4, 0x96, 0xe9, 0x83, 0xa8, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb,
	0x9f, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x22, 0xc1, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x72, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x4e, 0x92, 0x41, 0x4b, 0x2a, 0x0c, 0x73, 0x68, 0x6f,
	0x77, 0x56, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x3b, 0xe5, 0xb1, 0x95, 0xe7, 0xa4,
	0xba, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7,
	0x9a, 0x84, 0x68, 0x6f, 0x73, 0x74, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x28, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0xe5,
	0xb1, 0x95, 0xe7, 0xa4, 0xba, 0x29, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x56, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x3a, 0x35, 0x92, 0x41, 0x32, 0x0a, 0x30, 0x2a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x32, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x85, 0xac, 0xe5, 0x85, 0xb1, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x22, 0xdb, 0x03, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x1d, 0x92, 0x41, 0x1a,
	0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x80, 0x01, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a,
	0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x32, 0x21, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83,
	0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x32, 0x1e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x85, 0xac, 0xe5, 0x85, 0xb1, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd4, 0x04, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32,
	0x12, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe5, 0x9c, 0xb0,
	0xe5, 0x9f, 0x9f, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x57, 0x92, 0x41, 0x4d, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x32, 0x41, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x8f, 0x90, 0xe4, 0xbe,
	0x9b, 0xe8, 0x80, 0x85, 0xef, 0xbc, 0x8c, 0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf,
	0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0xbd, 0xb1, 0xe5, 0x93, 0x8d, 0xe5, 0x85, 0xb7, 0xe4, 0xbd,
	0x93, 0xe4, 0xba, 0x91, 0xe8, 0xae, 0xbe, 0xe6, 0x96, 0xbd, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86,
	0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x8e, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x72, 0x92, 0x41, 0x6f, 0x2a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x63, 0xe6, 0x93, 0x8d, 0xe4, 0xbd,
	0x9c, 0xe8, 0x80, 0x85, 0x28, 0xe4, 0xbc, 0xa0, 0xe5, 0x8f, 0x82, 0xe6, 0x97, 0xb6, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xaf, 0xa5, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0xaf, 0xb9,
	0xe5, 0xba, 0x94, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe6, 0x9d, 0x83, 0xe9,
	0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0xa0, 0xe6,
	0x97, 0xb6, 0xe4, 0xbb, 0x85, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x29, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x72, 0x0a, 0x05, 0x62, 0x69, 0x7a, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5c, 0x92, 0x41, 0x59, 0x2a, 0x05, 0x62, 0x69,
	0x7a, 0x49, 0x64, 0x32, 0x50, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x85, 0xb3, 0xe8, 0x81,
	0x94, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe4,
	0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf, 0xe4, 0xb8, 0xba, 0xe4, 0xba, 0x86, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe7, 0xbb, 0x99, 0xe8, 0xaf, 0xa5,
	0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe7, 0x9a, 0x84, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x52, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x3a, 0x42, 0x92, 0x41,
	0x3f, 0x0a, 0x3d, 0x2a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x32, 0x24, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe6, 0x9f, 0x90, 0xe4, 0xb8, 0xaa, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8,
	0x8b, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x22, 0x87, 0x06, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0xbc, 0x01, 0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x52, 0x92, 0x41, 0x4f, 0x2a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x3b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85,
	0xb6, 0xe4, 0xbb, 0x96, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x2c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x84, 0xe4, 0xb9,
	0x8b, 0xe5, 0xa4, 0x96, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0x52, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x82, 0x01, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56,
	0x32, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x21, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6,
	0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0x9a, 0x84, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x5e, 0x0a, 0x15, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x5e, 0x92, 0x41, 0x5b, 0x0a,
	0x59, 0x2a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x32, 0x27, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe6, 0x9f, 0x90, 0xe4, 0xb8, 0xaa, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8b,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa8, 0x02, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x0a,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x08, 0xe4, 0xb8, 0x9a, 0xe5,
	0x8a, 0xa1, 0x49, 0x44, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44,
	0x12, 0x8e, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x72, 0x92, 0x41, 0x6f, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x32, 0x63, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0x28, 0xe4, 0xbc,
	0xa0, 0xe5, 0x8f, 0x82, 0xe6, 0x97, 0xb6, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xaf, 0xa5,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x2c, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0xa0, 0xe6, 0x97, 0xb6, 0xe4, 0xbb, 0x85, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x29, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x3a, 0x42, 0x92, 0x41, 0x3f, 0x0a, 0x3d, 0x2a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x32,
	0x24, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x9f, 0x90, 0xe4, 0xb8, 0xaa, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8b, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x22, 0xed, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x53, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x5e, 0x92, 0x41, 0x5b, 0x0a, 0x59, 0x2a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x32, 0x27, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9f, 0x90, 0xe4,
	0xb8, 0xaa, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x98, 0x11, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x47, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92,
	0x41, 0x1b, 0x2a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x32,
	0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x18, 0x64, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x73, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x57, 0x92, 0x41, 0x4d, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x32, 0x41, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b,
	0xe8, 0x80, 0x85, 0xef, 0xbc, 0x8c, 0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x49,
	0x44, 0xef, 0xbc, 0x8c, 0xe5, 0xbd, 0xb1, 0xe5, 0x93, 0x8d, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93,
	0xe4, 0xba, 0x91, 0xe8, 0xae, 0xbe, 0xe6, 0x96, 0xbd, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe6,
	0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x32, 0x12, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0x9c,
	0xa8, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x32, 0x2a, 0x05, 0x76, 0x70, 0x63, 0x49,
	0x44, 0x32, 0x29, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xa7, 0x81, 0xe6, 0x9c, 0x89, 0xe7,
	0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0x69, 0x64, 0xef, 0xbc, 0x8c, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8a,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xa1, 0xab, 0xe5, 0x86, 0x99, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x20, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92,
	0x41, 0x15, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe9,
	0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x0a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92,
	0x41, 0x1a, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x0c,
	0x43, 0x4d, 0x44, 0x42, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x64, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12,
	0x5b, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x2a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x27, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8e,
	0xaf, 0xe5, 0xa2, 0x83, 0x2c, 0x20, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x5b, 0x70, 0x72, 0x6f,
	0x64, 0x2c, 0x20, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2c, 0x20, 0x74, 0x65, 0x73, 0x74, 0x5d, 0x52,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0a,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x38, 0x92, 0x41, 0x35, 0x2a, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x32, 0x27, 0xe5, 0xbc, 0x95, 0xe6, 0x93, 0x8e, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef,
	0xbc, 0x8c, 0x5b, 0x6b, 0x38, 0x73, 0x2c, 0x20, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x5d, 0xef, 0xbc,
	0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x6b, 0x38, 0x73, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x69, 0x73, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2d, 0x92, 0x41, 0x2a,
	0x2a, 0x0b, 0x69, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x32, 0x1b, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe7, 0x8b,
	0xac, 0xe5, 0x8d, 0xa0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x89, 0x01,
	0x92, 0x41, 0x85, 0x01, 0x2a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x32, 0x76, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c,
	0x20, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x5b, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2c, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5d, 0x2c, 0x20, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0xba,
	0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe7, 0x8b, 0xac, 0xe7, 0xab,
	0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0xe4, 0xb8, 0xba, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x13, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x65, 0x92, 0x41, 0x62, 0x2a, 0x13, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x4b,
	0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe8, 0xaf, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4,
	0xb8, 0xba, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a,
	0x84, 0xe4, 0xb8, 0x80, 0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8,
	0xe8, 0xaf, 0xa5, 0x49, 0x44, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe8, 0x81, 0x94, 0xe9, 0x82,
	0xa6, 0x48, 0x6f, 0x73, 0x74, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x13, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x12, 0xc7, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0xae, 0x01, 0x92, 0x41, 0x66, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32,
	0x5c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x8c,
	0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0xef, 0xbc, 0x8c, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0xef, 0xbc,
	0x8c, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0xef, 0xbc, 0x8c, 0x46, 0x41, 0x4c, 0x55,
	0x52, 0x45, 0xef, 0xbc, 0x8c, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0xef, 0xbc, 0x8c, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0xfa, 0x42, 0x42,
	0x72, 0x40, 0x52, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x52, 0x07, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x52, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x52,
	0x06, 0x46, 0x41, 0x4c, 0x55, 0x52, 0x45, 0x52, 0x0e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x52, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5,
	0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6,
	0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x05, 0x2a, 0x03, 0x18, 0xe8, 0x07, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x8e, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x72, 0x92, 0x41, 0x6f, 0x2a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x63, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8,
	0x80, 0x85, 0x28, 0xe4, 0xbc, 0xa0, 0xe5, 0x8f, 0x82, 0xe6, 0x97, 0xb6, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe8, 0xaf, 0xa5, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0xaf, 0xb9, 0xe5, 0xba,
	0x94, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0xa0, 0xe6, 0x97, 0xb6,
	0xe4, 0xbb, 0x85, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x29, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x1f, 0x2a, 0x08, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x32, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x64, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x76, 0x0a,
	0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4e, 0x92, 0x41, 0x4b, 0x2a, 0x0e, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x39, 0xe5, 0xaf, 0xbc, 0xe5,
	0x85, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4,
	0x96, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x97, 0xb6, 0xe7,
	0xa9, 0xba, 0xe5, 0x80, 0xbc, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x61, 0x0a, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x42, 0x37,
	0x92, 0x41, 0x34, 0x2a, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x32, 0x21, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe5,
	0x85, 0xac, 0xe5, 0x85, 0xb1, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x2c, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x89, 0x01, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x42, 0x77,
	0x92, 0x41, 0x74, 0x2a, 0x03, 0x61, 0x6c, 0x6c, 0x32, 0x6d, 0x74, 0x72, 0x75, 0x65, 0xe6, 0x97,
	0xb6, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe7, 0x9a, 0x84,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0xe5, 0x8c, 0x85,
	0xe6, 0x8b, 0xac, 0xe8, 0xa2, 0xab, 0xe8, 0xbd, 0xaf, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7,
	0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x3b, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xe6,
	0x97, 0xb6, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0x9d, 0x9e, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x3a, 0xa1, 0x01, 0x92,
	0x41, 0x9d, 0x01, 0x0a, 0x9a, 0x01, 0x2a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x32, 0x87, 0x01, 0xe5, 0x88, 0xa9, 0xe7, 0x94, 0xa8, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xef, 0xbc, 0x8c,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe4, 0xb8, 0xba, 0x41,
	0x6e, 0x64, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e,
	0x9c, 0xe6, 0x9f, 0x90, 0xe9, 0xa1, 0xb9, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5,
	0x88, 0x99, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0x9a, 0xe7, 0x94,
	0xa8, 0xe6, 0xad, 0xa4, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4,
	0x22, 0xe1, 0x05, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0xb5, 0x01, 0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x52, 0x92, 0x41, 0x4f, 0x2a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x3b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x2c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x84,
	0xe4, 0xb9, 0x8b, 0xe5, 0xa4, 0x96, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x52, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x80, 0x01, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x21, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6,
	0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0x9a, 0x84, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x5e, 0x0a, 0x15, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x48, 0x92, 0x41, 0x45, 0x0a,
	0x43, 0x2a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x32, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xdf, 0x0c, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x32, 0x52, 0x65, 0x71, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x15, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41,
	0x1a, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x0c, 0x43,
	0x4d, 0x44, 0x42, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x64, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x73,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x57, 0x92, 0x41, 0x4d, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32,
	0x41, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe8, 0x80, 0x85,
	0xef, 0xbc, 0x8c, 0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x49, 0x44, 0xef, 0xbc,
	0x8c, 0xe5, 0xbd, 0xb1, 0xe5, 0x93, 0x8d, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe4, 0xba, 0x91,
	0xe8, 0xae, 0xbe, 0xe6, 0x96, 0xbd, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe6, 0xb5, 0x81, 0xe7,
	0xa8, 0x8b, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x32, 0x12, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9f, 0x9f, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x32, 0x2a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x32, 0x29,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xa7, 0x81, 0xe6, 0x9c, 0x89, 0xe7, 0xbd, 0x91, 0xe7,
	0xbb, 0x9c, 0x69, 0x64, 0xef, 0xbc, 0x8c, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8a, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe5, 0xa1, 0xab, 0xe5, 0x86, 0x99, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20,
	0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x5b, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41,
	0x36, 0x2a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x27,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0x2c, 0x20, 0xe4, 0xbe,
	0x8b, 0xe5, 0xa6, 0x82, 0x5b, 0x70, 0x72, 0x6f, 0x64, 0x2c, 0x20, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x2c, 0x20, 0x74, 0x65, 0x73, 0x74, 0x5d, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x35, 0x2a, 0x0a, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x27, 0xe5, 0xbc, 0x95, 0xe6, 0x93,
	0x8e, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0x5b, 0x6b, 0x38, 0x73, 0x2c, 0x20,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x5d, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x6b,
	0x38, 0x73, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0xac,
	0x01, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x89, 0x01, 0x92, 0x41, 0x85, 0x01, 0x2a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x32, 0x76, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x5b, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x5d, 0x2c, 0x20, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xe8, 0xa1,
	0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0xba, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0xe8, 0xa1, 0xa8, 0xe7,
	0xa4, 0xba, 0xe7, 0x8b, 0xac, 0xe7, 0xab, 0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xef, 0xbc,
	0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xc7, 0x01,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0xae,
	0x01, 0x92, 0x41, 0x66, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x5c, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf,
	0xe8, 0x83, 0xbd, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0xef, 0xbc, 0x8c, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0xef, 0xbc, 0x8c, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0xef, 0xbc, 0x8c, 0x46, 0x41, 0x4c, 0x55, 0x52, 0x45, 0xef,
	0xbc, 0x8c, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0xef, 0xbc, 0x8c, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0xfa, 0x42, 0x42, 0x72, 0x40, 0x52,
	0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x52, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x52, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x52, 0x06, 0x46, 0x41,
	0x4c, 0x55, 0x52, 0x45, 0x52, 0x0e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x52, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x52, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x1f, 0x2a, 0x08,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x32, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x44, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x18, 0x64, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x61,
	0x0a, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x0f, 0x69, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x21, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe5, 0x85, 0xac, 0xe5, 0x85, 0xb1, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x89, 0x01, 0x0a, 0x03, 0x61, 0x6c,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x77, 0x92, 0x41, 0x74, 0x2a, 0x03, 0x61, 0x6c,
	0x6c, 0x32, 0x6d, 0x74, 0x72, 0x75, 0x65, 0xe6, 0x97, 0xb6, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0xe5, 0x8c, 0x85, 0xe6, 0x8b, 0xac, 0xe8, 0xa2, 0xab, 0xe8,
	0xbd, 0xaf, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x3b, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xe6, 0x97, 0xb6, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe9, 0x9d, 0x9e, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb,
	0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x26, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87,
	0x8f, 0xfa, 0x42, 0x05, 0x2a, 0x03, 0x18, 0xe8, 0x07, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x3a, 0xa3, 0x01, 0x92, 0x41, 0x9f, 0x01, 0x0a, 0x9c, 0x01, 0x2a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x32, 0x52, 0x65, 0x71, 0x32, 0x87, 0x01, 0xe5,
	0x88, 0xa9, 0xe7, 0x94, 0xa8, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe8, 0xbf, 0x87, 0xe6, 0xbb,
	0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0xe4, 0xb8, 0xba, 0x41, 0x6e, 0x64, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xef, 0xbc,
	0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9f, 0x90, 0xe9, 0xa1, 0xb9, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0xba, 0xe7,
	0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe4, 0xb8,
	0x8d, 0xe4, 0xbc, 0x9a, 0xe7, 0x94, 0xa8, 0xe6, 0xad, 0xa4, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0x22, 0xd9, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x59, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x23, 0x92, 0x41, 0x20,
	0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0xe7, 0xae, 0x80, 0xe5, 0x8c, 0x96, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x4a, 0x92, 0x41, 0x47, 0x0a, 0x45, 0x2a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70,
	0x32, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x97, 0x03, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x85, 0x01, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x65, 0x92, 0x41, 0x62, 0x2a, 0x0a, 0x63, 0x61, 0x6e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x32, 0x54, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe8, 0x83, 0xbd, 0xe5, 0xa4, 0x9f, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x28,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x97, 0xa0, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0x6e,
	0x6f, 0x64, 0x65, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe6, 0x89, 0x8d, 0xe5,
	0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x29, 0x52, 0x0a, 0x63, 0x61,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x67, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43,
	0x92, 0x41, 0x40, 0x2a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x32, 0x30, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xba, 0x95, 0xe5, 0xb1, 0x82, 0xe4,
	0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe5, 0xbc, 0x95, 0xe6, 0x93, 0x8e, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x74, 0x6b, 0x65, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x6d, 0x65, 0x73,
	0x6f, 0x73, 0x29, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x98, 0x01, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x7a, 0x92, 0x41, 0x77, 0x2a, 0x09, 0x61, 0x75, 0x74, 0x6f,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x32, 0x6a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4,
	0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0x2c, 0x20, 0xe5, 0x9c, 0xa8, 0xe4, 0xba, 0x91, 0xe6, 0x94, 0xaf,
	0xe6, 0x8c, 0x81, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xe7,
	0x9a, 0x84, 0xe5, 0x89, 0x8d, 0xe6, 0x8f, 0x90, 0xe4, 0xb8, 0x8b, 0x2c, 0x20, 0xe6, 0x9f, 0x90,
	0xe4, 0xba, 0x9b, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6,
	0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc,
	0xa9, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x22, 0xa4, 0x01, 0x0a,
	0x0e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3f, 0x0a, 0x05, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x65, 0x72, 0x6d, 0x73,
	0x1a, 0x51, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x5b, 0x0a, 0x10, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x65, 0x72, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42,
	0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83,
	0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x70, 0x65, 0x72, 0x6d, 0x73,
	0x22, 0x8e, 0x07, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x21, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x3e, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x52, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c,
	0x92, 0x41, 0x32, 0x2a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x32, 0x29, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe7, 0xa7, 0x81, 0xe6, 0x9c, 0x89, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0x69, 0x64,
	0xef, 0xbc, 0x8c, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5,
	0xa1, 0xab, 0xe5, 0x86, 0x99, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20, 0x52, 0x05, 0x76, 0x70,
	0x63, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x20, 0x2a, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x32, 0x11, 0xe6, 0x89, 0x80, 0xe5,
	0xb1, 0x9e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x18, 0x64, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x12, 0x46, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0f, 0xe6, 0x9c, 0xba, 0xe5,
	0x9e, 0x8b, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6a, 0x92, 0x41, 0x67, 0x2a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x5d, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0xef, 0xbc, 0x8c, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0xef, 0xbc, 0x8c, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e,
	0x47, 0xef, 0xbc, 0x8c, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0xef, 0xbc, 0x8c, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0xef, 0xbc, 0x8c, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x23,
	0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x2a,
	0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x1b, 0x2a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x99,
	0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x05, 0x2a, 0x03, 0x18,
	0x88, 0x27, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x51, 0x0a, 0x07, 0x73, 0x68, 0x6f,
	0x77, 0x50, 0x77, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a,
	0x07, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x77, 0x64, 0x32, 0x29, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb1, 0x95, 0xe7,
	0xa4, 0xba, 0x28, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0x8d, 0xe5, 0xb1, 0x95, 0xe7,
	0xa4, 0xba, 0x29, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x77, 0x64, 0x3a, 0xb2, 0x01, 0x92,
	0x41, 0xae, 0x01, 0x0a, 0xab, 0x01, 0x2a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x49, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x8d, 0x01, 0xe5, 0x88, 0xa9, 0xe7, 0x94, 0xa8, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xef, 0xbc,
	0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe4, 0xb8, 0xba,
	0x41, 0x6e, 0x64, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6,
	0x9e, 0x9c, 0xe6, 0x9f, 0x90, 0xe9, 0xa1, 0xb9, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c,
	0xe5, 0x88, 0x99, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0x9a, 0xe7,
	0x94, 0xa8, 0xe6, 0xad, 0xa4, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe8, 0xbf, 0x87, 0xe6, 0xbb,
	0xa4, 0x22, 0xd5, 0x03, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x4e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x6d, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a,
	0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e,
	0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x59,
	0x92, 0x41, 0x56, 0x0a, 0x54, 0x2a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x49, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x1e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe4, 0x13, 0x0a, 0x0b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x32, 0x13, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xba,
	0x91, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x50, 0x32, 0x11, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91,
	0xe4, 0xb8, 0xbb, 0x49, 0x50, 0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x12, 0x5b,
	0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x24, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xef, 0xbc,
	0x8c, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x43,
	0x50, 0x55, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x03, 0x43,
	0x50, 0x55, 0x32, 0x0f, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x43, 0x50, 0x55, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x03, 0x43, 0x50, 0x55, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x65, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x03, 0x6d, 0x65, 0x6d, 0x32,
	0x12, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x86, 0x85, 0xe5, 0xad, 0x98, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x03, 0x47, 0x50, 0x55, 0x32,
	0x1c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x47, 0x50, 0x55, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0x30, 0x52, 0x03, 0x47,
	0x50, 0x55, 0x12, 0x8f, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x77, 0x92, 0x41, 0x74, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x32, 0x6a, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x88, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe5, 0xbc, 0xb9,
	0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7,
	0x9a, 0x84, 0xef, 0xbc, 0x89, 0xef, 0xbc, 0x8c, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x2c,
	0x20, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x49, 0x4e, 0x47, 0x2c, 0x20, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0x2c, 0x20, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x2c, 0x20, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x32,
	0x1e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba,
	0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x52,
	0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x7c, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5a, 0x92, 0x41,
	0x57, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x32, 0x48,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x49, 0x44, 0x2c, 0x20, 0xe5, 0x8f, 0xaf,
	0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x28, 0xe4, 0xbb, 0x85, 0x43, 0x41, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0xbd, 0x92, 0xe5, 0xb1, 0x9e, 0xe4, 0xba, 0x8e, 0x6e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x29, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x18, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x31, 0x0a,
	0x03, 0x56, 0x50, 0x43, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a,
	0x03, 0x56, 0x50, 0x43, 0x32, 0x15, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5,
	0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x56, 0x50, 0x43, 0x20, 0x49, 0x44, 0x52, 0x03, 0x56, 0x50, 0x43,
	0x12, 0x5b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x43, 0x92, 0x41, 0x40, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x36, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0x8c, 0xba, 0xe5, 0x9f,
	0x9f, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0xe5, 0xb9, 0xbf, 0xe5, 0xb7, 0x9e,
	0xef, 0xbc, 0x8c, 0xe6, 0xb7, 0xb1, 0xe5, 0x9c, 0xb3, 0xef, 0xbc, 0x8c, 0xe5, 0x8a, 0xa0, 0xe5,
	0xb7, 0x9e, 0xe7, 0xad, 0x89, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a,
	0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92,
	0x41, 0x33, 0x2a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x32, 0x29, 0xe5, 0xae, 0x9e, 0xe4,
	0xbe, 0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe5, 0xaf, 0x86, 0xe7, 0xa0,
	0x81, 0x2c, 0x20, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe8,
	0xa7, 0xa3, 0xe5, 0xaf, 0x86, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x12, 0x5d, 0x0a,
	0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x49, 0x92, 0x41, 0x46,
	0x2a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x32, 0x3c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0x8f,
	0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x3b, 0x20, 0xe8, 0xaf, 0xa5, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0xe4, 0xba, 0x8e, 0x43, 0x41, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x41, 0x0a, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25,
	0x92, 0x41, 0x22, 0x2a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x32, 0x16, 0x43,
	0x41, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87,
	0x49, 0x44, 0xe5, 0x8f, 0xb7, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12,
	0x60, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x12, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa0, 0x87,
	0xe7, 0xad, 0xbe, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x48, 0x0a, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x74,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x32, 0x0c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x7e, 0x0a, 0x0d, 0x75,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x58, 0x92, 0x41, 0x55, 0x2a, 0x0d, 0x75, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x44, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x80, 0xbc,
	0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe8, 0xb0, 0x83,
	0xe5, 0xba, 0xa6, 0xef, 0xbc, 0x8c, 0x31, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x8d,
	0xe5, 0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0x52, 0x0d, 0x75, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92,
	0x41, 0x25, 0x2a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x19, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x6b, 0x38, 0x73, 0x20, 0x6e,
	0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4b, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x35, 0x92, 0x41, 0x32, 0x2a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x32, 0x29, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x20, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xef, 0xbc, 0x8c, 0x31, 0xe5, 0x9c, 0xa8, 0xe7, 0xba, 0xbf, 0xef, 0xbc, 0x8c, 0x30, 0xe4, 0xb8,
	0x8d, 0xe5, 0x9c, 0xa8, 0xe7, 0xba, 0xbf, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x03, 0x69, 0x64, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d,
	0x2a, 0x03, 0x69, 0x64, 0x63, 0x32, 0x06, 0xe6, 0x9c, 0xba, 0xe6, 0x88, 0xbf, 0x52, 0x03, 0x69,
	0x64, 0x63, 0x12, 0x25, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x32, 0x06, 0xe6, 0x9c, 0xba,
	0xe6, 0x9e, 0xb6, 0x52, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0x92, 0x41, 0x15, 0x2a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x32, 0x06, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50,
	0x76, 0x36, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x09, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x76, 0x36, 0x32, 0x10, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0x69, 0x70, 0x76, 0x36, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x09, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x50, 0x76, 0x36, 0x12, 0x49, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41,
	0x20, 0x2a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x32, 0x0f, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x39, 0x0a, 0x09, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x09, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x44, 0x32, 0x0b, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0x49, 0x44,
	0x52, 0x09, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x74, 0x0a, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x24,
	0x92, 0x41, 0x21, 0x2a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x32, 0x12, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb3, 0xa8, 0xe8, 0xa7, 0xa3, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x46, 0x0a, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x32, 0x1b, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8a, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52,
	0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x52, 0x92, 0x41, 0x4f, 0x2a, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32, 0x45, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89,
	0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0x49, 0x50, 0x2c,
	0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf, 0xe9, 0x92, 0x88, 0xe5, 0xaf, 0xb9, 0xe8,
	0x99, 0x9a, 0xe6, 0x8b, 0x9f, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0xb1, 0x95, 0xe7, 0xa4,
	0xba, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x5b, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x34,
	0x2a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x32, 0x24,
	0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8,
	0xbf, 0x87, 0xe7, 0xa8, 0x8b, 0xe4, 0xb8, 0xad, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe5, 0x8e,
	0x9f, 0xe5, 0x9b, 0xa0, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a,
	0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x41, 0x92,
	0x41, 0x3e, 0x0a, 0x3c, 0x2a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x32, 0x2d, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba,
	0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x26, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x32, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xfa, 0x42,
	0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0xe8, 0x07, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x3a, 0x3e, 0x92, 0x41, 0x3b, 0x0a, 0x39, 0x2a, 0x1a, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1b, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0x83, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x22, 0xe3, 0x03, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x57, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x26, 0x92,
	0x41, 0x23, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe5, 0x85, 0x83, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6d, 0x0a, 0x0f, 0x77,
	0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d,
	0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x5d, 0x92, 0x41, 0x5a, 0x0a,
	0x58, 0x2a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x21,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0x83, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc4, 0x01, 0x0a, 0x0b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41,
	0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x08, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x32, 0x0f,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x95, 0xb0, 0x52,
	0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x3a,
	0x2f, 0x92, 0x41, 0x2c, 0x0a, 0x2a, 0x2a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x32, 0x1b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0x83, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x22, 0x9b, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x49, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x3a, 0xba, 0x01, 0x92, 0x41, 0xb6, 0x01, 0x0a, 0xb3, 0x01, 0x2a, 0x1b, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x93, 0x01, 0xe5, 0x88, 0xa9, 0xe7, 0x94,
	0xa8, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xef, 0xbc, 0x8c, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe4, 0xb8, 0xba, 0x41, 0x6e, 0x64,
	0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6,
	0x9f, 0x90, 0xe9, 0xa1, 0xb9, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99,
	0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0x9a, 0xe7, 0x94, 0xa8, 0xe6,
	0xad, 0xa4, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0x22, 0xee,
	0x03, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x49, 0x6e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x7c,
	0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0x1b, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65,
	0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x61, 0x92, 0x41,
	0x5e, 0x0a, 0x5c, 0x2a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x49, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x24, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x8f, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0xa9, 0x01, 0x0a, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x8a, 0x01, 0x92, 0x41, 0x7e, 0x2a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x32, 0x71, 0xe4, 0xb8, 0x8a, 0xe6, 0x8a, 0xa5, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0x9a,
	0x84, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe7, 0x9a, 0x84, 0x6b, 0x65, 0x79, 0xef, 0xbc, 0x8c,
	0xe5, 0xaf, 0xb9, 0xe4, 0xba, 0x8e, 0x6b, 0x75, 0x62, 0x65, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0xef, 0xbc, 0x8c, 0xe6, 0x98, 0xaf, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xef,
	0xbc, 0x8c, 0xe5, 0xaf, 0xb9, 0xe4, 0xba, 0x8e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2d, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0xe5, 0x92, 0x8c, 0x6b, 0x75, 0x62, 0x65, 0x2d, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0xef, 0xbc, 0x8c, 0xe6, 0x98, 0xaf, 0xe6, 0x9c, 0x89, 0x49, 0x50, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x3a, 0x48, 0x92, 0x41, 0x45, 0x0a, 0x43, 0x2a, 0x17,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x32, 0x1c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x22, 0xef, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5d, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x26,
	0x92, 0x41, 0x23, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe7, 0x9a, 0x84, 0xe8, 0xaf, 0x81, 0xe4, 0xb9, 0xa6,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x55, 0x92, 0x41,
	0x52, 0x0a, 0x50, 0x2a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x32, 0x1c, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xd9, 0x07, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0xa9, 0x01, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x8a, 0x01, 0x92, 0x41, 0x7e, 0x2a, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x32, 0x71, 0xe4, 0xb8, 0x8a, 0xe6, 0x8a, 0xa5, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0x9a, 0x84, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe7, 0x9a,
	0x84, 0x6b, 0x65, 0x79, 0xef, 0xbc, 0x8c, 0xe5, 0xaf, 0xb9, 0xe4, 0xba, 0x8e, 0x6b, 0x75, 0x62,
	0x65, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0xef, 0xbc, 0x8c, 0xe6, 0x98, 0xaf, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0xaf, 0xb9, 0xe4, 0xba, 0x8e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0xe5, 0x92, 0x8c, 0x6b, 0x75,
	0x62, 0x65, 0x2d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0xe6, 0x98, 0xaf, 0xe6,
	0x9c, 0x89, 0x49, 0x50, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x64, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x3f,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x21, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x55, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x25, 0x2a, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x32, 0x15, 0xe4, 0xb8, 0x8a, 0xe6, 0x8a, 0xa5,
	0xe7, 0x9a, 0x84, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92,
	0x41, 0x23, 0x2a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x32, 0x12, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x10, 0x52,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x47,
	0x0a, 0x0a, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1c, 0x2a, 0x0a, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x32, 0x0e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x43, 0x41, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x20, 0x52, 0x0a, 0x63, 0x61, 0x43,
	0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x27, 0x2a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x1a, 0xe8, 0xae, 0xbf, 0xe9,
	0x97, 0xae, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x10, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4e, 0x0a, 0x0d, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x28, 0x92, 0x41, 0x1d, 0x2a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x32, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x9f, 0x9f, 0xe5,
	0x90, 0x8d, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x10, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x4f, 0x0a, 0x0a, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92,
	0x41, 0x24, 0x2a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x32, 0x16,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74,
	0xe8, 0xaf, 0x81, 0xe4, 0xb9, 0xa6, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x20, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x4b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92,
	0x41, 0x22, 0x2a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x32, 0x15, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0xe8, 0xaf,
	0x81, 0xe4, 0xb9, 0xa6, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x20, 0x52, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x3a, 0x95, 0x01, 0x92, 0x41, 0x91, 0x01, 0x0a, 0x8e,
	0x01, 0x2a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x32, 0x1c, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0xd2, 0x01, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xd2, 0x01, 0x0a, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0xd2, 0x01, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0xd2,
	0x01, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22,
	0x96, 0x02, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x58,
	0x92, 0x41, 0x55, 0x0a, 0x53, 0x2a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x32, 0x1c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf9, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x4a, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x32, 0x19, 0xe4, 0xba, 0x91, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x6b,
	0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0x52,
	0x0a, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x57, 0x92, 0x41, 0x54,
	0x0a, 0x52, 0x2a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x32, 0x28,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe4, 0xba, 0x91, 0xe7, 0x9a, 0x84, 0x6b, 0x75,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x9f, 0x02, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x3a, 0x61, 0x92, 0x41, 0x5e, 0x0a, 0x5c, 0x2a, 0x1b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x32, 0x25, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4,
	0xba, 0x91, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2,
	0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9a, 0x02, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0xa9, 0x01, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x8a, 0x01, 0x92, 0x41, 0x7e, 0x2a,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x32, 0x71, 0xe4, 0xb8, 0x8a, 0xe6,
	0x8a, 0xa5, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0x9a, 0x84, 0xe7, 0xbb, 0x84, 0xe4, 0xbb,
	0xb6, 0xe7, 0x9a, 0x84, 0x6b, 0x65, 0x79, 0xef, 0xbc, 0x8c, 0xe5, 0xaf, 0xb9, 0xe4, 0xba, 0x8e,
	0x6b, 0x75, 0x62, 0x65, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0xef, 0xbc, 0x8c, 0xe6, 0x98, 0xaf,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0xaf, 0xb9, 0xe4,
	0xba, 0x8e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0xe5, 0x92,
	0x8c, 0x6b, 0x75, 0x62, 0x65, 0x2d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0xe6,
	0x98, 0xaf, 0xe6, 0x9c, 0x89, 0x49, 0x50, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x02, 0x18, 0x64, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x3a, 0x50, 0x92, 0x41, 0x4d, 0x0a, 0x4b, 0x2a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x32, 0x21, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe7, 0x9a, 0x84, 0xe8, 0xaf, 0x81, 0xe4, 0xb9,
	0xa6, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xd2, 0x01, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x22, 0x9c, 0x02, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x3a, 0x5e, 0x92, 0x41, 0x5b, 0x0a, 0x59, 0x2a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x32, 0x22, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x8a, 0x05, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x9b, 0x01, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x7d, 0x92, 0x41, 0x73, 0x2a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x32, 0x66, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0xb3, 0xa8, 0xe5, 0x86,
	0x8c, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0x9a, 0x84, 0x6b, 0x65, 0x79, 0xef, 0xbc, 0x8c,
	0xe5, 0xaf, 0xb9, 0xe4, 0xba, 0x8e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0xe6,
	0x98, 0xaf, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0xaf,
	0xb9, 0xe4, 0xba, 0x8e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0xe5,
	0x92, 0x8c, 0x6b, 0x75, 0x62, 0x65, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0xe6, 0x98, 0xaf, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x2b, 0x69, 0x70, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x64, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x3d, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1f, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x6e, 0x0a, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4e, 0x92, 0x41, 0x44, 0x2a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x32, 0x36, 0xe5, 0xae, 0xa2, 0xe6, 0x88, 0xb7, 0xe7, 0xab, 0xaf, 0xe6, 0xa8, 0xa1, 0xe5,
	0xbc, 0x8f, 0xef, 0xbc, 0x8c, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0xe3, 0x80,
	0x81, 0x6b, 0x75, 0x62, 0x65, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0xe3, 0x80, 0x81, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5c, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3a, 0x92, 0x41, 0x30, 0x2a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x32, 0x21, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc,
	0x8f, 0xef, 0xbc, 0x8c, 0xe7, 0x9b, 0xb4, 0xe8, 0x81, 0x94, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85,
	0xe9, 0x9a, 0xa7, 0xe9, 0x81, 0x93, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5,
	0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6,
	0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x05, 0x2a, 0x03, 0x18, 0xe8, 0x07, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x48, 0x92, 0x41, 0x45, 0x0a, 0x43, 0x2a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x32, 0x27, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe7, 0x9a, 0x84, 0xe8, 0xaf, 0x81,
	0xe4, 0xb9, 0xa6, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x22,
	0x82, 0x03, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x63, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x2c, 0x92,
	0x41, 0x29, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x21, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe7, 0x9a, 0x84, 0xe8, 0xaf, 0x81, 0xe4, 0xb9, 0xa6, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x3a, 0x61, 0x92, 0x41, 0x5e, 0x0a, 0x5c, 0x2a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x32, 0x27, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe7, 0x9a, 0x84, 0xe8, 0xaf, 0x81, 0xe4, 0xb9, 0xa6,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xd2, 0x01, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x1a, 0x0a, 0x18, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x22, 0x1b, 0x0a, 0x19, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x99, 0x02,
	0x0a, 0x16, 0x41, 0x64, 0x64, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x5a, 0x0a, 0x13, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x13, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32,
	0x0e, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52,
	0x13, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x0e, 0xe5, 0xba, 0x95, 0xe5, 0xb1, 0x82, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x3a, 0x65, 0x92, 0x41, 0x62, 0x0a, 0x60, 0x2a, 0x16, 0x41, 0x64, 0x64, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x32, 0x24, 0xe5, 0xb0, 0x86, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x8a, 0xa0, 0xe5,
	0x85, 0xa5, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a,
	0x84, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x13, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0x9c, 0x02, 0x0a, 0x17, 0x41, 0x64,
	0x64, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x3a, 0x62, 0x92, 0x41, 0x5f, 0x0a, 0x5d, 0x2a, 0x17, 0x41, 0x64, 0x64,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x32, 0x2a, 0xe5, 0xb0, 0x86, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5,
	0x8a, 0xa0, 0xe5, 0x85, 0xa5, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe7, 0x9a, 0x84, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdd, 0x13, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5f, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x45, 0x92, 0x41, 0x28, 0x2a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x32, 0x1b, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe8, 0x8b,
	0xb1, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xfa, 0x42, 0x17,
	0x72, 0x15, 0x10, 0x02, 0x18, 0x14, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29,
	0x92, 0x41, 0x1d, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x15, 0xe4, 0xba, 0x91, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x40, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x83, 0x01, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x67, 0x92, 0x41, 0x64, 0x2a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x32, 0x58, 0xe5, 0xaf, 0xb9, 0xe4, 0xba, 0x8e, 0x53, 0x61, 0x61, 0x53, 0xe5, 0xb1, 0x82,
	0xe9, 0x9d, 0xa2, 0xe8, 0xaf, 0xa5, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91, 0xef, 0xbc, 0x8c, 0x42, 0x43,
	0x53, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe7, 0x9a, 0x84,
	0xe9, 0xa2, 0x84, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe4,
	0xb8, 0x8d, 0xe5, 0x8f, 0xaf, 0xe7, 0xbc, 0x96, 0xe8, 0xaf, 0x91, 0x52, 0x08, 0x65, 0x64, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x0a, 0x6f, 0x70, 0x73, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f,
	0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x44,
	0x92, 0x41, 0x41, 0x2a, 0x0a, 0x6f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x32,
	0x33, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe8, 0xbf, 0x90,
	0xe7, 0xbb, 0xb4, 0xe5, 0xae, 0x9e, 0xe7, 0x8e, 0xb0, 0xe7, 0x9a, 0x84, 0xe6, 0x89, 0xa9, 0xe5,
	0xb1, 0x95, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe6, 0x8f,
	0x92, 0xe4, 0xbb, 0xb6, 0x52, 0x0a, 0x6f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x12, 0xb5, 0x01, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x5b, 0x92,
	0x41, 0x58, 0x2a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x32, 0x48, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe6, 0xb5,
	0x81, 0xe7, 0xa8, 0x8b, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0x87, 0xaa,
	0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xef, 0xbc, 0x8c, 0xe8,
	0xaf, 0xa5, 0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0xe2, 0x01, 0x0a, 0x0f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x9b,
	0x01, 0x92, 0x41, 0x97, 0x01, 0x2a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x32, 0x83, 0x01, 0xe8, 0xaf, 0xa5, 0xe4, 0xba, 0x91, 0xe4,
	0xb8, 0x8b, 0xe7, 0xbb, 0x9f, 0xe4, 0xb8, 0x80, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0x9a,
	0x84, 0xe8, 0xb4, 0xa6, 0xe6, 0x88, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c,
	0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5,
	0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9c, 0x89, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xef, 0xbc,
	0x8c, 0xe5, 0x88, 0x99, 0xe5, 0xbd, 0x93, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xe3, 0x80,
	0x81, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0xe4, 0xb8, 0x8b, 0xe6, 0xb2, 0xa1, 0xe6, 0x9c,
	0x89, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe6, 0x97, 0xb6, 0xe4, 0xbc, 0x9a, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0xe8, 0xaf, 0xa5, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x0f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x7b, 0x0a,
	0x0c, 0x6f, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4f, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x3f, 0x92, 0x41, 0x3c,
	0x2a, 0x0c, 0x6f, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x2c,
	0xe8, 0xaf, 0xa5, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8b, 0x4f, 0x53, 0xe5, 0xb1, 0x82, 0xe9, 0x9d,
	0xa2, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0x9a, 0x84, 0xe7, 0xbb, 0x9f, 0xe4, 0xb8, 0x80,
	0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0c, 0x6f, 0x73,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x92, 0x01, 0x0a, 0x11, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d,
	0x67, 0x72, 0x42, 0x48, 0x92, 0x41, 0x45, 0x2a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x30, 0xe8, 0xaf, 0xa5, 0xe4,
	0xba, 0x91, 0xe4, 0xb8, 0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xae, 0xa1, 0xe7, 0x90,
	0x86, 0xe5, 0xb1, 0x82, 0xe9, 0x9d, 0xa2, 0xe7, 0x9a, 0x84, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b,
	0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x11, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x8b, 0x01, 0x0a, 0x13, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x67, 0x72, 0x42, 0x3b, 0x92, 0x41, 0x38,
	0x2a, 0x13, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x21, 0xe8, 0xaf, 0xa5, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8b,
	0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xe7, 0xae, 0xa1, 0xe7,
	0x90, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x13, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26,
	0x92, 0x41, 0x1a, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x0f, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x02, 0x18, 0x14, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x4c, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x12, 0xe7, 0x89, 0xb9, 0xe6,
	0x80, 0xa7, 0xe5, 0xae, 0x9e, 0xe7, 0x8e, 0xb0, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x52, 0x0d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x80, 0x01,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x68,
	0x92, 0x41, 0x65, 0x2a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x5b, 0xe6, 0x89, 0xa9,
	0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe5, 0xad,
	0x98, 0xe9, 0x80, 0x82, 0xe9, 0x85, 0x8d, 0xe5, 0x90, 0x84, 0xe7, 0xa7, 0x8d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0xe7, 0x9a, 0x84, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x2c, 0x20, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe7,
	0x9a, 0x84, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0xe8, 0xa7, 0xa3, 0xe6,
	0x9e, 0x90, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x51, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x1d, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbb, 0x8b, 0xe7, 0xbb, 0x8d,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x0a, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x1b, 0xe5, 0xba, 0x95, 0xe5, 0xb1, 0x82,
	0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe5, 0xbc, 0x95, 0xe6, 0x93, 0x8e, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x49, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x24,
	0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x99, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x8f,
	0xaf, 0xe8, 0xa7, 0x81, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x7d, 0x0a, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x39, 0x92, 0x41, 0x36, 0x2a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x27, 0xe8, 0xaf, 0xa5, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8b,
	0xe7, 0xbb, 0x9f, 0xe4, 0xb8, 0x80, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0xbd, 0x91, 0xe7,
	0xbb, 0x9c, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6a, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x2d,
	0x92, 0x41, 0x2a, 0x2a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x1e, 0xe8,
	0xaf, 0xa5, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8b, 0xe7, 0xbb, 0x9f, 0xe4, 0xb8, 0x80, 0xe4, 0xba,
	0x91, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x8b, 0x01, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x1e, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe4,
	0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe4, 0xba, 0x91, 0xe7, 0x9a, 0x84, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x5a, 0x0a, 0x0f, 0x4f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x4b, 0x4f, 0x70, 0x73,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x5c, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x4b, 0x4f, 0x70, 0x73, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3f, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x56, 0x92, 0x41, 0x53, 0x0a, 0x51, 0x2a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x11, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01,
	0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2,
	0x01, 0x0c, 0x6f, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xd2, 0x01,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xb4, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xc4, 0x13, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x26, 0x2a, 0x07, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x1b, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4,
	0xb8, 0xb2, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x08, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x28, 0x92, 0x41, 0x1d, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x15, 0xe4, 0xba,
	0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x83, 0x01, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x67, 0x92, 0x41, 0x64, 0x2a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x32, 0x58, 0xe5, 0xaf, 0xb9, 0xe4, 0xba, 0x8e, 0x53, 0x61, 0x61, 0x53, 0xe5,
	0xb1, 0x82, 0xe9, 0x9d, 0xa2, 0xe8, 0xaf, 0xa5, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91, 0xef, 0xbc, 0x8c,
	0x42, 0x43, 0x53, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe7,
	0x9a, 0x84, 0xe9, 0xa2, 0x84, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0xaf, 0xe7, 0xbc, 0x96, 0xe8, 0xaf, 0x91, 0x52, 0x08, 0x65,
	0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x0a, 0x6f, 0x70, 0x73, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x44, 0x92, 0x41, 0x41, 0x2a, 0x0a, 0x6f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x32, 0x33, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe8,
	0xbf, 0x90, 0xe7, 0xbb, 0xb4, 0xe5, 0xae, 0x9e, 0xe7, 0x8e, 0xb0, 0xe7, 0x9a, 0x84, 0xe6, 0x89,
	0xa9, 0xe5, 0xb1, 0x95, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85,
	0xe6, 0x8f, 0x92, 0xe4, 0xbb, 0xb6, 0x52, 0x0a, 0x6f, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x5b, 0x92, 0x41, 0x58, 0x2a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x32, 0x48, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95,
	0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8,
	0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xef, 0xbc,
	0x8c, 0xe8, 0xaf, 0xa5, 0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91, 0x52, 0x0c, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0xe2, 0x01, 0x0a, 0x0f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x42, 0x9b, 0x01, 0x92, 0x41, 0x97, 0x01, 0x2a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x32, 0x83, 0x01, 0xe8, 0xaf, 0xa5, 0xe4, 0xba,
	0x91, 0xe4, 0xb8, 0x8b, 0xe7, 0xbb, 0x9f, 0xe4, 0xb8, 0x80, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89,
	0xe7, 0x9a, 0x84, 0xe8, 0xb4, 0xa6, 0xe6, 0x88, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef,
	0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc,
	0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9c, 0x89, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe5, 0xbd, 0x93, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0xe3, 0x80, 0x81, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0xe4, 0xb8, 0x8b, 0xe6, 0xb2, 0xa1,
	0xe6, 0x9c, 0x89, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe6, 0x97, 0xb6, 0xe4, 0xbc, 0x9a, 0xe4,
	0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe8, 0xaf, 0xa5, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x0f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x7b, 0x0a, 0x0c, 0x6f, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4f, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x3f, 0x92,
	0x41, 0x3c, 0x2a, 0x0c, 0x6f, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x32, 0x2c, 0xe8, 0xaf, 0xa5, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8b, 0x4f, 0x53, 0xe5, 0xb1, 0x82,
	0xe9, 0x9d, 0xa2, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0x9a, 0x84, 0xe7, 0xbb, 0x9f, 0xe4,
	0xb8, 0x80, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0c,
	0x6f, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x92, 0x01, 0x0a,
	0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4d, 0x67, 0x72, 0x42, 0x48, 0x92, 0x41, 0x45, 0x2a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x30, 0xe8, 0xaf,
	0xa5, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xae, 0xa1,
	0xe7, 0x90, 0x86, 0xe5, 0xb1, 0x82, 0xe9, 0x9d, 0xa2, 0xe7, 0x9a, 0x84, 0xe6, 0xb5, 0x81, 0xe7,
	0xa8, 0x8b, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x11,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x67, 0x72, 0x42, 0x3b, 0x92,
	0x41, 0x38, 0x2a, 0x13, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x21, 0xe8, 0xaf, 0xa5, 0xe4, 0xba, 0x91, 0xe4,
	0xb8, 0x8b, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xe7, 0xae,
	0xa1, 0xe7, 0x90, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x13, 0x6e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x3b, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x21, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x32, 0x09,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02,
	0x18, 0x80, 0x08, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x12, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0xe5,
	0xae, 0x9e, 0xe7, 0x8e, 0xb0, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x52, 0x0d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x80, 0x01, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x68, 0x92, 0x41, 0x65,
	0x2a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x5b, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95,
	0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe5, 0xad, 0x98, 0xe9, 0x80,
	0x82, 0xe9, 0x85, 0x8d, 0xe5, 0x90, 0x84, 0xe7, 0xa7, 0x8d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe7,
	0x9a, 0x84, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20,
	0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe7, 0x9a, 0x84, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0xe8, 0xa7, 0xa3, 0xe6, 0x9e, 0x90, 0xe9,
	0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x32, 0x1d, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbb, 0x8b, 0xe7, 0xbb, 0x8d, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4c, 0x0a, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x1b, 0xe5, 0xba, 0x95, 0xe5, 0xb1, 0x82, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe5, 0xbc, 0x95, 0xe6, 0x93, 0x8e, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5d,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45,
	0x92, 0x41, 0x42, 0x2a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x38, 0xe4, 0xba, 0x91,
	0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe7, 0xbb, 0x99, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x8f, 0xaf, 0xe8, 0xa7,
	0x81, 0x28, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0xba, 0x74, 0x72, 0x75, 0x65, 0xe6, 0x88, 0x96, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x29, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x7d, 0x0a,
	0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x39, 0x92, 0x41, 0x36, 0x2a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x27, 0xe8, 0xaf, 0xa5, 0xe4, 0xba, 0x91, 0xe4, 0xb8,
	0x8b, 0xe7, 0xbb, 0x9f, 0xe4, 0xb8, 0x80, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe7, 0xbd, 0x91,
	0xe7, 0xbb, 0x9c, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x2d, 0x92, 0x41, 0x2a, 0x2a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x1e,
	0xe8, 0xaf, 0xa5, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x8b, 0xe7, 0xbb, 0x9f, 0xe4, 0xb8, 0x80, 0xe4,
	0xba, 0x91, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x8b, 0x01, 0x0a, 0x0c, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x0c, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x1e, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0,
	0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe4, 0xba, 0x91, 0xe7, 0x9a, 0x84, 0xe9, 0x85, 0x8d, 0xe7,
	0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x5a, 0x0a, 0x0f, 0x4f, 0x70, 0x73, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x4b, 0x4f, 0x70,
	0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x4b, 0x4f, 0x70, 0x73, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3f, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x3a, 0x43, 0x92, 0x41, 0x40, 0x0a, 0x3e, 0x2a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0xd2, 0x01, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0xd2, 0x01, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x22, 0x87, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x51, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1b, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x90, 0x8e, 0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91, 0xe6, 0xa8,
	0xa1, 0xe6, 0x9d, 0xbf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xc9, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x26, 0x2a, 0x07, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x1b, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6,
	0xe4, 0xb8, 0xb2, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x14, 0x32, 0x0f, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x07, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x3a, 0x3a, 0x92, 0x41, 0x37, 0x0a, 0x35, 0x2a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x15, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0xd2, 0x01, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x22, 0x87, 0x02, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x51, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x1b, 0xe5, 0xb7, 0xb2, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0x9a,
	0x84, 0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd7, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x16,
	0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x0b, 0xe4, 0xba, 0x91, 0xe6, 0xa8,
	0xa1, 0xe6, 0x9d, 0xbf, 0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x14, 0x32,
	0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24,
	0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x08,
	0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x49, 0x44, 0x3a, 0x3a, 0x92, 0x41, 0x37, 0x0a, 0x35, 0x2a, 0x0f, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0x22, 0xc6, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x15, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x9a, 0x84, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x3a, 0x46, 0x92, 0x41, 0x43, 0x0a, 0x41, 0x2a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x15, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa2, 0x05, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x30, 0x92, 0x41, 0x26, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x1b, 0xe4,
	0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xb1, 0xe6, 0x96,
	0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x14, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x32, 0x15, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe4, 0xb8,
	0xad, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x83, 0x01, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x67, 0x92, 0x41, 0x64, 0x2a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x32, 0x58, 0xe5, 0xaf, 0xb9, 0xe4, 0xba, 0x8e, 0x53, 0x61, 0x61, 0x53, 0xe5, 0xb1,
	0x82, 0xe9, 0x9d, 0xa2, 0xe8, 0xaf, 0xa5, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91, 0xef, 0xbc, 0x8c, 0x42,
	0x43, 0x53, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe7, 0x9a,
	0x84, 0xe9, 0xa2, 0x84, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0xaf, 0xe7, 0xbc, 0x96, 0xe8, 0xaf, 0x91, 0x52, 0x08, 0x65, 0x64,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x32, 0x09, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe8, 0x80, 0x85, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x12, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0xe5,
	0xae, 0x9e, 0xe7, 0x8e, 0xb0, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x52, 0x0d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32,
	0x08, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x44, 0x3a, 0x96, 0x01, 0x92, 0x41, 0x92, 0x01, 0x0a, 0x8f, 0x01, 0x2a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x7b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe6,
	0x9d, 0xbf, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e,
	0x9c, 0xe5, 0xa1, 0xab, 0xe5, 0x86, 0x99, 0xe4, 0xba, 0x86, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87,
	0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe7, 0xbb, 0x84, 0xe5,
	0x90, 0x88, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0x85, 0xa8,
	0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe5, 0x88, 0x99, 0xe4, 0xb8, 0xba, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe5, 0x85, 0xa8, 0xe9, 0x87, 0x8f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22, 0xbe,
	0x02, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0, 0xe7, 0x9a,
	0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x40, 0x92,
	0x41, 0x3d, 0x0a, 0x3b, 0x2a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4,
	0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xac, 0x13, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7f, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x61, 0x92, 0x41, 0x3e, 0x2a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x31, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7,
	0xbb, 0x84, 0xe6, 0x89, 0x80, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0x49, 0x44, 0xe4, 0xb8, 0xba, 0x42,
	0x43, 0x53, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10,
	0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x5d, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0x92, 0x41, 0x28, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x32, 0x1e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe6, 0x89, 0x80,
	0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x01, 0x18, 0x20, 0x32, 0x0f, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3c, 0x92,
	0x41, 0x39, 0x2a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x32, 0x26, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90,
	0xaf, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xef, 0xbc, 0x8c,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x76, 0x0a, 0x0b,
	0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x32, 0x92, 0x41, 0x27, 0x2a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x32, 0x18, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8,
	0xe7, 0xbc, 0xa9, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x94, 0x01, 0x0a, 0x0e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x47, 0x92, 0x41, 0x3c, 0x2a, 0x0e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x32, 0x2a, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xe6,
	0x97, 0xb6, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe5, 0xae,
	0x9e, 0xe4, 0xbe, 0x8b, 0xe7, 0x9a, 0x84, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0xa8, 0xa1,
	0xe6, 0x9d, 0xbf, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x76, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x2a, 0x92, 0x41, 0x27, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x1d, 0xe6, 0x96,
	0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x06, 0x74,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x32, 0x29, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b,
	0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe7, 0x9a, 0x84, 0xe6, 0xb1, 0xa1, 0xe7,
	0x82, 0xb9, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x28, 0xe5, 0xba, 0x9f, 0xe5, 0xbc, 0x83, 0x29,
	0x52, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x4f, 0x53, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4e, 0x92, 0x41, 0x4b, 0x2a, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x4f, 0x53, 0x32, 0x41, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b,
	0xe9, 0x80, 0x89, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x4f,
	0x53, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0x82, 0xe7, 0x85, 0xa7, 0xe4, 0xba, 0x91, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe4, 0xb8, 0xad, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe7, 0x9a, 0x84, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x80, 0xbc, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x53,
	0x12, 0x40, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x26, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32,
	0x0f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x14, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0xa6, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x89, 0x01, 0x92, 0x41, 0x85, 0x01, 0x2a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe4, 0xbe, 0x9d, 0xe8, 0xb5, 0x96, 0xe7, 0x9a, 0x84,
	0xe4, 0xba, 0x91, 0xe5, 0xae, 0x9e, 0xe7, 0x8e, 0xb0, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xef,
	0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xbb,
	0x84, 0xe5, 0x90, 0x88, 0xe4, 0xb8, 0x8e, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe3, 0x80, 0x82,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5,
	0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe8, 0xa6, 0x81, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xef, 0xbc,
	0x8c, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe6, 0x98, 0xaf, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x44, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x48, 0x92, 0x41, 0x45, 0x2a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44,
	0x32, 0x37, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0xe5, 0xaf, 0xb9, 0xe6,
	0x8e, 0xa5, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x49, 0x44, 0x12, 0x6a, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x0c,
	0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x32, 0x15, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe8, 0xae, 0xbe,
	0xe7, 0xbd, 0xae, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x78, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x2a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x32, 0x27, 0xe6, 0x96,
	0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96,
	0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x0d,
	0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x8e, 0x01, 0x92, 0x41, 0x8a, 0x01, 0x2a, 0x0d, 0x6e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x32, 0x79, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe6, 0xb1, 0xa0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x29, 0xe3, 0x80, 0x82, 0xe6, 0x99,
	0xae, 0xe9, 0x80, 0x9a, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe5, 0x92, 0x8c, 0xe7, 0xac, 0xac, 0xe4,
	0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc,
	0xa9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0x2c, 0x20, 0xe5, 0x8d, 0xb3, 0x43,
	0x56, 0x4d, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x88, 0x96, 0x49, 0x44, 0x43, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x09, 0x62, 0x6b, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x0b, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f,
	0x9f, 0x49, 0x44, 0x52, 0x09, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x49,
	0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe4, 0xba, 0x91, 0xe5, 0x8c,
	0xba, 0xe5, 0x9f, 0x9f, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x2a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x32, 0x40, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x65, 0x78, 0x74, 0x72, 0x61, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x2c, 0x20, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf, 0xe9, 0x92, 0x88, 0xe5,
	0xaf, 0xb9, 0xe4, 0xba, 0x91, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0xaa, 0xe6, 0x80, 0xa7, 0xe5, 0x8c,
	0x96, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x6a,
	0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x2a, 0x0e, 0x6f, 0x6e, 0x6c,
	0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x2d, 0x6f, 0x6e, 0x6c,
	0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0xe4, 0xbb, 0x85, 0xe5, 0xbd,
	0x95, 0xe5, 0x85, 0xa5, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x2c, 0xe4, 0xb8, 0x8d, 0xe6, 0x89,
	0xa7, 0xe8, 0xa1, 0x8c, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x79,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x82, 0x01, 0x92, 0x41, 0x7f, 0x0a,
	0x7d, 0x2a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x15, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82,
	0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x0b, 0x61,
	0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0xd2, 0x01, 0x0e, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0xd2, 0x01, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0xd2, 0x01, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x53, 0x22, 0x64,
	0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f,
	0x6f, 0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x8d, 0x03, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x58, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d,
	0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x32, 0x0f, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x50,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x32, 0x1b, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe5, 0x90,
	0x8e, 0xe5, 0x8f, 0xb0, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x22, 0xf8, 0x12, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0x92, 0x41, 0x1a, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x32, 0x0b, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x18, 0x14, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x12, 0x7f, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x61, 0x92, 0x41, 0x3e, 0x2a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x31, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb,
	0x84, 0xe6, 0x89, 0x80, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0x49, 0x44, 0xe4, 0xb8, 0xba, 0x42, 0x43,
	0x53, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02,
	0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d,
	0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x32, 0x1e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe6, 0x89, 0x80, 0xe5,
	0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x0f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x3c, 0x92, 0x41, 0x39, 0x2a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x32, 0x26, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80,
	0xe5, 0x90, 0xaf, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xef,
	0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x6e,
	0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x0b, 0x61, 0x75, 0x74, 0x6f,
	0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x32, 0x18, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4,
	0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x8c,
	0x01, 0x0a, 0x0e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x3f, 0x92, 0x41,
	0x3c, 0x2a, 0x0e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x32, 0x2a, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xe6, 0x97, 0xb6, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe7, 0x9a,
	0x84, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x52, 0x0e, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a,
	0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x32, 0x15, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe5,
	0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x52, 0x0c, 0x6e, 0x6f, 0x64,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x76, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2a, 0x92,
	0x41, 0x27, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x1d, 0xe6, 0x96, 0xb0, 0xe5,
	0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x7a, 0x0a, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x06, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x32, 0x21, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0x9d,
	0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe7, 0x9a, 0x84, 0xe6, 0xb1, 0xa1, 0xe7, 0x82, 0xb9, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x78, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x32, 0x92,
	0x41, 0x2f, 0x2a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x32, 0x27, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e,
	0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe7, 0x9a, 0x84, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x66, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x4f,
	0x53, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4e, 0x92, 0x41, 0x4b, 0x2a, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x4f, 0x53, 0x32, 0x41, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe9,
	0x80, 0x89, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x4f, 0x53,
	0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0x82, 0xe7, 0x85, 0xa7, 0xe4, 0xba, 0x91, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xe4, 0xb8, 0xad, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe7, 0x9a, 0x84, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x80, 0xbc, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x53, 0x12,
	0x40, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x26, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x32, 0x0f,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x14, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x12, 0xa6, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x89, 0x01, 0x92, 0x41, 0x85, 0x01, 0x2a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe4, 0xbe, 0x9d, 0xe8, 0xb5, 0x96, 0xe7, 0x9a, 0x84, 0xe4,
	0xba, 0x91, 0xe5, 0xae, 0x9e, 0xe7, 0x8e, 0xb0, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xef, 0xbc,
	0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe7, 0xbb, 0x84,
	0xe5, 0x90, 0x88, 0xe4, 0xb8, 0x8e, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe3, 0x80, 0x82, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0xa6,
	0x82, 0xe6, 0x9e, 0x9c, 0xe8, 0xa6, 0x81, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c,
	0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe6, 0x98, 0xaf, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48,
	0x92, 0x41, 0x45, 0x2a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x32,
	0x37, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0xe5, 0xaf, 0xb9, 0xe6, 0x8e,
	0xa5, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x32, 0x1b, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe6, 0x8f,
	0x8f, 0xe8, 0xbf, 0xb0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x58, 0x0a, 0x09, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x44, 0x32, 0x0c, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0x20, 0x49, 0x44, 0x52,
	0x09, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x67, 0x0a, 0x0d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x23, 0x92, 0x41, 0x20, 0x2a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x72, 0x65, 0x61, 0x4e,
	0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x72, 0x65, 0x61, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x42, 0x42, 0x92, 0x41, 0x3f,
	0x2a, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x32, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0xe4, 0xbb, 0x85, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x2c,
	0xe4, 0xb8, 0x8d, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0x52,
	0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x77, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x12, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe6, 0xb1, 0xa0, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37,
	0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x34, 0x92, 0x41, 0x31, 0x0a, 0x2f, 0x2a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x15, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0x87, 0x03, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x52, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x23, 0x92, 0x41, 0x20, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe5, 0x90, 0x8e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x84, 0x08, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x59, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x1a, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x32, 0x0b, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7,
	0xbb, 0x84, 0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x14, 0x32, 0x0f, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0b,
	0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0xc5, 0x01, 0x0a, 0x07,
	0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0xaa, 0x01,
	0x92, 0x41, 0xa6, 0x01, 0x2a, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x32, 0x9a, 0x01,
	0xe5, 0xbc, 0xba, 0xe5, 0x88, 0xb6, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xef, 0xbc, 0x8c, 0xe5,
	0x8c, 0x85, 0xe6, 0x8b, 0xac, 0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe6, 0xb1, 0xa0, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe7, 0x9a, 0x84, 0xe6, 0x9c, 0xba,
	0xe5, 0x99, 0xa8, 0xe3, 0x80, 0x82, 0xe5, 0xa4, 0x96, 0xe9, 0x83, 0xa8, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xbd, 0xac, 0xe5, 0x85, 0xa5, 0xe5, 0x90,
	0x8e, 0xe5, 0x8f, 0xb0, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x95, 0xbf, 0xe4, 0xbb, 0xbb,
	0xe5, 0x8a, 0xa1, 0xe5, 0xaf, 0xb9, 0xe5, 0x88, 0x97, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0xe4, 0xbc, 0x9a, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x54, 0x61, 0x73, 0x6b, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x96, 0xb9, 0xe4, 0xbe, 0xbf, 0xe7, 0xa1, 0xae, 0xe8, 0xae,
	0xa4, 0xe8, 0xbf, 0x9b, 0xe5, 0xba, 0xa6, 0xe3, 0x80, 0x82, 0x52, 0x07, 0x69, 0x73, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x12, 0xc9, 0x01, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x92, 0x01, 0x92, 0x41, 0x8e, 0x01, 0x2a, 0x15, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x32, 0x75, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5,
	0x9c, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x8c, 0xe4, 0xbb,
	0x85, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0,
	0xef, 0xbc, 0x8c, 0xe8, 0xa7, 0xa3, 0xe9, 0x99, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4,
	0xb8, 0x8e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe5, 0x85, 0xb3, 0xe8, 0x81,
	0x94, 0xe3, 0x80, 0x82, 0xe5, 0xbd, 0x93, 0xe4, 0xb8, 0x94, 0xe4, 0xbb, 0x85, 0xe5, 0xbd, 0x93,
	0xe5, 0xbc, 0xba, 0xe5, 0x88, 0xb6, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x97, 0xb6, 0xe7,
	0x94, 0x9f, 0xe6, 0x95, 0x88, 0xe3, 0x80, 0x82, 0x52, 0x15, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0xbd, 0x01, 0x0a, 0x11, 0x6b, 0x65, 0x65, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x8e, 0x01, 0x92, 0x41,
	0x8a, 0x01, 0x2a, 0x11, 0x6b, 0x65, 0x65, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x32, 0x75, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xbb, 0x8e,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0xef, 0xbc, 0x8c, 0xe6,
	0xb8, 0x85, 0xe7, 0x90, 0x86, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xef, 0xbc, 0x8c, 0xe4, 0xbd,
	0x86, 0xe4, 0xb8, 0x8d, 0xe9, 0x94, 0x80, 0xe6, 0xaf, 0x81, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8,
	0xef, 0xbc, 0x8c, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8, 0xe8,
	0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe3, 0x80, 0x82, 0xe5, 0xbd, 0x93, 0xe4, 0xb8, 0x94, 0xe4, 0xbb,
	0x85, 0xe5, 0xbd, 0x93, 0xe5, 0xbc, 0xba, 0xe5, 0x88, 0xb6, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe6, 0x97, 0xb6, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0xe3, 0x80, 0x82, 0x52, 0x11, 0x6b, 0x65,
	0x65, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x3d, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x21, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x02, 0x18, 0x64, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x6a,
	0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x2a, 0x0e, 0x6f, 0x6e, 0x6c,
	0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x2d, 0x6f, 0x6e, 0x6c,
	0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0xe4, 0xbb, 0x85, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x2c, 0xe4, 0xb8, 0x8d, 0xe6, 0x89,
	0xa7, 0xe8, 0xa1, 0x8c, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x79,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x8f, 0x01, 0x92, 0x41, 0x8b,
	0x01, 0x0a, 0x88, 0x01, 0x2a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x55, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe7, 0x9b, 0xb8,
	0xe5, 0x85, 0xb3, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0xbd, 0x93, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe8, 0xbf, 0x98, 0xe6, 0x9c, 0x89, 0xe5, 0x8f,
	0xaf, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe7, 0x9a, 0x84, 0x4e, 0x6f, 0x64, 0x65, 0xe6, 0x97,
	0xb6, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5,
	0xe3, 0x80, 0x82, 0xd2, 0x01, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0xd2, 0x01, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x8d, 0x03, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7,
	0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x58, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41,
	0x2b, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65,
	0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9e, 0x02, 0x0a,
	0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x64, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x1b, 0xe5, 0xb7, 0xb2, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0x9a, 0x84, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x98, 0x01, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x6e, 0x92, 0x41, 0x6b, 0x2a, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x32, 0x63, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0xe7, 0x9a, 0x84, 0xe5, 0x90, 0x8e, 0xe5, 0x8f, 0xb0, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe3, 0x80, 0x82, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6,
	0x82, 0xe5, 0xbd, 0x93, 0xe5, 0xbc, 0xba, 0xe5, 0x88, 0xb6, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe4,
	0xbc, 0x9a, 0xe4, 0xba, 0xa7, 0xe7, 0x94, 0x9f, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xe3, 0x80, 0x82, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0xc6, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x54, 0x92, 0x41, 0x37, 0x2a,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x32, 0x28, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe8, 0x87, 0xaa,
	0xe5, 0xbb, 0xba, 0x49, 0x44, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe4, 0xba, 0x91, 0xe8, 0xae,
	0xbe, 0xe6, 0x96, 0xbd, 0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x14, 0x32,
	0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24,
	0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x3a, 0x37, 0x92,
	0x41, 0x34, 0x0a, 0x32, 0x2a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xd0, 0x03, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x52,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x9a, 0x84, 0x4e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92,
	0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77,
	0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x4a, 0x92,
	0x41, 0x47, 0x0a, 0x45, 0x2a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x15, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa3, 0x03, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7f, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x61, 0x92, 0x41,
	0x3e, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x31, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe6, 0x89, 0x80, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94,
	0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0x49,
	0x44, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa,
	0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x99, 0x01, 0x0a, 0x0c, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x75, 0x92, 0x41, 0x72, 0x2a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x32, 0x62, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0xe4, 0xb8, 0xba, 0x74, 0x72, 0x75, 0x65, 0xe6, 0x97, 0xb6, 0x2c, 0x20, 0xe8, 0xbe,
	0x93, 0xe5, 0x87, 0xba, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xe6, 0x8c, 0x89, 0xe7, 0x85, 0xa7,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe5, 0xbc, 0xb9, 0xe6,
	0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0x28, 0xe5,
	0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe7, 0x9a, 0x84, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe5, 0x9c,
	0xa8, 0xe5, 0x90, 0x8e, 0xe9, 0x9d, 0xa2, 0x29, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x67, 0x92, 0x41, 0x64, 0x0a, 0x62, 0x2a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x43, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a,
	0x84, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0xe5, 0x8d, 0x87, 0xe5, 0xba, 0x8f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22,
	0xd9, 0x03, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x4c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0, 0xe7, 0x9a,
	0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x79, 0x0a,
	0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f, 0x77,
	0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x51, 0x92, 0x41, 0x4e, 0x0a, 0x4c, 0x2a,
	0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1b, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x4e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd1, 0x03, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x2a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x31, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7,
	0xbb, 0x84, 0xe6, 0x89, 0x80, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0x49, 0x44, 0xe4, 0xb8, 0xba, 0x42,
	0x43, 0x53, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x32, 0x1e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe6, 0x89, 0x80,
	0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92,
	0x41, 0x2b, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x1e, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe6, 0x89, 0x80, 0xe5, 0x85, 0xb3, 0xe8, 0x81,
	0x94, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x3a, 0x94, 0x01, 0x92, 0x41, 0x90, 0x01, 0x0a,
	0x8d, 0x01, 0x2a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x75, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6,
	0x9e, 0x9c, 0xe5, 0xa1, 0xab, 0xe5, 0x86, 0x99, 0xe4, 0xba, 0x86, 0xe7, 0x9b, 0xae, 0xe6, 0xa0,
	0x87, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe7, 0xbb, 0x84,
	0xe5, 0x90, 0x88, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0x85,
	0xa8, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe5, 0x88, 0x99, 0xe4, 0xb8, 0xba, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe5, 0x85, 0xa8, 0xe9, 0x87, 0x8f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22,
	0xca, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x44, 0x92, 0x41, 0x41, 0x0a, 0x3f, 0x2a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xee, 0x0a, 0x0a,
	0x0f, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5f, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x1e, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x32, 0x11, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe7, 0x9a, 0x84, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x01, 0x18, 0x64, 0x32,
	0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24,
	0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x49, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x33, 0x92, 0x41, 0x26, 0x2a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x32, 0x1d, 0xe6, 0x89,
	0xa9, 0xe5, 0xae, 0xb9, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0x49, 0x50, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xfa, 0x42, 0x07, 0x92, 0x01,
	0x04, 0x08, 0x01, 0x18, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x11,
	0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x11, 0x69, 0x6e,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x32,
	0x23, 0xe9, 0x87, 0x8d, 0xe8, 0xa3, 0x85, 0xe6, 0x97, 0xb6, 0xe7, 0x9a, 0x84, 0xe5, 0x88, 0x9d,
	0xe5, 0xa7, 0x8b, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe4, 0xb8,
	0xba, 0xe7, 0xa9, 0xba, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x72, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0x92, 0x41,
	0x4d, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x32, 0x3e,
	0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0xa6, 0x82, 0xe6,
	0x9e, 0x9c, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe5, 0x8a, 0xa0, 0xe5, 0x85, 0xa5, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xef, 0xbc, 0x8c, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81,
	0xe5, 0xa1, 0xab, 0xe5, 0x86, 0x99, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0x49, 0x44, 0x52, 0x0b,
	0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0xd2, 0x01, 0x0a, 0x0e,
	0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x42, 0xa9, 0x01, 0x92, 0x41, 0xa5, 0x01, 0x2a, 0x0e, 0x6f, 0x6e, 0x6c,
	0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x92, 0x01, 0xe4, 0xbb,
	0x85, 0xe5, 0x86, 0x99, 0xe5, 0x85, 0xa5, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x98, 0xaf, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0xe3, 0x80, 0x82, 0xe4, 0xbb, 0x85, 0xe5, 0x86, 0x99, 0xe5, 0x85, 0xa5,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x97, 0xb6, 0xef,
	0xbc, 0x8c, 0xe4, 0xbc, 0x9a, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xae, 0xbe,
	0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0xba, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0xe3, 0x80, 0x82,
	0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3d, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x02, 0x18, 0x14, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x54, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x0e, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x32, 0x17, 0xe5, 0x85,
	0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1,
	0xe6, 0x9d, 0xbf, 0x49, 0x44, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x90, 0x01, 0x0a, 0x0e, 0x69, 0x73, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x68,
	0x92, 0x41, 0x65, 0x2a, 0x23, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x98, 0xaf, 0xe7, 0xac,
	0xac, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x28, 0x49, 0x44,
	0x43, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x29, 0x32, 0x3e, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6,
	0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe9,
	0x9c, 0x80, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0xba, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0xe4, 0xb8,
	0x94, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0x6e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x0e, 0x69, 0x73, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x05, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x54, 0x92, 0x41, 0x51, 0x2a, 0x05, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x32, 0x48, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe9, 0x87, 0x8d, 0xe8, 0xa3, 0x85, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe6, 0x97, 0xb6,
	0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0xaf, 0x86, 0xe7,
	0xa0, 0x81, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe4, 0xba, 0x91, 0xe5, 0x8f,
	0xaf, 0xe5, 0x85, 0xbc, 0xe5, 0xae, 0xb9, 0xe5, 0xa4, 0x84, 0xe7, 0x90, 0x86, 0x52, 0x05, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x07, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x48, 0x92, 0x41, 0x45, 0x2a, 0x07, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x32, 0x3a, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe9, 0xab, 0x98, 0xe7, 0xba, 0xa7, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe9, 0x95, 0x9c, 0xe5,
	0x83, 0x8f, 0x52, 0x07, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0xbf, 0x01, 0x92, 0x41,
	0xbb, 0x01, 0x0a, 0xb8, 0x01, 0x2a, 0x0f, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x90, 0x01, 0xe7, 0xbb, 0x99, 0xe6, 0x8c, 0x87, 0xe5,
	0xae, 0x9a, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1,
	0x8c, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c, 0xef, 0xbc, 0x81, 0xe6, 0xb3, 0xa8,
	0xe6, 0x84, 0x8f, 0xef, 0xbc, 0x81, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe7, 0x9a, 0x84, 0xe6,
	0x9c, 0xba, 0xe5, 0x99, 0xa8, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x98, 0xaf, 0xe8, 0x85,
	0xbe, 0xe8, 0xae, 0xaf, 0xe4, 0xba, 0x91, 0x63, 0x76, 0x6d, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0xe4, 0xbc, 0x9a, 0xe9, 0x87, 0x8d, 0xe8, 0xa3, 0x85, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xef,
	0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0xab,
	0x9e, 0xe4, 0xbb, 0xb7, 0xe8, 0xae, 0xa1, 0xe8, 0xb4, 0xb9, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xe7, 0x9a, 0x84, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x8a, 0x04,
	0x0a, 0x10, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x4d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x18, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b,
	0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x8c, 0x01, 0x92, 0x41,
	0x88, 0x01, 0x0a, 0x85, 0x01, 0x2a, 0x10, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x63, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf, 0xe5, 0x8f, 0x8d,
	0xe9, 0xa6, 0x88, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5,
	0x8c, 0x96, 0xe8, 0xbf, 0x87, 0xe7, 0xa8, 0x8b, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a,
	0xa1, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0xbf, 0xe4, 0xba, 0x8e,
	0xe6, 0x9f, 0xa5, 0xe9, 0x98, 0x85, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xd2, 0x01, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf2, 0x0a, 0x0a, 0x11, 0x41,
	0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5f, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x1e, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x32, 0x11, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe7, 0x9a, 0x84, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x01, 0x18, 0x64, 0x32,
	0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24,
	0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x49, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x33, 0x92, 0x41, 0x26, 0x2a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x32, 0x1d, 0xe6, 0x89,
	0xa9, 0xe5, 0xae, 0xb9, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0x49, 0x50, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xfa, 0x42, 0x07, 0x92, 0x01,
	0x04, 0x08, 0x01, 0x18, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x11,
	0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x11, 0x69, 0x6e,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x32,
	0x23, 0xe9, 0x87, 0x8d, 0xe8, 0xa3, 0x85, 0xe6, 0x97, 0xb6, 0xe7, 0x9a, 0x84, 0xe5, 0x88, 0x9d,
	0xe5, 0xa7, 0x8b, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe4, 0xb8,
	0xba, 0xe7, 0xa9, 0xba, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x72, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0x92, 0x41,
	0x4d, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x32, 0x3e,
	0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0xa6, 0x82, 0xe6,
	0x9e, 0x9c, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe5, 0x8a, 0xa0, 0xe5, 0x85, 0xa5, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xef, 0xbc, 0x8c, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81,
	0xe5, 0xa1, 0xab, 0xe5, 0x86, 0x99, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0x49, 0x44, 0x52, 0x0b,
	0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0xd2, 0x01, 0x0a, 0x0e,
	0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x42, 0xa9, 0x01, 0x92, 0x41, 0xa5, 0x01, 0x2a, 0x0e, 0x6f, 0x6e, 0x6c,
	0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x92, 0x01, 0xe4, 0xbb,
	0x85, 0xe5, 0x86, 0x99, 0xe5, 0x85, 0xa5, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x98, 0xaf, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0xe3, 0x80, 0x82, 0xe4, 0xbb, 0x85, 0xe5, 0x86, 0x99, 0xe5, 0x85, 0xa5,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x97, 0xb6, 0xef,
	0xbc, 0x8c, 0xe4, 0xbc, 0x9a, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xae, 0xbe,
	0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0xba, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0xe3, 0x80, 0x82,
	0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3d, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x02, 0x18, 0x14, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x54, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x0e, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x32, 0x17, 0xe5, 0x85,
	0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1,
	0xe6, 0x9d, 0xbf, 0x49, 0x44, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x90, 0x01, 0x0a, 0x0e, 0x69, 0x73, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x68,
	0x92, 0x41, 0x65, 0x2a, 0x23, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x98, 0xaf, 0xe7, 0xac,
	0xac, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x28, 0x49, 0x44,
	0x43, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x29, 0x32, 0x3e, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6,
	0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe9,
	0x9c, 0x80, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0xba, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0xe4, 0xb8,
	0x94, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0x6e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x0e, 0x69, 0x73, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x05, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x54, 0x92, 0x41, 0x51, 0x2a, 0x05, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x32, 0x48, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe9, 0x87, 0x8d, 0xe8, 0xa3, 0x85, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe6, 0x97, 0xb6,
	0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0xaf, 0x86, 0xe7,
	0xa0, 0x81, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe4, 0xba, 0x91, 0xe5, 0x8f,
	0xaf, 0xe5, 0x85, 0xbc, 0xe5, 0xae, 0xb9, 0xe5, 0xa4, 0x84, 0xe7, 0x90, 0x86, 0x52, 0x05, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x07, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x48, 0x92, 0x41, 0x45, 0x2a, 0x07, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x32, 0x3a, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe9, 0xab, 0x98, 0xe7, 0xba, 0xa7, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe9, 0x95, 0x9c, 0xe5,
	0x83, 0x8f, 0x52, 0x07, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0xc1, 0x01, 0x92, 0x41,
	0xbd, 0x01, 0x0a, 0xba, 0x01, 0x2a, 0x11, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x32, 0x90, 0x01, 0xe7, 0xbb, 0x99, 0xe6, 0x8c,
	0x87, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xbf, 0x9b,
	0xe8, 0xa1, 0x8c, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c, 0xef, 0xbc, 0x81, 0xe6,
	0xb3, 0xa8, 0xe6, 0x84, 0x8f, 0xef, 0xbc, 0x81, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe7, 0x9a,
	0x84, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x98, 0xaf,
	0xe8, 0x85, 0xbe, 0xe8, 0xae, 0xaf, 0xe4, 0xba, 0x91, 0x63, 0x76, 0x6d, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0xe4, 0xbc, 0x9a, 0xe9, 0x87, 0x8d, 0xe8, 0xa3, 0x85, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb,
	0x9f, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8,
	0xe7, 0xab, 0x9e, 0xe4, 0xbb, 0xb7, 0xe8, 0xae, 0xa1, 0xe8, 0xb4, 0xb9, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xe7, 0x9a, 0x84, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8, 0xd2, 0x01, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0xac, 0x04, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x56, 0x32, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32,
	0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb7, 0xbb, 0xe5,
	0x8a, 0xa0, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57,
	0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42,
	0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80,
	0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52,
	0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a,
	0xac, 0x01, 0x92, 0x41, 0xa8, 0x01, 0x0a, 0xa5, 0x01, 0x2a, 0x12, 0x41, 0x64, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32, 0x32, 0x80, 0x01,
	0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6,
	0x81, 0xe6, 0x98, 0xaf, 0xe5, 0x8f, 0x8d, 0xe9, 0xa6, 0x88, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3,
	0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe8, 0xbf, 0x87, 0xe7, 0xa8, 0x8b, 0xe7,
	0x9a, 0x84, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc,
	0x8c, 0xe4, 0xbe, 0xbf, 0xe4, 0xba, 0x8e, 0xe6, 0x9f, 0xa5, 0xe9, 0x98, 0x85, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xef, 0xbc, 0x8c, 0x56, 0x32, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd1,
	0x05, 0x0a, 0x1e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0x92, 0x41, 0x1b, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x32, 0x0e, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x01, 0x18, 0x64, 0x32, 0x0f, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04,
	0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x4f, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x35, 0x92, 0x41, 0x32, 0x2a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x73, 0x32, 0x27,
	0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe7, 0x9a, 0x84, 0x49,
	0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x2c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x27, 0x2c,
	0x27, 0xe9, 0x9a, 0x94, 0xe5, 0xbc, 0x80, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x73,
	0x12, 0x6e, 0x0a, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x44, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x43, 0x2a, 0x0e, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x73, 0x32, 0x31, 0xe9,
	0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe7, 0x9a, 0x84, 0xe8, 0x99,
	0x9a, 0xe6, 0x8b, 0x9f, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x2c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x27, 0x2c, 0x27, 0xe9, 0x9a, 0x94, 0xe5, 0xbc, 0x80,
	0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x73,
	0x12, 0x3d, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x02, 0x18, 0x14, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0xaf, 0x01, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x8e, 0x01, 0x92, 0x41, 0x8a, 0x01, 0x2a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x32, 0x7c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6,
	0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x8c, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x28, 0xe7,
	0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xef, 0xbc, 0x8c, 0xe4, 0xbd, 0x86, 0xe6, 0x98, 0xaf, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99,
	0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0x29, 0xef, 0xbc, 0x8c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x28, 0xe5, 0x8f, 0xaa, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe6, 0x8c, 0x89,
	0xe9, 0x87, 0x8f, 0xe8, 0xae, 0xa1, 0xe8, 0xb4, 0xb9, 0xe7, 0x9a, 0x84, 0xe6, 0x9c, 0xba, 0xe5,
	0x99, 0xa8, 0x29, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x98, 0xaf, 0x52,
	0x45, 0x54, 0x41, 0x49, 0x4e, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x3a, 0x9e, 0x01, 0x92, 0x41, 0x9a, 0x01, 0x0a, 0x97, 0x01, 0x2a, 0x1e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x61, 0xe6, 0x89, 0xb9,
	0xe9, 0x87, 0x8f, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6,
	0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x28, 0xe5, 0x8c, 0x85, 0xe6,
	0x8b, 0xac, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x8b, 0xe5, 0x8a, 0xa8, 0xe4, 0xb8,
	0x8a, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe3, 0x80, 0x81,
	0x43, 0x41, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe3, 0x80, 0x81, 0xe7, 0xac, 0xac, 0xe4, 0xb8,
	0x89, 0xe6, 0x96, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xad, 0x89, 0x29, 0xd2, 0x01,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x22, 0xb7, 0x04, 0x0a, 0x1f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32,
	0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x59, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x18, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb8,
	0x8b, 0xe6, 0x9e, 0xb6, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b,
	0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x9e, 0x01, 0x92, 0x41,
	0x9a, 0x01, 0x0a, 0x97, 0x01, 0x2a, 0x1f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x66, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe4, 0xb8,
	0x8b, 0xe6, 0x9e, 0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe7, 0x9b, 0xb8, 0xe5, 0xba, 0x94, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xef, 0xbc, 0x8c,
	0xe7, 0xa1, 0xae, 0xe8, 0xae, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb8, 0x8b, 0xe6,
	0x9e, 0xb6, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xd2, 0x01,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc0, 0x01, 0x0a,
	0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xa1, 0x09, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0x92, 0x41, 0x1b, 0x2a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x0e, 0xe7, 0xbc, 0xa9, 0xe5, 0xae,
	0xb9, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x01,
	0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d,
	0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x50, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x30, 0x2a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x32,
	0x27, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe7, 0x9a, 0x84,
	0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x2c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x27,
	0x2c, 0x27, 0xe9, 0x9a, 0x94, 0xe5, 0xbc, 0x80, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x88, 0x01, 0x92, 0x41,
	0x84, 0x01, 0x2a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x32, 0x76,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x8c, 0x52,
	0x45, 0x54, 0x41, 0x49, 0x4e, 0x28, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0xe4, 0xbd, 0x86, 0xe6, 0x98, 0xaf, 0xe4, 0xbf, 0x9d, 0xe7, 0x95,
	0x99, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0x29, 0xef, 0xbc, 0x8c, 0x54, 0x45, 0x52, 0x4d, 0x49,
	0x4e, 0x41, 0x54, 0x45, 0x28, 0xe5, 0x8f, 0xaa, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe6, 0x8c,
	0x89, 0xe9, 0x87, 0x8f, 0xe8, 0xae, 0xa1, 0xe8, 0xb4, 0xb9, 0xe7, 0x9a, 0x84, 0xe6, 0x9c, 0xba,
	0xe5, 0x99, 0xa8, 0x29, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x98, 0xaf,
	0x52, 0x45, 0x54, 0x41, 0x49, 0x4e, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x7e, 0x0a, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x64, 0x92, 0x41, 0x61, 0x2a, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x32, 0x56, 0xe4, 0xb8, 0x8d, 0xe7, 0xae, 0xa1, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5,
	0xa4, 0x84, 0xe4, 0xba, 0x8e, 0xe4, 0xbb, 0xbb, 0xe4, 0xbd, 0x95, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0xe9, 0x83, 0xbd, 0xe5, 0xbc, 0xba, 0xe5, 0x88, 0xb6, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe5,
	0x88, 0x9a, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xef, 0xbc, 0x8c, 0x4e, 0x6f,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0xe7, 0xad, 0x89, 0x52, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x14, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0xb2, 0x01, 0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x89, 0x01, 0x92, 0x41, 0x85,
	0x01, 0x2a, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x32, 0x73, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0xe3, 0x80, 0x82, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0xba, 0x74, 0x72, 0x75,
	0x65, 0xe6, 0x97, 0xb6, 0xef, 0xbc, 0x8c, 0xe4, 0xbb, 0x85, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0xe6,
	0x89, 0x80, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0x9a, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91,
	0xe4, 0xbb, 0xbb, 0xe4, 0xbd, 0x95, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6,
	0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0x2e, 0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c,
	0x92, 0x41, 0x29, 0x2a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x44, 0x32, 0x17, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x49, 0x44, 0x52, 0x0e, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x5d, 0x0a, 0x0b,
	0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x32, 0x29, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe7, 0xac, 0xac, 0xe4, 0xb8,
	0x89, 0xe6, 0x96, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe9, 0x9c, 0x80, 0xe5, 0x85, 0xb3,
	0xe8, 0x81, 0x94, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0x49, 0x44, 0x52, 0x0b,
	0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x90, 0x01, 0x0a, 0x0e,
	0x69, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x68, 0x92, 0x41, 0x65, 0x2a, 0x23, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe6, 0x98, 0xaf, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0x28, 0x49, 0x44, 0x43, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x29, 0x32, 0x3e,
	0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe9, 0x9c, 0x80, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0xba, 0x74, 0x72,
	0x75, 0x65, 0x2c, 0x20, 0xe4, 0xb8, 0x94, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe5, 0x85, 0xb3,
	0xe8, 0x81, 0x94, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x0e,
	0x69, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x3a, 0x73,
	0x92, 0x41, 0x70, 0x0a, 0x6e, 0x2a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x44, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xef, 0xbc, 0x8c,
	0xe4, 0xbb, 0x8e, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4,
	0xb8, 0xad, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x49, 0x50,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xd2,
	0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x86, 0x04, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x23,
	0x92, 0x41, 0x20, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d,
	0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x85, 0x01, 0x92, 0x41, 0x81, 0x01, 0x0a, 0x7f, 0x2a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x5a, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6,
	0x98, 0xaf, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xef, 0xbc, 0x8c,
	0xe7, 0xa1, 0xae, 0xe8, 0xae, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb8, 0x8b, 0xe6,
	0x9e, 0xb6, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xd2, 0x01,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8a, 0x03, 0x0a,
	0x17, 0x4d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x15,
	0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x05, 0x18, 0x64, 0x32, 0x0f,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a,
	0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x53, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x3d, 0x92, 0x41, 0x2e, 0x2a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x32, 0x25, 0x6e, 0x6f, 0x64,
	0x65, 0x20, 0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0x80,
	0xe5, 0xa4, 0xa7, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x31,
	0x30, 0x30, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0x64, 0x18, 0x01, 0x52, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x92, 0x41, 0x23, 0x2a,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x32, 0x14, 0xe5, 0x85,
	0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x14, 0x32, 0x0f, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x6e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x3a, 0x5e, 0x92, 0x41, 0x5b, 0x0a, 0x59,
	0x2a, 0x17, 0x4d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x2a, 0xe5, 0xb0, 0x86, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xb8, 0xad, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xa7, 0xbb,
	0xe5, 0x85, 0xa5, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe7, 0x9a, 0x84, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0xd2, 0x01, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xed, 0x03, 0x0a, 0x18, 0x4d, 0x6f,
	0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32,
	0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x27, 0xe5, 0xb0, 0x86, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7,
	0xa7, 0xbb, 0xe5, 0x85, 0xa5, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe7, 0x9a,
	0x84, 0xe5, 0x90, 0x8e, 0xe5, 0x8f, 0xb0, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65,
	0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e,
	0x92, 0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5,
	0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e,
	0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x59,
	0x92, 0x41, 0x56, 0x0a, 0x54, 0x2a, 0x18, 0x4d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x27, 0xe5, 0xb0, 0x86, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xa7, 0xbb, 0xe5, 0x85, 0xa5,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2,
	0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf8, 0x02, 0x0a, 0x1b, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41,
	0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x05, 0x18, 0x64, 0x32,
	0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24,
	0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x45, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x2f, 0x92, 0x41, 0x20, 0x2a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x32, 0x17, 0xe9, 0x9c,
	0x80, 0xe8, 0xa6, 0x81, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0xe7, 0x9a, 0x84, 0x49, 0x50, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0x64, 0x18,
	0x01, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x92,
	0x41, 0x23, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x32,
	0x14, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x14, 0x32, 0x0f,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x3a, 0x56, 0x92, 0x41,
	0x53, 0x0a, 0x51, 0x2a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x1e, 0xe4, 0xbb, 0x8e, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe6, 0xb1, 0xa0, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0xf3, 0x03, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x56, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x21, 0xe4, 0xbb, 0x8e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1,
	0xa0, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0xe7, 0x9a, 0x84, 0xe5, 0x90, 0x8e, 0xe5, 0x8f, 0xb0,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x79, 0x0a, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x61, 0x92, 0x41, 0x5e, 0x0a, 0x5c, 0x2a, 0x1c,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x3c, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xef, 0xbc, 0x8c, 0xe7, 0xa1, 0xae, 0xe8,
	0xae, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x22, 0xf0, 0x04, 0x0a, 0x18, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x15, 0x2a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x05, 0x18, 0x64, 0x32, 0x0f, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04,
	0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x4b, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x35,
	0x92, 0x41, 0x26, 0x2a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x32, 0x1d, 0xe9, 0x9c, 0x80, 0xe8,
	0xa6, 0x81, 0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86, 0xe5, 0x9b, 0x9e, 0xe6, 0x94, 0xb6, 0xe7, 0x9a,
	0x84, 0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08,
	0x01, 0x10, 0x64, 0x18, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x0b,
	0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x40, 0x92, 0x41, 0x23, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x32, 0x14, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02,
	0x18, 0x14, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d,
	0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x12, 0x3d, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x02, 0x18, 0x14, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x92, 0x01, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x7a, 0x92, 0x41, 0x77, 0x2a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x32, 0x6d, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x8b, 0xe5, 0x8a, 0xa8, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e,
	0xb6, 0x43, 0x41, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xef, 0xbc, 0x8c, 0xe5,
	0xbd, 0x93, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x97, 0xb6, 0xe5, 0x80, 0x99, 0xe6, 0x94,
	0xaf, 0xe6, 0x8c, 0x81, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87,
	0xef, 0xbc, 0x9b, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe6,
	0x97, 0xb6, 0x2c, 0x20, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87,
	0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0x52, 0x06, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x3a, 0x77, 0x92, 0x41, 0x74, 0x0a, 0x72, 0x2a, 0x18, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x29, 0xe4, 0xbb, 0x8e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe6, 0xb1, 0xa0, 0xe4, 0xb8, 0xad, 0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86, 0xe5, 0x9b, 0x9e, 0xe6,
	0x94, 0xb6, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x49, 0x50, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0xd2, 0x01, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0xd2, 0x01, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x91, 0x04,
	0x0a, 0x19, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x15, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0x9a, 0x84, 0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56,
	0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6,
	0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99,
	0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x3a, 0x8d, 0x01, 0x92, 0x41, 0x89, 0x01, 0x0a, 0x86, 0x01, 0x2a, 0x19, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x69, 0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xb1,
	0xe4, 0xba, 0x8e, 0xe8, 0xaf, 0xa5, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xb8, 0xba, 0xe5,
	0xbc, 0x82, 0xe6, 0xad, 0xa5, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xef, 0xbc, 0x8c, 0xe8, 0xaf,
	0xa5, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xbb, 0x85, 0xe8, 0x83, 0xbd, 0xe7, 0xa1, 0xae,
	0xe8, 0xae, 0xa4, 0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0x22, 0xec, 0x03, 0x0a, 0x1a, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x56, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x1d,
	0x72, 0x1b, 0x10, 0x05, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x92, 0x41, 0x38, 0x2a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x32, 0x2f, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe6, 0xb8, 0x85, 0xe7, 0x90,
	0x86, 0xe5, 0x9b, 0x9e, 0xe6, 0x94, 0xb6, 0xe7, 0x9a, 0x84, 0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0xef, 0xbc, 0x8c, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x27, 0x2c, 0x27, 0xe5, 0x88,
	0x86, 0xe5, 0x89, 0xb2, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x62, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x92, 0x41, 0x23, 0x2a, 0x0b, 0x6e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x32, 0x14, 0xe5, 0x85, 0xb3, 0xe8, 0x81,
	0x94, 0xe7, 0x9a, 0x84, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0xfa,
	0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x14, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8,
	0x80, 0x85, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x14, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x79, 0x92, 0x41, 0x76, 0x0a, 0x74, 0x2a, 0x1a, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56,
	0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x29, 0xe4, 0xbb, 0x8e, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe4, 0xb8, 0xad, 0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86, 0xe5,
	0x9b, 0x9e, 0xe6, 0x94, 0xb6, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x49, 0x50, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xd2,
	0x01, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0xd2, 0x01, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0xd2, 0x01, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x22, 0x95, 0x04, 0x0a, 0x1b, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x15,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86, 0xe4,
	0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x79, 0x0a, 0x0f, 0x77,
	0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x8f, 0x01, 0x92, 0x41, 0x8b, 0x01, 0x0a, 0x88, 0x01,
	0x2a, 0x1b, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x69, 0xe6,
	0xb8, 0x85, 0xe7, 0x90, 0x86, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xb1, 0xe4, 0xba, 0x8e, 0xe8, 0xaf, 0xa5, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0xe4, 0xb8, 0xba, 0xe5, 0xbc, 0x82, 0xe6, 0xad, 0xa5, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xbb,
	0x85, 0xe8, 0x83, 0xbd, 0xe7, 0xa1, 0xae, 0xe8, 0xae, 0xa4, 0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0xad, 0xa3, 0xe5,
	0xb8, 0xb8, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x22, 0xcc, 0x02, 0x0a, 0x19, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x32, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x54, 0x92, 0x41, 0x37,
	0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x32, 0x28, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe8, 0x87,
	0xaa, 0xe5, 0xbb, 0xba, 0x49, 0x44, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe4, 0xba, 0x91, 0xe8,
	0xae, 0xbe, 0xe6, 0x96, 0xbd, 0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x14,
	0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b,
	0x24, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x7a,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x62,
	0x92, 0x41, 0x5f, 0x2a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x32, 0x55, 0xe8, 0xbe, 0x93,
	0xe5, 0x87, 0xba, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe9,
	0x80, 0x89, 0xe5, 0x80, 0xbc, 0x20, 0x77, 0x69, 0x64, 0x65, 0x28, 0xe5, 0x85, 0xa8, 0xe9, 0x83,
	0xa8, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x29, 0x2c, 0x20, 0x62, 0x61, 0x73, 0x69, 0x63, 0x28,
	0xe5, 0x9f, 0xba, 0xe6, 0x9c, 0xac, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x29, 0xef, 0xbc, 0x8c,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x9f, 0xba, 0xe6, 0x9c, 0xac, 0xe5, 0xad, 0x97, 0xe6,
	0xae, 0xb5, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3a, 0x3b, 0x92, 0x41, 0x38, 0x0a,
	0x36, 0x2a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1b, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x22, 0xdf, 0x03, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x32, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32,
	0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f,
	0x64, 0x65, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x11, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56,
	0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6,
	0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99,
	0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x3a, 0x56, 0x92, 0x41, 0x53, 0x0a, 0x51, 0x2a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x25, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe8, 0xa2, 0xab, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe7, 0x9a,
	0x84, 0x6e, 0x6f, 0x64, 0x65, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xd2, 0x01, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcc, 0x0b, 0x0a, 0x0d, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x32, 0x13, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe4, 0xba, 0x91, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x07, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x49, 0x50, 0x32, 0x11, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x86, 0x85, 0xe7,
	0xbd, 0x91, 0xe4, 0xb8, 0xbb, 0x49, 0x50, 0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50,
	0x12, 0x5b, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x24, 0xe6, 0x9c, 0xba, 0xe5, 0x9e,
	0x8b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2,
	0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a,
	0x03, 0x43, 0x50, 0x55, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x03, 0x43, 0x50, 0x55, 0x32, 0x0f, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x43, 0x50, 0x55, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x43, 0x50, 0x55, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x65,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x03, 0x6d, 0x65,
	0x6d, 0x32, 0x12, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x86, 0x85, 0xe5, 0xad, 0x98, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x03, 0x47, 0x50,
	0x55, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x03, 0x47, 0x50,
	0x55, 0x32, 0x1c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x47, 0x50, 0x55, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0x30, 0x52,
	0x03, 0x47, 0x50, 0x55, 0x12, 0x8f, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x77, 0x92, 0x41, 0x74, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x32, 0x6a, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x88, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe5,
	0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0x9a, 0xe4, 0xb9,
	0x89, 0xe7, 0x9a, 0x84, 0xef, 0xbc, 0x89, 0xef, 0xbc, 0x8c, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x2c, 0x20, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x49, 0x4e, 0x47, 0x2c, 0x20, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x2c, 0x20, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x2c, 0x20,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x32, 0x1e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5,
	0x8c, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9,
	0xba, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x7c, 0x0a, 0x0b, 0x6e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5a,
	0x92, 0x41, 0x57, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x32, 0x48, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a,
	0x84, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x49, 0x44, 0x2c, 0x20, 0xe5,
	0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x28, 0xe4, 0xbb, 0x85, 0x43,
	0x41, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0xbd, 0x92, 0xe5, 0xb1, 0x9e, 0xe4, 0xba, 0x8e,
	0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x29, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x18, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x31, 0x0a, 0x03, 0x56, 0x50, 0x43, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x2a, 0x03, 0x56, 0x50, 0x43, 0x32, 0x15, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89,
	0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x56, 0x50, 0x43, 0x20, 0x49, 0x44, 0x52, 0x03, 0x56,
	0x50, 0x43, 0x12, 0x5b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x40, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32,
	0x36, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0x8c, 0xba,
	0xe5, 0x9f, 0x9f, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0xe5, 0xb9, 0xbf, 0xe5,
	0xb7, 0x9e, 0xef, 0xbc, 0x8c, 0xe6, 0xb7, 0xb1, 0xe5, 0x9c, 0xb3, 0xef, 0xbc, 0x8c, 0xe5, 0x8a,
	0xa0, 0xe5, 0xb7, 0x9e, 0xe7, 0xad, 0x89, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x4e, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x36, 0x92, 0x41, 0x33, 0x2a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x32, 0x29, 0xe5, 0xae,
	0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe5, 0xaf, 0x86,
	0xe7, 0xa0, 0x81, 0x2c, 0x20, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1,
	0x8c, 0xe8, 0xa7, 0xa3, 0xe5, 0xaf, 0x86, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x12,
	0x5d, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x49, 0x92,
	0x41, 0x46, 0x2a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x32, 0x3c, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0x49, 0x44, 0xef, 0xbc, 0x8c,
	0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x3b, 0x20, 0xe8, 0xaf,
	0xa5, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0x43, 0x41, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x41,
	0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x32,
	0x16, 0x43, 0x41, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0x49, 0x44, 0xe5, 0x8f, 0xb7, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x44, 0x12, 0x7c, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0x92, 0x41, 0x55, 0x2a, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x32, 0x45, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xef, 0xbc, 0x8c, 0x4d, 0x41, 0x53, 0x54, 0x45,
	0x52, 0x2c, 0x20, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x2c, 0x20, 0x45, 0x54, 0x43, 0x44, 0x2c,
	0x20, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x54, 0x43, 0x44, 0x2c, 0x41, 0x4c, 0x4c,
	0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x57, 0x4f, 0x52, 0x4b, 0x45,
	0x52, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x7e, 0x0a, 0x0d, 0x75, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x58, 0x92, 0x41, 0x55, 0x2a, 0x0d, 0x75, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x44, 0xe8, 0xb0, 0x83, 0xe5,
	0xba, 0xa6, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0xe5, 0x80, 0xbc, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0x8f, 0x82, 0xe4, 0xb8,
	0x8e, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xef, 0xbc, 0x8c, 0x31, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4,
	0xba, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6,
	0x52, 0x0d, 0x75, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x37, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x32, 0x0c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd2, 0x03, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x46, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x79, 0x0a, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x25, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe8, 0xa2, 0xab, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe7, 0xae, 0xa1, 0xe7,
	0x90, 0x86, 0xe7, 0x9a, 0x84, 0x6e, 0x6f, 0x64, 0x65, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xd2,
	0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xce, 0x03,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69, 0x6e,
	0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59,
	0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x1a, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x32, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x05, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x6e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x07, 0x6d, 0x69, 0x6e,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3e, 0x92, 0x41, 0x34, 0x2a,
	0x07, 0x6d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x29, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9,
	0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe7, 0x9a, 0x84, 0x61, 0x75, 0x74, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe4, 0xb8, 0x8b,
	0xe9, 0x99, 0x90, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x58, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x3e, 0x92, 0x41, 0x34, 0x2a, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69,
	0x7a, 0x65, 0x32, 0x29, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0xe7, 0x9a, 0x84, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe4, 0xb8, 0x8a, 0xe9, 0x99, 0x90, 0xfa, 0x42, 0x04,
	0x2a, 0x02, 0x28, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x24, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x0c,
	0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe5, 0x91, 0x98, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a,
	0x5d, 0x92, 0x41, 0x5a, 0x0a, 0x58, 0x2a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x2a, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe6, 0x9c, 0x80, 0xe5, 0xa4,
	0xa7, 0xe7, 0x9a, 0x84, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe9, 0x99, 0x90, 0xe9, 0xa2, 0x9d,
	0xd2, 0x01, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0x9a,
	0x03, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69,
	0x6e, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x79, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a,
	0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x32, 0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x5f, 0x92, 0x41, 0x5c, 0x0a,
	0x5a, 0x2a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69,
	0x6e, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x39, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe7, 0x9a, 0x84,
	0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe9, 0x99, 0x90, 0xe9, 0xa2, 0x9d, 0xe7, 0x9a, 0x84, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x22, 0x8f, 0x03, 0x0a, 0x1d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x1a, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x32, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x05, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x6e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x76, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x32, 0x2a, 0xe5, 0xae, 0x9a, 0xe6, 0x97, 0xb6,
	0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x37, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x32, 0x0c, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe5, 0x91, 0x98, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x62, 0x92, 0x41, 0x5f, 0x0a, 0x5d,
	0x2a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x21, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0xe5, 0xae, 0x9a, 0xe6, 0x97, 0xb6, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe7, 0xad, 0x96, 0xe7,
	0x95, 0xa5, 0xd2, 0x01, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0xd2, 0x01, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x97, 0x03,
	0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x79, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a,
	0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x32, 0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x5b, 0x92, 0x41, 0x58, 0x0a,
	0x56, 0x2a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x34, 0x67, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0xe5, 0xae, 0x9a, 0xe6, 0x97, 0xb6, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x22, 0xde, 0x01, 0x0a, 0x23, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x64, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x92, 0x41, 0x25, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x32, 0x16, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0x49, 0x44, 0xfa, 0x42,
	0x17, 0x72, 0x15, 0x10, 0x01, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x3a, 0x51, 0x92, 0x41, 0x4e, 0x0a, 0x4c, 0x2a, 0x23, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x17, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe8, 0xbd, 0xac, 0xe6,
	0x8d, 0xa2, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x49, 0x44, 0xd2, 0x01, 0x0b, 0x6e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0x86, 0x03, 0x0a, 0x24, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x6c, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x42, 0x32, 0x92, 0x41, 0x2f, 0x2a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x32,
	0x23, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0xe8, 0xbd, 0xac, 0xe6, 0x8d, 0xa2, 0xe7,
	0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe8, 0xaf,
	0xa6, 0xe6, 0x83, 0x85, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x3a, 0x51,
	0x92, 0x41, 0x4e, 0x0a, 0x4c, 0x2a, 0x24, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x24, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe8, 0xbd, 0xac, 0xe6, 0x8d, 0xa2, 0xe4, 0xb8, 0xba, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x22, 0x84, 0x03, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x1a, 0x2a, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x32, 0x0b, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x05, 0x18, 0x64,
	0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b,
	0x24, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x43,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x0f, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0x6e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x32, 0x0c, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe5,
	0x91, 0x98, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x3a, 0x82, 0x01, 0x92, 0x41, 0x7f, 0x0a, 0x7d, 0x2a, 0x1d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x40, 0xe4, 0xbf, 0xae, 0xe6,
	0x94, 0xb9, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe6, 0x9c, 0x9f, 0xe6, 0x9c,
	0x9b, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x95, 0xb0, 0x2c, 0xe6, 0x89,
	0xa9, 0xe5, 0xae, 0xb9, 0xe5, 0x89, 0x8d, 0xe4, 0xbf, 0x9d, 0xe8, 0xaf, 0x81, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe4, 0xb8, 0x80, 0xe8, 0x87, 0xb4, 0xe6, 0x80, 0xa7, 0xd2, 0x01, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0xd2, 0x01, 0x0b, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x90, 0x03, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a, 0x1e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2d, 0xe6, 0x9b,
	0xb4, 0xe6, 0x96, 0xb0, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe6, 0x9c, 0x9f,
	0xe6, 0x9c, 0x9b, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x95, 0xb0, 0xe7, 0x9a, 0x84, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x22, 0x96, 0x04, 0x0a, 0x1d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x1a, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x32, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x05, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x6e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2a, 0x92,
	0x41, 0x27, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x32,
	0x18, 0xe6, 0x9c, 0x9f, 0xe6, 0x9c, 0x9b, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x95, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x1e, 0x2a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x12, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe6,
	0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0xe5, 0x91, 0x98, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x64, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x95, 0x01, 0x0a,
	0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x7d, 0x92,
	0x41, 0x7a, 0x2a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x32, 0x70, 0xe6, 0x89, 0x8b, 0xe5,
	0x8a, 0xa8, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0x2c, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x8b, 0xe5, 0x8a, 0xa8, 0xe6, 0x89, 0xa9, 0xe5, 0xae,
	0xb9, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe4, 0xb8, 0x8d, 0xe5, 0x81, 0x9a, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe5, 0x9b, 0x9e, 0xe9, 0x80, 0x80, 0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86, 0xef,
	0xbc, 0x8c, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe7, 0x9a,
	0x84, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xef, 0xbc, 0x8c, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0x52, 0x06, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x3a, 0x6e, 0x92, 0x41, 0x6b, 0x0a, 0x69, 0x2a, 0x1d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x21, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe6, 0x9c, 0x9f, 0xe6, 0x9c,
	0x9b, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x95, 0xb0, 0xd2, 0x01, 0x0b,
	0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0xd2, 0x01, 0x0b, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0xe2, 0x03, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1b, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84,
	0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83,
	0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a, 0x1e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2d, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe6, 0x9c, 0x9f, 0xe6, 0x9c,
	0x9b, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x95, 0xb0, 0xe7, 0x9a, 0x84, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x22, 0xd2, 0x01, 0x0a, 0x1f, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75, 0x74,
	0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x1a, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x32, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x05, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x6e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a,
	0x1f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x1e, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9,
	0xd2, 0x01, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0x91,
	0x03, 0x0a, 0x20, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92,
	0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77,
	0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x53, 0x92,
	0x41, 0x50, 0x0a, 0x4e, 0x2a, 0x20, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2a, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0x89, 0xa9,
	0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x22, 0xd4, 0x01, 0x0a, 0x20, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41,
	0x1a, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x32, 0x0b,
	0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15,
	0x10, 0x05, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x3a, 0x55, 0x92, 0x41, 0x52, 0x0a, 0x50, 0x2a, 0x20, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1e, 0xe5, 0x85, 0xb3,
	0xe9, 0x97, 0xad, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe8, 0x87, 0xaa, 0xe5,
	0x8a, 0xa8, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xd2, 0x01, 0x0b, 0x6e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0x93, 0x03, 0x0a, 0x21, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x79,
	0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f,
	0x2a, 0x21, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x2a, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0x4e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9,
	0xe5, 0xae, 0xb9, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x22,
	0xe2, 0x0a, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7d, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x61, 0x92, 0x41, 0x5e, 0x2a, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x32, 0x52, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0x41, 0x64, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xef, 0xbc,
	0x8c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xe7, 0xad, 0x89, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x32, 0x0c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xfa,
	0x42, 0x33, 0x72, 0x31, 0x52, 0x0c, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49,
	0x4e, 0x47, 0x52, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x52, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x52, 0x07, 0x54, 0x49,
	0x4d, 0x45, 0x4f, 0x55, 0x54, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5e, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44,
	0x92, 0x41, 0x41, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x36, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xef, 0xbc, 0x8c, 0xe6, 0x8a, 0xa5, 0xe9, 0x94, 0x99, 0xe6, 0x97, 0xb6, 0xe4, 0xb8, 0xba, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe3, 0x80, 0x82, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41,
	0x1b, 0x2a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x32, 0x12, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1,
	0xe5, 0x90, 0xaf, 0xe5, 0x8a, 0xa8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x03, 0x65, 0x6e, 0x64, 0x32, 0x12, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a,
	0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x12,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x55, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30, 0x2a, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x32, 0x21, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1,
	0xe6, 0xad, 0xa3, 0xe5, 0x9c, 0xa8, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe7, 0x9a, 0x84, 0xe6,
	0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x51, 0x0a, 0x0c, 0x73, 0x74, 0x65, 0x70,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2d,
	0x92, 0x41, 0x22, 0x2a, 0x0c, 0x73, 0x74, 0x65, 0x70, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x32, 0x12, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe6,
	0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x73,
	0x74, 0x65, 0x70, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x74, 0x65, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x55, 0x92, 0x41, 0x48, 0x2a, 0x05,
	0x73, 0x74, 0x65, 0x70, 0x73, 0x32, 0x3f, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xaf, 0xa6,
	0xe7, 0xbb, 0x86, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef,
	0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0xa1, 0xae, 0xe8, 0xae, 0xa4, 0xef, 0xbc, 0x8c, 0xe5, 0xbc, 0x82,
	0xe5, 0xb8, 0xb8, 0xe6, 0x97, 0xb6, 0xfa, 0x42, 0x07, 0x9a, 0x01, 0x04, 0x08, 0x01, 0x10, 0x14,
	0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x60, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x92, 0x41, 0x1f, 0x2a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x12, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xfa, 0x42,
	0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x5a, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41,
	0x1f, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x12, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x20, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x32, 0x0f, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe4, 0xba, 0xba, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x14, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26,
	0x2a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x32, 0x18, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0xe4, 0xb8, 0x8a, 0xe6, 0xac, 0xa1, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x1a, 0x4e, 0x0a, 0x0a, 0x53, 0x74, 0x65, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x3a, 0x70, 0x92, 0x41, 0x6d, 0x0a, 0x6b, 0x2a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82,
	0xd2, 0x01, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0c, 0x73, 0x74,
	0x65, 0x70, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0xd2, 0x01, 0x05, 0x73, 0x74, 0x65,
	0x70, 0x73, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xd2, 0x01,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0xdd, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xe3, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x12, 0x2a, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32, 0x08, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x49, 0x44,
	0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x02, 0x18, 0x80, 0x08, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x20, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x32, 0x15, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95,
	0xe5, 0x8f, 0x91, 0xe8, 0xb5, 0xb7, 0xe4, 0xba, 0xba, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02,
	0x18, 0x80, 0x08, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x3a, 0x3c, 0x92, 0x41,
	0x39, 0x0a, 0x37, 0x2a, 0x10, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x10, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0x54, 0x61, 0x73,
	0x6b, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0xd2, 0x01, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x22, 0xfc, 0x01, 0x0a, 0x11, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x48, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x13,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x90, 0x8e, 0x54, 0x61, 0x73, 0x6b, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe4, 0x01, 0x0a, 0x0f, 0x53, 0x6b,
	0x69, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92,
	0x41, 0x12, 0x2a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32, 0x08, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0x49, 0x44, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x02, 0x18, 0x80, 0x08, 0x32, 0x0f,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x23, 0x2a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x32, 0x18, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xb7,
	0xb3, 0xe8, 0xbf, 0x87, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x91, 0xe8, 0xb5, 0xb7, 0xe4, 0xba, 0xba,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x08, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x3a, 0x3b, 0x92, 0x41, 0x38, 0x0a, 0x36, 0x2a, 0x0f, 0x53, 0x6b, 0x69, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x10, 0xe8, 0xb7, 0xb3,
	0xe8, 0xbf, 0x87, 0x54, 0x61, 0x73, 0x6b, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0xd2, 0x01, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x22, 0xfb, 0x01, 0x0a, 0x10, 0x53, 0x6b, 0x69, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x13, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x90, 0x8e, 0x54, 0x61,
	0x73, 0x6b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe8,
	0x06, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x12, 0x2a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x32, 0x08, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15,
	0x10, 0x02, 0x18, 0x24, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x68, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0x92,
	0x41, 0x16, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x0c, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xfa, 0x42, 0x34, 0x72, 0x32, 0x52, 0x0c, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x52, 0x07, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x52, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x07, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x52, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x92, 0x41, 0x41, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x36, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x89,
	0xa7, 0xe8, 0xa1, 0x8c, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe6, 0x8a, 0xa5,
	0xe9, 0x94, 0x99, 0xe6, 0x97, 0xb6, 0xe4, 0xb8, 0xba, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6,
	0x8f, 0x90, 0xe7, 0xa4, 0xba, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe3, 0x80, 0x82, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x03, 0x65, 0x6e, 0x64, 0x32, 0x12,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26,
	0x92, 0x41, 0x23, 0x2a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x32, 0x12, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30, 0x2a,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x32, 0x21, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0xad, 0xa3, 0xe5, 0x9c, 0xa8, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c,
	0xe7, 0x9a, 0x84, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x99, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x74, 0x65, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x55, 0x92, 0x41, 0x48, 0x2a,
	0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x32, 0x3f, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xaf,
	0xa6, 0xe7, 0xbb, 0x86, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0xa1, 0xae, 0xe8, 0xae, 0xa4, 0xef, 0xbc, 0x8c, 0xe5, 0xbc,
	0x82, 0xe5, 0xb8, 0xb8, 0xe6, 0x97, 0xb6, 0xfa, 0x42, 0x07, 0x9a, 0x01, 0x04, 0x08, 0x01, 0x10,
	0x14, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1a, 0x2a, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x32, 0x0f, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0xba, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18,
	0x14, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x1a, 0x4e, 0x0a, 0x0a, 0x53, 0x74,
	0x65, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x3d, 0x92, 0x41, 0x3a, 0x0a,
	0x38, 0x2a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x10, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x54, 0x61, 0x73, 0x6b,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0xd2,
	0x01, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x22, 0xfd, 0x01, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x48, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x13,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x90, 0x8e, 0x54, 0x61, 0x73, 0x6b, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x83, 0x02, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x47, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2f, 0x92, 0x41, 0x12, 0x2a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32, 0x08, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x24, 0x32,
	0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x74, 0x0a, 0x07, 0x69, 0x73, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x5a, 0x92, 0x41, 0x57, 0x2a, 0x07,
	0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x32, 0x4c, 0xe5, 0xbc, 0xba, 0xe5, 0x88, 0xb6, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x54, 0x61, 0x73, 0x6b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef,
	0xbc, 0x8c, 0xe5, 0x8d, 0xb3, 0xe4, 0xbd, 0xbf, 0xe6, 0x9c, 0xaa, 0xe6, 0xad, 0xa3, 0xe5, 0xb8,
	0xb8, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xef, 0xbc, 0x8c,
	0xe4, 0xb9, 0x9f, 0xe4, 0xbc, 0x9a, 0xe8, 0xbf, 0x9b, 0xe5, 0x85, 0xa5, 0xe7, 0xbb, 0x88, 0xe6,
	0xad, 0xa2, 0xe3, 0x80, 0x82, 0x52, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x3a, 0x2f,
	0x92, 0x41, 0x2c, 0x0a, 0x2a, 0x2a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xd2, 0x01, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22,
	0x80, 0x02, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32,
	0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x16, 0xe5, 0xb7, 0xb2, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7,
	0x9a, 0x84, 0x54, 0x61, 0x73, 0x6b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x87, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x11, 0x2a, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x32, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15,
	0x10, 0x02, 0x18, 0x24, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x3a, 0x2d, 0x92,
	0x41, 0x2a, 0x0a, 0x28, 0x2a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x16, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x54, 0x61, 0x73, 0x6b,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xc1, 0x02, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x48, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x13,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x9a, 0x84, 0x54, 0x61, 0x73, 0x6b, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x45, 0x92, 0x41, 0x42, 0x0a, 0x40,
	0x2a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe6,
	0x9d, 0xbf, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2,
	0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xf8, 0x06, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0x92, 0x41, 0x3b, 0x2a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x2e, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6,
	0x89, 0x80, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0x49, 0x44, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x50, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41,
	0x28, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x1b, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x89, 0x80, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41,
	0x1a, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x0f, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x14, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41,
	0x1a, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x32, 0x0f, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x14, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x7d, 0x0a, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x61, 0x92,
	0x41, 0x5e, 0x2a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x32, 0x52, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe4, 0xbe, 0x8b,
	0xe5, 0xa6, 0x82, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0xef, 0xbc, 0x8c, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xe7, 0xad, 0x89,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x72, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5a, 0x92, 0x41, 0x57, 0x2a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x4d, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x28, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49,
	0x4e, 0x47, 0x2c, 0x20, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x2c, 0x20, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x2c, 0x20, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x2c, 0x20, 0x54, 0x49,
	0x4d, 0x45, 0x4f, 0x55, 0x54, 0x2c, 0x20, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x54, 0x45, 0x52, 0x4d,
	0x49, 0x4e, 0x41, 0x54, 0x45, 0x29, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55,
	0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d,
	0x92, 0x41, 0x3a, 0x2a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x32, 0x30, 0xe6, 0x9f, 0x90,
	0xe4, 0xba, 0x9b, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xe4, 0xb8, 0x8b, 0xe9, 0x80, 0x9a, 0xe8,
	0xbf, 0x87, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xaf,
	0xb9, 0xe5, 0xba, 0x94, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x50, 0x12, 0x57, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x2a,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x32, 0x23, 0xe9, 0x80,
	0x9a, 0xe8, 0xbf, 0x87, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0x49, 0x44, 0xe8,
	0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x3a, 0x8a,
	0x01, 0x92, 0x41, 0x86, 0x01, 0x0a, 0x83, 0x01, 0x2a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x70, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x74, 0x61, 0x73, 0x6b, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0xa1,
	0xab, 0xe5, 0x86, 0x99, 0xe4, 0xba, 0x86, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe5, 0xad, 0x97,
	0xe6, 0xae, 0xb5, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x88, 0xe7,
	0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0x85, 0xa8, 0xe4, 0xb8, 0xba,
	0xe7, 0xa9, 0xba, 0xe5, 0x88, 0x99, 0xe4, 0xb8, 0xba, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5,
	0x85, 0xa8, 0xe9, 0x87, 0x8f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22, 0xab, 0x03, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x53, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1e,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x65, 0x0a, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x2f,
	0x92, 0x41, 0x2c, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x24, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe5, 0x88, 0xb0, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe6, 0x9c, 0x80, 0xe6, 0x96, 0xb0,
	0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x0a, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x3a, 0x3c, 0x92, 0x41, 0x39,
	0x0a, 0x37, 0x2a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2,
	0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbb, 0x24, 0x0a, 0x1e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x11,
	0x69, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x43, 0x92, 0x41, 0x40, 0x2a, 0x11, 0x69, 0x73,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x32,
	0x2b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x2c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8,
	0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x52, 0x11, 0x69, 0x73,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x77, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x5b, 0x92, 0x41, 0x58, 0x2a, 0x08, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x32, 0x4c, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x2c, 0xe6, 0x89, 0xa9, 0xe5, 0xae,
	0xb9, 0xe7, 0xae, 0x97, 0xe6, 0xb3, 0x95, 0xef, 0xbc, 0x8c, 0xef, 0xbc, 0x88, 0xe9, 0xbb, 0x98,
	0xe8, 0xae, 0xa4, 0xef, 0xbc, 0x89, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2c, 0x20, 0x6c, 0x65,
	0x61, 0x73, 0x74, 0x2d, 0x77, 0x61, 0x73, 0x74, 0x65, 0x2c, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x2d,
	0x70, 0x6f, 0x64, 0x73, 0x2c, 0x20, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x7a, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x4a, 0x92, 0x41, 0x47, 0x2a, 0x12, 0x6d, 0x61, 0x78, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x32, 0x31, 0x6d,
	0x61, 0x78, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2d, 0x62, 0x75, 0x6c, 0x6b, 0x2d, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x2c, 0xe5, 0x8d, 0x95, 0xe6, 0xac, 0xa1, 0xe7, 0xbc, 0xa9, 0xe5, 0xae,
	0xb9, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x95, 0xb0,
	0x52, 0x12, 0x6d, 0x61, 0x78, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x7b, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x53, 0x92, 0x41,
	0x50, 0x2a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x32, 0x3e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe5,
	0x90, 0x8e, 0xe5, 0xa4, 0x9a, 0xe9, 0x95, 0xbf, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe5, 0xbc,
	0x80, 0xe5, 0xa7, 0x8b, 0xe5, 0x88, 0xa4, 0xe5, 0xae, 0x9a, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9,
	0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x31, 0x30, 0xe5, 0x88, 0x86, 0xe9, 0x92,
	0x9f, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0xc3, 0x01, 0x0a, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55,
	0x6e, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x8c, 0x01, 0x92, 0x41, 0x88, 0x01, 0x2a, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x32,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x75, 0x6e, 0x6e, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c,
	0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe7, 0xad, 0x89, 0xe5, 0xbe, 0x85, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbf, 0x9e, 0xe7, 0xbb,
	0xad, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb2, 0xe5, 0xa4, 0x9a, 0xe5, 0xb0, 0x91, 0xe5, 0x88, 0x86,
	0xe9, 0x92, 0x9f, 0xe5, 0x90, 0x8e, 0xe8, 0xa2, 0xab, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xef,
	0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x31, 0x30, 0xe5, 0x88, 0x86, 0xe9, 0x92, 0x9f,
	0x52, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x6e, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0xf0, 0x01, 0x0a, 0x1d, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0xa9, 0x01, 0x92, 0x41, 0xa5, 0x01, 0x2a, 0x1d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x68, 0x6f, 0x6c, 0x64, 0x32, 0x83, 0x01, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f,
	0x77, 0x6e, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe7,
	0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x98, 0x88, 0xe5, 0x80,
	0xbc, 0xef, 0xbc, 0x8c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x87, 0x8f, 0xe4, 0xbd, 0x8e, 0xe4, 0xba, 0x8e, 0xe5,
	0xa4, 0x9a, 0xe5, 0xb0, 0x91, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0xe5, 0x88,
	0xa4, 0xe5, 0xae, 0x9a, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb2, 0xef, 0xbc, 0x8c,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x35, 0x30, 0x52, 0x1d, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x19, 0x73,
	0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x4f,
	0x92, 0x41, 0x4c, 0x2a, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32, 0x2f,
	0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe6, 0x9c, 0x89, 0xe6, 0x9c, 0xac, 0xe5, 0x9c, 0xb0, 0xe5,
	0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc,
	0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x19, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x17, 0x73,
	0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x50, 0x6f, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x64, 0x92, 0x41,
	0x61, 0x2a, 0x17, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x64, 0x73, 0x32, 0x46, 0xe5, 0xbf, 0xbd, 0xe7,
	0x95, 0xa5, 0x6b, 0x75, 0x62, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x4e, 0x53,
	0xe4, 0xb8, 0x8b, 0xe9, 0x9d, 0x9e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0xe7,
	0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe7, 0x9a, 0x84, 0x50, 0x6f, 0x64, 0xe7, 0x9a, 0x84, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x17, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x1b,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x4e, 0x92, 0x41, 0x4b, 0x2a, 0x1b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0x2c, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0x44, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xae, 0xa1,
	0xe7, 0xae, 0x97, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x1b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x73, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x81,
	0x01, 0x0a, 0x13, 0x6f, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4f, 0x92, 0x41,
	0x4c, 0x2a, 0x13, 0x6f, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x35, 0x6f, 0x6b, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x2d, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0xe5,
	0x85, 0x81, 0xe8, 0xae, 0xb8, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x13, 0x6f,
	0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0xd2, 0x01, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x93, 0x01, 0x92, 0x41, 0x8f, 0x01, 0x2a, 0x19, 0x6d,
	0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x32, 0x72, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x2d, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x2d, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x2c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe6, 0x80, 0xbb, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x9a, 0x84, 0xe7, 0x99, 0xbe, 0xe5,
	0x88, 0x86, 0xe6, 0xaf, 0x94, 0xef, 0xbc, 0x8c, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe6, 0xad,
	0xa4, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe5, 0x88, 0x99, 0xe5, 0x81, 0x9c, 0xe6, 0xad, 0xa2,
	0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0x52, 0x19, 0x6d, 0x61,
	0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x14, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x5e, 0x92, 0x41, 0x5b, 0x2a, 0x14, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x32, 0x43, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x79, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe7, 0xad,
	0x89, 0xe5, 0xbe, 0x85, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95,
	0xe4, 0xbd, 0x8d, 0xe7, 0xa7, 0x92, 0x52, 0x14, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0xc5, 0x01, 0x0a,
	0x1b, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x82, 0x01, 0x92, 0x41, 0x7f, 0x2a, 0x1b, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x60, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x61,
	0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0xe7, 0xad, 0x89, 0xe5, 0xbe, 0x85, 0xe5,
	0xa4, 0x9a, 0xe9, 0x95, 0xbf, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe5, 0xb0, 0x86, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x9c, 0xaa, 0xe5, 0x9c, 0xa8, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0xe4, 0xb8, 0xad, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe7, 0x9a, 0x84,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x33,
	0x30, 0xe5, 0x88, 0x86, 0xe9, 0x92, 0x9f, 0x52, 0x1b, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0x92, 0x41, 0x2c, 0x2a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x1f, 0x42, 0x43, 0x53, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18,
	0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d,
	0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x32, 0x09, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x02, 0x18, 0x14, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x3d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x32, 0x12, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0xe5, 0xae, 0x9e, 0xe7, 0x8e, 0xb0, 0xe6, 0xa8,
	0xa1, 0xe5, 0xbc, 0x8f, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0xa8,
	0x01, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x42, 0x7e, 0x92, 0x41, 0x7b, 0x2a, 0x0f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x32, 0x68,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe8, 0x87, 0xaa, 0xe5,
	0x8a, 0xa8, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c, 0xe5, 0xbc,
	0x80, 0xe5, 0x90, 0xaf, 0xe5, 0x90, 0x8e, 0xe4, 0xbc, 0x9a, 0xe5, 0x9c, 0xa8, 0xe8, 0xaf, 0xa5,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0x20, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x20,
	0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4,
	0xb8, 0xba, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0xc8, 0x01, 0x0a, 0x13, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x95, 0x01, 0x92, 0x41, 0x91, 0x01, 0x2a, 0x13,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x32, 0x7a, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x2c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f,
	0x91, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x98, 0x88,
	0xe5, 0x80, 0xbc, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0xef, 0xbc, 0x8c, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0xe7, 0x8e, 0x87, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe8, 0xaf, 0xa5, 0xe5, 0x80, 0xbc,
	0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89, 0xa9, 0xe5,
	0xae, 0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x20, 0x31, 0x30, 0x30, 0x52,
	0x13, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0xa4, 0x01, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x63,
	0x65, 0x66, 0x75, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x66, 0x92, 0x41, 0x63, 0x2a, 0x19, 0x6d,
	0x61, 0x78, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x32, 0x46, 0x6d, 0x61, 0x78, 0x2d, 0x67, 0x72,
	0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x73, 0x65, 0x63, 0x2c, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x97, 0xb6,
	0xef, 0xbc, 0x8c, 0xe7, 0xad, 0x89, 0xe5, 0xbe, 0x85, 0x20, 0x50, 0x6f, 0x64, 0x20, 0xe9, 0x80,
	0x80, 0xe5, 0x87, 0xba, 0xe6, 0x9c, 0x80, 0xe9, 0x95, 0xbf, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x19, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x12, 0x84, 0x01, 0x0a, 0x0c,
	0x73, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x60, 0x92, 0x41, 0x5d, 0x2a, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x32, 0x4d, 0x73, 0x63, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x2c, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0x89, 0xa9, 0xe7, 0xbc,
	0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe4,
	0xb8, 0xba, 0xe7, 0xa7, 0x92, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8,
	0xba, 0x20, 0x31, 0x30, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x9e, 0x01, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x6a, 0x92, 0x41, 0x67, 0x2a, 0x14, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x4f, 0x6d, 0x61,
	0x78, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0xe7, 0xad, 0x89, 0xe5, 0xbe, 0x85, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe6, 0x9c, 0x80, 0xe9, 0x95, 0xbf, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe7, 0xa7, 0x92,
	0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x20, 0x39, 0x30, 0x30, 0x52, 0x14, 0x6d,
	0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x46,
	0x72, 0x6f, 0x6d, 0x5a, 0x65, 0x72, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x57, 0x92, 0x41, 0x54, 0x2a, 0x0f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x5a, 0x65, 0x72, 0x6f, 0x32,
	0x41, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x75, 0x70, 0x2d, 0x66, 0x72, 0x6f, 0x6d, 0x2d, 0x7a,
	0x65, 0x72, 0x6f, 0x2c, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8,
	0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x88, 0xe6, 0xb2, 0xa1, 0xe6, 0x9c, 0x89, 0x20,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xef,
	0xbc, 0x89, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x5a,
	0x65, 0x72, 0x6f, 0x12, 0x9d, 0x01, 0x0a, 0x16, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x65, 0x92, 0x41, 0x62, 0x2a, 0x16, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x32, 0x48, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x2d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x2c, 0xe6, 0x89,
	0xa9, 0xe5, 0xae, 0xb9, 0xe5, 0x90, 0x8e, 0xe5, 0x88, 0xa4, 0xe6, 0x96, 0xad, 0xe7, 0xbc, 0xa9,
	0xe5, 0xae, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94, 0xef,
	0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe7, 0xa7, 0x92, 0x52, 0x16, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x12, 0xa6, 0x01, 0x0a, 0x19, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x68, 0x92, 0x41, 0x65, 0x2a, 0x19, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x32, 0x48, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64,
	0x6f, 0x77, 0x6e, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x2d,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2c, 0xe8, 0xbf, 0x9e, 0xe7, 0xbb, 0xad, 0xe4, 0xb8, 0xa4,
	0xe6, 0xac, 0xa1, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe9,
	0x97, 0xb4, 0xe9, 0x9a, 0x94, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe7, 0xa7,
	0x92, 0x52, 0x19, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xcb, 0x01, 0x0a,
	0x1a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x6d, 0x92, 0x41, 0x6a, 0x2a, 0x1a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x32, 0x4c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x2d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x2c, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe5, 0x90, 0x8e,
	0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe9, 0x97, 0xb4, 0xe9,
	0x9a, 0x94, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe7, 0xa7, 0x92, 0x52, 0x1a,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x82, 0x02, 0x0a, 0x20, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x47, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0xb5, 0x01, 0x92, 0x41, 0xb1, 0x01, 0x2a, 0x20, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x47, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x32, 0x8c,
	0x01, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x67, 0x70, 0x75, 0x2d,
	0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe7, 0xbc, 0xa9, 0xe5,
	0xae, 0xb9, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0x28, 0x47,
	0x50, 0x55, 0x29, 0xef, 0xbc, 0x8c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x87, 0x8f, 0xe4, 0xbd, 0x8e, 0xe4, 0xba,
	0x8e, 0xe5, 0xa4, 0x9a, 0xe5, 0xb0, 0x91, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94,
	0xe5, 0x88, 0xa4, 0xe5, 0xae, 0x9a, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb2, 0xef,
	0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x35, 0x30, 0x52, 0x20, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x47, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0xd5, 0x01, 0x0a, 0x16, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x70, 0x75, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x9c, 0x01, 0x92, 0x41, 0x98, 0x01, 0x2a, 0x16, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x70, 0x75, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x32,
	0x7e, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x70, 0x75, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x2c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89,
	0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc,
	0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0xef, 0xbc, 0x8c, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x63, 0x70, 0x75, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0xe7, 0x8e, 0x87, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe8, 0xaf, 0xa5, 0xe5, 0x80, 0xbc,
	0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89, 0xa9, 0xe5,
	0xae, 0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x20, 0x31, 0x30, 0x30, 0x52,
	0x16, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x70, 0x75, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0xd5, 0x01, 0x0a, 0x16, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x9c, 0x01, 0x92, 0x41, 0x98, 0x01, 0x2a,
	0x16, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x65, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x32, 0x7e, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x2c,
	0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf,
	0x94, 0xef, 0xbc, 0x8c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x6d, 0x65, 0x6d, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x8e, 0x87, 0xe8, 0xb6, 0x85, 0xe8,
	0xbf, 0x87, 0xe8, 0xaf, 0xa5, 0xe5, 0x80, 0xbc, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe8, 0xa7,
	0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98,
	0xe8, 0xae, 0xa4, 0x20, 0x31, 0x30, 0x30, 0x52, 0x16, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x3a,
	0x66, 0x92, 0x41, 0x63, 0x0a, 0x61, 0x2a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1d, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0xd2, 0x01, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xfe, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe7, 0x2b, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x11, 0x69,
	0x73, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x43, 0x92, 0x41, 0x40, 0x2a, 0x11, 0x69, 0x73, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x2b,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x2c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe7,
	0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x52, 0x11, 0x69, 0x73, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xa7,
	0x01, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x8a, 0x01, 0x92, 0x41, 0x58, 0x2a, 0x08, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x32, 0x4c, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x2c, 0xe6, 0x89, 0xa9, 0xe5,
	0xae, 0xb9, 0xe7, 0xae, 0x97, 0xe6, 0xb3, 0x95, 0xef, 0xbc, 0x8c, 0xef, 0xbc, 0x88, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0xef, 0xbc, 0x89, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2c, 0x20, 0x6c,
	0x65, 0x61, 0x73, 0x74, 0x2d, 0x77, 0x61, 0x73, 0x74, 0x65, 0x2c, 0x20, 0x6d, 0x6f, 0x73, 0x74,
	0x2d, 0x70, 0x6f, 0x64, 0x73, 0x2c, 0x20, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0xfa,
	0x42, 0x2c, 0x72, 0x2a, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x52, 0x0b, 0x6c, 0x65,
	0x61, 0x73, 0x74, 0x2d, 0x77, 0x61, 0x73, 0x74, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x73, 0x74, 0x2d,
	0x70, 0x6f, 0x64, 0x73, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x83, 0x01, 0x0a, 0x12, 0x6d, 0x61, 0x78,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x53, 0x92, 0x41, 0x47, 0x2a, 0x12, 0x6d, 0x61, 0x78, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x32, 0x31,
	0x6d, 0x61, 0x78, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2d, 0x62, 0x75, 0x6c, 0x6b, 0x2d, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x2c, 0xe5, 0x8d, 0x95, 0xe6, 0xac, 0xa1, 0xe7, 0xbc, 0xa9, 0xe5,
	0xae, 0xb9, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x95,
	0xb0, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x64, 0x28, 0x01, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x86,
	0x01, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x5e, 0x92, 0x41, 0x50, 0x2a, 0x0e, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x32, 0x3e, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe5, 0x90, 0x8e, 0xe5, 0xa4, 0x9a,
	0xe9, 0x95, 0xbf, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe5,
	0x88, 0xa4, 0xe5, 0xae, 0x9a, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0x31, 0x30, 0xe5, 0x88, 0x86, 0xe9, 0x92, 0x9f, 0xfa, 0x42, 0x08, 0x2a,
	0x06, 0x18, 0x80, 0xa3, 0x05, 0x28, 0x3c, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0xce, 0x01, 0x0a, 0x15, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x97, 0x01, 0x92, 0x41, 0x88, 0x01, 0x2a, 0x15,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x6e, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77,
	0x6e, 0x2d, 0x75, 0x6e, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x2c,
	0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe7, 0xad, 0x89, 0xe5,
	0xbe, 0x85, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe8, 0xbf, 0x9e, 0xe7, 0xbb, 0xad, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb2, 0xe5, 0xa4, 0x9a,
	0xe5, 0xb0, 0x91, 0xe5, 0x88, 0x86, 0xe9, 0x92, 0x9f, 0xe5, 0x90, 0x8e, 0xe8, 0xa2, 0xab, 0xe7,
	0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x31, 0x30,
	0xe5, 0x88, 0x86, 0xe9, 0x92, 0x9f, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x18, 0x80, 0xa3, 0x05, 0x28,
	0x3c, 0x52, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x6e, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0xf9, 0x01, 0x0a, 0x1d, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0xb2, 0x01, 0x92, 0x41, 0xa5, 0x01, 0x2a, 0x1d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x68, 0x6f, 0x6c, 0x64, 0x32, 0x83, 0x01, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64,
	0x6f, 0x77, 0x6e, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91,
	0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x98, 0x88, 0xe5,
	0x80, 0xbc, 0xef, 0xbc, 0x8c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x87, 0x8f, 0xe4, 0xbd, 0x8e, 0xe4, 0xba, 0x8e,
	0xe5, 0xa4, 0x9a, 0xe5, 0xb0, 0x91, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0xe5,
	0x88, 0xa4, 0xe5, 0xae, 0x9a, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb2, 0xef, 0xbc,
	0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x35, 0x30, 0xfa, 0x42, 0x06, 0x2a,
	0x04, 0x18, 0x50, 0x28, 0x00, 0x52, 0x1d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0xa9, 0x01, 0x0a, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x92, 0x41, 0x4c, 0x2a, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x32, 0x2f, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe6, 0x9c, 0x89, 0xe6,
	0x9c, 0xac, 0xe5, 0x9c, 0xb0, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe7, 0x9a, 0x84, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x12, 0xba, 0x01, 0x0a, 0x17, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x64,
	0x92, 0x41, 0x61, 0x2a, 0x17, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x64, 0x73, 0x32, 0x46, 0xe5, 0xbf,
	0xbd, 0xe7, 0x95, 0xa5, 0x6b, 0x75, 0x62, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20,
	0x4e, 0x53, 0xe4, 0xb8, 0x8b, 0xe9, 0x9d, 0x9e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe7, 0x9a, 0x84, 0x50, 0x6f, 0x64, 0xe7, 0x9a, 0x84,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x17, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x9e, 0x01,
	0x0a, 0x1b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x73, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x40, 0x92, 0x41, 0x3d, 0x2a, 0x1b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x32, 0x1e, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xae, 0xa1, 0xe7, 0xae,
	0x97, 0x52, 0x1b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x73, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8c,
	0x01, 0x0a, 0x13, 0x6f, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x5a, 0x92, 0x41,
	0x4c, 0x2a, 0x13, 0x6f, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x35, 0x6f, 0x6b, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x2d, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0xe5,
	0x85, 0x81, 0xe8, 0xae, 0xb8, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x08,
	0x2a, 0x06, 0x18, 0x80, 0xc4, 0x13, 0x28, 0x00, 0x52, 0x13, 0x6f, 0x6b, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xdb, 0x01,
	0x0a, 0x19, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x9c, 0x01, 0x92, 0x41, 0x8f, 0x01, 0x2a, 0x19, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x32, 0x72, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x2c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8,
	0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x80, 0xbb, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x9a, 0x84, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94,
	0xef, 0xbc, 0x8c, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe6, 0xad, 0xa4, 0xe9, 0x98, 0x88, 0xe5,
	0x80, 0xbc, 0xe5, 0x88, 0x99, 0xe5, 0x81, 0x9c, 0xe6, 0xad, 0xa2, 0xe8, 0x87, 0xaa, 0xe5, 0x8a,
	0xa8, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x64, 0x28, 0x00,
	0x52, 0x19, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x14,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6a, 0x92, 0x41, 0x5b, 0x2a,
	0x14, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x43, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77,
	0x6e, 0x2d, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbc, 0xa9, 0xe5,
	0xae, 0xb9, 0xe7, 0xad, 0x89, 0xe5, 0xbe, 0x85, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xef, 0xbc,
	0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe7, 0xa7, 0x92, 0xfa, 0x42, 0x09, 0x2a, 0x07, 0x18,
	0x80, 0xa3, 0x05, 0x28, 0xb0, 0x09, 0x52, 0x14, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0xc5, 0x01, 0x0a,
	0x1b, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x82, 0x01, 0x92, 0x41, 0x7f, 0x2a, 0x1b, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x60, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x61,
	0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0xe7, 0xad, 0x89, 0xe5, 0xbe, 0x85, 0xe5,
	0xa4, 0x9a, 0xe9, 0x95, 0xbf, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe5, 0xb0, 0x86, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x9c, 0xaa, 0xe5, 0x9c, 0xa8, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0xe4, 0xb8, 0xad, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe7, 0x9a, 0x84,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x33,
	0x30, 0xe5, 0x88, 0x86, 0xe9, 0x92, 0x9f, 0x52, 0x1b, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x2d, 0x2a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x20, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49,
	0x44, 0xef, 0xbc, 0x8c, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x54, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36,
	0x92, 0x41, 0x2c, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x1f,
	0x42, 0x43, 0x53, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0x85,
	0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x3a, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x32, 0x09, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0xba, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x02, 0x18, 0x14, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x21, 0x92, 0x41, 0x1e, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x12,
	0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0xe5, 0xae, 0x9e, 0xe7, 0x8e, 0xb0, 0xe6, 0xa8, 0xa1, 0xe5,
	0xbc, 0x8f, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x82, 0x02, 0x0a,
	0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x47, 0x70, 0x75, 0x55, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42, 0xb5, 0x01, 0x92, 0x41, 0xb1, 0x01, 0x2a, 0x20,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x47, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x32, 0x8c, 0x01, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x67, 0x70,
	0x75, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe7, 0xbc,
	0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc,
	0x28, 0x47, 0x50, 0x55, 0x29, 0xef, 0xbc, 0x8c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x87, 0x8f, 0xe4, 0xbd, 0x8e,
	0xe4, 0xba, 0x8e, 0xe5, 0xa4, 0x9a, 0xe5, 0xb0, 0x91, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6,
	0xaf, 0x94, 0xe5, 0x88, 0xa4, 0xe5, 0xae, 0x9a, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe9, 0x97,
	0xb2, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x35, 0x30, 0x52,
	0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x47, 0x70, 0x75, 0x55, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0xef, 0x01, 0x0a, 0x13, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x9e, 0x01,
	0x92, 0x41, 0x91, 0x01, 0x2a, 0x13, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x32, 0x7a, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x2c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6,
	0xaf, 0x94, 0xef, 0xbc, 0x8c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x8e, 0x87, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87,
	0xe8, 0xaf, 0xa5, 0xe5, 0x80, 0xbc, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe8, 0xa7, 0xa6, 0xe5,
	0x8f, 0x91, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0x20, 0x31, 0x30, 0x30, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52, 0x13,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0xaf, 0x01, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x63, 0x65,
	0x66, 0x75, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x71, 0x92, 0x41, 0x63, 0x2a, 0x19, 0x6d, 0x61,
	0x78, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x32, 0x46, 0x6d, 0x61, 0x78, 0x2d, 0x67, 0x72, 0x61,
	0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x73, 0x65, 0x63, 0x2c, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x97, 0xb6, 0xef,
	0xbc, 0x8c, 0xe7, 0xad, 0x89, 0xe5, 0xbe, 0x85, 0x20, 0x50, 0x6f, 0x64, 0x20, 0xe9, 0x80, 0x80,
	0xe5, 0x87, 0xba, 0xe6, 0x9c, 0x80, 0xe9, 0x95, 0xbf, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xfa,
	0x42, 0x08, 0x2a, 0x06, 0x18, 0x80, 0xa3, 0x05, 0x28, 0x3c, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x47,
	0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6b, 0x92, 0x41,
	0x5d, 0x2a, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x32,
	0x4d, 0x73, 0x63, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x2c, 0xe8,
	0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0xa3,
	0x80, 0xe6, 0xb5, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94,
	0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe4, 0xb8, 0xba, 0xe7, 0xa7, 0x92, 0xef,
	0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x20, 0x31, 0x30, 0xfa, 0x42,
	0x08, 0x2a, 0x06, 0x18, 0x80, 0xa3, 0x05, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0xaa, 0x01, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x4e,
	0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x76, 0x92, 0x41, 0x67, 0x2a, 0x14, 0x6d, 0x61, 0x78,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x32, 0x4f, 0x6d, 0x61, 0x78, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0xe7, 0xad, 0x89, 0xe5, 0xbe,
	0x85, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe6, 0x9c, 0x80,
	0xe9, 0x95, 0xbf, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4,
	0xbd, 0x8d, 0xe7, 0xa7, 0x92, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x20, 0x39,
	0x30, 0x30, 0xfa, 0x42, 0x09, 0x2a, 0x07, 0x18, 0x80, 0xa3, 0x05, 0x28, 0x84, 0x07, 0x52, 0x14,
	0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70,
	0x46, 0x72, 0x6f, 0x6d, 0x5a, 0x65, 0x72, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x57, 0x92, 0x41, 0x54, 0x2a,
	0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x5a, 0x65, 0x72, 0x6f,
	0x32, 0x41, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x75, 0x70, 0x2d, 0x66, 0x72, 0x6f, 0x6d, 0x2d,
	0x7a, 0x65, 0x72, 0x6f, 0x2c, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe8, 0x87, 0xaa, 0xe5, 0x8a,
	0xa8, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x88, 0xe6, 0xb2, 0xa1, 0xe6, 0x9c, 0x89,
	0x20, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6,
	0xef, 0xbc, 0x89, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x46, 0x72, 0x6f, 0x6d,
	0x5a, 0x65, 0x72, 0x6f, 0x12, 0xa9, 0x01, 0x0a, 0x16, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x71, 0x92, 0x41, 0x62, 0x2a, 0x16, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x32, 0x48, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x2c, 0xe6,
	0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe5, 0x90, 0x8e, 0xe5, 0x88, 0xa4, 0xe6, 0x96, 0xad, 0xe7, 0xbc,
	0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94,
	0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe7, 0xa7, 0x92, 0xfa, 0x42, 0x09, 0x2a,
	0x07, 0x18, 0x80, 0xa3, 0x05, 0x28, 0xb0, 0x09, 0x52, 0x16, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x12, 0xb1, 0x01, 0x0a, 0x19, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x73, 0x92, 0x41, 0x65, 0x2a, 0x19, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x32, 0x48, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e,
	0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x2d, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x2c, 0xe8, 0xbf, 0x9e, 0xe7, 0xbb, 0xad, 0xe4, 0xb8, 0xa4, 0xe6, 0xac, 0xa1,
	0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe9, 0x97, 0xb4, 0xe9,
	0x9a, 0x94, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe7, 0xa7, 0x92, 0xfa, 0x42,
	0x08, 0x2a, 0x06, 0x18, 0x80, 0xa3, 0x05, 0x28, 0x00, 0x52, 0x19, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0xd6, 0x01, 0x0a, 0x1a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x78, 0x92, 0x41, 0x6a, 0x2a, 0x1a, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x32, 0x4c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d,
	0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x2d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2c, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe5,
	0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe5, 0x90, 0x8e, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95,
	0xe4, 0xbd, 0x8d, 0xe7, 0xa7, 0x92, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x18, 0x80, 0xa3, 0x05, 0x28,
	0x3c, 0x52, 0x1a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0xde, 0x01,
	0x0a, 0x16, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x70, 0x75, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0xa5,
	0x01, 0x92, 0x41, 0x98, 0x01, 0x2a, 0x16, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x70, 0x75, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x32, 0x7e, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x70, 0x75,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x2c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89, 0xa9, 0xe5,
	0xae, 0xb9, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe7, 0x99,
	0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0xef, 0xbc, 0x8c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x63, 0x70, 0x75, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7,
	0x8e, 0x87, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe8, 0xaf, 0xa5, 0xe5, 0x80, 0xbc, 0xef, 0xbc,
	0x8c, 0xe5, 0x88, 0x99, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9,
	0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x20, 0x31, 0x30, 0x30, 0xfa, 0x42, 0x06,
	0x2a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52, 0x16, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x70, 0x75, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0xde,
	0x01, 0x0a, 0x16, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0xa5, 0x01, 0x92, 0x41, 0x98, 0x01, 0x2a, 0x16, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x32, 0x7e,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65,
	0x6d, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x2c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89, 0xa9,
	0xe5, 0xae, 0xb9, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe7,
	0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0xef, 0xbc, 0x8c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x6d, 0x65, 0x6d, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8,
	0xe7, 0x8e, 0x87, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe8, 0xaf, 0xa5, 0xe5, 0x80, 0xbc, 0xef,
	0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89, 0xa9, 0xe5, 0xae,
	0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x20, 0x31, 0x30, 0x30, 0xfa, 0x42,
	0x06, 0x2a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52, 0x16, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x61, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x2d, 0x92, 0x41, 0x2a,
	0x2a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x32, 0x20, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x43, 0x41, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0xe6, 0xa8,
	0xa1, 0xe5, 0x9d, 0x97, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x67, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4d, 0x6f, 0x64, 0x65,
	0x42, 0x30, 0x92, 0x41, 0x2d, 0x2a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x32, 0x22,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x43, 0x41, 0x20, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x70, 0x0a, 0x0e, 0x6f,
	0x6e, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x48, 0x92, 0x41, 0x45, 0x2a, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x33, 0xe4, 0xbb, 0x85, 0xe6, 0x9b, 0xb4,
	0xe6, 0x96, 0xb0, 0x43, 0x41, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0xe4, 0xb8,
	0x8d, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0x52, 0x0e, 0x6f,
	0x6e, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xe7, 0x01,
	0x0a, 0x1c, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x64, 0x73,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x85, 0x01, 0x92, 0x41, 0x81, 0x01, 0x2a, 0x1c, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x32, 0x61, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba,
	0xa7, 0xe4, 0xbd, 0x8e, 0xe4, 0xba, 0x8e, 0xe6, 0xad, 0xa4, 0xe5, 0x80, 0xbc, 0xe7, 0x9a, 0x84,
	0x20, 0x70, 0x6f, 0x64, 0xef, 0xbc, 0x8c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0xe4,
	0xb8, 0x8d, 0xe4, 0xbc, 0x9a, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89, 0xa9, 0xe5, 0xae,
	0xb9, 0xef, 0xbc, 0x8c, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x97, 0xb6, 0xe4, 0xbc, 0x9a,
	0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x2c, 0x20, 0xe9, 0xbb, 0x98,
	0xe8, 0xae, 0xa4, 0xe5, 0x80, 0xbc, 0x2d, 0x31, 0x30, 0x52, 0x1c, 0x65, 0x78, 0x70, 0x65, 0x6e,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12, 0xb0, 0x01, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x50,
	0x6f, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x62, 0x92, 0x41, 0x58, 0x2a, 0x12, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x64, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x32, 0x42, 0x6e, 0x65, 0x77,
	0x50, 0x6f, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0xef,
	0xbc, 0x8c, 0xe6, 0x96, 0xb0, 0x70, 0x6f, 0x64, 0xe5, 0xbb, 0xba, 0xe7, 0xab, 0x8b, 0xe5, 0xa4,
	0x9a, 0xe4, 0xb9, 0x85, 0xe4, 0xb9, 0x8b, 0xe5, 0x90, 0x8e, 0xe6, 0x89, 0x8d, 0xe8, 0xa7, 0xa6,
	0xe5, 0x8f, 0x91, 0x43, 0x41, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x20, 0x30, 0xfa,
	0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x64, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x55, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x3a, 0x66, 0x92, 0x41, 0x63, 0x0a,
	0x61, 0x2a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x1d, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82,
	0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x22, 0xa6, 0x03, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74,
	0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32,
	0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x69, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f,
	0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2b, 0x92,
	0x41, 0x28, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe5, 0x90, 0x8e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b,
	0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x97, 0x03, 0x0a, 0x23,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x2c, 0x2a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x1f, 0x42, 0x43, 0x53, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x9f, 0x01, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x82, 0x01, 0x92,
	0x41, 0x7f, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x73, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe6, 0xb1, 0xa0, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0xe7, 0x9b, 0xae, 0xe5,
	0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x79, 0x75, 0x6e, 0x74, 0x69,
	0xe3, 0x80, 0x81, 0x73, 0x65, 0x6c, 0x66, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4,
	0xb8, 0xba, 0x79, 0x75, 0x6e, 0x74, 0x69, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0,
	0x29, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x78, 0x92, 0x41, 0x75,
	0x0a, 0x73, 0x2a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x35, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x41,
	0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0xe6, 0x9c, 0xac, 0xe6, 0xac, 0xa1, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xd2, 0x01,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xc5, 0x01, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd3, 0x29,
	0x0a, 0x1c, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71,
	0x0a, 0x11, 0x69, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x43, 0x92, 0x41, 0x40, 0x2a, 0x11,
	0x69, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x32, 0x2b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x2c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x85, 0x81, 0xe8,
	0xae, 0xb8, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x52, 0x11,
	0x69, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0xa7, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x8a, 0x01, 0x92, 0x41, 0x58, 0x2a, 0x08, 0x65, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x65, 0x72, 0x32, 0x4c, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x2c, 0xe6,
	0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe7, 0xae, 0x97, 0xe6, 0xb3, 0x95, 0xef, 0xbc, 0x8c, 0xef, 0xbc,
	0x88, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xef, 0xbc, 0x89, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x2c, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x2d, 0x77, 0x61, 0x73, 0x74, 0x65, 0x2c, 0x20, 0x6d,
	0x6f, 0x73, 0x74, 0x2d, 0x70, 0x6f, 0x64, 0x73, 0x2c, 0x20, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0xfa, 0x42, 0x2c, 0x72, 0x2a, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x52,
	0x0b, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x2d, 0x77, 0x61, 0x73, 0x74, 0x65, 0x52, 0x09, 0x6d, 0x6f,
	0x73, 0x74, 0x2d, 0x70, 0x6f, 0x64, 0x73, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x99, 0x01, 0x0a, 0x12,
	0x6d, 0x61, 0x78, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x69, 0x92, 0x41, 0x5d, 0x2a, 0x12, 0x6d,
	0x61, 0x78, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x32, 0x47, 0x6d, 0x61, 0x78, 0x2d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2d, 0x62, 0x75, 0x6c,
	0x6b, 0x2d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2c, 0xe5, 0x8d, 0x95, 0xe6, 0xac, 0xa1, 0xe7,
	0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe6, 0x95, 0xb0, 0x3b, 0x20, 0x43, 0x41, 0xe5, 0xb9, 0xb6, 0xe5, 0x8f, 0x91, 0xe7, 0xbc,
	0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18,
	0x64, 0x28, 0x01, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x75, 0x6c,
	0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x6d, 0x92, 0x41, 0x5f, 0x2a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x32, 0x4d, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0xa9,
	0xe5, 0xae, 0xb9, 0xe5, 0x90, 0x8e, 0xe5, 0xa4, 0x9a, 0xe9, 0x95, 0xbf, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe5, 0x88, 0xa4, 0xe5, 0xae, 0x9a, 0xe7, 0xbc,
	0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x31, 0x30, 0xe5,
	0x88, 0x86, 0xe9, 0x92, 0x9f, 0xef, 0xbc, 0x9b, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x88, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x18, 0x80, 0xa3, 0x05, 0x28, 0x3c, 0x52,
	0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0xce, 0x01, 0x0a, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x6e,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x97, 0x01, 0x92, 0x41, 0x88, 0x01, 0x2a, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x55, 0x6e, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x6f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x75, 0x6e, 0x6e, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe7, 0xbc,
	0xa9, 0xe5, 0xae, 0xb9, 0xe7, 0xad, 0x89, 0xe5, 0xbe, 0x85, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0xef, 0xbc, 0x8c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xbf, 0x9e, 0xe7, 0xbb, 0xad, 0xe7,
	0xa9, 0xba, 0xe9, 0x97, 0xb2, 0xe5, 0xa4, 0x9a, 0xe5, 0xb0, 0x91, 0xe5, 0x88, 0x86, 0xe9, 0x92,
	0x9f, 0xe5, 0x90, 0x8e, 0xe8, 0xa2, 0xab, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x31, 0x30, 0xe5, 0x88, 0x86, 0xe9, 0x92, 0x9f, 0xfa, 0x42,
	0x08, 0x2a, 0x06, 0x18, 0x80, 0xa3, 0x05, 0x28, 0x3c, 0x52, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0xf9, 0x01, 0x0a, 0x1d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0xb2, 0x01, 0x92, 0x41, 0xa5, 0x01, 0x2a,
	0x1d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x68, 0x6f, 0x6c, 0x64, 0x32, 0x83,
	0x01, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x75, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x2c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xef, 0xbc, 0x8c, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9,
	0x87, 0x8f, 0xe4, 0xbd, 0x8e, 0xe4, 0xba, 0x8e, 0xe5, 0xa4, 0x9a, 0xe5, 0xb0, 0x91, 0xe7, 0x99,
	0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0xe5, 0x88, 0xa4, 0xe5, 0xae, 0x9a, 0xe4, 0xb8, 0xba,
	0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb2, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4,
	0xb8, 0xba, 0x35, 0x30, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x50, 0x28, 0x00, 0x52, 0x1d, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x8c, 0x01, 0x0a,
	0x19, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x4e, 0x92, 0x41, 0x4b, 0x2a, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x32, 0x2e, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe6, 0x9c, 0x89, 0xe6, 0x9c, 0xac, 0xe5, 0x9c,
	0xb0, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x74, 0x72, 0x75, 0x65,
	0x52, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x17,
	0x73, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x50, 0x6f, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x63, 0x92,
	0x41, 0x60, 0x2a, 0x17, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x64, 0x73, 0x32, 0x45, 0xe5, 0xbf, 0xbd,
	0xe7, 0x95, 0xa5, 0x6b, 0x75, 0x62, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x4e,
	0x53, 0xe4, 0xb8, 0x8b, 0xe9, 0x9d, 0x9e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe7, 0x9a, 0x84, 0x50, 0x6f, 0x64, 0xe7, 0x9a, 0x84, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x17, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x1b,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x4f, 0x92, 0x41, 0x4c, 0x2a, 0x1b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0x2d, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0x44, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xae, 0xa1,
	0xe7, 0xae, 0x97, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x1b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x73, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x8c, 0x01, 0x0a, 0x13, 0x6f, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x5a, 0x92,
	0x41, 0x4c, 0x2a, 0x13, 0x6f, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x35, 0x6f, 0x6b, 0x2d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x2d, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c,
	0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42,
	0x08, 0x2a, 0x06, 0x18, 0x80, 0xc4, 0x13, 0x28, 0x00, 0x52, 0x13, 0x6f, 0x6b, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xdb,
	0x01, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x9c, 0x01, 0x92, 0x41, 0x8f, 0x01, 0x2a, 0x19, 0x6d, 0x61, 0x78, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x32, 0x72, 0x6d, 0x61, 0x78, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x2c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x80, 0xbb, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x9a, 0x84, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf,
	0x94, 0xef, 0xbc, 0x8c, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe6, 0xad, 0xa4, 0xe9, 0x98, 0x88,
	0xe5, 0x80, 0xbc, 0xe5, 0x88, 0x99, 0xe5, 0x81, 0x9c, 0xe6, 0xad, 0xa2, 0xe8, 0x87, 0xaa, 0xe5,
	0x8a, 0xa8, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x64, 0x28,
	0x00, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x9e, 0x01, 0x0a,
	0x14, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6a, 0x92, 0x41, 0x5b,
	0x2a, 0x14, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x43, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f,
	0x77, 0x6e, 0x2d, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x2c,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbc, 0xa9,
	0xe5, 0xae, 0xb9, 0xe7, 0xad, 0x89, 0xe5, 0xbe, 0x85, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xef,
	0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe7, 0xa7, 0x92, 0xfa, 0x42, 0x09, 0x2a, 0x07,
	0x18, 0x80, 0xa3, 0x05, 0x28, 0xb0, 0x09, 0x52, 0x14, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x36, 0x92, 0x41, 0x2c, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x32, 0x1f, 0x42, 0x43, 0x53, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c,
	0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49,
	0x44, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x32, 0x09, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0xba, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x02, 0x18, 0x14, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12,
	0x82, 0x02, 0x0a, 0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x47, 0x70, 0x75,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0xb5, 0x01, 0x92, 0x41, 0xb1,
	0x01, 0x2a, 0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x47, 0x70, 0x75, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x32, 0x8c, 0x01, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e,
	0x2d, 0x67, 0x70, 0x75, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f,
	0x91, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x98, 0x88,
	0xe5, 0x80, 0xbc, 0x28, 0x47, 0x50, 0x55, 0x29, 0xef, 0xbc, 0x8c, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x87, 0x8f,
	0xe4, 0xbd, 0x8e, 0xe4, 0xba, 0x8e, 0xe5, 0xa4, 0x9a, 0xe5, 0xb0, 0x91, 0xe7, 0x99, 0xbe, 0xe5,
	0x88, 0x86, 0xe6, 0xaf, 0x94, 0xe5, 0x88, 0xa4, 0xe5, 0xae, 0x9a, 0xe4, 0xb8, 0xba, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb2, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba,
	0x35, 0x30, 0x52, 0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x47, 0x70, 0x75,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0xd1, 0x01, 0x0a, 0x13, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x9e, 0x01, 0x92, 0x41, 0x91, 0x01, 0x2a, 0x13, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x32, 0x7a,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x2c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89, 0xa9, 0xe5,
	0xae, 0xb9, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x98, 0x88, 0xe5, 0x80, 0xbc, 0xe7, 0x99,
	0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0xef, 0xbc, 0x8c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x8e, 0x87, 0xe8,
	0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe8, 0xaf, 0xa5, 0xe5, 0x80, 0xbc, 0xef, 0xbc, 0x8c, 0xe5, 0x88,
	0x99, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x20, 0x31, 0x30, 0x30, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18,
	0x64, 0x28, 0x00, 0x52, 0x13, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0xac, 0x01, 0x0a, 0x19, 0x6d, 0x61, 0x78,
	0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6e, 0x92, 0x41,
	0x60, 0x2a, 0x19, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x32, 0x43, 0x6d, 0x61,
	0x78, 0x2d, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x65, 0x63, 0x2c, 0xe7, 0xbc, 0xa9, 0xe5, 0xae,
	0xb9, 0xe6, 0x97, 0xb6, 0xe7, 0xad, 0x89, 0xe5, 0xbe, 0x85, 0x20, 0x50, 0x6f, 0x64, 0x20, 0xe9,
	0x80, 0x80, 0xe5, 0x87, 0xba, 0xe6, 0x9c, 0x80, 0xe9, 0x95, 0xbf, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x18, 0x80, 0xa3, 0x05, 0x28, 0x3c, 0x52, 0x19, 0x6d, 0x61,
	0x78, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6b,
	0x92, 0x41, 0x5d, 0x2a, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x32, 0x4d, 0x73, 0x63, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x2c, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9,
	0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe9, 0x97, 0xb4, 0xe9,
	0x9a, 0x94, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe4, 0xb8, 0xba, 0xe7, 0xa7,
	0x92, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x20, 0x31, 0x30,
	0xfa, 0x42, 0x08, 0x2a, 0x06, 0x18, 0x80, 0xa3, 0x05, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x63, 0x61,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0xaa, 0x01, 0x0a, 0x14, 0x6d, 0x61,
	0x78, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x76, 0x92, 0x41, 0x67, 0x2a, 0x14, 0x6d,
	0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x32, 0x4f, 0x6d, 0x61, 0x78, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0xe7, 0xad, 0x89,
	0xe5, 0xbe, 0x85, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe6,
	0x9c, 0x80, 0xe9, 0x95, 0xbf, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe5, 0x8d,
	0x95, 0xe4, 0xbd, 0x8d, 0xe7, 0xa7, 0x92, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0x20, 0x39, 0x30, 0x30, 0xfa, 0x42, 0x09, 0x2a, 0x07, 0x18, 0x80, 0xa3, 0x05, 0x28, 0x84, 0x07,
	0x52, 0x14, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x74, 0x92, 0x41, 0x65, 0x2a, 0x12, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x4f, 0x6d, 0x61,
	0x78, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x2c, 0xe7, 0xad, 0x89, 0xe5, 0xbe, 0x85, 0xe5, 0x8f, 0x98, 0xe4, 0xb8, 0xba,
	0x72, 0x65, 0x61, 0x64, 0x79, 0xe7, 0x9a, 0x84, 0xe6, 0x9c, 0x80, 0xe9, 0x95, 0xbf, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe7, 0xa7, 0x92,
	0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x20, 0x39, 0x30, 0x30, 0xfa, 0x42, 0x09,
	0x2a, 0x07, 0x18, 0x80, 0xa3, 0x05, 0x28, 0x84, 0x07, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0xc8, 0x01,
	0x0a, 0x18, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x8b, 0x01, 0x92, 0x41, 0x7c, 0x2a, 0x18, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x32, 0x60, 0x6d, 0x61, 0x78, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0xe7,
	0xad, 0x89, 0xe5, 0xbe, 0x85, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x8f, 0x98, 0xe4, 0xb8,
	0xba, 0xe5, 0x8f, 0xaf, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xe7, 0x9a, 0x84, 0xe6, 0x9c, 0x80,
	0xe9, 0x95, 0xbf, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4,
	0xbd, 0x8d, 0xe7, 0xa7, 0x92, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x20, 0x39,
	0x30, 0x30, 0xfa, 0x42, 0x09, 0x2a, 0x07, 0x18, 0x80, 0xa3, 0x05, 0x28, 0x84, 0x07, 0x52, 0x18,
	0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x0f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x55, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x5a, 0x65, 0x72, 0x6f, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x57,
	0x92, 0x41, 0x54, 0x2a, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x46, 0x72, 0x6f, 0x6d,
	0x5a, 0x65, 0x72, 0x6f, 0x32, 0x41, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x75, 0x70, 0x2d, 0x66,
	0x72, 0x6f, 0x6d, 0x2d, 0x7a, 0x65, 0x72, 0x6f, 0x2c, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe8,
	0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x88, 0xe6, 0xb2,
	0xa1, 0xe6, 0x9c, 0x89, 0x20, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe6, 0x97, 0xb6, 0xef, 0xbc, 0x89, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70,
	0x46, 0x72, 0x6f, 0x6d, 0x5a, 0x65, 0x72, 0x6f, 0x12, 0xa9, 0x01, 0x0a, 0x16, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x71, 0x92, 0x41, 0x62, 0x2a, 0x16,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x32, 0x48, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f,
	0x77, 0x6e, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x2d, 0x61,
	0x64, 0x64, 0x2c, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe5, 0x90, 0x8e, 0xe5, 0x88, 0xa4, 0xe6,
	0x96, 0xad, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe9, 0x97,
	0xb4, 0xe9, 0x9a, 0x94, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe7, 0xa7, 0x92,
	0xfa, 0x42, 0x09, 0x2a, 0x07, 0x18, 0x80, 0xa3, 0x05, 0x28, 0xb0, 0x09, 0x52, 0x16, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x12, 0xb1, 0x01, 0x0a, 0x19, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x73, 0x92, 0x41, 0x65, 0x2a, 0x19, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x32, 0x48, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2d,
	0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x2d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2c, 0xe8, 0xbf, 0x9e, 0xe7, 0xbb, 0xad, 0xe4, 0xb8,
	0xa4, 0xe6, 0xac, 0xa1, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe7,
	0xa7, 0x92, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x18, 0x80, 0xa3, 0x05, 0x28, 0x00, 0x52, 0x19, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xd6, 0x01, 0x0a, 0x1a, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x78, 0x92, 0x41, 0x6a,
	0x2a, 0x1a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x32, 0x4c, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2d, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2c, 0xe7, 0xbc, 0xa9,
	0xe5, 0xae, 0xb9, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe5, 0x90, 0x8e, 0xe9, 0x87, 0x8d, 0xe8,
	0xaf, 0x95, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe9, 0x97, 0xb4, 0xe9, 0x9a, 0x94, 0xef, 0xbc,
	0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe7, 0xa7, 0x92, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x18,
	0x80, 0xa3, 0x05, 0x28, 0x3c, 0x52, 0x1a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x12, 0xde, 0x01, 0x0a, 0x16, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x70, 0x75, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0xa5, 0x01, 0x92, 0x41, 0x98, 0x01, 0x2a, 0x16, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x70, 0x75, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x32, 0x7e, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x70, 0x75, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x2c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91,
	0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x98, 0x88, 0xe5,
	0x80, 0xbc, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0xef, 0xbc, 0x8c, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x63, 0x70, 0x75, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0xe7, 0x8e, 0x87, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe8, 0xaf, 0xa5, 0xe5,
	0x80, 0xbc, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89,
	0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x20, 0x31, 0x30,
	0x30, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52, 0x16, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x70, 0x75, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0xde, 0x01, 0x0a, 0x16, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0xa5, 0x01, 0x92, 0x41, 0x98, 0x01, 0x2a, 0x16, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x32, 0x7e, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x2c, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f,
	0x91, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x98, 0x88,
	0xe5, 0x80, 0xbc, 0xe7, 0x99, 0xbe, 0xe5, 0x88, 0x86, 0xe6, 0xaf, 0x94, 0xef, 0xbc, 0x8c, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x6d, 0x65, 0x6d, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x8e, 0x87, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe8, 0xaf, 0xa5,
	0xe5, 0x80, 0xbc, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6,
	0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x20, 0x31,
	0x30, 0x30, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52, 0x16, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x67, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x2a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x32,
	0x22, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x43, 0x41, 0x20, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0xe7, 0x01, 0x0a,
	0x1c, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x85, 0x01, 0x92, 0x41, 0x81, 0x01, 0x2a, 0x1c, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x75, 0x74, 0x6f, 0x66, 0x66, 0x32, 0x61, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7,
	0xe4, 0xbd, 0x8e, 0xe4, 0xba, 0x8e, 0xe6, 0xad, 0xa4, 0xe5, 0x80, 0xbc, 0xe7, 0x9a, 0x84, 0x20,
	0x70, 0x6f, 0x64, 0xef, 0xbc, 0x8c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0xe4, 0xb8,
	0x8d, 0xe4, 0xbc, 0x9a, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9,
	0xef, 0xbc, 0x8c, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x97, 0xb6, 0xe4, 0xbc, 0x9a, 0xe7,
	0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0xe5, 0x80, 0xbc, 0x2d, 0x31, 0x30, 0x52, 0x1c, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12, 0xb0, 0x01, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x50, 0x6f,
	0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x62, 0x92, 0x41, 0x58, 0x2a, 0x12, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x64, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x55, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x32, 0x42, 0x6e, 0x65, 0x77, 0x50,
	0x6f, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0xef, 0xbc,
	0x8c, 0xe6, 0x96, 0xb0, 0x70, 0x6f, 0x64, 0xe5, 0xbb, 0xba, 0xe7, 0xab, 0x8b, 0xe5, 0xa4, 0x9a,
	0xe4, 0xb9, 0x85, 0xe4, 0xb9, 0x8b, 0xe5, 0x90, 0x8e, 0xe6, 0x89, 0x8d, 0xe8, 0xa7, 0xa6, 0xe5,
	0x8f, 0x91, 0x43, 0x41, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x20, 0x30, 0xfa, 0x42,
	0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x64, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x55, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x3a, 0x58, 0x92, 0x41, 0x55, 0x0a, 0x53,
	0x2a, 0x1c, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1d,
	0xe5, 0x90, 0x8c, 0xe6, 0xad, 0xa5, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xd2, 0x01, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x22, 0xa4, 0x03, 0x0a, 0x1d, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x6f,
	0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x69, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x53,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2b, 0x92, 0x41,
	0x28, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x20, 0xe5, 0x90, 0x8c, 0xe6, 0xad, 0xa5, 0xe7,
	0x9a, 0x84, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x79, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a,
	0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x32, 0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xaa, 0x03, 0x0a, 0x1e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x3b, 0x92, 0x41, 0x18, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x32, 0x0b, 0x42, 0x43, 0x53, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x1d,
	0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0xe0, 0x01, 0x0a, 0x07, 0x69, 0x73, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0xc5, 0x01, 0x92, 0x41, 0xc1,
	0x01, 0x2a, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x32, 0xb5, 0x01, 0xe5, 0xbc, 0xba,
	0xe5, 0x88, 0xb6, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0xb3, 0xe4, 0xbd, 0xbf, 0xe6, 0x9c, 0xaa, 0xe6, 0xad, 0xa3, 0xe5,
	0xb8, 0xb8, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xef, 0xbc,
	0x8c, 0xe4, 0xb9, 0x9f, 0xe4, 0xbc, 0x9a, 0xe8, 0xbf, 0x9b, 0xe5, 0x85, 0xa5, 0xe7, 0xbb, 0x88,
	0xe6, 0xad, 0xa2, 0xe3, 0x80, 0x82, 0xe5, 0xaf, 0xb9, 0xe4, 0xba, 0x8e, 0xe8, 0x87, 0xaa, 0xe5,
	0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe7, 0x9a, 0x84,
	0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xe4, 0xb8, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x98, 0xaf, 0xe9,
	0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86, 0xe5, 0xb7, 0xb2, 0xe9, 0x83,
	0xa8, 0xe7, 0xbd, 0xb2, 0xe7, 0x9a, 0x84, 0x43, 0x41, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe3,
	0x80, 0x82, 0x52, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x3a, 0x4a, 0x92, 0x41, 0x47,
	0x0a, 0x45, 0x2a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x17, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0xa9, 0x03, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6c, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x23, 0xe5,
	0xb7, 0xb2, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0x9a, 0x84, 0x41, 0x75, 0x74, 0x6f, 0x53,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9d, 0x83,
	0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xb9, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x18, 0x2a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x0b, 0x42, 0x43, 0x53, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x49, 0x44, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42,
	0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x76,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x5a, 0x92, 0x41, 0x57, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32,
	0x4b, 0x43, 0x41, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe4, 0xba, 0x91, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0xba, 0xe7,
	0xa9, 0xba, 0x3b, 0x20, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe6, 0x97, 0xb6, 0x2c, 0x20, 0xe5,
	0xa4, 0x8d, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0xe4, 0xba, 0x91, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x47, 0x92, 0x41, 0x44, 0x0a, 0x42, 0x2a, 0x1b, 0x47,
	0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x23, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22,
	0xf8, 0x03, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x69, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x9a, 0x84, 0x41, 0x75, 0x74,
	0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x53, 0x92, 0x41, 0x50, 0x0a, 0x4e, 0x2a, 0x1c, 0x47, 0x65,
	0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1d, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa8, 0x04, 0x0a, 0x1c, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6e, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50,
	0x92, 0x41, 0x46, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x39,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0xe6, 0x89, 0x80, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0x49, 0x44, 0xe4, 0xb8, 0xba, 0x42, 0x43,
	0x53, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x5b, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d,
	0x92, 0x41, 0x33, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x26,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0xe6, 0x89, 0x80, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x25, 0x2a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x1a, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe8, 0x80, 0x85, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x14, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x25, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x32, 0x1a, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x18, 0x14, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x3a, 0xa4,
	0x01, 0x92, 0x41, 0xa0, 0x01, 0x0a, 0x9d, 0x01, 0x2a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x7d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xef,
	0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0xa1, 0xab, 0xe5, 0x86, 0x99, 0xe4, 0xba,
	0x86, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xef, 0xbc, 0x8c,
	0xe5, 0x88, 0x99, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x88, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xef, 0xbc, 0x8c, 0xe5, 0xa6,
	0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0x85, 0xa8, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe5, 0x88, 0x99,
	0xe4, 0xb8, 0xba, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x85, 0xa8, 0xe9, 0x87, 0x8f, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22, 0xf1, 0x02, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1d,
	0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a, 0x1d, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2,
	0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x1e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x28, 0x92, 0x41,
	0x25, 0x2a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x1b, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0xa9,
	0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x54,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x36, 0x92, 0x41, 0x2c, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x32, 0x1f, 0x42, 0x43, 0x53, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc,
	0x8c, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x49, 0x44, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x32, 0x09, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0xba, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x14, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x12, 0x3c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x32, 0x11, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe4, 0xba, 0x91, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xa6,
	0x03, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x69, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x9a, 0x84, 0x41,
	0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x79, 0x0a, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa8, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x08, 0x72,
	0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92,
	0x41, 0x1e, 0x2a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x12, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x6f,
	0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a,
	0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x32, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x49, 0x44, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x44,
	0x12, 0x2c, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x03, 0x61, 0x72, 0x6e, 0x32, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x61, 0x72, 0x6e, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x46,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72,
	0x6f, 0x6c, 0x65, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x2a, 0x92, 0x41, 0x27, 0x0a, 0x25, 0x2a, 0x0f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x12,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x22, 0xe8, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x09, 0xe4, 0xba,
	0x91, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x07,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x0b, 0xe4, 0xba, 0x91, 0xe5,
	0x87, 0xad, 0xe8, 0xaf, 0x81, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x79, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x5d, 0x92, 0x41, 0x41, 0x2a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x35, 0x61, 0x77, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x72, 0x6f, 0x6c, 0x65, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe5, 0x8f, 0xaf,
	0xe9, 0x80, 0x89, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0xba, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2c, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x52,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x5e, 0x92,
	0x41, 0x5b, 0x0a, 0x59, 0x2a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1e, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x07, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0xd2, 0x01, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0xd2, 0x01, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc6, 0x02,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x52, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x38, 0x92, 0x41,
	0x35, 0x0a, 0x33, 0x2a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x22, 0x87, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x0c,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2c, 0x92, 0x41, 0x29, 0x2a, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x32, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x11, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x3a, 0x2e, 0x92, 0x41, 0x2b, 0x0a, 0x29, 0x2a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x14, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x22, 0xd3, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x09, 0xe4, 0xba,
	0x91, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x07,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x0b, 0xe4, 0xba, 0x91, 0xe5,
	0x87, 0xad, 0xe8, 0xaf, 0x81, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x3a, 0x42, 0x92, 0x41, 0x3f, 0x0a, 0x3d, 0x2a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x21, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xcf, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x54, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x3d, 0x92, 0x41, 0x3a, 0x0a, 0x38,
	0x2a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1b, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x22, 0xe7, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x32, 0x0c, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23,
	0x92, 0x41, 0x20, 0x2a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x32,
	0x12, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x32, 0x0c, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x3a, 0x1f, 0x92, 0x41, 0x1c, 0x0a, 0x1a, 0x2a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x32, 0x0c, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x22, 0xcc, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x09, 0xe4, 0xba,
	0x91, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x07,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x0b, 0xe4, 0xba, 0x91, 0xe5,
	0x87, 0xad, 0xe8, 0xaf, 0x81, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x3a, 0x3d, 0x92, 0x41, 0x3a, 0x0a, 0x38, 0x2a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0x22, 0xc1, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x38, 0x92, 0x41, 0x35,
	0x0a, 0x33, 0x2a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x22, 0xdf, 0x02, 0x0a, 0x08, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x30, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x32,
	0x0b, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0x49, 0x44, 0x52, 0x06, 0x7a, 0x6f,
	0x6e, 0x65, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x7a, 0x6f,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41,
	0x1b, 0x2a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x32, 0x0c,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x08, 0x7a, 0x6f,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x32, 0x0c, 0xe5, 0x9c, 0xb0,
	0xe5, 0x9f, 0x9f, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4e, 0x75,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x09, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x32, 0x21, 0xe8, 0xaf, 0xa5, 0xe5, 0x8f, 0xaf, 0xe7,
	0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe5, 0xad,
	0x90, 0xe7, 0xbd, 0x91, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x4e, 0x75, 0x6d, 0x3a, 0x20, 0x92, 0x41, 0x1d, 0x0a, 0x1b, 0x2a, 0x08, 0x5a, 0x6f,
	0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x0f, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c,
	0xba, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22, 0xba, 0x06, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1b, 0x92, 0x41, 0x18, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32,
	0x0b, 0xe4, 0xba, 0x91, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41,
	0x1b, 0x2a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x12, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21,
	0x92, 0x41, 0x1e, 0x2a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x32, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x89, 0x88, 0xe6, 0x9c,
	0xac, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x53, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4f, 0x53, 0x32, 0x12, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x93, 0x8d, 0xe4,
	0xbd, 0x9c, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4f, 0x53, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x67, 0x92,
	0x41, 0x64, 0x2a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x32, 0x53, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x28,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8,
	0xad, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe4, 0xb8, 0xad, 0x20, 0x49, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0xe9, 0x97, 0xb2, 0xe7,
	0xbd, 0xae, 0xe4, 0xb8, 0xad, 0x20, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x20, 0xe5,
	0xbc, 0x82, 0xe5, 0xb8, 0xb8, 0x29, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x69, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d, 0x92, 0x41, 0x4a, 0x2a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x3e, 0xe4, 0xba, 0x91, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f,
	0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x28, 0x67, 0x6b, 0x65, 0xe6, 0x94, 0xaf, 0xe6, 0x8c,
	0x81, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab, 0xe5, 0x92, 0x8c,
	0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x29, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x58, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x2a, 0x0c, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x21, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab, 0x28, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0xe3, 0x80,
	0x81, 0x7a, 0x6f, 0x6e, 0x65, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab, 0x29, 0x52, 0x0c, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x28, 0x92, 0x41, 0x25, 0x0a,
	0x23, 0x2a, 0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x32, 0x0f, 0xe4, 0xba, 0x91, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x22, 0x99, 0x03, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x09, 0xe4, 0xba, 0x91, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0x12, 0x38, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x0c, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x02, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92,
	0x41, 0x18, 0x2a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x0b, 0xe4,
	0xba, 0x91, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x02, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x77, 0x0a, 0x11,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0x92, 0x41, 0x46, 0x2a, 0x11, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x32,
	0x31, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0xe4, 0xb8, 0xad, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x49, 0x92, 0x41, 0x46, 0x0a, 0x44, 0x2a, 0x1d, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x23, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82,
	0x22, 0xe6, 0x02, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x5f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1e, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x3a, 0x44, 0x92, 0x41, 0x41, 0x0a, 0x3f, 0x2a, 0x1e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1d, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x22, 0xf2, 0x03, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x2a, 0x07,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x09, 0xe4, 0xba, 0x91, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x44, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32,
	0x0c, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x0b, 0xe4, 0xba, 0x91, 0xe5, 0x87, 0xad,
	0xe8, 0xaf, 0x81, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x73, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x5d, 0x92, 0x41, 0x5a, 0x2a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x32, 0x51, 0xe8, 0xbf, 0x87,
	0xe6, 0xbb, 0xa4, 0xe6, 0x9f, 0x90, 0xe4, 0xb8, 0xaa, 0x76, 0x70, 0x63, 0xe7, 0x9a, 0x84, 0xe5,
	0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x2e, 0x20, 0xe8, 0x8b, 0xa5,
	0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x2c, 0xe5, 0x88, 0x99, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0x9a,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe7,
	0x9a, 0x84, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x05,
	0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x55, 0x92, 0x41, 0x52, 0x2a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x32, 0x49, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0x28, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0xe5, 0x8f, 0xaf, 0xe7, 0x94,
	0xa8, 0x2f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0xe4, 0xb8, 0x8d,
	0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0x29, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x3a, 0x4a, 0x92, 0x41, 0x47, 0x0a, 0x45, 0x2a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x27, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x20, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5,
	0x8c, 0xba, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xd0,
	0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x5a, 0x6f, 0x6e,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x45, 0x92, 0x41, 0x42, 0x0a,
	0x40, 0x2a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x21,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9f, 0x9f, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x22, 0xea, 0x04, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x32, 0x08, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0x49, 0x44, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x44, 0x12, 0x33, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32,
	0x0e, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe5, 0xae, 0xa1, 0xe8, 0xae, 0xa1, 0xe6, 0x97,
	0xa5, 0xe5, 0xbf, 0x97, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0x52, 0x06, 0x6f, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x17, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe5, 0x85, 0xb3,
	0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41,
	0x24, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x17, 0xe6, 0x93,
	0x8d, 0xe4, 0xbd, 0x9c, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0x49, 0x44, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x27, 0x92, 0x41, 0x24, 0x0a, 0x22, 0x2a, 0x0c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x32, 0x12, 0xe6, 0x93, 0x8d, 0xe4,
	0xbd, 0x9c, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe5, 0xae, 0xa1, 0xe8, 0xae, 0xa1, 0x22, 0xd4,
	0x02, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdb, 0x02, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x65, 0x70, 0x4c, 0x6f, 0x67, 0x12, 0x33, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x32, 0x0e, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xe8, 0xae, 0xb0, 0xe5,
	0xbd, 0x95, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x74,
	0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41,
	0x1e, 0x2a, 0x08, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x12, 0xe4, 0xbb, 0xbb,
	0xe5, 0x8a, 0xa1, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52,
	0x08, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x32, 0x18, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe7, 0xad, 0x89, 0xe7,
	0xba, 0xa7, 0x28, 0x49, 0x4e, 0x46, 0x4f, 0x2c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x29, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x0c, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x27, 0x92, 0x41, 0x24, 0x0a,
	0x22, 0x2a, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x32,
	0x12, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe5, 0xae, 0xa1,
	0xe8, 0xae, 0xa1, 0x22, 0xda, 0x07, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x44, 0x32, 0x09, 0xe4, 0xba, 0x91, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x34,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0x92, 0x41, 0x19, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x0f, 0xe4, 0xba, 0x91,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x0b, 0xe4, 0xba, 0x91, 0xe5, 0x87, 0xad, 0xe8,
	0xaf, 0x81, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x50, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92,
	0x41, 0x32, 0x2a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x32, 0x2a, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8,
	0xe5, 0x8c, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0x20, 0x61, 0x70, 0x2d, 0x67, 0x75, 0x61,
	0x6e, 0x67, 0x7a, 0x68, 0x6f, 0x75, 0x2d, 0x31, 0x2c, 0x20, 0x75, 0x73, 0x2d, 0x77, 0x65, 0x73,
	0x74, 0x31, 0x2d, 0x61, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20, 0x52, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x12, 0x44, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x6e, 0x6f, 0x64, 0x65,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x32, 0x0c, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe7, 0xb3,
	0xbb, 0xe5, 0x88, 0x97, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20, 0x52, 0x0a, 0x6e, 0x6f, 0x64,
	0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x03, 0x63, 0x70, 0x75, 0x32, 0x0a,
	0x43, 0x50, 0x55, 0x20, 0xe6, 0xa0, 0xb8, 0xe6, 0x95, 0xb0, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12,
	0x3d, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x25, 0x92, 0x41, 0x22, 0x2a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x32, 0x18, 0xe5, 0x86,
	0x85, 0xe5, 0xad, 0x98, 0xe5, 0xa4, 0xa7, 0xe5, 0xb0, 0x8f, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95,
	0xe4, 0xbd, 0x8d, 0x20, 0x47, 0x42, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x56,
	0x0a, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x92,
	0x41, 0x3d, 0x2a, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x44, 0x32, 0x34, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a,
	0xa1, 0x49, 0x44, 0x2c, 0x20, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe7, 0xa7, 0x81, 0xe6, 0x9c, 0x89,
	0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x52,
	0x05, 0x62, 0x69, 0x7a, 0x49, 0x44, 0x12, 0x51, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x2a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x26, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b,
	0xe6, 0x96, 0xb9, 0x28, 0x79, 0x75, 0x6e, 0x74, 0x69, 0x2f, 0x73, 0x65, 0x6c, 0x66, 0x29, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x8e, 0x01, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x6a, 0x92, 0x41, 0x4f, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x3f, 0xe5, 0xbd, 0x93, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0xe4, 0xb8, 0xba, 0x73, 0x65, 0x6c, 0x66, 0xe6, 0x97, 0xb6, 0x2c, 0x20, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x29, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x52, 0x00, 0x52, 0x06, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x09, 0xe9,
	0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x20, 0x49, 0x44, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x3a, 0x9a, 0x01, 0x92, 0x41, 0x96, 0x01, 0x0a, 0x93, 0x01, 0x2a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x78, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9c,
	0xba, 0xe5, 0x9e, 0x8b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82,
	0xe6, 0x9e, 0x9c, 0xe5, 0xa1, 0xab, 0xe5, 0x86, 0x99, 0xe4, 0xba, 0x86, 0xe7, 0x9b, 0xae, 0xe6,
	0xa0, 0x87, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe7, 0xbb,
	0x84, 0xe5, 0x90, 0x88, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5,
	0x85, 0xa8, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe5, 0x88, 0x99, 0xe4, 0xb8, 0xba, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x85, 0xa8, 0xe9, 0x87, 0x8f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x22, 0xd7, 0x02, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1d, 0x92,
	0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x3a, 0x46, 0x92, 0x41, 0x43, 0x0a, 0x41, 0x2a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd7, 0x0a, 0x0a, 0x0c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92,
	0x41, 0x18, 0x2a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe6, 0x9c,
	0xba, 0xe5, 0x99, 0xa8, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a,
	0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x32, 0x0c, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe7, 0xb3, 0xbb, 0xe5, 0x88, 0x97,
	0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x03,
	0x63, 0x70, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x03,
	0x63, 0x70, 0x75, 0x32, 0x09, 0x63, 0x70, 0x75, 0xe6, 0xa0, 0xb8, 0xe6, 0x95, 0xb0, 0x52, 0x03,
	0x63, 0x70, 0x75, 0x12, 0x3d, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x32, 0x18, 0xe5, 0x86, 0x85, 0xe5, 0xad, 0x98, 0xe5, 0xae, 0xb9, 0xe9, 0x87, 0x8f, 0xef, 0xbc,
	0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0x20, 0x47, 0x42, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x25, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x13, 0x92, 0x41, 0x10, 0x2a, 0x03, 0x67, 0x70, 0x75, 0x32, 0x09, 0x67, 0x70, 0x75, 0xe6, 0xa0,
	0xb8, 0xe6, 0x95, 0xb0, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x73, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92, 0x41, 0x58, 0x2a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x4e, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x8c, 0x53, 0x45, 0x4c, 0x4c, 0xef, 0xbc, 0x9a, 0xe8, 0xa1,
	0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x8f, 0xaf, 0xe8, 0xb4, 0xad,
	0xe4, 0xb9, 0xb0, 0xef, 0xbc, 0x8c, 0x53, 0x4f, 0x4c, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0xef, 0xbc,
	0x9a, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0xb7, 0xb2,
	0xe5, 0x94, 0xae, 0xe7, 0xbd, 0x84, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49,
	0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x32, 0x1b, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0xef,
	0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xef, 0xbc, 0x9a, 0xe5, 0x85, 0x83, 0x52, 0x09,
	0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x7a, 0x6f, 0x6e,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x7a,
	0x6f, 0x6e, 0x65, 0x73, 0x32, 0x12, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe7, 0x9a, 0x84, 0xe5,
	0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0x52, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x12,
	0x71, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x55, 0x92, 0x41, 0x52, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x32, 0x46, 0xe5, 0xaf, 0xb9, 0xe6, 0x8e, 0xa5, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1,
	0xa0, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7, 0x9a, 0x84, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2c, 0x20, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0xaf, 0xe7,
	0x94, 0xa8, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x67, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a,
	0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x32,
	0x2a, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0xe5, 0x92, 0xa8, 0xe8, 0xaf, 0xa2, 0xe6, 0xb1, 0xa0,
	0x49, 0x44, 0x2c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5,
	0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x52, 0x0e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x9f, 0x01, 0x0a, 0x0a,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x65, 0x92, 0x41, 0x62, 0x2a,
	0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x32, 0x54, 0xe6, 0x9c, 0xba,
	0xe5, 0x9e, 0x8b, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe7, 0x9b, 0x98, 0x2c, 0x20, 0xe4, 0xb8,
	0xbb, 0xe8, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x2e, 0x20, 0xe4, 0xbb, 0x85, 0xe4, 0xbb,
	0x85, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xe4, 0xb8, 0xba, 0x73, 0x65, 0x6c, 0x66,
	0xe6, 0x97, 0xb6, 0x2c, 0x20, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe5, 0x85, 0xb3, 0xe6, 0xb3,
	0xa8, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x9c, 0x01,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x64, 0x92, 0x41, 0x61,
	0x2a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x32, 0x54, 0xe6, 0x9c, 0xba,
	0xe5, 0x9e, 0x8b, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0x2c, 0x20, 0xe4, 0xb8,
	0xbb, 0xe8, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x2e, 0x20, 0xe4, 0xbb, 0x85, 0xe4, 0xbb,
	0x85, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xe4, 0xb8, 0xba, 0x73, 0x65, 0x6c, 0x66,
	0xe6, 0x97, 0xb6, 0x2c, 0x20, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe5, 0x85, 0xb3, 0xe6, 0xb3,
	0xa8, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x5a, 0x0a, 0x0e,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x2a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x32, 0x1d, 0xe8, 0xaf, 0xa5, 0xe6, 0x9c,
	0xba, 0xe5, 0x9e, 0x8b, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0xe5, 0xae, 0xb9, 0xe9, 0x87, 0x8f, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x7b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x63, 0x92, 0x41, 0x60, 0x2a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x56, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe6, 0x89, 0x80,
	0xe5, 0x9c, 0xa8, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0x2c, 0x20, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6,
	0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe5, 0x8f, 0xaf, 0xe8,
	0x83, 0xbd, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9f, 0x9f, 0xe7, 0x9a, 0x84, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb5, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x3a, 0x1d, 0x92, 0x41, 0x1a, 0x0a, 0x18, 0x2a, 0x08, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x22, 0xfb, 0x06, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x44, 0x32, 0x09, 0xe4, 0xba, 0x91, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x02, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1b, 0x92, 0x41, 0x18, 0x2a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32,
	0x0b, 0xe4, 0xba, 0x91, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x7b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x63, 0x92, 0x41, 0x60, 0x2a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x32, 0x56, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe6, 0x89, 0x80, 0xe5,
	0x9c, 0xa8, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0x2c, 0x20, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81,
	0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe5, 0x8f, 0xaf, 0xe8, 0x83,
	0xbd, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe5, 0x9c, 0xb0,
	0xe5, 0x9f, 0x9f, 0xe7, 0x9a, 0x84, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb5, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x4a,
	0x92, 0x41, 0x3f, 0x2a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x69, 0x65, 0x73, 0x32, 0x2b, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe6, 0x9c, 0xba,
	0xe5, 0x9e, 0x8b, 0xe7, 0xb3, 0xbb, 0xe5, 0x88, 0x97, 0x2c, 0xe5, 0xbd, 0xa2, 0xe5, 0xa6, 0x82,
	0xef, 0xbc, 0x9a, 0x53, 0x31, 0xe3, 0x80, 0x81, 0x49, 0x31, 0xe3, 0x80, 0x81, 0x4d, 0x31, 0xe7,
	0xad, 0x89, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x05,
	0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12,
	0x2a, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x32, 0x09, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5,
	0x8c, 0xba, 0x52, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x6b, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x84, 0x01, 0x92, 0x41, 0x61, 0x2a, 0x0e, 0x64, 0x69, 0x73, 0x6b, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x4f, 0xe4, 0xbb, 0x98, 0xe8, 0xb4, 0xb9,
	0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe3, 0x80, 0x82, 0xe5, 0x8f, 0x96, 0xe5, 0x80, 0xbc, 0xe8,
	0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xef, 0xbc, 0x9a, 0x50, 0x52, 0x45, 0x50, 0x41, 0x49, 0x44, 0xef,
	0xbc, 0x9a, 0xe9, 0xa2, 0x84, 0xe4, 0xbb, 0x98, 0xe8, 0xb4, 0xb9, 0x3b, 0x20, 0x50, 0x4f, 0x53,
	0x54, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0xef, 0xbc, 0x9a,
	0xe5, 0x90, 0x8e, 0xe4, 0xbb, 0x98, 0xe8, 0xb4, 0xb9, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x52, 0x07,
	0x50, 0x52, 0x45, 0x50, 0x41, 0x49, 0x44, 0x52, 0x10, 0x50, 0x4f, 0x53, 0x54, 0x50, 0x41, 0x49,
	0x44, 0x5f, 0x42, 0x59, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x6b, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x63, 0x70, 0x75,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x20, 0x92, 0x41, 0x16, 0x2a, 0x03, 0x63, 0x70, 0x75,
	0x32, 0x0f, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0x43, 0x50, 0x55, 0xe6, 0xa0, 0xb8, 0xe6, 0x95,
	0xb0, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x3e, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x26, 0x92,
	0x41, 0x1c, 0x2a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x32, 0x12, 0xe5, 0xae, 0x9e, 0xe4,
	0xbe, 0x8b, 0xe5, 0x86, 0x85, 0xe5, 0xad, 0x98, 0xe5, 0xa4, 0xa7, 0xe5, 0xb0, 0x8f, 0xfa, 0x42,
	0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x3a, 0xa2, 0x01,
	0x92, 0x41, 0x9e, 0x01, 0x0a, 0x9b, 0x01, 0x2a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x37, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x4e, 0x6f, 0x64, 0x65, 0xe6, 0x9c, 0xba, 0xe5,
	0x9e, 0x8b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe6, 0x94,
	0xaf, 0xe6, 0x8c, 0x81, 0xe7, 0x9a, 0x84, 0xe7, 0xa3, 0x81, 0xe7, 0x9b, 0x98, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xd2, 0x01, 0x07, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x44, 0xd2, 0x01, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0xd2,
	0x01, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69,
	0x65, 0x73, 0xd2, 0x01, 0x0e, 0x64, 0x69, 0x73, 0x6b, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0xd2, 0x01, 0x03, 0x63, 0x70, 0x75, 0xd2, 0x01, 0x06, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x22, 0xe1, 0x02, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x50, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x44, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x42, 0x1d, 0x92,
	0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x3a, 0x52, 0x92, 0x41, 0x4f, 0x0a, 0x4d, 0x2a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xa3, 0x81,
	0xe7, 0x9b, 0x98, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73,
	0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e,
	0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x44,
	0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x65, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74,
	0x65, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xe5, 0x05, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92,
	0x41, 0x14, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x09, 0xe4, 0xba, 0x91,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x07, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x32, 0x0f, 0xe4, 0xba, 0x91, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0xa6, 0x01, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x8f, 0x01, 0x92, 0x41, 0x6d, 0x2a, 0x08, 0x63, 0x6c, 0x73, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x32, 0x61, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xad, 0x89, 0xe7, 0xba,
	0xa7, 0x28, 0x4c, 0x31, 0x30, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0x30, 0x2d, 0x31, 0x30,
	0x30, 0xe4, 0xb8, 0xaa, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x8c, 0x4c, 0x35, 0x30,
	0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0x30, 0x2d, 0x35, 0x30, 0x30, 0xe4, 0xb8, 0xaa, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x8c, 0x4c, 0x31, 0x30, 0x30, 0x30, 0xe8, 0xa1, 0xa8,
	0xe7, 0xa4, 0xba, 0x35, 0x30, 0x30, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xbb, 0xa5, 0xe4,
	0xb8, 0x8a, 0xe7, 0xad, 0x89, 0x29, 0xfa, 0x42, 0x1c, 0x72, 0x1a, 0x52, 0x04, 0x4c, 0x31, 0x30,
	0x30, 0x52, 0x04, 0x4c, 0x35, 0x30, 0x30, 0x52, 0x05, 0x4c, 0x31, 0x30, 0x30, 0x30, 0x52, 0x05,
	0x4c, 0x32, 0x30, 0x30, 0x30, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1b, 0x92, 0x41, 0x18, 0x2a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32,
	0x0b, 0xe4, 0xba, 0x91, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x05, 0x76, 0x70, 0x63,
	0x49, 0x44, 0x32, 0x0e, 0xe7, 0xa7, 0x81, 0xe6, 0x9c, 0x89, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c,
	0x49, 0x44, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x03, 0x63, 0x70, 0x75,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x03, 0x63, 0x70, 0x75,
	0x32, 0x0a, 0x43, 0x50, 0x55, 0x20, 0xe6, 0xa0, 0xb8, 0xe6, 0x95, 0xb0, 0x52, 0x03, 0x63, 0x70,
	0x75, 0x12, 0x3d, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x32, 0x18,
	0xe5, 0x86, 0x85, 0xe5, 0xad, 0x98, 0xe5, 0xa4, 0xa7, 0xe5, 0xb0, 0x8f, 0xef, 0xbc, 0x8c, 0xe5,
	0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0x20, 0x47, 0x42, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x76, 0x0a, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x60, 0x92, 0x41, 0x5d, 0x2a, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x32, 0x54, 0xe6, 0x8e, 0xa8,
	0xe8, 0x8d, 0x90, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe5, 0xa4, 0x84, 0xe4, 0xba, 0x8e, 0xe8,
	0xaf, 0xa5, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xef, 0xbc, 0x8c, 0xe9, 0x80,
	0x9a, 0xe8, 0xbf, 0x87, 0x2c, 0xe9, 0x9a, 0x94, 0xe5, 0xbc, 0x80, 0xe3, 0x80, 0x82, 0xe8, 0x8b,
	0xa5, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x2c, 0x20, 0xe5, 0x88, 0x99, 0xe5, 0xaf, 0xb9, 0xe5,
	0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe6, 0x97, 0xa0, 0xe8, 0xa6, 0x81, 0xe6, 0xb1,
	0x82, 0x52, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a,
	0x21, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x2a, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x8e, 0xa8, 0xe8,
	0x8d, 0x90, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x22, 0xf4,
	0x02, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x59, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0,
	0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a,
	0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a, 0x22, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18, 0xe6, 0x8e, 0xa8, 0xe8,
	0x8d, 0x90, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x88, 0x03, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x44, 0x32, 0x09, 0xe4, 0xba, 0x91, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x02, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x34, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92,
	0x41, 0x19, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x0f, 0xe4, 0xba, 0x91, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x2a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x31, 0xe4, 0xba, 0x91, 0xe5, 0x87, 0xad, 0xe8, 0xaf,
	0x81, 0x49, 0x44, 0x2c, 0x20, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe6, 0x8c, 0x87, 0xe5, 0xae,
	0x9a, 0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x5b, 0x0a, 0x06, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x39, 0x2a, 0x06, 0x69, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x32, 0x2f, 0xe4, 0xba, 0x91, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x9a, 0x84, 0xe7,
	0xa7, 0x81, 0xe6, 0x9c, 0x89, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0x49, 0x50, 0xe5, 0x9c, 0xb0,
	0xe5, 0x9d, 0x80, 0x2c, 0x20, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x2c, 0xe9, 0x9a, 0x94, 0xe5,
	0xbc, 0x80, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x69, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x3a, 0x3d, 0x92, 0x41, 0x3a, 0x0a, 0x38, 0x2a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x1b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x90, 0x84, 0xe4, 0xb8,
	0xaa, 0xe4, 0xba, 0x91, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x22, 0xe0, 0x02, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x52,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x3a, 0x4f, 0x92, 0x41, 0x4c, 0x0a, 0x4a, 0x2a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xba, 0x91,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xb5, 0x07, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x38, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x32, 0x13,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xba, 0x91, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x44, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x07, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x2a, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x32, 0x11, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0xe4, 0xb8, 0xbb, 0x49, 0x50, 0x52, 0x07, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x12, 0x5b, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41,
	0x34, 0x2a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32,
	0x24, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0xad, 0x97,
	0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4,
	0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x03, 0x63, 0x70, 0x75, 0x32, 0x0f, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0x63, 0x70, 0x75, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x63, 0x70, 0x75,
	0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0x92,
	0x41, 0x19, 0x2a, 0x03, 0x6d, 0x65, 0x6d, 0x32, 0x12, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5,
	0x86, 0x85, 0xe5, 0xad, 0x98, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x6d, 0x65, 0x6d,
	0x12, 0x38, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92,
	0x41, 0x23, 0x2a, 0x03, 0x67, 0x70, 0x75, 0x32, 0x1c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x67,
	0x70, 0x75, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe8, 0x83,
	0xbd, 0xe4, 0xb8, 0xba, 0x30, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x31, 0x0a, 0x03, 0x76, 0x70,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x03, 0x76, 0x70,
	0x63, 0x32, 0x15, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7,
	0x9a, 0x84, 0x56, 0x50, 0x43, 0x20, 0x49, 0x44, 0x52, 0x03, 0x76, 0x70, 0x63, 0x12, 0x5b, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x92,
	0x41, 0x40, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x36, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xef, 0xbc,
	0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0xe5, 0xb9, 0xbf, 0xe5, 0xb7, 0x9e, 0xef, 0xbc, 0x8c,
	0xe6, 0xb7, 0xb1, 0xe5, 0x9c, 0xb3, 0xef, 0xbc, 0x8c, 0xe5, 0x8a, 0xa0, 0xe5, 0xb7, 0x9e, 0xe7,
	0xad, 0x89, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x50, 0x76, 0x36, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x76, 0x36, 0x32, 0x10, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x69, 0x70, 0x76, 0x36, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52,
	0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x76, 0x36, 0x12, 0x45, 0x0a, 0x06, 0x7a, 0x6f,
	0x6e, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x2a,
	0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x32, 0x20, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5,
	0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf,
	0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49,
	0x44, 0x12, 0x3d, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x29, 0x92, 0x41, 0x26, 0x2a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x32, 0x1e, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0x8f,
	0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x40, 0x0a, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x32, 0x15, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5,
	0x8c, 0xba, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x64, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3a, 0x92, 0x41, 0x37,
	0x2a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x32, 0x24, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x98, 0xaf, 0xe8, 0xaf, 0xa5, 0xe4,
	0xba, 0x91, 0xe7, 0x9a, 0x84, 0xe6, 0x9f, 0x90, 0xe4, 0xb8, 0xaa, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f,
	0x9f, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x3a, 0x41, 0x92, 0x41, 0x3e, 0x0a, 0x3c, 0x2a,
	0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x32, 0x2d, 0xe8, 0xae,
	0xb0, 0xe5, 0xbd, 0x95, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0x22, 0xa7, 0x02, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14,
	0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x09, 0xe4, 0xba, 0x91, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x07, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x32, 0x0f, 0xe4, 0xba, 0x91, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92,
	0x41, 0x3e, 0x2a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x31, 0xe4,
	0xba, 0x91, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81, 0x49, 0x44, 0x2c, 0x20, 0xe9, 0x80, 0x9a, 0xe8,
	0xbf, 0x87, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91, 0xe8, 0xb4,
	0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x3a, 0x38, 0x92, 0x41, 0x35,
	0x0a, 0x33, 0x2a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x15,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x22, 0xe9, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x59, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a,
	0x50, 0x92, 0x41, 0x4d, 0x0a, 0x4b, 0x2a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x1b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xba, 0x91, 0xe8, 0xb4,
	0xa6, 0xe5, 0x8f, 0xb7, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x69, 0x92, 0x41, 0x66, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32,
	0x5e, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x28, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe7, 0x9a, 0x84,
	0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0x53,
	0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0xe4, 0xb8, 0xba, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xef, 0xbc, 0x8c, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0xe4,
	0xb8, 0xba, 0xe4, 0xbc, 0xa0, 0xe7, 0xbb, 0x9f, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x29, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbd, 0x02, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14,
	0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x09, 0xe4, 0xba, 0x91, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x32, 0x0f, 0xe4, 0xba, 0x91, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x5f, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x2a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x32, 0x31, 0xe4, 0xba, 0x91, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81, 0x49,
	0x44, 0x2c, 0x20, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7,
	0x9a, 0x84, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x3a, 0x41, 0x92, 0x41, 0x3e, 0x0a, 0x3c, 0x2a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe4, 0xba, 0x91, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe5, 0xb8, 0xa6, 0xe5,
	0xae, 0xbd, 0xe5, 0x8c, 0x85, 0x22, 0xfc, 0x02, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x63, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x29,
	0x92, 0x41, 0x26, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe4, 0xba, 0x91, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe5, 0xb8, 0xa6, 0xe5, 0xae, 0xbd,
	0xe5, 0x8c, 0x85, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a,
	0x53, 0x92, 0x41, 0x50, 0x0a, 0x4e, 0x2a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe4, 0xba, 0x91, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe5, 0xb8, 0xa6, 0xe5, 0xae, 0xbd,
	0xe5, 0x8c, 0x85, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0xb5, 0x04, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x44, 0x32, 0x09, 0xe4, 0xba, 0x91, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12,
	0x34, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1c, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x0f, 0xe4, 0xba,
	0x91, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x0b, 0xe4, 0xba, 0x91, 0xe5, 0x87, 0xad,
	0xe8, 0xaf, 0x81, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0xc7, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0xaa, 0x01, 0x92, 0x41, 0xa6, 0x01, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x32, 0x99, 0x01, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0xe6, 0x8f, 0x90,
	0xe4, 0xbe, 0x9b, 0xe6, 0x96, 0xb9, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0xe5,
	0x80, 0xbc, 0x3a, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x28,
	0xe5, 0x85, 0xac, 0xe5, 0x85, 0xb1, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0x29, 0x2c, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x28, 0xe7, 0xa7, 0x81, 0xe6,
	0x9c, 0x89, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0x29, 0x2c, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44,
	0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x28, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe9, 0x95, 0x9c,
	0xe5, 0x83, 0x8f, 0x29, 0x2c, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x4d, 0x41, 0x47,
	0x45, 0x28, 0xe5, 0xb8, 0x82, 0xe5, 0x9c, 0xba, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0x29, 0x2c,
	0x20, 0x41, 0x4c, 0x4c, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x6b, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d, 0x92,
	0x41, 0x4a, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x3d, 0xe5,
	0xae, 0xb9, 0xe5, 0x99, 0xa8, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0x49, 0x44, 0x2c, 0x20, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x9f, 0x90, 0xe4, 0xb8,
	0xaa, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x3a, 0x38, 0x92, 0x41, 0x35, 0x0a, 0x33, 0x2a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6,
	0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x22, 0xdd, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f,
	0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4f, 0x73, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x56, 0x92, 0x41, 0x53, 0x0a, 0x51,
	0x2a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x73, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x24, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe9, 0x95,
	0x9c, 0xe5, 0x83, 0x8f, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xfa, 0x05, 0x0a, 0x07, 0x4f, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x2a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x32, 0x09, 0xe9, 0x95,
	0x9c, 0xe5, 0x83, 0x8f, 0x20, 0x49, 0x44, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x2e, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x32, 0x0c, 0xe9, 0x95, 0x9c,
	0xe5, 0x83, 0x8f, 0xe5, 0x88, 0xab, 0xe5, 0x90, 0x8d, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x2e, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x32, 0x0f, 0xe9, 0x95, 0x9c, 0xe5, 0x83,
	0x8f, 0x43, 0x50, 0x55, 0xe6, 0x9e, 0xb6, 0xe6, 0x9e, 0x84, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x52, 0x0a, 0x0f, 0x6f, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x0f,
	0x6f, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32,
	0x12, 0xe5, 0xae, 0x9a, 0xe5, 0x88, 0xb6, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x52, 0x0f, 0x6f, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x32, 0x12, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x32, 0x18, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f,
	0xe7, 0xb3, 0xbb, 0xe5, 0x88, 0x97, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x1c, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0x3a, 0x20, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x28, 0xe6, 0xad, 0xa3, 0xe5,
	0xb8, 0xb8, 0x29, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x9a,
	0x01, 0x92, 0x41, 0x96, 0x01, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32,
	0x89, 0x01, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe6, 0x96,
	0xb9, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0xe5, 0x80, 0xbc, 0x3a, 0x20, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x28, 0xe5, 0x85, 0xac, 0xe5,
	0x85, 0xb1, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0x29, 0x2c, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x28, 0xe7, 0xa7, 0x81, 0xe6, 0x9c, 0x89, 0xe9, 0x95,
	0x9c, 0xe5, 0x83, 0x8f, 0x29, 0x2c, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x28, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0x29,
	0x2c, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x28, 0xe5, 0xb8,
	0x82, 0xe5, 0x9c, 0xba, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0x29, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x32, 0x1b, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0xe5, 0x85, 0xb3, 0xe8, 0x81,
	0x94, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x22, 0x92, 0x41, 0x1f, 0x0a,
	0x1d, 0x2a, 0x07, 0x4f, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe6, 0x93, 0x8d, 0xe4,
	0xbd, 0x9c, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0x22, 0x4d,
	0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0xd0, 0x01,
	0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x44, 0x32, 0x09, 0xe4, 0xba, 0x91, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x3a,
	0x3f, 0x92, 0x41, 0x3c, 0x0a, 0x3a, 0x2a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x1b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0xbf, 0x90, 0xe8, 0xa1,
	0x8c, 0xe6, 0x97, 0xb6, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x22, 0xda, 0x03, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x69, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x57, 0x0a, 0x09, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x3a, 0x57, 0x92, 0x41, 0x54, 0x0a, 0x52, 0x2a, 0x1c, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x21, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2a, 0x0a,
	0x0e, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xfd, 0x01, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x09, 0xe4, 0xba, 0x91, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x0f, 0xe4,
	0xba, 0x91, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x0b, 0xe4, 0xba, 0x91, 0xe5, 0x87,
	0xad, 0xe8, 0xaf, 0x81, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x3a, 0x36, 0x92, 0x41, 0x33, 0x0a, 0x31, 0x2a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xba, 0x91, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x22, 0xdb, 0x02, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x4e, 0x92, 0x41, 0x4b, 0x0a, 0x49, 0x2a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe4, 0xba, 0x91, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4e, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb9, 0x03, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x70, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32,
	0x09, 0xe4, 0xba, 0x91, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x02, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x0f, 0xe4, 0xba, 0x91, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x32, 0x0b, 0xe4, 0xba, 0x91, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81, 0x49, 0x44,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x05, 0x76,
	0x70, 0x63, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a,
	0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x32, 0x1e, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x76, 0x70, 0x63, 0xe7, 0x9a, 0x84,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x74, 0x0a,
	0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x43, 0x2a, 0x11, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x32, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0xe4, 0xb8, 0xad,
	0x56, 0x70, 0x63, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x3a, 0x3e, 0x92, 0x41, 0x3b, 0x0a, 0x39, 0x2a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x70, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x21, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xba, 0x91, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0x9a, 0x84, 0x76, 0x70, 0x63, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x22, 0xd5, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x56, 0x70, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x56, 0x70, 0x63, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x50, 0x92, 0x41, 0x4d, 0x0a, 0x4b,
	0x2a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x70, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x21, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4,
	0xba, 0x91, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe7, 0x9a,
	0x84, 0x76, 0x70, 0x63, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x08,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x70, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x70, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x70, 0x76, 0x34, 0x43, 0x69, 0x64, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x76, 0x34, 0x43, 0x69, 0x64, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x70, 0x76, 0x36, 0x43, 0x69, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x70, 0x76, 0x36, 0x43, 0x69, 0x64, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x69,
	0x64, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x43, 0x69, 0x64, 0x72, 0x52, 0x05, 0x63, 0x69, 0x64, 0x72, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x70, 0x4e, 0x75, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x49, 0x70, 0x4e, 0x75, 0x6d, 0x22, 0x3f, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x43, 0x69, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69,
	0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x69,
	0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x86, 0x06, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x44, 0x32, 0x09, 0xe4, 0xba, 0x91, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x02, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41,
	0x19, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x0f, 0xe4, 0xba, 0x91, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x0b, 0xe4, 0xba, 0x91, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81,
	0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x46, 0x0a,
	0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41,
	0x2d, 0x2a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x32, 0x24, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x76, 0x70, 0x63, 0xe7,
	0x9a, 0x84, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x05,
	0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x35, 0x2a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x32, 0x2d,
	0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5,
	0xae, 0x9a, 0x76, 0x70, 0x63, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c,
	0xba, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x08, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x49, 0x44, 0x32, 0x1b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5,
	0xae, 0x9a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0x90, 0xe7, 0xbd,
	0x91, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x12, 0x5e, 0x0a, 0x0d, 0x69,
	0x6e, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x38, 0x92, 0x41, 0x35, 0x2a, 0x0d, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x24, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0xb3,
	0xa8, 0xe5, 0x85, 0xa5, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0d, 0x69, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x74, 0x0a, 0x11, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x43, 0x2a, 0x11, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x2e,
	0x41, 0x7a, 0x75, 0x72, 0x65, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0xe4, 0xb8, 0xad, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x11,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x36, 0x92, 0x41, 0x33, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x2b, 0xe8, 0xbf, 0x87, 0xe6,
	0xbb, 0xa4, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0x6e, 0x61, 0x6d, 0x65, 0xe7, 0x9a,
	0x84, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x40, 0x92,
	0x41, 0x3d, 0x0a, 0x3b, 0x2a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x25, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe4, 0xba, 0x91, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x2c,
	0xe9, 0x80, 0x82, 0xe9, 0x85, 0x8d, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe4, 0xba, 0x91, 0x22,
	0xd7, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1e, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x3a, 0x45, 0x92, 0x41, 0x42, 0x0a, 0x40, 0x2a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2,
	0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x84, 0x06, 0x0a, 0x06, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x32,
	0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x33, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x32, 0x08,
	0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0x49, 0x44, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x49, 0x44, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x69, 0x64, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x09, 0x63, 0x69, 0x64, 0x72, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x32, 0x10, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0x20, 0x49, 0x50, 0x76,
	0x34, 0x20, 0x43, 0x49, 0x44, 0x52, 0x52, 0x09, 0x63, 0x69, 0x64, 0x72, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x69, 0x70, 0x76, 0x36, 0x43, 0x69, 0x64, 0x72, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0d, 0x69,
	0x70, 0x76, 0x36, 0x43, 0x69, 0x64, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x32, 0x10, 0xe5, 0xad,
	0x90, 0xe7, 0xbd, 0x91, 0x20, 0x49, 0x50, 0x76, 0x36, 0x20, 0x43, 0x49, 0x44, 0x52, 0x52, 0x0d,
	0x69, 0x70, 0x76, 0x36, 0x43, 0x69, 0x64, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x0a,
	0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x32, 0x15, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe6, 0x89,
	0x80, 0xe5, 0x9c, 0xa8, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0x52, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0x65, 0x0a, 0x17, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x17, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x32, 0x0d, 0xe5, 0x89, 0xa9, 0xe4, 0xbd, 0x99, 0x20, 0x49, 0x50, 0x20, 0xe6, 0x95,
	0xb0, 0x52, 0x17, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x7a, 0x6f,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41,
	0x21, 0x2a, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x15, 0xe5, 0xad, 0x90,
	0xe7, 0xbd, 0x91, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5,
	0x8c, 0xba, 0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x1b, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe8, 0xa2, 0xab, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4,
	0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x73,
	0x0a, 0x11, 0x68, 0x77, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0x92, 0x41, 0x42, 0x2a, 0x11,
	0x68, 0x77, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49,
	0x44, 0x32, 0x2d, 0xe5, 0x8d, 0x8e, 0xe4, 0xb8, 0xba, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe5,
	0xad, 0x90, 0xe7, 0xbd, 0x91, 0x28, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x20,
	0x4e, 0x65, 0x75, 0x74, 0x72, 0x6f, 0x6e, 0x29, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x49, 0x44,
	0x52, 0x11, 0x68, 0x77, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x44, 0x3a, 0x1b, 0x92, 0x41, 0x18, 0x0a, 0x16, 0x2a, 0x06, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x32, 0x0c, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x22, 0xce, 0x03, 0x0a, 0x1f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x69, 0x64, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x44, 0x32, 0x09, 0xe4, 0xba, 0x91, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92,
	0x41, 0x0f, 0x2a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x32, 0x06, 0xe4, 0xba, 0x91, 0x76, 0x70,
	0x63, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x04, 0x63, 0x69, 0x64,
	0x72, 0x32, 0x13, 0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b, 0xe7, 0x9a, 0x84, 0x63, 0x69, 0x64, 0x72,
	0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x3b, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41,
	0x19, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x0f, 0xe4, 0xba, 0x91, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x02, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41,
	0x18, 0x2a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x0b, 0xe4, 0xba,
	0x91, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x5b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2d, 0x92, 0x41, 0x2a, 0x2a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x15, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x20, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x11,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x3a, 0x3e, 0x92, 0x41, 0x3b, 0x0a, 0x39, 0x2a, 0x1f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x69, 0x64, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x56,
	0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x16, 0x76, 0x70, 0x63, 0xe7, 0x9a,
	0x84, 0x63, 0x69, 0x64, 0x72, 0xe5, 0x86, 0xb2, 0xe7, 0xaa, 0x81, 0xe6, 0xa3, 0x80, 0xe6, 0xb5,
	0x8b, 0x22, 0xe6, 0x02, 0x0a, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x69, 0x64, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x70, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32,
	0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe5, 0x86,
	0xb2, 0xe7, 0xaa, 0x81, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x3a, 0x58, 0x92, 0x41, 0x55, 0x0a, 0x53, 0x2a, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x69,
	0x64, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x70,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1e, 0xe4, 0xba, 0x91, 0x76, 0x70,
	0x63, 0xe5, 0x86, 0xb2, 0xe7, 0xaa, 0x81, 0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x24, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x69,
	0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x69, 0x64, 0x72, 0x73,
	0x22, 0x92, 0x03, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x44, 0x32, 0x09, 0xe4, 0xba, 0x91, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x02, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x34, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92,
	0x41, 0x19, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x0f, 0xe4, 0xba, 0x91, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x2a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x32, 0xe4, 0xba, 0x91, 0xe5, 0x87, 0xad, 0xe8, 0xaf,
	0x81, 0x49, 0x44, 0x28, 0xe9, 0x9d, 0x9e, 0xe5, 0xbf, 0x85, 0xe4, 0xbc, 0xa0, 0x2c, 0xe5, 0x85,
	0xbc, 0xe5, 0xae, 0xb9, 0xe7, 0xa4, 0xbe, 0xe5, 0x8c, 0xba, 0xe7, 0x89, 0x88, 0xe5, 0x92, 0x8c,
	0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe7, 0x89, 0x88, 0x29, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x65, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x1f, 0x41, 0x7a, 0x75, 0x72, 0x65, 0xe4,
	0xb8, 0xad, 0xe7, 0x9a, 0x84, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x37, 0x92, 0x41,
	0x34, 0x0a, 0x32, 0x2a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x15,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8, 0xe7, 0xbb, 0x84, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x22, 0xe3, 0x02, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x4f, 0x92, 0x41, 0x4c, 0x0a,
	0x4a, 0x2a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1b, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8, 0xe7, 0xbb, 0x84, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x81, 0x03, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x44, 0x32, 0x09, 0xe4, 0xba, 0x91, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x02, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x34, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92,
	0x41, 0x19, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x0f, 0xe4, 0xba, 0x91, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x2a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x32, 0xe4, 0xba, 0x91, 0xe5, 0x87, 0xad, 0xe8, 0xaf,
	0x81, 0x49, 0x44, 0x28, 0xe9, 0x9d, 0x9e, 0xe5, 0xbf, 0x85, 0xe4, 0xbc, 0xa0, 0x2c, 0xe5, 0x85,
	0xbc, 0xe5, 0xae, 0xb9, 0xe7, 0xa4, 0xbe, 0xe5, 0x8c, 0xba, 0xe7, 0x89, 0x88, 0xe5, 0x92, 0x8c,
	0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe7, 0x89, 0x88, 0x29, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x65, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x1f, 0x41, 0x7a, 0x75, 0x72, 0x65, 0xe4,
	0xb8, 0xad, 0xe7, 0x9a, 0x84, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x31, 0x92, 0x41,
	0x2e, 0x0a, 0x2c, 0x2a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe5, 0xaf, 0x86, 0xe9, 0x92, 0xa5, 0xe5, 0xaf, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x22,
	0xc9, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7,
	0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x42, 0x1d,
	0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x3a, 0x46, 0x92, 0x41, 0x43, 0x0a, 0x41, 0x2a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xaf, 0x86, 0xe9, 0x92, 0xa5, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x07,
	0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x05, 0x4b, 0x65, 0x79,
	0x49, 0x44, 0x32, 0x08, 0xe5, 0xaf, 0x86, 0xe9, 0x92, 0xa5, 0x49, 0x44, 0x52, 0x05, 0x4b, 0x65,
	0x79, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x4b, 0x65, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x32, 0x0c, 0xe5, 0xaf, 0x86, 0xe9, 0x92, 0xa5, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x52, 0x07, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0x92, 0x41, 0x21, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x32, 0x12, 0xe5, 0xaf, 0x86, 0xe9, 0x92, 0xa5, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x1f, 0x92, 0x41, 0x1c, 0x0a, 0x1a, 0x2a, 0x07, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x32, 0x0f, 0xe5, 0xaf, 0x86, 0xe9, 0x92, 0xa5, 0xe5, 0xaf, 0xb9, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x22, 0xa9, 0x0c, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x8b, 0x01, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x67, 0x92, 0x41, 0x64, 0x2a, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x54, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0xe5, 0x80,
	0xbc, 0x3a, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x61, 0x75, 0x74, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2c, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x76, 0x70, 0x63, 0x2c, 0x20,
	0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2c, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x44, 0x32, 0x08, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x49, 0x44, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x12, 0x50, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x32, 0x92, 0x41, 0x2f,
	0x2a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x22, 0xe5, 0xbc, 0x80,
	0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c, 0x47, 0x4d, 0x54, 0x20,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xef, 0xbc, 0x8c, 0xe7, 0xa7, 0x92, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x30, 0x92, 0x41, 0x2d,
	0x2a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x22, 0xe7, 0xbb, 0x93, 0xe6, 0x9d,
	0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c, 0x47, 0x4d, 0x54, 0x20, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0xef, 0xbc, 0x8c, 0xe7, 0xa7, 0x92, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x32, 0x0c, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa,
	0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0x92, 0x41, 0x0e,
	0x2a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x32, 0x06, 0xe9, 0xa1, 0xb5, 0xe7, 0xa0, 0x81, 0xfa, 0x42,
	0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2b, 0x92, 0x41, 0x28,
	0x2a, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x32, 0x1e, 0xe5, 0x8f, 0xaa, 0xe5, 0xb1, 0x95,
	0xe7, 0xa4, 0xba, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67,
	0x73, 0x20, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x80, 0x01, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x4e, 0x75, 0x6c, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x60, 0x92, 0x41, 0x5d, 0x2a, 0x0a, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x4e, 0x75, 0x6c, 0x6c, 0x32, 0x4f, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x2c, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe7, 0x9a, 0x84, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0x3b,
	0x20, 0xe5, 0xbd, 0x93, 0xe4, 0xb8, 0xba, 0x74, 0x72, 0x75, 0x65, 0xe6, 0x97, 0xb6, 0x2c, 0xe4,
	0xb8, 0x8d, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0xe4, 0xb8,
	0xba, 0xe7, 0xa9, 0xba, 0xe7, 0x9a, 0x84, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x4e,
	0x75, 0x6c, 0x6c, 0x12, 0x5d, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x2f, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8,
	0xba, 0xe7, 0xa9, 0xba, 0x2c, 0x20, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe7, 0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0xe7, 0x9a, 0x84, 0xe6, 0x93, 0x8d, 0xe4, 0xbd,
	0x9c, 0xe5, 0xae, 0xa1, 0xe8, 0xae, 0xa1, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x5d, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x2f, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba,
	0xe7, 0xa9, 0xba, 0x2c, 0x20, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0xe7, 0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0xe7, 0x9a, 0x84, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c,
	0xe5, 0xae, 0xa1, 0xe8, 0xae, 0xa1, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x20,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x2c, 0x20, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe7, 0xad, 0x9b, 0xe9, 0x80, 0x89,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x32, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae,
	0xa4, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x2c, 0x20, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe7, 0xad, 0x9b, 0xe9, 0x80, 0x89, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x02, 0x76, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x02, 0x76, 0x32, 0x32, 0x1d, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x76, 0x32, 0xe7, 0x9a, 0x84, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x02, 0x76, 0x32, 0x12, 0x44, 0x0a,
	0x06, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92,
	0x41, 0x29, 0x2a, 0x06, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x1f, 0xe9, 0x80, 0x9a, 0xe8,
	0xbf, 0x87, 0x2c, 0xe9, 0x9a, 0x94, 0xe5, 0xbc, 0x80, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0xe8,
	0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x52, 0x06, 0x69, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x2a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x32, 0x2f, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x2c, 0x20,
	0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xbb, 0xb4, 0xe5,
	0xba, 0xa6, 0xe7, 0x9a, 0x84, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe5, 0xae, 0xa1, 0xe8, 0xae,
	0xa1, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x60, 0x0a, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x92, 0x41, 0x41,
	0x2a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x35, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x2c, 0x20, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe7, 0xbb, 0xb4, 0xe5,
	0xba, 0xa6, 0xe7, 0x9a, 0x84, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe5, 0xae, 0xa1, 0xe8, 0xae,
	0xa1, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x48, 0x92, 0x41, 0x45, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x32, 0x35, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe7,
	0xa9, 0xba, 0x2c, 0x20, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe7, 0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0xe7, 0x9a, 0x84, 0xe6,
	0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe5, 0xae, 0xa1, 0xe8, 0xae, 0xa1, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x6f, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x06,
	0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x32, 0x1d, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8,
	0xba, 0xe7, 0xa9, 0xba, 0x2c, 0x20, 0xe5, 0x8f, 0x91, 0xe8, 0xb5, 0xb7, 0xe8, 0x80, 0x85, 0xe7,
	0xad, 0x9b, 0xe9, 0x80, 0x89, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x3a, 0x3f, 0x92,
	0x41, 0x3c, 0x0a, 0x3a, 0x2a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1e,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe6, 0x97, 0xa5, 0xe5,
	0xbf, 0x97, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xe9,
	0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32, 0x21, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe4,
	0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0xe7, 0x9a, 0x84, 0xe6, 0x93,
	0x8d, 0xe4, 0xbd, 0x9c, 0xe5, 0xae, 0xa1, 0xe8, 0xae, 0xa1, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x52, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x08, 0x73, 0x74, 0x65, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x32, 0x27, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a,
	0xa1, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe7, 0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0xe7, 0x9a, 0x84,
	0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe5, 0xae, 0xa1, 0xe8, 0xae, 0xa1, 0x52, 0x08, 0x73, 0x74,
	0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x32,
	0x06, 0xe9, 0xa1, 0xb5, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1f, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32,
	0x0c, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04,
	0x2a, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x4d, 0x92, 0x41, 0x4a,
	0x0a, 0x48, 0x2a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x24, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe6,
	0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xd2, 0x01, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x96, 0x02, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7,
	0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xad, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54,
	0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c,
	0x92, 0x41, 0x39, 0x2a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32, 0x2f, 0xe9, 0xbb, 0x98,
	0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x2c, 0x20, 0xe8, 0xbf, 0x87, 0xe6, 0xbb,
	0xa4, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0xe7, 0x9a, 0x84,
	0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe5, 0xae, 0xa1, 0xe8, 0xae, 0xa1, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x3a, 0x3d, 0x92, 0x41, 0x3a, 0x0a, 0x38, 0x2a, 0x16, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a,
	0xa1, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0x22, 0x8e, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x54,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x9c, 0x02, 0x0a, 0x17, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x72, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x5a, 0x92, 0x41, 0x57, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x4d, 0xe4,
	0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0x28, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x2c, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x68, 0x61, 0x6c,
	0x66, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x2c, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x29, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x74, 0x65, 0x70, 0x42, 0x58, 0x92, 0x41, 0x55, 0x2a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x32, 0x4d,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0x28, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x6c, 0x6f, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x2c, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x68, 0x61,
	0x6c, 0x66, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x2c, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x29, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x22, 0xbb, 0x04, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x74, 0x65, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32,
	0x0c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x32, 0x1a, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0x28, 0xe5, 0x90, 0x8c, 0xe4, 0xb8, 0x8a, 0x29, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x15, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5,
	0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x15, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1,
	0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x74, 0x65, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x15, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1,
	0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5f, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x6b,
	0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x2a, 0x09, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x70, 0x32, 0x31, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d,
	0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0x2c, 0xe7,
	0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0xae, 0x52, 0x09, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x53, 0x6b, 0x69, 0x70, 0x12, 0x79, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x59, 0x92, 0x41, 0x56, 0x2a,
	0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x74, 0x72, 0x79, 0x32, 0x48, 0xe5, 0xbd, 0x93,
	0xe5, 0x89, 0x8d, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe9, 0x87, 0x8d, 0xe8, 0xaf,
	0x95, 0x28, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe9, 0x83, 0xbd, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb,
	0xa5, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0x29, 0x2c, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5,
	0x86, 0x85, 0xe7, 0xbd, 0xae, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x22, 0xbd, 0x01, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x53, 0x74, 0x65, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x03, 0x6c, 0x6f, 0x67, 0x32,
	0x0f, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe8, 0xa1, 0x8c, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9,
	0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x32, 0x09, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0xe6, 0x88, 0xb3, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x41,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92,
	0x41, 0x28, 0x2a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x1f, 0xe6, 0x97, 0xa5, 0xe5, 0xbf,
	0x97, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x28, 0x49, 0x4e, 0x46, 0x4f, 0x2c, 0x20, 0x57, 0x41,
	0x52, 0x4e, 0x2c, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x29, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0xaf, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x12,
	0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe6, 0x95, 0xb0, 0xe9,
	0x87, 0x8f, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x32, 0x0c, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0xe1, 0x06, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x44, 0x32, 0x09, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x20, 0x49, 0x44, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22,
	0x2a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32, 0x18, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1,
	0x20, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7,
	0xa9, 0xba, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x0c, 0xe6, 0x97, 0xa5, 0xe5, 0xbf,
	0x97, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x32, 0x09, 0xe6,
	0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x8f, 0x91, 0xe7, 0x94, 0x9f, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x56, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x32, 0x21,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9,
	0xba, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x37, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x0c, 0xe4,
	0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x74, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x4f, 0x92, 0x41,
	0x4c, 0x2a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x74, 0x72, 0x79, 0x32, 0x3e, 0xe5,
	0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe8, 0xaf, 0xa5, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe6, 0x98,
	0xaf, 0xe5, 0xbc, 0x82, 0xe6, 0xad, 0xa5, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x2c, 0x20, 0xe6,
	0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0x52, 0x0a, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x6c, 0x0a, 0x09, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x53, 0x6b, 0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x4e, 0x92, 0x41,
	0x4b, 0x2a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x70, 0x32, 0x3e, 0xe5, 0xa6,
	0x82, 0xe6, 0x9e, 0x9c, 0xe8, 0xaf, 0xa5, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe6, 0x98, 0xaf,
	0xe5, 0xbc, 0x82, 0xe6, 0xad, 0xa5, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x2c, 0x20, 0xe6, 0x8e,
	0xa7, 0xe5, 0x88, 0xb6, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0x52, 0x09, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x70, 0x22, 0x94, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x59, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xad,
	0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x34, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e,
	0x92, 0x41, 0x1b, 0x2a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x12, 0xe6, 0x93, 0x8d, 0xe4,
	0xbd, 0x9c, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70,
	0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xb3,
	0x02, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x6f, 0x67, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x32, 0x08, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x73, 0x74, 0x65, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0x52, 0x08, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28,
	0x2a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x1f, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe7,
	0xad, 0x89, 0xe7, 0xba, 0xa7, 0x28, 0x49, 0x4e, 0x46, 0x4f, 0x2c, 0x20, 0x57, 0x41, 0x52, 0x4e,
	0x2c, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x29, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x0c,
	0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x8f, 0x91, 0xe7,
	0x94, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xd5, 0x03, 0x0a, 0x19, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x44, 0x62,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x68, 0x92, 0x41, 0x4c, 0x2a, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x32, 0x40, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x2c, 0x20, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe6, 0x94, 0xaf,
	0xe6, 0x8c, 0x81, 0x74, 0x61, 0x73, 0x6b, 0x2c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0xe7, 0xad, 0x89, 0xe8, 0xa1, 0xa8, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x52, 0x04, 0x74, 0x61, 0x73,
	0x6b, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x6f, 0x67, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x2a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0f, 0xe5, 0xbc,
	0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0f, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x3a, 0xb8, 0x01, 0x92, 0x41, 0xb4, 0x01, 0x0a, 0xb1, 0x01, 0x2a, 0x19, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x44, 0x62, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x93, 0x01, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0xe5, 0xba, 0x93, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x2c, 0x20, 0xe6, 0x94, 0xaf, 0xe6,
	0x8c, 0x81, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x9f, 0x90, 0xe4, 0xb8, 0xaa, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0xae, 0xb5, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95,
	0x2c, 0x20, 0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe4, 0xb8,
	0x8d, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x31, 0xe5, 0xb9,
	0xb4, 0xe3, 0x80, 0x82, 0xe4, 0xb8, 0x94, 0xe4, 0xb8, 0x8d, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8,
	0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86, 0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91, 0x33, 0xe4, 0xb8, 0xaa,
	0xe6, 0x9c, 0x88, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x22, 0xbb, 0x01, 0x0a,
	0x1a, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x44, 0x62, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9f, 0x02, 0x0a, 0x0d, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x4b, 0x0a, 0x0f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x32, 0x0b, 0xe5, 0xae, 0x89,
	0xe5, 0x85, 0xa8, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x55, 0x0a, 0x11, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe5, 0xae,
	0x89, 0xe5, 0x85, 0xa8, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x11, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x43, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x0f, 0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8, 0xe7,
	0xbb, 0x84, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x25, 0x92, 0x41, 0x22, 0x0a, 0x20, 0x2a, 0x0d, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x0f, 0xe5, 0xae, 0x89,
	0xe5, 0x85, 0xa8, 0xe7, 0xbb, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22, 0x95, 0x01, 0x0a,
	0x13, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x66, 0x61, 0x69,
	0x6c, 0x12, 0x41, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x4f, 0x0a, 0x17, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xfd, 0x05, 0x0a, 0x10, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7b, 0x0a, 0x08, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x50, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x5f, 0x92, 0x41,
	0x5c, 0x2a, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x73, 0x32, 0x50, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0x92, 0x8c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xba, 0x8c, 0xe9, 0x80, 0x89, 0xe4,
	0xb8, 0x80, 0xef, 0xbc, 0x8c, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x08, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x73, 0x12, 0x56, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x2e, 0x2a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x21, 0x70, 0x6f, 0x64, 0xe8,
	0xbf, 0x81, 0xe7, 0xa7, 0xbb, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0xe7, 0x9a, 0x84, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x20, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x72, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x5c,
	0x92, 0x41, 0x59, 0x2a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x32, 0x50, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc,
	0x8c, 0xe5, 0x92, 0x8c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91,
	0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xba, 0x8c, 0xe9, 0x80, 0x89, 0xe4, 0xb8,
	0x80, 0xef, 0xbc, 0x8c, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x72, 0x61,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x41, 0x6c,
	0x6c, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x6f, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x6f, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x1f, 0x73, 0x6b, 0x69, 0x70, 0x57,
	0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1f, 0x73, 0x6b, 0x69, 0x70, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x87, 0x02, 0x0a, 0x11, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x53, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x29,
	0x92, 0x41, 0x26, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1e, 0xe9, 0xa9, 0xb1, 0xe9, 0x80,
	0x90, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xc4, 0x02, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x70, 0x6f, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x6f, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x67, 0x72, 0x61, 0x63,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x40,
	0x0a, 0x0c, 0x65, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69,
	0x73, 0x6b, 0x52, 0x0c, 0x65, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b,
	0x12, 0x24, 0x0a, 0x0d, 0x77, 0x69, 0x6c, 0x6c, 0x42, 0x65, 0x45, 0x76, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x77, 0x69, 0x6c, 0x6c, 0x42, 0x65, 0x45,
	0x76, 0x69, 0x63, 0x74, 0x65, 0x64, 0x22, 0x5e, 0x0a, 0x0c, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x69, 0x73, 0x6b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f,
	0x72, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xea, 0x04, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x44, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x7b, 0x0a, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x5f, 0x92, 0x41, 0x5c, 0x2a, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50,
	0x73, 0x32, 0x50, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0x49,
	0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0x92, 0x8c, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4,
	0xba, 0x8c, 0xe9, 0x80, 0x89, 0xe4, 0xb8, 0x80, 0xef, 0xbc, 0x8c, 0xe4, 0xbc, 0x98, 0xe5, 0x85,
	0x88, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x52, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x73, 0x12, 0x56, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x38, 0x92, 0x41, 0x2e, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x32, 0x21, 0x70, 0x6f, 0x64, 0xe8, 0xbf, 0x81, 0xe7, 0xa7, 0xbb, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x72, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x5c, 0x92, 0x41, 0x59, 0x2a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x32, 0x50, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0x92, 0x8c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xba,
	0x8c, 0xe9, 0x80, 0x89, 0xe4, 0xb8, 0x80, 0xef, 0xbc, 0x8c, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x67, 0x72, 0x61,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x64, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f,
	0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x76, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x88, 0x02, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x72, 0x61,
	0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x89,
	0x02, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x32, 0x0c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x77, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x12, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe6, 0xb3, 0xa8, 0xe8, 0xa7, 0xa3, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x01, 0x0a, 0x1c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35,
	0x92, 0x41, 0x2b, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x1e,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5,
	0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x4e, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x32, 0x0c, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0xdf, 0x02, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x50, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x3a, 0x4d, 0x92, 0x41, 0x4a, 0x0a, 0x48, 0x2a, 0x1d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x16, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x3e, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x32, 0x0c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x5e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x32, 0x12, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa0, 0x87, 0xe7,
	0xad, 0xbe, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x01, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x32, 0x0c, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x2b, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x1e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0xd0, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x43, 0x92, 0x41, 0x40, 0x0a, 0x3e, 0x2a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x11, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x09, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x18, 0x2a,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x42,
	0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x32, 0x12, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa1, 0xe7, 0x82, 0xb9, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x42, 0x18,
	0x92, 0x41, 0x15, 0x2a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x32, 0x0c, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x53, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x2b, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x32, 0x1e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x22, 0xd1, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x50, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x3a, 0x44, 0x92, 0x41, 0x41, 0x0a, 0x3f, 0x2a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x2e, 0x92, 0x41, 0x2b, 0x0a, 0x29,
	0x2a, 0x0d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x18, 0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7, 0xe6, 0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0xe6, 0x8e, 0xa5,
	0xe5, 0x8f, 0xa3, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0x86, 0x02, 0x0a, 0x0e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25,
	0x2a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x18, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x28, 0x74, 0x72, 0x75, 0x65, 0x2f, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x29, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x3a, 0x40, 0x92, 0x41, 0x3d, 0x0a, 0x3b, 0x2a, 0x0e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18, 0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7, 0xe6,
	0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32,
	0x06, 0xe4, 0xba, 0x91, 0x20, 0x49, 0x44, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0x3a, 0x40, 0x92, 0x41, 0x3d, 0x0a, 0x3b, 0x2a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x1e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xe6, 0xa8, 0xa1, 0xe5, 0x9e, 0x8b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0x22, 0xac, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x06,
	0xe4, 0xba, 0x91, 0x20, 0x49, 0x44, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12,
	0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x33, 0x92, 0x41,
	0x30, 0x0a, 0x2e, 0x2a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xa8, 0xa1, 0xe5, 0x9e,
	0x8b, 0x22, 0xc0, 0x03, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x42,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x32, 0x08, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x32,
	0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x12, 0xe5,
	0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41,
	0x1a, 0x2a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x32, 0x0b,
	0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x9b, 0x86, 0x49, 0x44, 0x52, 0x0a, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19,
	0x2a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x32, 0x0b, 0xe4, 0xba,
	0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x49, 0x44, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x3a, 0x41, 0x92, 0x41, 0x3e, 0x0a, 0x3c, 0x2a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x65, 0x72, 0x6d, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x44, 0x61, 0x74, 0x61, 0x32, 0x1e, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x8b, 0xe6, 0x96, 0x87, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x22, 0x94, 0x02, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65,
	0x72, 0x6d, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x32, 0x0e, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x68,
	0x0a, 0x08, 0x70, 0x65, 0x72, 0x6d, 0x5f, 0x63, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x42, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x42, 0x21, 0x92, 0x41,
	0x1e, 0x2a, 0x08, 0x70, 0x65, 0x72, 0x6d, 0x5f, 0x63, 0x74, 0x78, 0x32, 0x12, 0xe6, 0x9d, 0x83,
	0xe9, 0x99, 0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x6d, 0x43, 0x74, 0x78, 0x3a, 0x51, 0x92, 0x41, 0x4e, 0x0a, 0x4c, 0x2a,
	0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0xd2, 0x01, 0x08, 0x70, 0x65, 0x72, 0x6d, 0x5f, 0x63, 0x74, 0x78, 0x22, 0x91, 0x01, 0x0a, 0x05,
	0x50, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x1a, 0x50, 0x0a,
	0x0a, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x91, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x42, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x73, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x92, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x1f, 0x92, 0x41, 0x1c, 0x0a, 0x1a, 0x2a, 0x0a,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x32, 0x0c, 0xe9, 0x80, 0x9a, 0xe7,
	0x94, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xa3, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x3a, 0x29, 0x92, 0x41, 0x26, 0x0a, 0x24, 0x2a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0x12, 0xe9, 0x80, 0x9a, 0xe7,
	0x94, 0xa8, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0x4c,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x4b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x3a, 0x36, 0x92, 0x41, 0x33, 0x0a, 0x31, 0x2a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x4b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x1b, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0x99, 0x04, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x43, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xbd, 0x01, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x9e, 0x01, 0x92, 0x41, 0x80,
	0x01, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x73, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x8b, 0x89,
	0xe5, 0x8e, 0xbb, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe7,
	0x9a, 0x84, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x8b, 0x93, 0xe6, 0x89, 0x91, 0xe3, 0x80,
	0x82, 0xe5, 0xbd, 0x93, 0xe4, 0xb8, 0xba, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x88, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xe6, 0x97, 0xb6, 0xe4, 0xbc, 0x9a, 0xe6, 0x8b, 0x89, 0xe5, 0x8f,
	0x96, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x62, 0x69, 0x7a, 0x49, 0x44, 0xe5, 0xaf, 0xb9, 0xe5,
	0xba, 0x94, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x8b, 0x93, 0xe6, 0x89,
	0x91, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x01, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x91, 0x01, 0x0a, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7b, 0x92, 0x41, 0x78, 0x2a, 0x05, 0x62, 0x69, 0x7a,
	0x49, 0x44, 0x32, 0x6f, 0x63, 0x6d, 0x64, 0x62, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44,
	0x28, 0xe6, 0x9f, 0x90, 0xe4, 0xba, 0x9b, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xe4, 0xb8, 0x8b,
	0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x85, 0xb6, 0xe4,
	0xbb, 0x96, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xe7, 0x9a, 0x84, 0xe6, 0x8b, 0x93,
	0xe6, 0x89, 0x91, 0x29, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe7, 0x9a, 0x84, 0xe6, 0x98, 0xaf, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85,
	0xb3, 0xe8, 0x81, 0x94, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe5, 0x91, 0x98, 0xe6, 0x8b, 0x93,
	0xe6, 0x89, 0x91, 0x52, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x44, 0x12, 0x68, 0x0a, 0x0b, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x92, 0x41, 0x27,
	0x2a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x32, 0x18, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb1, 0x8f, 0xe8, 0x94, 0xbd, 0xe7, 0xa9, 0xba, 0xe9, 0x97,
	0xb2, 0xe6, 0x9c, 0xba, 0xe6, 0xb1, 0xa0, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x3a, 0x42, 0x92, 0x41, 0x3f, 0x0a, 0x3d, 0x2a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x43, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x24, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1,
	0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe6, 0x8b, 0x93, 0xe6,
	0x89, 0x91, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xa9, 0x05, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x42, 0x6b, 0x53, 0x6f, 0x70, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x08,
	0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x49, 0x44, 0x12, 0x5e, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x2a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x33, 0xe8, 0xaf, 0xa5, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0xe5, 0x9c, 0xa8, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe4,
	0xb8, 0x8b, 0xe6, 0x9c, 0x89, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7, 0x9a, 0x84, 0xe6, 0xa8,
	0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x9c, 0x01, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x74, 0x92,
	0x41, 0x58, 0x2a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x32, 0x46, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90,
	0x2c, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe6, 0x88, 0x96, 0xe6, 0x98, 0xaf, 0xe5, 0x85,
	0xac, 0xe5, 0x85, 0xb1, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x52,
	0x08, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x00, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0xf1, 0x01, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0xda, 0x01, 0x92, 0x41, 0xbc, 0x01, 0x2a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x32, 0xb2, 0x01, 0x62, 0x6b, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x20, 0xe6, 0xa3,
	0x80, 0xe7, 0xb4, 0xa2, 0xe7, 0x9a, 0x84, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0xe5, 0x9f, 0x9f,
	0x2e, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x63, 0x6d, 0x64, 0x62, 0x5f,
	0x62, 0x69, 0x7a, 0x2c, 0xe6, 0xad, 0xa4, 0xe6, 0x97, 0xb6, 0xe6, 0xa3, 0x80, 0xe7, 0xb4, 0xa2,
	0xe7, 0x9a, 0x84, 0xe6, 0x98, 0xaf, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0x20,
	0x43, 0x4d, 0x44, 0x42, 0x20, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x20, 0x49, 0x44, 0x20, 0xe4,
	0xb8, 0xba, 0x20, 0x62, 0x6b, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x20, 0xe7, 0x9a, 0x84,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x2c, 0xe5, 0xbd, 0x93, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0xba,
	0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0xe6, 0x97, 0xb6, 0xe5, 0x88, 0x99, 0xe6,
	0xa3, 0x80, 0xe7, 0xb4, 0xa2, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x20, 0x49, 0x44, 0x20, 0xe4,
	0xb8, 0xba, 0x20, 0x62, 0x6b, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x20, 0xe7, 0x9a, 0x84,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x52, 0x08, 0x63, 0x6d, 0x64,
	0x62, 0x5f, 0x62, 0x69, 0x7a, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x00,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x3a, 0x5b, 0x92, 0x41, 0x58, 0x0a, 0x56, 0x2a, 0x1c,
	0x47, 0x65, 0x74, 0x42, 0x6b, 0x53, 0x6f, 0x70, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1e, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xd2, 0x01, 0x0a, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0xd2, 0x01, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0xb9, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x42, 0x6b, 0x53, 0x6f,
	0x70, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x55, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x23,
	0x92, 0x41, 0x20, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d,
	0xbf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x55, 0x92, 0x41, 0x52, 0x0a, 0x50,
	0x2a, 0x1d, 0x47, 0x65, 0x74, 0x42, 0x6b, 0x53, 0x6f, 0x70, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xd2,
	0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xe6, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x22, 0xe4, 0x05, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x42, 0x6b, 0x53, 0x6f, 0x70, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32,
	0x08, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x0a,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x32, 0x08, 0xe6, 0xa8, 0xa1, 0xe6,
	0x9d, 0xbf, 0x49, 0x44, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44,
	0x12, 0x5e, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x32, 0x33, 0xe8, 0xaf, 0xa5, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x9c, 0xa8, 0xe5,
	0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe4, 0xb8, 0x8b, 0xe6, 0x9c,
	0x89, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7, 0x9a, 0x84, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x9c, 0x01, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x74, 0x92, 0x41, 0x58, 0x2a, 0x0e,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x32, 0x46,
	0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0x2c, 0x20, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0xb5,
	0x81, 0xe7, 0xa8, 0x8b, 0xe6, 0x88, 0x96, 0xe6, 0x98, 0xaf, 0xe5, 0x85, 0xac, 0xe5, 0x85, 0xb1,
	0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x52, 0x08, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x00, 0x52,
	0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0xf1, 0x01, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0xda, 0x01, 0x92, 0x41, 0xbc, 0x01, 0x2a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x32, 0xb2, 0x01,
	0x62, 0x6b, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x20, 0xe6, 0xa3, 0x80, 0xe7, 0xb4, 0xa2,
	0xe7, 0x9a, 0x84, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0xe5, 0x9f, 0x9f, 0x2e, 0x20, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x63, 0x6d, 0x64, 0x62, 0x5f, 0x62, 0x69, 0x7a, 0x2c,
	0xe6, 0xad, 0xa4, 0xe6, 0x97, 0xb6, 0xe6, 0xa3, 0x80, 0xe7, 0xb4, 0xa2, 0xe7, 0x9a, 0x84, 0xe6,
	0x98, 0xaf, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0x20, 0x43, 0x4d, 0x44, 0x42,
	0x20, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x20, 0x49, 0x44, 0x20, 0xe4, 0xb8, 0xba, 0x20, 0x62,
	0x6b, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x20, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0x2c, 0xe5, 0xbd, 0x93, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0xba, 0x20, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x20, 0xe6, 0x97, 0xb6, 0xe5, 0x88, 0x99, 0xe6, 0xa3, 0x80, 0xe7, 0xb4,
	0xa2, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x20, 0x49, 0x44, 0x20, 0xe4, 0xb8, 0xba, 0x20, 0x62,
	0x6b, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x20, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x52, 0x08, 0x63, 0x6d, 0x64, 0x62, 0x5f, 0x62, 0x69,
	0x7a, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x00, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x3a, 0x5b, 0x92, 0x41, 0x58, 0x0a, 0x56, 0x2a, 0x1c, 0x47, 0x65, 0x74, 0x42,
	0x6b, 0x53, 0x6f, 0x70, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xd2, 0x01, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x44, 0xd2, 0x01, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x22, 0xd4, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x42, 0x6b, 0x53, 0x6f, 0x70, 0x73, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x32, 0x92, 0x41, 0x2f, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x27, 0xe6, 0xa8, 0xa1,
	0xe6, 0x9d, 0xbf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0x9a, 0x84, 0xe5, 0x85, 0xa8, 0xe5,
	0xb1, 0x80, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x5b, 0x92, 0x41, 0x58, 0x0a,
	0x56, 0x2a, 0x1d, 0x47, 0x65, 0x74, 0x42, 0x6b, 0x53, 0x6f, 0x70, 0x73, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x24, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x85,
	0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6d, 0x0a, 0x12, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x35, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x5f, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0xe8, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41,
	0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x32, 0x0c, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x56, 0x92, 0x41, 0x53, 0x0a,
	0x51, 0x2a, 0x1d, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x30, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe8, 0xbf,
	0x90, 0xe7, 0xbb, 0xb4, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0xae, 0xe6, 0xb8, 0xb2, 0xe6, 0x9f, 0x93,
	0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0x22, 0xcb, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x56, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23,
	0x92, 0x41, 0x20, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d,
	0xbf, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x65, 0x92, 0x41, 0x62, 0x0a, 0x60,
	0x2a, 0x1e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x2d, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe8, 0xbf,
	0x90, 0xe7, 0xbb, 0xb4, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0xae, 0xe6, 0xb8, 0xb2, 0xe6, 0x9f, 0x93,
	0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0xd2,
	0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x79, 0x0a, 0x0d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x66, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd0, 0x05, 0x0a, 0x16,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x6b, 0x53, 0x6f, 0x70, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x16, 0x2a,
	0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x08, 0xe4, 0xb8, 0x9a,
	0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x16, 0x2a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x32, 0x08, 0xe6,
	0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x56, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41,
	0x30, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x24, 0xe6, 0x9c, 0x89,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe8, 0xaf, 0xa5, 0xe6,
	0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe7, 0x9a, 0x84, 0x72, 0x74, 0x78, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x9c, 0x01, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x74, 0x92, 0x41, 0x58,
	0x2a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x32, 0x46, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0x2c, 0x20,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xe6, 0x88, 0x96, 0xe6, 0x98, 0xaf, 0xe5, 0x85, 0xac, 0xe5,
	0x85, 0xb1, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x52, 0x08, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x00, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x88, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x6b, 0x53, 0x6f, 0x70,
	0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a,
	0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x32, 0x27, 0xe6, 0xa0, 0x87, 0xe5, 0x87,
	0x86, 0xe8, 0xbf, 0x90, 0xe7, 0xbb, 0xb4, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0x9a, 0x84,
	0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x1a, 0x3b, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x73, 0x92, 0x41, 0x70, 0x0a, 0x6e,
	0x2a, 0x16, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x6b, 0x53, 0x6f, 0x70, 0x73, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x24, 0xe8, 0xb0, 0x83, 0xe8, 0xaf, 0x95,
	0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe8, 0xbf, 0x90, 0xe7, 0xbb, 0xb4, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xd2, 0x01,
	0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0xd2, 0x01, 0x0a, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0xd2, 0x01, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0xd2, 0x01, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x22, 0xcf,
	0x02, 0x0a, 0x17, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x6b, 0x53, 0x6f, 0x70, 0x73, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x68, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x6b, 0x53, 0x6f, 0x70,
	0x73, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x24, 0xe8, 0xb0, 0x83, 0xe8, 0xaf, 0x95, 0xe6, 0xa0, 0x87, 0xe5,
	0x87, 0x86, 0xe8, 0xbf, 0x90, 0xe7, 0xbb, 0xb4, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x3a, 0x5e, 0x92, 0x41, 0x5b, 0x0a, 0x59, 0x2a, 0x17, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x6b,
	0x53, 0x6f, 0x70, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x2d, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe8, 0xbf,
	0x90, 0xe7, 0xbb, 0xb4, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0xae, 0xe6, 0xb8, 0xb2, 0xe6, 0x9f, 0x93,
	0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0xd2,
	0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x3f, 0x0a, 0x13, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x6b, 0x53, 0x6f, 0x70, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73,
	0x6b, 0x22, 0xef, 0x0b, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x55, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x07, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x44, 0x32, 0x2d, 0x42, 0x43, 0x53, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe6,
	0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6,
	0xe4, 0xb8, 0xb2, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x61, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0x92,
	0x41, 0x44, 0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x39, 0xe4, 0xba, 0x91,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x28, 0xe5, 0xa6, 0x82,
	0x54, 0x4b, 0x45, 0x3a, 0x20, 0x31, 0x2e, 0x32, 0x30, 0x2e, 0x36, 0x2c, 0x31, 0x2e, 0x31, 0x38,
	0x2e, 0x34, 0x2c, 0x31, 0x2e, 0x31, 0x34, 0x2e, 0x33, 0x2d, 0x74, 0x6b, 0x38, 0x73, 0x2c, 0x31,
	0x2e, 0x31, 0x36, 0x2e, 0x33, 0x29, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x85, 0x01, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x69, 0x92, 0x41, 0x66, 0x2a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x44, 0x32, 0x5a, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x28,
	0x4b, 0x75, 0x62, 0x65, 0x41, 0x50, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0xef, 0xbc, 0x8c,
	0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0xef, 0xbc,
	0x8c, 0x45, 0x74, 0x63, 0x64, 0xef, 0xbc, 0x8c, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0xe3,
	0x80, 0x81, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0xe7, 0xad, 0x89, 0x29, 0x52, 0x08, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08,
	0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x09, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xe5, 0x90, 0x8d, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x08, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x73, 0x63, 0x32, 0x0c,
	0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x08, 0x66, 0x6c,
	0x61, 0x67, 0x44, 0x65, 0x73, 0x63, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41,
	0x1f, 0x2a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32,
	0x0f, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x80, 0xbc,
	0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x22,
	0x92, 0x41, 0x1f, 0x2a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x15, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0xe8, 0xaf, 0xa5, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a,
	0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x0f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x32, 0x0f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe8, 0x80, 0x85, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x32,
	0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41,
	0x1a, 0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x74, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0x92, 0x41, 0x55, 0x2a, 0x08,
	0x66, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x32, 0x49, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86,
	0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x2f, 0x62, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x61, 0x70, 0x2f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x73, 0xe7, 0xad, 0x89, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x29, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a,
	0x0d, 0x66, 0x6c, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x0d, 0x66, 0x6c, 0x61, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x18, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0xe7, 0x9a, 0x84, 0xe5, 0x80, 0xbc, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x52, 0x0d, 0x66, 0x6c, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x59, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78, 0x42, 0x27, 0x92, 0x41,
	0x24, 0x2a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x32, 0x1b, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0xe6, 0x80, 0xa7, 0xe6, 0xa0, 0xa1, 0xe9, 0xaa, 0x8c, 0xe8,
	0xa7, 0x84, 0xe5, 0x88, 0x99, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x12, 0x6f, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x2a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x32, 0x30, 0xe8, 0x8b, 0xa5, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe4,
	0xb8, 0xba, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc,
	0x8c, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe8, 0x8c, 0x83,
	0xe5, 0x9b, 0xb4, 0xe5, 0x80, 0xbc, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0xe3, 0x01,
	0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x42, 0xc0, 0x01, 0x92, 0x41, 0xbc, 0x01, 0x2a, 0x0b, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x32, 0xac, 0x01, 0xe5, 0xbd, 0x93, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x44, 0x3d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0xe6, 0x97, 0xb6,
	0x2c, 0x20, 0xe8, 0xaf, 0xa5, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe7, 0x94, 0x9f, 0xe6, 0x95,
	0x88, 0xe3, 0x80, 0x82, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x50, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x20, 0x69, 0x70, 0x76, 0x34, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x64, 0x75, 0x61, 0x6c,
	0x20, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe6, 0x94, 0xaf,
	0xe6, 0x8c, 0x81, 0xe7, 0x9a, 0x84, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xe3, 0x80, 0x82, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac,
	0xa6, 0x5b, 0x2c, 0x5d, 0xe9, 0x9a, 0x94, 0xe5, 0xbc, 0x80, 0xe8, 0x8b, 0xa5, 0xe4, 0xb8, 0xba,
	0xe7, 0xa9, 0xba, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6,
	0x8c, 0x81, 0x69, 0x70, 0x76, 0x34, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x3e, 0x92, 0x41, 0x3b, 0x0a, 0x39, 0x2a, 0x0f, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x32, 0x26, 0xe7, 0x94, 0xa8,
	0xe4, 0xba, 0x8e, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0xe7, 0x9a, 0x84, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0x22, 0xe3, 0x02, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x73, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x66, 0x6c, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6c, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78, 0x52, 0x05, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x12, 0x31, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x44, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x31, 0x0a, 0x0b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d,
	0x61, 0x78, 0x22, 0xe6, 0x04, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x44, 0x32, 0x2d, 0x42, 0x43, 0x53, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe6, 0x94, 0xaf,
	0xe6, 0x8c, 0x81, 0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef,
	0xbc, 0x8c, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8,
	0xb2, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x61, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0x92, 0x41, 0x44,
	0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x39, 0xe4, 0xba, 0x91, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x28, 0xe5, 0xa6, 0x82, 0x54, 0x4b,
	0x45, 0x3a, 0x20, 0x31, 0x2e, 0x32, 0x30, 0x2e, 0x36, 0x2c, 0x31, 0x2e, 0x31, 0x38, 0x2e, 0x34,
	0x2c, 0x31, 0x2e, 0x31, 0x34, 0x2e, 0x33, 0x2d, 0x74, 0x6b, 0x38, 0x73, 0x2c, 0x31, 0x2e, 0x31,
	0x36, 0x2e, 0x33, 0x29, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x66, 0x92, 0x41, 0x5c, 0x2a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x32,
	0x50, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x28, 0x4b, 0x75,
	0x62, 0x65, 0x41, 0x50, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0x4b, 0x75,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0x45,
	0x74, 0x63, 0x64, 0xef, 0xbc, 0x8c, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0xe7, 0xad, 0x89,
	0x29, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x44, 0x12, 0x5f, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x29,
	0x92, 0x41, 0x1e, 0x2a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x12, 0xe7,
	0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x32, 0x15, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x64, 0x92, 0x41, 0x61, 0x0a, 0x5f, 0x2a, 0x1c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x15, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe4, 0xba, 0x91, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xd2, 0x01, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0xd2, 0x01, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44,
	0xd2, 0x01, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xe5, 0x01, 0x0a, 0x1d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x58, 0x92, 0x41, 0x55, 0x0a, 0x53,
	0x2a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x21, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xba, 0x91, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6,
	0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xde, 0x04, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x44, 0x32, 0x2d, 0x42, 0x43, 0x53, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe6, 0x94,
	0xaf, 0xe6, 0x8c, 0x81, 0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4,
	0xb8, 0xb2, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x61, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0x92, 0x41,
	0x44, 0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x39, 0xe4, 0xba, 0x91, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x28, 0xe5, 0xa6, 0x82, 0x54,
	0x4b, 0x45, 0x3a, 0x20, 0x31, 0x2e, 0x32, 0x30, 0x2e, 0x36, 0x2c, 0x31, 0x2e, 0x31, 0x38, 0x2e,
	0x34, 0x2c, 0x31, 0x2e, 0x31, 0x34, 0x2e, 0x33, 0x2d, 0x74, 0x6b, 0x38, 0x73, 0x2c, 0x31, 0x2e,
	0x31, 0x36, 0x2e, 0x33, 0x29, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7b,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x5f, 0x92, 0x41, 0x5c, 0x2a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x32,
	0x50, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x28, 0x4b, 0x75,
	0x62, 0x65, 0x41, 0x50, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0x4b, 0x75,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0x45,
	0x74, 0x63, 0x64, 0xef, 0xbc, 0x8c, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0xe7, 0xad, 0x89,
	0x29, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x5f, 0x0a, 0x08, 0x66,
	0x6c, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x66,
	0x6c, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x29, 0x92, 0x41, 0x1e, 0x2a, 0x08, 0x66, 0x6c,
	0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x12, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0x92, 0x41, 0x21, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x15, 0xe7,
	0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x64,
	0x92, 0x41, 0x61, 0x0a, 0x5f, 0x2a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x15, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0x91, 0xe7, 0xbb,
	0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xd2, 0x01, 0x07, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x44, 0xd2, 0x01, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0xd2, 0x01,
	0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0xd2, 0x01, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0xdf, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x3a, 0x52, 0x92, 0x41, 0x4f, 0x0a, 0x4d, 0x2a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1b, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe4, 0xba, 0x91, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xce, 0x04, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x07, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x2d, 0x42, 0x43, 0x53, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f,
	0xb0, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7,
	0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12, 0x61,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x47, 0x92, 0x41, 0x44, 0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x39, 0xe4,
	0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x28, 0xe5,
	0xa6, 0x82, 0x54, 0x4b, 0x45, 0x3a, 0x20, 0x31, 0x2e, 0x32, 0x30, 0x2e, 0x36, 0x2c, 0x31, 0x2e,
	0x31, 0x38, 0x2e, 0x34, 0x2c, 0x31, 0x2e, 0x31, 0x34, 0x2e, 0x33, 0x2d, 0x74, 0x6b, 0x38, 0x73,
	0x2c, 0x31, 0x2e, 0x31, 0x36, 0x2e, 0x33, 0x29, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x7b, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x5f, 0x92, 0x41, 0x5c, 0x2a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x44, 0x32, 0x50, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x28, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x50, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0xef, 0xbc,
	0x8c, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0xef,
	0xbc, 0x8c, 0x45, 0x74, 0x63, 0x64, 0xef, 0xbc, 0x8c, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74,
	0xe7, 0xad, 0x89, 0x29, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x4f,
	0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x0c, 0x66, 0x6c, 0x61, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x18, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x52, 0x0c, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x32, 0x15, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x3a, 0x64, 0x92, 0x41, 0x61, 0x0a, 0x5f, 0x2a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x15, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe4, 0xba,
	0x91, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xd2, 0x01, 0x07,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0xd2, 0x01, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0xd2, 0x01, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0xd2, 0x01, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xdf, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x52, 0x92, 0x41, 0x4f, 0x0a, 0x4d, 0x2a, 0x1d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1b, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0xe4, 0xba, 0x91, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2,
	0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xca, 0x04, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x07,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x2d, 0x42, 0x43, 0x53, 0xe5, 0xb9, 0xb3, 0xe5,
	0x8f, 0xb0, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97,
	0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x12,
	0x61, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x47, 0x92, 0x41, 0x44, 0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x39,
	0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x28,
	0xe5, 0xa6, 0x82, 0x54, 0x4b, 0x45, 0x3a, 0x20, 0x31, 0x2e, 0x32, 0x30, 0x2e, 0x36, 0x2c, 0x31,
	0x2e, 0x31, 0x38, 0x2e, 0x34, 0x2c, 0x31, 0x2e, 0x31, 0x34, 0x2e, 0x33, 0x2d, 0x74, 0x6b, 0x38,
	0x73, 0x2c, 0x31, 0x2e, 0x31, 0x36, 0x2e, 0x33, 0x29, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x5f, 0x92, 0x41, 0x5c, 0x2a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x44, 0x32, 0x50, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x28, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x50, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0xef,
	0xbc, 0x8c, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0xef, 0xbc, 0x8c, 0x45, 0x74, 0x63, 0x64, 0xef, 0xbc, 0x8c, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65,
	0x74, 0xe7, 0xad, 0x89, 0x29, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12,
	0x4f, 0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x0c, 0x66, 0x6c, 0x61, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x18, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6,
	0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x52, 0x0c, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x32, 0x15, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x3a, 0x62, 0x92, 0x41, 0x5f, 0x0a, 0x5d, 0x2a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x15, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xba, 0x91,
	0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xd2, 0x01, 0x07, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0xd2, 0x01, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0xd2, 0x01, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0xd2, 0x01, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xaf, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x52, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x50, 0x92, 0x41, 0x4d, 0x0a, 0x4b, 0x2a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1b, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe4, 0xba, 0x91, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xdf, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x0b, 0x6e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b,
	0x92, 0x41, 0x38, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x2d, 0x42, 0x43,
	0x53, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe7, 0x9a, 0x84,
	0xe4, 0xba, 0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xb1, 0xe6,
	0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0x52, 0x0b, 0x6e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd,
	0x9c, 0xe4, 0xba, 0xba, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x5a,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x3e, 0x92, 0x41, 0x3b, 0x2a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x32,
	0x2f, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0xe6, 0x88, 0x96,
	0xe5, 0xa4, 0x96, 0xe7, 0xbd, 0x91, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac, 0x2c, 0x20, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0xe5, 0xa4, 0x96, 0xe7, 0xbd, 0x91, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x3a, 0x4e, 0x92, 0x41, 0x4b, 0x0a,
	0x49, 0x2a, 0x1c, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x1b, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9,
	0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xd2, 0x01, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0xcd, 0x03, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x15, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0xe7, 0xbc, 0x96, 0xe7,
	0xa0, 0x81, 0xe7, 0x9a, 0x84, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x82, 0x01, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x37, 0x92,
	0x41, 0x34, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x32, 0x21, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x52, 0x92, 0x41, 0x4f, 0x0a, 0x4d, 0x2a, 0x1d, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1b, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe8, 0x84, 0x9a,
	0xe6, 0x9c, 0xac, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x09, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xca, 0x03, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x40, 0x2a, 0x09, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x33, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0x8c,
	0x83, 0xe5, 0x9b, 0xb4, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x62, 0x69, 0x7a, 0x2f, 0x62,
	0x69, 0x7a, 0x5f, 0x73, 0x65, 0x74, 0x29, 0x2c, 0x20, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe4,
	0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x62, 0x69, 0x7a, 0x52, 0x09, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x43, 0x2a, 0x07, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x64, 0x32, 0x38, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0x8c, 0x83,
	0xe5, 0x9b, 0xb4, 0x49, 0x44, 0x28, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x2f, 0xe4,
	0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe9, 0x9b, 0x86, 0x49, 0x44, 0x29, 0x2c, 0x20, 0xe7, 0x9b, 0xae,
	0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x62, 0x69, 0x7a, 0x52,
	0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0xa2, 0x01, 0x0a, 0x0a, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x81, 0x01,
	0x92, 0x41, 0x7e, 0x2a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x32,
	0x70, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe7, 0x9a, 0x84, 0xe6, 0xa8, 0xa1,
	0xe5, 0x9d, 0x97, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe4,
	0xbc, 0xa0, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x89,
	0x80, 0xe6, 0x9c, 0x89, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x28, 0xe7, 0x9b, 0xae, 0xe5, 0x89,
	0x8d, 0xe4, 0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x20, 0x69, 0x70, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x29, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x40, 0x92,
	0x41, 0x3d, 0x0a, 0x3b, 0x2a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x1b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0xe9, 0xa1, 0xb9, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22,
	0xbc, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x32, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x32, 0x08, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x49, 0x44, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x43,
	0x0a, 0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x64, 0x22, 0xa6, 0x04, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x69, 0x7a, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x61, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x40, 0x2a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x32, 0x33, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0x8c, 0x83, 0xe5,
	0x9b, 0xb4, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x62, 0x69, 0x7a, 0x2f, 0x62, 0x69, 0x7a,
	0x5f, 0x73, 0x65, 0x74, 0x29, 0x2c, 0x20, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0x85,
	0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x62, 0x69, 0x7a, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x43, 0x2a, 0x07, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x64, 0x32, 0x38, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0x8c, 0x83, 0xe5, 0x9b,
	0xb4, 0x49, 0x44, 0x28, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x2f, 0xe4, 0xb8, 0x9a,
	0xe5, 0x8a, 0xa1, 0xe9, 0x9b, 0x86, 0x49, 0x44, 0x29, 0x2c, 0x20, 0xe7, 0x9b, 0xae, 0xe5, 0x89,
	0x8d, 0xe4, 0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x62, 0x69, 0x7a, 0x52, 0x07, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x4d, 0x92, 0x41, 0x4a, 0x2a, 0x08, 0x61,
	0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x32, 0x3e, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe7, 0x9a, 0x84, 0xe6, 0x8b, 0x93, 0xe6, 0x89, 0x91,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x84, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4,
	0xb8, 0xba, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x96, 0x01, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x5d, 0x92, 0x41, 0x5a, 0x2a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x32, 0x4d, 0xe8, 0xa6, 0x81, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8b, 0x93, 0xe6, 0x89,
	0x91, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x84, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xbb, 0x84, 0x28, 0xe7, 0x9b, 0xae,
	0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x62, 0x69, 0x7a, 0xe7,
	0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0xe7, 0x9a, 0x84, 0xe6, 0x8b, 0x93, 0xe6, 0x89, 0x91, 0x29, 0x52,
	0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x40, 0x92, 0x41, 0x3d, 0x0a,
	0x3b, 0x2a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x1b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9,
	0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xbc, 0x02, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x42, 0x69, 0x7a, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x0c, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x37, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92,
	0x41, 0x15, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x32, 0x08, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x47, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x46, 0x0a, 0x08, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x22, 0xdc, 0x07, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x61, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x40, 0x2a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x32, 0x33, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x62, 0x69, 0x7a, 0x2f, 0x62, 0x69, 0x7a, 0x5f, 0x73,
	0x65, 0x74, 0x29, 0x2c, 0x20, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe6, 0x94,
	0xaf, 0xe6, 0x8c, 0x81, 0x62, 0x69, 0x7a, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x60, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x43, 0x2a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x64, 0x32, 0x38, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x49,
	0x44, 0x28, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x2f, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a,
	0xa1, 0xe9, 0x9b, 0x86, 0x49, 0x44, 0x29, 0x2c, 0x20, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe4,
	0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x62, 0x69, 0x7a, 0x52, 0x07, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x29, 0x92, 0x41, 0x1e, 0x2a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x32,
	0x12, 0xe6, 0x8b, 0x93, 0xe6, 0x89, 0x91, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x95, 0xb0,
	0xe7, 0xbb, 0x84, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7c, 0x92,
	0x41, 0x79, 0x2a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x32, 0x68, 0xe6, 0xa8, 0xa1, 0xe7, 0xb3, 0x8a, 0xe6, 0x90, 0x9c, 0xe7, 0xb4, 0xa2, 0xe5,
	0x86, 0x85, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x88, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe5, 0x90,
	0x8c, 0xe6, 0x97, 0xb6, 0xe5, 0xaf, 0xb9, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0x49, 0x50, 0x2f,
	0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe5, 0x90, 0x8d, 0x2f, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c,
	0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x2f, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe6, 0xa8, 0xa1, 0xe7,
	0xb3, 0x8a, 0xe6, 0x90, 0x9c, 0xe7, 0xb4, 0xa2, 0xef, 0xbc, 0x89, 0x52, 0x0d, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x8c, 0x01, 0x0a, 0x05, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x92, 0x41, 0x56, 0x2a, 0x05, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x32, 0x4d, 0xe7, 0xad, 0x9b, 0xe9, 0x80, 0x89, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0xef, 0xbc, 0x9a, 0x61, 0x6c, 0x69, 0x76, 0x65, 0xef, 0xbc, 0x9a, 0x30, 0xe4, 0xb8, 0xba,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0xe5, 0xbc, 0x82, 0xe5, 0xb8, 0xb8, 0xef, 0xbc, 0x8c, 0x31, 0xe4,
	0xb8, 0xba, 0x41, 0x67, 0x65, 0x6e, 0x74, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0xef, 0xbc, 0x8c,
	0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0xa0, 0xe5, 0x88, 0x99, 0xe4, 0xb8, 0x8d, 0xe7, 0xad, 0x9b, 0xe9,
	0x80, 0x89, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x32, 0x25, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe8, 0xb5, 0xb7, 0xe5,
	0xa7, 0x8b, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc,
	0xa0, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x30, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x5d, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x2a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x32, 0x32, 0xe6, 0x8b, 0x89, 0xe5, 0x8f, 0x96, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7,
	0x35, 0x30, 0x30, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0xa0, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x32, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x81, 0x01, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x53, 0x92,
	0x41, 0x50, 0x2a, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x32, 0x3b, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe5, 0x8f, 0xaf,
	0xe7, 0x94, 0xa8, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0xaa, 0xe5,
	0x9c, 0xa8, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0xe4, 0xb8, 0xad, 0xe8, 0xa2, 0xab, 0xe5, 0x8d, 0xa0, 0xe7, 0x94, 0xa8, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x3a, 0x3b, 0x92, 0x41, 0x38, 0x0a, 0x36, 0x2a, 0x17, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8b, 0x93,
	0xe6, 0x89, 0x91, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x22, 0xc4, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x34, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x0c,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x36,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x32, 0x08, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8c, 0x01, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcd, 0x01, 0x0a, 0x08, 0x48, 0x6f, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76,
	0x36, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x72, 0x65, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x72, 0x65, 0x61, 0x52, 0x09, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x72, 0x65, 0x61, 0x22, 0x33, 0x0a, 0x0d, 0x48, 0x6f, 0x73, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x72, 0x65, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe3, 0x06,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x48, 0x6f, 0x73,
	0x74, 0x49, 0x64, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x61, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x40, 0x2a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x33, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0x8c, 0x83, 0xe5, 0x9b,
	0xb4, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x62, 0x69, 0x7a, 0x2f, 0x62, 0x69, 0x7a, 0x5f,
	0x73, 0x65, 0x74, 0x29, 0x2c, 0x20, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe6,
	0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x62, 0x69, 0x7a, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x43, 0x2a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x64, 0x32, 0x38, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4,
	0x49, 0x44, 0x28, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x2f, 0xe4, 0xb8, 0x9a, 0xe5,
	0x8a, 0xa1, 0xe9, 0x9b, 0x86, 0x49, 0x44, 0x29, 0x2c, 0x20, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d,
	0xe4, 0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x62, 0x69, 0x7a, 0x52, 0x07, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x29, 0x92, 0x41, 0x1e, 0x2a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x32, 0x12, 0xe6, 0x8b, 0x93, 0xe6, 0x89, 0x91, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x95,
	0xb0, 0xe7, 0xbb, 0x84, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7c,
	0x92, 0x41, 0x79, 0x2a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x32, 0x68, 0xe6, 0xa8, 0xa1, 0xe7, 0xb3, 0x8a, 0xe6, 0x90, 0x9c, 0xe7, 0xb4, 0xa2,
	0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x88, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe5,
	0x90, 0x8c, 0xe6, 0x97, 0xb6, 0xe5, 0xaf, 0xb9, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0x49, 0x50,
	0x2f, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe5, 0x90, 0x8d, 0x2f, 0xe6, 0x93, 0x8d, 0xe4, 0xbd,
	0x9c, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x2f, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f,
	0x9f, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe6, 0xa8, 0xa1,
	0xe7, 0xb3, 0x8a, 0xe6, 0x90, 0x9c, 0xe7, 0xb4, 0xa2, 0xef, 0xbc, 0x89, 0x52, 0x0d, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x8c, 0x01, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x59, 0x92, 0x41, 0x56, 0x2a, 0x05, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x32, 0x4d, 0xe7, 0xad, 0x9b, 0xe9, 0x80, 0x89, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0xef, 0xbc, 0x9a, 0x61, 0x6c, 0x69, 0x76, 0x65, 0xef, 0xbc, 0x9a, 0x30, 0xe4, 0xb8,
	0xba, 0x41, 0x67, 0x65, 0x6e, 0x74, 0xe5, 0xbc, 0x82, 0xe5, 0xb8, 0xb8, 0xef, 0xbc, 0x8c, 0x31,
	0xe4, 0xb8, 0xba, 0x41, 0x67, 0x65, 0x6e, 0x74, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0xef, 0xbc,
	0x8c, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0xa0, 0xe5, 0x88, 0x99, 0xe4, 0xb8, 0x8d, 0xe7, 0xad, 0x9b,
	0xe9, 0x80, 0x89, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x32, 0x25, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe8, 0xb5, 0xb7,
	0xe5, 0xa7, 0x8b, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe4,
	0xbc, 0xa0, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x30, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x58, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x2a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x32, 0x2d, 0xe6, 0x8b, 0x89, 0xe5, 0x8f, 0x96, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc,
	0xa0, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x8b, 0x89, 0xe5, 0x8f, 0x96, 0xe6, 0x89, 0x80,
	0xe6, 0x9c, 0x89, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x3a, 0x44, 0x92,
	0x41, 0x41, 0x0a, 0x3f, 0x2a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x1d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8b, 0x93, 0xe6,
	0x89, 0x91, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0x49, 0x44, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x22, 0xd2, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x88,
	0x90, 0xe5, 0x8a, 0x9f, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x32, 0x0c,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x32, 0x08, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x58,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9a, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x73, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x04, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09,
	0x62, 0x6b, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x6b, 0x42, 0x69, 0x7a, 0x49, 0x64, 0x22, 0x80, 0x03, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x40, 0x2a, 0x09, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x33, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0x8c,
	0x83, 0xe5, 0x9b, 0xb4, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x62, 0x69, 0x7a, 0x2f, 0x62,
	0x69, 0x7a, 0x5f, 0x73, 0x65, 0x74, 0x29, 0x2c, 0x20, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe4,
	0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x62, 0x69, 0x7a, 0x52, 0x09, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x43, 0x2a, 0x07, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x64, 0x32, 0x38, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0x8c, 0x83,
	0xe5, 0x9b, 0xb4, 0x49, 0x44, 0x28, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x2f, 0xe4,
	0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe9, 0x9b, 0x86, 0x49, 0x44, 0x29, 0x2c, 0x20, 0xe7, 0x9b, 0xae,
	0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x62, 0x69, 0x7a, 0x52,
	0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x49, 0x44, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x1c, 0x92, 0x41, 0x19,
	0x2a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x0d, 0x68, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x73, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x3a, 0x46, 0x92, 0x41, 0x43, 0x0a, 0x41, 0x2a, 0x16, 0x47, 0x65, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x27, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba,
	0x49, 0x44, 0x73, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8, 0xe8,
	0xaf, 0xa6, 0xe6, 0x83, 0x85, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22, 0xbf, 0x02, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x88,
	0x90, 0xe5, 0x8a, 0x9f, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x32, 0x0c,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x32, 0x08, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x4d,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x48, 0x6f,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xff, 0x01,
	0x0a, 0x10, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70,
	0x76, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x72, 0x65, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x72, 0x65, 0x61, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x72, 0x65, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22,
	0xbe, 0x05, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x09,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x43, 0x92, 0x41, 0x40, 0x2a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32,
	0x33, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x28, 0x62, 0x69, 0x7a, 0x2f, 0x62, 0x69, 0x7a, 0x5f, 0x73, 0x65, 0x74, 0x29,
	0x2c, 0x20, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c,
	0x81, 0x62, 0x69, 0x7a, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x60, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x46, 0x92, 0x41, 0x43, 0x2a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x32, 0x38,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x49, 0x44, 0x28, 0xe4,
	0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x2f, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe9, 0x9b,
	0x86, 0x49, 0x44, 0x29, 0x2c, 0x20, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe6,
	0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x62, 0x69, 0x7a, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x55, 0x0a, 0x06, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x2a, 0x06, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x30,
	0x49, 0x50, 0x76, 0x34, 0xe6, 0x95, 0xb0, 0xe7, 0xbb, 0x84, 0x2c, 0x20, 0xe6, 0x94, 0xaf, 0xe6,
	0x8c, 0x81, 0xe5, 0xaf, 0xb9, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe8, 0xbf,
	0x9b, 0xe8, 0xa1, 0x8c, 0xe6, 0xa8, 0xa1, 0xe7, 0xb3, 0x8a, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d,
	0x52, 0x06, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x08, 0x69, 0x70, 0x76, 0x36,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a,
	0x08, 0x69, 0x70, 0x76, 0x36, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x30, 0x49, 0x50, 0x76, 0x36, 0xe6,
	0x95, 0xb0, 0xe7, 0xbb, 0x84, 0x2c, 0x20, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe5, 0xaf, 0xb9,
	0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe6,
	0xa8, 0xa1, 0xe7, 0xb3, 0x8a, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0x52, 0x08, 0x69, 0x70, 0x76,
	0x36, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x4d, 0x92, 0x41, 0x4a, 0x2a, 0x07, 0x6b, 0x65, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x32, 0x3f, 0xe5, 0x85, 0xb3, 0xe9, 0x94, 0xae, 0xe5, 0xad, 0x97, 0xe6,
	0x95, 0xb0, 0xe7, 0xbb, 0x84, 0x2c, 0x20, 0xe8, 0xa7, 0xa3, 0xe6, 0x9e, 0x90, 0xe5, 0x87, 0xba,
	0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe5, 0x90, 0x8d, 0x2f, 0x68, 0x6f, 0x73,
	0x74, 0x49, 0x64, 0xe7, 0xad, 0x89, 0xe5, 0x85, 0xb3, 0xe9, 0x94, 0xae, 0xe5, 0xad, 0x97, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x81,
	0x01, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x53, 0x92, 0x41, 0x50, 0x2a,
	0x11, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x32, 0x3b, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0xaa, 0xe5, 0x9c, 0xa8, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0xe4, 0xb8, 0xad,
	0xe8, 0xa2, 0xab, 0xe5, 0x8d, 0xa0, 0xe7, 0x94, 0xa8, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x52,
	0x11, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x3a, 0x3c, 0x92, 0x41, 0x39, 0x0a, 0x37, 0x2a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x1b, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe6, 0x8b, 0x93, 0xe6, 0x89,
	0x91, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x22, 0xb9, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x0c, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x73, 0x67, 0x32, 0x0c, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x36, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x32, 0x08, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xca, 0x01, 0x0a,
	0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92,
	0x41, 0x31, 0x2a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x32, 0x27, 0xe4, 0xb8, 0x8d, 0xe5,
	0x90, 0x8c, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe7, 0x9a, 0x84, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x06, 0x64,
	0x61, 0x74, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x13, 0x92, 0x41, 0x10,
	0x2a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x32, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64,
	0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92,
	0x41, 0x1a, 0x2a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8d, 0x02, 0x0a, 0x0a, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x18, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x32, 0x1a, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0x74, 0x69, 0x74, 0x6c, 0x65, 0xe5,
	0x8d, 0xb3, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x67, 0x92, 0x41, 0x64, 0x2a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x32, 0x59, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe5, 0x86, 0x85,
	0xe5, 0xae, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x2c, 0x20, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d,
	0xae, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe9, 0x9c, 0x80, 0xe6, 0xb1, 0x82, 0xe6, 0xb8, 0xb2,
	0xe6, 0x9f, 0x93, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe3,
	0x80, 0x82, 0xe8, 0x8b, 0xa5, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xae, 0x0e, 0x0a, 0x0e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x10,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x10, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x32, 0x0e, 0xe9,
	0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0x49, 0x44, 0x52, 0x10, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12,
	0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92,
	0x41, 0x1a, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x12, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5,
	0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x3c, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe6, 0xa8, 0xa1,
	0xe7, 0x89, 0x88, 0xe6, 0x89, 0x80, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe9,
	0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0xe4, 0xb8, 0xba, 0xe8, 0x93, 0x9d, 0xe9, 0xb2, 0xb8, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0xa1,
	0x01, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x80, 0x01, 0x92, 0x41, 0x7d, 0x2a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x32, 0x6f, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe6, 0x94,
	0xaf, 0xe6, 0x8c, 0x81, 0x62, 0x6b, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0xe3, 0x80, 0x81, 0x62, 0x6b, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x20, 0xe6, 0x9c, 0xaa, 0xe6, 0x9d,
	0xa5, 0xe5, 0xb0, 0x86, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x72, 0x74, 0x78, 0xe3, 0x80, 0x81,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0xe3, 0x80, 0x81, 0x76, 0x6f, 0x69, 0x63, 0x65, 0xe7, 0xad, 0x89,
	0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x32, 0x18, 0xe9, 0x80, 0x9a,
	0xe7, 0x9f, 0xa5, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x37, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1f, 0x92, 0x41, 0x1c,
	0x2a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x12, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0x52, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x58, 0x92, 0x41, 0x55, 0x2a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x32, 0x4b, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8d,
	0xe5, 0x90, 0x8c, 0xe7, 0x9a, 0x84, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe6, 0x96, 0xb9, 0xe5,
	0xbc, 0x8f, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xb8,
	0x8d, 0xe5, 0x90, 0x8c, 0xe7, 0x9a, 0x84, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x68, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x12, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x68, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x2b,
	0x92, 0x41, 0x28, 0x2a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x32, 0x15, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe6,
	0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0x52, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x71, 0x0a, 0x0f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x15, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6,
	0xb1, 0xa0, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0x52, 0x0f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x71, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x15, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0x80, 0x9a, 0xe7, 0x9f,
	0xa5, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x7d, 0x0a, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x4f, 0x75, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x33, 0x92, 0x41, 0x30, 0x2a, 0x11,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x32, 0x1b, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe6, 0x89, 0xa9, 0xe5,
	0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0x52, 0x11,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x7b, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x49,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x33, 0x92, 0x41, 0x30, 0x2a, 0x11, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x32,
	0x1b, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0x52, 0x10, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x80,
	0x01, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x62, 0x92, 0x41, 0x5f, 0x2a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x32, 0x52, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe6, 0x8e, 0xa5, 0xe6, 0x94, 0xb6,
	0xe8, 0x80, 0x85, 0x2c, 0xe5, 0x8f, 0xaf, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xef, 0xbc, 0x9b,
	0xe8, 0x8b, 0xa5, 0xe6, 0x97, 0xa0, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x2c, 0x20, 0xe5, 0x8f,
	0xaf, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x2f, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x9b, 0xb4,
	0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x63, 0x92, 0x41, 0x60, 0x0a, 0x5e, 0x2a, 0x0e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x32, 0x4c, 0xe9, 0x80,
	0x9a, 0xe7, 0x9f, 0xa5, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0x2c, 0x20, 0xe4, 0xb8, 0xbb, 0xe8,
	0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0xaf, 0xb9, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0x28, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe3, 0x80, 0x81, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0,
	0xe7, 0xad, 0x89, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0x29, 0x22, 0xd5, 0x0d, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48, 0x92,
	0x41, 0x2a, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x1d, 0xe9,
	0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0xfa, 0x42, 0x18, 0x72,
	0x16, 0x10, 0x01, 0x18, 0x80, 0x10, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x12, 0xe9, 0x80, 0x9a,
	0xe7, 0x9f, 0xa5, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x32, 0x18, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe6, 0xa8, 0xa1,
	0xe6, 0x9d, 0xbf, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0xcc, 0x01, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0xab, 0x01, 0x92, 0x41, 0x7d,
	0x2a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x32, 0x6f, 0xe9, 0x80,
	0x9a, 0xe7, 0x9f, 0xa5, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe7, 0x9b, 0xae, 0xe5,
	0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x62, 0x6b, 0x5f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0xe3, 0x80, 0x81, 0x62, 0x6b,
	0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x20, 0xe6, 0x9c, 0xaa, 0xe6, 0x9d, 0xa5, 0xe5, 0xb0, 0x86, 0xe6, 0x94, 0xaf, 0xe6, 0x8c,
	0x81, 0x72, 0x74, 0x78, 0xe3, 0x80, 0x81, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0xe3, 0x80, 0x81, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0xe7, 0xad, 0x89, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xfa, 0x42, 0x28,
	0x72, 0x26, 0x52, 0x10, 0x62, 0x6b, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x62, 0x6b, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x12, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe9, 0x80, 0x9a, 0xe7, 0x9f,
	0xa5, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x68, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x26, 0x92, 0x41,
	0x23, 0x2a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x32, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x80,
	0x9a, 0xe7, 0x9f, 0xa5, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0d, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x12, 0xe5, 0x88, 0xa0, 0xe9,
	0x99, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0x52, 0x0d,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x71, 0x0a,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x15, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe6, 0xb1, 0xa0, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0x52,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x71, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x0f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x15, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x80, 0x9a, 0xe7,
	0x9f, 0xa5, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x71, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x15,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9,
	0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x7d, 0x0a, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x33, 0x92,
	0x41, 0x30, 0x2a, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x32, 0x1b, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0,
	0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe9, 0x80, 0x9a, 0xe7,
	0x9f, 0xa5, 0x52, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x7b, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x49, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x33, 0x92, 0x41, 0x30,
	0x2a, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x32, 0x1b, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe7, 0xbc,
	0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5,
	0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x58, 0x92, 0x41, 0x55, 0x2a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x4b,
	0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe9, 0x85, 0x8d, 0xe7,
	0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8d, 0xe5, 0x90,
	0x8c, 0xe7, 0x9a, 0x84, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f,
	0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0x8d, 0xe5,
	0x90, 0x8c, 0xe7, 0x9a, 0x84, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x80, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x62, 0x92, 0x41, 0x5f, 0x2a, 0x09, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x32, 0x52, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe6,
	0x8e, 0xa5, 0xe6, 0x94, 0xb6, 0xe8, 0x80, 0x85, 0x2c, 0xe5, 0x8f, 0xaf, 0xe6, 0x8c, 0x87, 0xe5,
	0xae, 0x9a, 0xef, 0xbc, 0x9b, 0xe8, 0x8b, 0xa5, 0xe6, 0x97, 0xa0, 0xe6, 0x8c, 0x87, 0xe5, 0xae,
	0x9a, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x2f, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x3a, 0x60, 0x92, 0x41, 0x5d, 0x0a, 0x5b, 0x2a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x80, 0x9a, 0xe7,
	0x9f, 0xa5, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xd2, 0x01, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0a, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x22, 0xb8, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92,
	0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77,
	0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8a, 0x02,
	0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x32, 0x15, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x51, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41,
	0x22, 0x2a, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x44, 0x32, 0x0e, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe6, 0xa8, 0xa1, 0xe7, 0x89,
	0x88, 0x49, 0x44, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x44, 0x3a, 0x53, 0x92, 0x41, 0x50, 0x0a, 0x4e, 0x2a, 0x1b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99,
	0xa4, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0xd2, 0x01, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x0e, 0x6e, 0x6f, 0x64, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x22, 0xb8, 0x02, 0x0a, 0x1c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd7, 0x02, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x51, 0x0a, 0x10, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x10, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x32, 0x0e, 0xe9, 0x80,
	0x9a, 0xe7, 0x9f, 0xa5, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0x49, 0x44, 0x52, 0x10, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x3a, 0xae,
	0x01, 0x92, 0x41, 0xaa, 0x01, 0x0a, 0xa7, 0x01, 0x2a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x7e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x80, 0x9a, 0xe7, 0x9f,
	0xa5, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xef, 0xbc, 0x8c,
	0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0xa1, 0xab, 0xe5, 0x86, 0x99, 0xe4, 0xba, 0x86, 0xe7,
	0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xef, 0xbc, 0x8c, 0xe5, 0x88,
	0x99, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x88, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6,
	0x9e, 0x9c, 0xe5, 0x85, 0xa8, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe5, 0x88, 0x99, 0xe4, 0xb8,
	0xba, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x85, 0xa8, 0xe9, 0x87, 0x8f, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xd2, 0x01, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x22,
	0xdc, 0x02, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x51, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x1d, 0x92, 0x41, 0x1a,
	0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe6, 0xa8,
	0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x3a, 0x4c, 0x92, 0x41, 0x49, 0x0a, 0x47, 0x2a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x80, 0x9a, 0xe7, 0x9f,
	0xa5, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe0,
	0x05, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x71, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0x92, 0x41, 0x4e, 0x2a, 0x0a, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x32, 0x40, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6,
	0xb1, 0xa0, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0xe7, 0x9b, 0xae,
	0xe5, 0x89, 0x8d, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x20, 0x79, 0x75, 0x6e, 0x74, 0x69, 0x2f,
	0x73, 0x65, 0x6c, 0x66, 0x2f, 0x63, 0x72, 0x2f, 0x62, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x32, 0x15, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8,
	0xe7, 0x9a, 0x84, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x06, 0xe6, 0x9c, 0xba, 0xe5,
	0x9e, 0x8b, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x83, 0x01, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f,
	0x92, 0x41, 0x43, 0x2a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x32, 0x3a, 0xe7, 0xa9, 0xba, 0xe9,
	0x97, 0xb2, 0xe7, 0x8e, 0x87, 0x2c, 0x20, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0,
	0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb2, 0xe7, 0x8e, 0x87, 0xe5, 0xb0, 0x8f, 0xe4, 0xba, 0x8e, 0xe7,
	0xad, 0x89, 0xe4, 0xba, 0x8e, 0x72, 0x61, 0x74, 0x69, 0x6f, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x99, 0x01, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5d, 0x92, 0x41, 0x5a, 0x2a, 0x09, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x4d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb2,
	0xe4, 0xb8, 0xaa, 0xe6, 0x95, 0xb0, 0x2c, 0x20, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1,
	0xa0, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b,
	0xe6, 0x95, 0xb0, 0xe7, 0x9b, 0xae, 0xe5, 0xb0, 0x8f, 0xe4, 0xba, 0x8e, 0xe7, 0xad, 0x89, 0xe4,
	0xba, 0x8e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0xe7, 0x9a, 0x84, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x3a, 0xac, 0x01, 0x92, 0x41, 0xa8, 0x01, 0x0a, 0xa5, 0x01, 0x2a, 0x1f, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x75, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe5, 0xaf,
	0xb9, 0xe5, 0xba, 0x94, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe7, 0x9a, 0x84, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x20, 0x26, 0x20, 0xe6, 0xa0, 0xb9, 0xe6,
	0x8d, 0xae, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xad,
	0x9b, 0xe9, 0x80, 0x89, 0xe5, 0x87, 0xba, 0xe7, 0xac, 0xa6, 0xe5, 0x90, 0x88, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe5,
	0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe7, 0x9a, 0x84, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe4, 0xb8,
	0x9a, 0xe5, 0x8a, 0xa1, 0xd2, 0x01, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x22, 0x82, 0x03, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32,
	0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x59, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x2c, 0x92, 0x41,
	0x29, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x21, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe7,
	0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb5, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x3a, 0x64, 0x92, 0x41, 0x61, 0x0a, 0x5f, 0x2a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0x9a,
	0xe5, 0x8a, 0xa1, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb5, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc6, 0x04, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69,
	0x7a, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x69, 0x7a, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x69, 0x7a, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0xd2, 0x02, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0x49, 0x44, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x74, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x54, 0x92, 0x41, 0x51, 0x2a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x32, 0x43, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbe, 0x9b, 0xe5,
	0xba, 0x94, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0xe7, 0x9b, 0xae,
	0xe5, 0x89, 0x8d, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x20, 0x73, 0x65, 0x6c, 0x66, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x3a, 0x7d, 0x92, 0x41, 0x7a, 0x0a, 0x78, 0x2a, 0x23, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x38, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7,
	0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe4, 0xba, 0x91, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0x43, 0x41, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0x9a, 0x84, 0xe4,
	0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb5, 0xd2, 0x01, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x84, 0x04, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5c, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x21, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe7, 0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0xe7,
	0x9a, 0x84, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x83,
	0x85, 0xe5, 0x86, 0xb5, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x79, 0x0a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x56, 0x32, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x18, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x64, 0x92, 0x41, 0x61, 0x0a, 0x5f, 0x2a, 0x20, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2a,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe7,
	0x9a, 0x84, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x83,
	0x85, 0xe5, 0x86, 0xb5, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa8, 0x04, 0x0a, 0x16,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x2a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32,
	0x0c, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x0c, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x32, 0x0f, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5,
	0x8c, 0xba, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x46,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x30, 0x92,
	0x41, 0x2d, 0x2a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x24, 0xe6, 0x9c, 0xba, 0xe5, 0x9e,
	0x8b, 0xe5, 0x9c, 0xa8, 0xe6, 0x9f, 0x90, 0xe4, 0xb8, 0xaa, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8,
	0xe5, 0x8c, 0xba, 0xe7, 0x9a, 0x84, 0xe6, 0x80, 0xbb, 0xe9, 0xa2, 0x9d, 0xe5, 0xba, 0xa6, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x49, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x35, 0x92, 0x41, 0x32, 0x2a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x32,
	0x2a, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe5, 0x9c, 0xa8, 0xe6, 0x9f, 0x90, 0xe4, 0xb8, 0xaa,
	0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe7, 0x9a, 0x84, 0xe5, 0xb7, 0xb2, 0xe4,
	0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0xa2, 0x9d, 0xe5, 0xba, 0xa6, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x64, 0x12, 0x67, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x4b, 0x92, 0x41, 0x48, 0x2a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x73, 0x32, 0x3c, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe5, 0x9c, 0xa8, 0xe6, 0x9f, 0x90,
	0xe4, 0xb8, 0xaa, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe7, 0x9a, 0x84, 0xe5,
	0xb7, 0xb2, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe9, 0xa2,
	0x9d, 0xe5, 0xba, 0xa6, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0,
	0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x6a, 0x0a, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x44, 0x92, 0x41, 0x41, 0x2a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x73, 0x32, 0x30, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe5, 0x9c, 0xa8,
	0xe6, 0x9f, 0x90, 0xe4, 0xb8, 0xaa, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe7,
	0x9a, 0x84, 0xe6, 0x80, 0xbb, 0xe9, 0xa2, 0x9d, 0xe5, 0xba, 0xa6, 0xe7, 0x9a, 0x84, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22, 0x9b, 0x03, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x07, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41,
	0x38, 0x2a, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x32, 0x2d, 0x42, 0x43, 0x53, 0xe5,
	0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe7, 0x9a, 0x84, 0xe4, 0xba,
	0x91, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87,
	0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x44, 0x12, 0x5f, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x2a, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x31, 0xe4, 0xba, 0x91, 0xe5, 0x87, 0xad, 0xe8, 0xaf, 0x81,
	0x49, 0x44, 0x2c, 0x20, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a,
	0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x5b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d,
	0x92, 0x41, 0x2a, 0x2a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x15, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x20, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x11, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x3a, 0x62, 0x92, 0x41, 0x5f, 0x0a, 0x5d, 0x2a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x23, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe4, 0xba, 0x91, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x85, 0xac, 0xe7, 0xbd, 0x91,
	0x49, 0x50, 0xe5, 0x89, 0x8d, 0xe7, 0xbc, 0x80, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xd2, 0x01,
	0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0xd2, 0x01, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x22, 0xfd, 0x02, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x53, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x64,
	0x92, 0x41, 0x61, 0x0a, 0x5f, 0x2a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a,
	0xa1, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb5, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x02, 0x69, 0x64, 0x32, 0x10,
	0xe5, 0x85, 0xac, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0xe5, 0x89, 0x8d, 0xe7, 0xbc, 0x80, 0x49, 0x44,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x14, 0xe5,
	0x85, 0xac, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0xe5, 0x89, 0x8d, 0xe7, 0xbc, 0x80, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x69, 0x70, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a,
	0x2a, 0x08, 0x69, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x32, 0x0e, 0xe5, 0x85, 0xac, 0xe7,
	0xbd, 0x91, 0x49, 0x50, 0xe5, 0x89, 0x8d, 0xe7, 0xbc, 0x80, 0x52, 0x08, 0x69, 0x70, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x63, 0x0a, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x4d, 0x92, 0x41, 0x4a, 0x2a, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x32,
	0x41, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0xef, 0xbc, 0x8c, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0xba, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x9c, 0x80, 0xe6, 0xb1, 0x82, 0xe5, 0x88, 0x86, 0xe9, 0x85,
	0x8d, 0xe7, 0x9a, 0x84, 0x49, 0x50, 0xe6, 0x9d, 0xa5, 0xe8, 0x87, 0xaa, 0xe4, 0xbd, 0x95, 0xe5,
	0xa4, 0x84, 0x52, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32,
	0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x3a, 0x60, 0x92, 0x41, 0x5d, 0x0a, 0x5b, 0x2a, 0x1e, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x2d, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe7,
	0xbb, 0x99, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0x83,
	0x85, 0xe5, 0x86, 0xb5, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0x81, 0x03, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x57, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1c,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0x9a, 0x84, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x3a, 0x66, 0x92, 0x41, 0x63, 0x0a, 0x61, 0x2a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2d, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe7, 0xbb,
	0x99, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0x83, 0x85,
	0xe5, 0x86, 0xb5, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb4, 0x03, 0x0a, 0x07, 0x47,
	0x50, 0x55, 0x41, 0x72, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x6d, 0x69, 0x67, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x09,
	0x6d, 0x69, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x4d, 0x49, 0x47, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7,
	0x52, 0x09, 0x6d, 0x69, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x59, 0x0a, 0x06, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a,
	0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x32, 0x15, 0x47, 0x50, 0x55, 0xe9, 0xa9, 0xb1, 0xe5,
	0x8a, 0xa8, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x04, 0x63, 0x75, 0x64, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x04, 0x63, 0x75, 0x64, 0x61, 0x32, 0x10,
	0x43, 0x55, 0x44, 0x41, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x04, 0x63, 0x75, 0x64, 0x61, 0x12, 0x4a, 0x0a, 0x05, 0x63, 0x75, 0x64, 0x6e, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x55, 0x44, 0x4e, 0x4e, 0x42, 0x1d, 0x92, 0x41,
	0x1a, 0x2a, 0x05, 0x63, 0x75, 0x44, 0x4e, 0x4e, 0x32, 0x11, 0x63, 0x75, 0x44, 0x4e, 0x4e, 0xe7,
	0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x63, 0x75, 0x64,
	0x6e, 0x6e, 0x12, 0x6d, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x0c, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x32, 0x18, 0xe8, 0x87, 0xaa, 0xe5, 0xae,
	0x9a, 0xe4, 0xb9, 0x89, 0x47, 0x50, 0x55, 0xe9, 0xa9, 0xb1, 0xe5, 0x8a, 0xa8, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x22, 0x8a, 0x01, 0x0a, 0x0d, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x32, 0x18, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88,
	0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x18,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0xe9, 0x95, 0x9c, 0xe5,
	0x83, 0x8f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe4,
	0x01, 0x0a, 0x05, 0x43, 0x55, 0x44, 0x4e, 0x4e, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0e, 0x63, 0x75, 0x44, 0x4e, 0x4e, 0xe7, 0x9a,
	0x84, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0e, 0x63, 0x75, 0x44, 0x4e, 0x4e,
	0xe7, 0x9a, 0x84, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x39, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x07, 0x64, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x11,
	0x63, 0x75, 0x44, 0x4e, 0x4e, 0xe7, 0x9a, 0x84, 0x44, 0x6f, 0x63, 0xe5, 0x90, 0x8d, 0xe5, 0xad,
	0x97, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x64, 0x65,
	0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c,
	0x2a, 0x07, 0x64, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x11, 0x63, 0x75, 0x44, 0x4e, 0x4e,
	0xe7, 0x9a, 0x84, 0x44, 0x65, 0x76, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0x52, 0x07, 0x64, 0x65,
	0x76, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x32, 0x1e, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x47,
	0x50, 0x55, 0xe9, 0xa9, 0xb1, 0xe5, 0x8a, 0xa8, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe9, 0x93,
	0xbe, 0xe6, 0x8e, 0xa5, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa8, 0x12,
	0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x5e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8,
	0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc,
	0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38,
	0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x20, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xba, 0x91,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xba, 0xe4, 0xba, 0x91, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x49, 0x44, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x12,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x70,
	0x63, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x05,
	0x76, 0x70, 0x63, 0x49, 0x44, 0x32, 0x2a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80,
	0xe5, 0x9c, 0xa8, 0x76, 0x70, 0x63, 0xef, 0xbc, 0x8c, 0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xe7,
	0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe4, 0xb8, 0x8b, 0xe9, 0x9d, 0x9e, 0xe5, 0xbf, 0x85, 0xe5, 0xa1,
	0xab, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27,
	0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x1a, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe9,
	0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x79, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x56, 0x2a, 0x0a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x48, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7,
	0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44,
	0x2c, 0x20, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0x85, 0xb3, 0xe8, 0x81,
	0x94, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe8,
	0xaf, 0xa5, 0x49, 0x44, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xe4, 0xba, 0x8e, 0x43, 0x4d, 0x44,
	0x42, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x68, 0x0a,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x43, 0x2a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x32, 0x34, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5,
	0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe7, 0x9a, 0x84, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0x73, 0x74, 0x61, 0x67, 0xef, 0xbc, 0x8c, 0x64, 0x65,
	0x62, 0x75, 0x67, 0xef, 0xbc, 0x8c, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e,
	0x2a, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x20, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbc, 0x96, 0xe6, 0x8e, 0x92, 0xe5, 0xbc, 0x95, 0xe6, 0x93, 0x8e,
	0xef, 0xbc, 0x8c, 0x6b, 0x38, 0x73, 0xe3, 0x80, 0x81, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x52, 0x0a,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x34, 0x92, 0x41, 0x31, 0x2a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x32, 0x22, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef,
	0xbc, 0x8c, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xe3, 0x80, 0x81, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x5f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x0c, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x32, 0x15, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x55, 0x0a, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x2a, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x44, 0x32, 0x2a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x9c, 0xa8, 0xe5, 0x90, 0x84, 0xe4, 0xba, 0x91, 0xe5, 0xb9,
	0xb3, 0xe5, 0x8f, 0xb0, 0xe4, 0xb8, 0x8a, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x49, 0x44, 0x52,
	0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12, 0xb4, 0x01, 0x0a, 0x0a, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x93,
	0x01, 0x92, 0x41, 0x8f, 0x01, 0x2a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x32, 0x80, 0x01, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe5, 0x85, 0xac, 0xe6, 0x9c, 0x89, 0xe4,
	0xba, 0x91, 0xe6, 0x97, 0xb6, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0xef, 0xbc, 0x8c, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x28, 0xe4, 0xba,
	0x91, 0xe4, 0xb8, 0x8a, 0xe6, 0x89, 0x98, 0xe7, 0xae, 0xa1, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x29, 0xef, 0xbc, 0x8c, 0x49, 0x4e, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x28, 0xe7, 0x8b, 0xac, 0xe7, 0xab, 0x8b, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0xe8, 0x87, 0xaa, 0xe8, 0xa1, 0x8c, 0xe7, 0xbb, 0xb4,
	0xe6, 0x8a, 0xa4, 0x29, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0xb2, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x99, 0x01, 0x92, 0x41, 0x5c, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32,
	0x52, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x8c,
	0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0xef, 0xbc, 0x8c, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0xef, 0xbc,
	0x8c, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0xef, 0xbc, 0x8c, 0x46, 0x41, 0x4c, 0x55,
	0x52, 0x45, 0xef, 0xbc, 0x8c, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0xfa, 0x42, 0x37, 0x72, 0x35, 0x52, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x52, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x52, 0x08, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x49, 0x4e, 0x47, 0x52, 0x06, 0x46, 0x41, 0x4c, 0x55, 0x52, 0x45, 0x52, 0x0e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x32, 0x15, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x12, 0x75, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x53, 0x92, 0x41, 0x36, 0x2a, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x32, 0x27, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef,
	0xbc, 0x8c, 0x28, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x2f, 0x6f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x29, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x52, 0x08, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x00, 0x52, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x92,
	0x41, 0x40, 0x2a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x32, 0x34, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x49, 0x44, 0x28, 0x43, 0x41, 0xe6,
	0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x97, 0xb6, 0xe6, 0xa8,
	0xa1, 0xe5, 0x9d, 0x97, 0xe8, 0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0x20, 0xe5, 0xba, 0x9f, 0xe5, 0xbc,
	0x83, 0x29, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x69, 0x0a, 0x0f,
	0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a, 0x0f, 0x69, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x29, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe5, 0x85, 0xac, 0xe5, 0x85, 0xb1, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x28, 0xe5,
	0xba, 0x9f, 0xe5, 0xbc, 0x83, 0x29, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41,
	0x21, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xae, 0x80, 0xe8, 0xa6, 0x81, 0xe6, 0x8f, 0x8f, 0xe8,
	0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0xa5, 0x01, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7b, 0x92, 0x41, 0x78, 0x2a, 0x0f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x32,
	0x65, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xef, 0xbc, 0x8c,
	0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0x8c, 0xba, 0xe5,
	0x88, 0x86, 0xe8, 0xaf, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe6, 0x98, 0xaf, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0xe3, 0x80, 0x81, 0xe5, 0xaf, 0xbc,
	0xe5, 0x85, 0xa5, 0x28, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x29, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x98, 0xaf,
	0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a,
	0x09, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x32, 0x21, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x2c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x69,
	0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x3a, 0x24, 0x92, 0x41, 0x21, 0x0a, 0x1f, 0x2a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x56, 0x32, 0x32, 0x12, 0xe7, 0xae, 0x80, 0xe5, 0x8c, 0x96, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22, 0x90, 0x07, 0x0a, 0x0e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x67, 0x0a, 0x10, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x10, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x44, 0x32, 0x24, 0xe6, 0xa8,
	0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6,
	0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x74, 0x63, 0x2d, 0x78,
	0x78, 0x78, 0x52, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x0a, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x08, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a,
	0xa1, 0x49, 0x44, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12,
	0x36, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x32, 0x08, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x43, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x32, 0x18, 0xe4, 0xba, 0x91, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe6, 0x8f, 0x90, 0xe4, 0xbe,
	0x9b, 0xe5, 0x95, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x79, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x56, 0x2a, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x32, 0x48, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d,
	0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c,
	0xe5, 0xa6, 0x82, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x28, 0xe4, 0xba, 0x91, 0x29, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x28, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x29, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x28, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7,
	0xbb, 0x84, 0x29, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x65, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x32, 0x2b, 0xe6, 0xa8, 0xa1, 0xe6,
	0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xef, 0xbc,
	0x8c, 0x4a, 0x53, 0x4f, 0x4e, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe7, 0x9a, 0x84, 0xe5, 0xad,
	0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x15, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d,
	0xe7, 0xbd, 0xae, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x32, 0x1b, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7,
	0xbd, 0xae, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80,
	0x85, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29,
	0x92, 0x41, 0x26, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32,
	0x18, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x18, 0xe9, 0x85, 0x8d, 0xe7,
	0xbd, 0xae, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x3a, 0x29, 0x92, 0x41, 0x26, 0x0a, 0x24, 0x2a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x12, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9,
	0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22, 0xb3, 0x07, 0x0a, 0x12,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x67, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41,
	0x38, 0x2a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x44, 0x32, 0x24, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42,
	0x43, 0x53, 0x2d, 0x74, 0x63, 0x2d, 0x78, 0x78, 0x78, 0x52, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0a, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44,
	0x32, 0x08, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0x49, 0x44, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x36,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x18, 0xe4, 0xba, 0x91, 0xe6, 0x9c, 0x8d, 0xe5,
	0x8a, 0xa1, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe5, 0x95, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x79, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x59, 0x92, 0x41, 0x56, 0x2a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x32, 0x48, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x28, 0xe4, 0xba, 0x91, 0x29, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x28, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x29, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x28,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0x29, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x13,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x32, 0x15, 0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x3d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x15,
	0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe8, 0x80, 0x85, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x43,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x29, 0x92, 0x41, 0x26, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x32, 0x1b, 0xe6,
	0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0x9c, 0x80, 0xe5, 0x90,
	0x8e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x18, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x32, 0x18, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0x9c, 0x80, 0xe5, 0x90,
	0x8e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x26, 0x92, 0x41, 0x23, 0x0a, 0x21,
	0x2a, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x12, 0xe6,
	0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x22, 0xeb, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa8, 0x01, 0x0a, 0x1a, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x2a,
	0x1a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x1b, 0xe4, 0xba, 0x91,
	0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe9, 0x85, 0x8d, 0xe7,
	0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x1a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x3a, 0x29, 0x92, 0x41, 0x26, 0x0a, 0x24, 0x2a, 0x0b, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x15, 0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1,
	0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22,
	0xf8, 0x04, 0x0a, 0x1a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x87,
	0x01, 0x0a, 0x09, 0x63, 0x69, 0x64, 0x72, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x43, 0x69, 0x64, 0x72, 0x53, 0x74, 0x65, 0x70, 0x42,
	0x4c, 0x92, 0x41, 0x49, 0x2a, 0x09, 0x63, 0x69, 0x64, 0x72, 0x53, 0x74, 0x65, 0x70, 0x73, 0x32,
	0x3c, 0x63, 0x69, 0x64, 0x72, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0x89, 0xa9, 0xe5, 0xae,
	0xb9, 0xe6, 0xad, 0xa5, 0xe9, 0x95, 0xbf, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x28, 0xe9, 0x9a,
	0x8f, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe9, 0x85, 0x8d,
	0xe7, 0xbd, 0xae, 0xe8, 0x80, 0x8c, 0xe5, 0x8f, 0x98, 0xe5, 0x8c, 0x96, 0x29, 0x52, 0x09, 0x63,
	0x69, 0x64, 0x72, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x32,
	0x92, 0x41, 0x2f, 0x2a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x73, 0x32, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f,
	0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0xad, 0xa5, 0xe9, 0x95, 0xbf, 0xe8, 0xae, 0xbe, 0xe7,
	0xbd, 0xae, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x73,
	0x12, 0x52, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x64, 0x4e, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x0d, 0x70, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x32, 0x18, 0xe5, 0x8d, 0x95,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x70, 0x6f, 0x64, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xe9,
	0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f,
	0x64, 0x4e, 0x75, 0x6d, 0x12, 0x72, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x4c, 0x92, 0x41, 0x49,
	0x2a, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x65, 0x70, 0x73, 0x32,
	0x38, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6,
	0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0x8b, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89,
	0x8b, 0xe5, 0x8a, 0xa8, 0xe5, 0x88, 0x86, 0xe9, 0x85, 0x8d, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91,
	0xe7, 0x9a, 0x84, 0xe6, 0xad, 0xa5, 0xe9, 0x95, 0xbf, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x78, 0x0a, 0x11, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0d, 0x42, 0x4a, 0x92, 0x41, 0x47, 0x2a, 0x11, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x73, 0x32, 0x32, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc,
	0x8f, 0xe4, 0xb8, 0x8b, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x88, 0x86, 0xe9, 0x85, 0x8d,
	0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe7, 0x9a, 0x84, 0xe6, 0xad, 0xa5, 0xe9, 0x95, 0xbf, 0x52,
	0x11, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x65,
	0x70, 0x73, 0x3a, 0x36, 0x92, 0x41, 0x33, 0x0a, 0x31, 0x2a, 0x12, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x1b, 0xe4,
	0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22, 0x83, 0x05, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32,
	0x08, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0x49, 0x44, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x36, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x53, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x28, 0xe4, 0xba, 0x91, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a,
	0xa1, 0xe5, 0x95, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82,
	0xef, 0xbc, 0x9a, 0x61, 0x77, 0x73, 0x2f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x2f, 0x67, 0x63, 0x70,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43,
	0x92, 0x41, 0x40, 0x2a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x32,
	0x32, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xef, 0xbc, 0x9a, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x86, 0x01, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x13, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x15, 0xe4, 0xba,
	0x91, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x76, 0x92, 0x41, 0x73, 0x0a, 0x71, 0x2a,
	0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x21, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0xe7, 0x9a, 0x84, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xd2,
	0x01, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0xd2, 0x01, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0xd2, 0x01, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x8b, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1f, 0x92,
	0x41, 0x1c, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x46, 0x92, 0x41, 0x43, 0x0a, 0x41, 0x2a, 0x1c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x21, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe7,
	0x9a, 0x84, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x22, 0x9b,
	0x03, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a,
	0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x10, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x44, 0x32,
	0x17, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0x9a, 0x84, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x49, 0x44, 0x52, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x44, 0x12, 0x57, 0x0a, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37,
	0x92, 0x41, 0x34, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32,
	0x26, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0x9a, 0x84, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0xe4,
	0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x49, 0x44, 0x12, 0x54, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x26, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0x9a,
	0x84, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0x89, 0x80,
	0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x3a, 0x71, 0x92, 0x41, 0x6e, 0x0a, 0x6c,
	0x2a, 0x1b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x21, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0xe7, 0x9a, 0x84, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xd2, 0x01, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x44, 0xd2, 0x01, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44,
	0xd2, 0x01, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x22, 0x8b, 0x02, 0x0a,
	0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93,
	0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x3a, 0x46, 0x92, 0x41, 0x43, 0x0a, 0x41, 0x2a, 0x1c, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x21, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6,
	0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe7, 0x9a, 0x84, 0xe5, 0x93,
	0x8d, 0xe5, 0xba, 0x94, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x22, 0x8f, 0x03, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x08, 0xe4,
	0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x32, 0x12, 0xe4, 0xba, 0x91, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5,
	0x95, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x32, 0x12, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9,
	0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x43, 0x92, 0x41, 0x40, 0x0a, 0x3e, 0x2a, 0x19,
	0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x21, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe7, 0x9a, 0x84,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xde, 0x02, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4,
	0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x55, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe6,
	0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x44, 0x92, 0x41, 0x41, 0x0a, 0x3f, 0x2a, 0x1a,
	0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x21, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe7, 0x9a,
	0x84, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x22, 0xb8, 0x05,
	0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a,
	0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x10, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x44, 0x32, 0x0e,
	0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x49, 0x44, 0x52, 0x10,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x44,
	0x12, 0x39, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x08, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52,
	0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0x92, 0x41, 0x15, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x08,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x53, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92,
	0x41, 0x34, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x28, 0xe4, 0xba,
	0x91, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x95, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xef, 0xbc, 0x9a, 0x61, 0x77, 0x73, 0x2f, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x2f, 0x67, 0x63, 0x70, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x63, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x40, 0x2a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x32, 0x32, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d,
	0xe7, 0xbd, 0xae, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xef,
	0xbc, 0x9a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f,
	0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x13, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x32, 0x15, 0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d,
	0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x58,
	0x92, 0x41, 0x55, 0x0a, 0x53, 0x2a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x21, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe7, 0x9a, 0x84, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xd2, 0x01, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x44, 0x22, 0x8b, 0x02, 0x0a, 0x1c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x46,
	0x92, 0x41, 0x43, 0x0a, 0x41, 0x2a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x21, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d,
	0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe7, 0x9a, 0x84, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x32, 0x93, 0xc1, 0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0xcc, 0x01, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x76, 0x92, 0x41, 0x4e, 0x12, 0x0d, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x3d, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xe5, 0x85, 0xbc, 0xe5, 0xae, 0xb9, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x92, 0x8c, 0xe7, 0x8b, 0xac, 0xe7, 0xab, 0x8b, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x80, 0x02, 0x0a, 0x16, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x96, 0x01, 0x92, 0x41, 0x5c, 0x12, 0x19, 0xe9, 0x87, 0x8d, 0xe8, 0xaf,
	0x95, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0x1a, 0x3f, 0xe9, 0x92, 0x88, 0xe5, 0xaf, 0xb9, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe5, 0x9c,
	0xba, 0xe6, 0x99, 0xaf, 0xef, 0xbc, 0x8c, 0xe9, 0x87, 0x8d, 0xe6, 0x96, 0xb0, 0xe4, 0xb8, 0x8b,
	0xe5, 0x8f, 0x91, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4,
	0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0xca, 0x01, 0x0a,
	0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x73, 0x92, 0x41, 0x42, 0x12, 0x19, 0x6b, 0x75, 0x62, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe6, 0x80, 0xa7, 0xe6, 0xa3,
	0x80, 0xe6, 0xb5, 0x8b, 0x1a, 0x25, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0xe8, 0xbf, 0x9e, 0xe6, 0x8e, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x8f, 0xaf, 0xe7,
	0x94, 0xa8, 0xe6, 0x80, 0xa7, 0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x3a, 0x01, 0x2a, 0x1a, 0x23, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6b,
	0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x82, 0x02, 0x0a, 0x1b, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x95, 0x01, 0x92, 0x41, 0x4a, 0x12, 0x20, 0x6b, 0x75,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xe5, 0x86, 0x85, 0x2f, 0xe5, 0xa4, 0x96, 0xe7,
	0xbd, 0x91, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x1a, 0x26,
	0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x86, 0x85, 0x2f, 0xe5, 0xa4, 0x96, 0xe7, 0xbd, 0x91,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x12, 0x40, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0xea,
	0x01, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x93, 0x01, 0x92, 0x41, 0x64, 0x12, 0x19, 0xe5, 0xaf, 0xbc,
	0xe5, 0x85, 0xa5, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x1a, 0x47, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x28, 0xe6, 0x94, 0xaf, 0xe6, 0x8c,
	0x81, 0xe5, 0xa4, 0x9a, 0xe4, 0xba, 0x91, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xaf, 0xbc,
	0xe5, 0x85, 0xa5, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0x3a, 0x20, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x49, 0x44, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x29, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x86, 0x02, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x20, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x22, 0xaf, 0x01, 0x92, 0x41, 0x7b, 0x12, 0x0d, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x6a, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe8,
	0xaf, 0xa5, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe4, 0xbb, 0x85, 0xe7, 0x94, 0xa8, 0xe4, 0xba,
	0x8e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c,
	0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0x9a, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe4, 0xbb, 0xbb, 0xe4,
	0xbd, 0x95, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe7, 0x9a,
	0x84, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe5, 0x8a, 0xa8, 0xe4, 0xbd, 0x9c,
	0xe3, 0x80, 0x82, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x1a, 0x26, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x7d, 0x12, 0x8c, 0x02, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x54, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb3, 0x01,
	0x92, 0x41, 0x7a, 0x12, 0x12, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x1a, 0x64, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x49,
	0x50, 0xef, 0xbc, 0x8c, 0xe7, 0xbb, 0x99, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xa2, 0x9e,
	0xe5, 0x8a, 0xa0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x28, 0xe4, 0xba, 0x91, 0x43, 0x56, 0x4d,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x92, 0x8c, 0x49, 0x44, 0x43, 0xe7, 0xac, 0xac, 0xe4,
	0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x29, 0xef, 0xbc, 0x8c, 0xe4,
	0xbc, 0x9a, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe8, 0x87,
	0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x92, 0x02, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x54, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x32, 0x12, 0x21, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xb3, 0x01, 0x92, 0x41, 0x7a, 0x12, 0x12, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x1a, 0x64, 0xe6, 0x8c,
	0x87, 0xe5, 0xae, 0x9a, 0x49, 0x50, 0xef, 0xbc, 0x8c, 0xe7, 0xbb, 0x99, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x28, 0xe4,
	0xba, 0x91, 0x43, 0x56, 0x4d, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x92, 0x8c, 0x49, 0x44,
	0x43, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0x29, 0xef, 0xbc, 0x8c, 0xe4, 0xbc, 0x9a, 0xe8, 0xa7, 0xa6, 0xe5, 0x8f, 0x91, 0xe7, 0x9b, 0xb8,
	0xe5, 0x85, 0xb3, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x81, 0xe7,
	0xa8, 0x8b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0xeb, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0x92,
	0x41, 0x51, 0x12, 0x12, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x1a, 0x3b, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x49, 0x50,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x6e, 0x6f, 0x64, 0x65, 0x2c, 0x20, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe4, 0xba,
	0x91, 0xe5, 0x92, 0x8c, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x2a, 0x2b, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0xb8, 0x02, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb7, 0x01, 0x92, 0x41, 0x77, 0x12, 0x18, 0xe6,
	0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x1a, 0x5b, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe4,
	0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0x28, 0xe5, 0x8c, 0x85, 0xe6, 0x8b, 0xac, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89,
	0x8b, 0xe5, 0x8a, 0xa8, 0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe3, 0x80, 0x81, 0x43, 0x41, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe3, 0x80,
	0x81, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe7, 0xad, 0x89, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x2a, 0x35, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x2d, 0x2f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x12, 0xec, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x7c, 0x92, 0x41, 0x4c, 0x12, 0x24, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5,
	0xa4, 0x9a, 0xe5, 0x96, 0x9d, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe5, 0x85,
	0x83, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x24, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe7, 0x9a, 0x84, 0xe5, 0x85, 0x83, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x2d, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x95, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x49, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa7,
	0x01, 0x92, 0x41, 0x71, 0x12, 0x22, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0xe4, 0xb8, 0x8b, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x4b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xb8, 0x8b, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0xa6,
	0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9f, 0x90, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe4, 0xb8, 0xba,
	0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe8,
	0xaf, 0xa5, 0xe5, 0x80, 0xbc, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0xa9, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x49, 0x6e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x01, 0x92,
	0x41, 0x7d, 0x12, 0x28, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0xe4, 0xb8, 0x8b, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x51, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xb8, 0x8b, 0xe6, 0x89, 0x80,
	0xe6, 0x9c, 0x89, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9f,
	0x90, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c,
	0xe5, 0x88, 0x99, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe8, 0xaf, 0xa5, 0xe5, 0x80, 0xbc, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x12, 0xab, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x55, 0x92, 0x41, 0x24,
	0x12, 0x0d, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a,
	0x13, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0x89, 0xb9, 0xe5, 0xae, 0x9a, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x2a, 0x26, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x7d, 0x12, 0xb3, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x66, 0x92, 0x41, 0x35, 0x12, 0x0d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x1a, 0x24, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5,
	0xae, 0x9a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xe7, 0x9a, 0x84, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28,
	0x12, 0x26, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x12, 0x8a, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x2e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01, 0x92, 0x41, 0x4d, 0x12, 0x1f, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x2a, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0xb1, 0xe4,
	0xba, 0xab, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x87, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa1, 0x01, 0x92, 0x41,
	0x66, 0x12, 0x25, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9f, 0x90, 0xe4, 0xb8, 0xaa, 0xe9,
	0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8b, 0xe7, 0x9a, 0x84, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x3d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8b, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x28, 0xe7,
	0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x8b, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa2, 0x01, 0x92, 0x41, 0x66, 0x12, 0x25,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9f, 0x90, 0xe4, 0xb8, 0xaa, 0xe4, 0xb8, 0x9a, 0xe5,
	0x8a, 0xa1, 0xe4, 0xb8, 0x8b, 0xe7, 0x9a, 0x84, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x3d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xb8, 0x9a,
	0xe5, 0x8a, 0xa1, 0xe4, 0xb8, 0x8b, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x28, 0xe7, 0x9b, 0xae, 0xe5,
	0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a,
	0xa1, 0x49, 0x44, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x7b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0xa3, 0x02,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0xd2,
	0x01, 0x92, 0x41, 0xac, 0x01, 0x12, 0x13, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x94, 0x01, 0xe6, 0xa0, 0xb9,
	0xe6, 0x8d, 0xae, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe8,
	0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9f, 0x90, 0xe9, 0xa1,
	0xb9, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba,
	0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe6, 0xad, 0xa4, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x89,
	0x80, 0xe6, 0x9c, 0x89, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba,
	0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0xb5, 0x02, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x56, 0x32, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x56, 0x32, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x22, 0xde, 0x01, 0x92, 0x41, 0xb8,
	0x01, 0x12, 0x19, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xae, 0x80, 0xe5, 0x8c, 0x96, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x9a, 0x01, 0xe6,
	0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe7, 0xae, 0x80, 0xe5, 0x8c, 0x96, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82,
	0xe6, 0x9e, 0x9c, 0xe6, 0x9f, 0x90, 0xe9, 0xa1, 0xb9, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe5,
	0x80, 0xbc, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe5, 0xbf,
	0xbd, 0xe7, 0x95, 0xa5, 0xe6, 0xad, 0xa4, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe3, 0x80, 0x82,
	0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0x88,
	0x99, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x89, 0x80,
	0xe6, 0x9c, 0x89, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12,
	0x1a, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0xd8, 0x01, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x76,
	0x92, 0x41, 0x4a, 0x12, 0x19, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x85, 0xac, 0xe5, 0x85,
	0xb1, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x2d,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x85, 0xac, 0xe5, 0x85, 0xb1, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe5, 0x8f, 0x8a, 0xe5, 0x85, 0xac, 0xe5, 0x85, 0xb1, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0xfe, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x25, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x54,
	0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x98, 0x01, 0x92,
	0x41, 0x5b, 0x12, 0x18, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0,
	0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x1a, 0x3f, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x2c, 0x20, 0xe8, 0x85, 0xbe, 0xe8, 0xae, 0xaf, 0xe4, 0xba,
	0x91, 0x56, 0x50, 0x43, 0x2d, 0x43, 0x4e, 0x49, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8,
	0x8b, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0xc5, 0x02, 0x0a, 0x1c, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0xc1, 0x01, 0x92, 0x41,
	0x7a, 0x12, 0x1b, 0xe5, 0x88, 0x87, 0xe6, 0x8d, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7,
	0x9a, 0x84, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x1a, 0x5b,
	0xe5, 0x88, 0x87, 0xe6, 0x8d, 0xa2, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe4, 0xba, 0x91, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0xa8,
	0xa1, 0xe5, 0xbc, 0x8f, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x20, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f,
	0x28, 0xe8, 0x85, 0xbe, 0xe8, 0xae, 0xaf, 0xe4, 0xba, 0x91, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81,
	0x76, 0x70, 0x63, 0x2d, 0x63, 0x6e, 0x69, 0xe7, 0xad, 0x89, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3e, 0x3a, 0x01, 0x2a, 0x22, 0x39, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x12,
	0xd0, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x65, 0x92, 0x41, 0x3c,
	0x12, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x99, 0x9a, 0xe6, 0x8b, 0x9f, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x1a, 0x26, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x99, 0x9a, 0xe6,
	0x8b, 0x9f, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x2c, 0xe4, 0xbe, 0x9d, 0xe6, 0x89, 0x98, 0xe4,
	0xba, 0x8e, 0x68, 0x6f, 0x73, 0x74, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0xc5, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5a,
	0x92, 0x41, 0x28, 0x12, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x99, 0x9a, 0xe6, 0x8b,
	0x9f, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x1a, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8,
	0x99, 0x9a, 0xe6, 0x8b, 0x9f, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x29, 0x2a, 0x27, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x12, 0xdd, 0x01, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x22, 0x63, 0x92, 0x41, 0x28, 0x12, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe9, 0x85, 0x8d, 0xe9, 0xa2, 0x9d, 0x1a, 0x18, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe8, 0x99, 0x9a, 0xe6, 0x8b, 0x9f, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x85, 0x8d, 0xe9,
	0xa2, 0x9d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x1a, 0x2d, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x7d, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0xa8, 0x01, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x92, 0x41, 0x30, 0x12, 0x0a, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x22, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0xe7, 0x9a, 0x84,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x12, 0x21, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x49, 0x50, 0x7d, 0x12, 0xf1, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98,
	0x01, 0x92, 0x41, 0x67, 0x12, 0x16, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x4e, 0x6f, 0x64, 0x65,
	0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x4d, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x50, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe7, 0x94, 0xa8,
	0xe4, 0xba, 0x8e, 0xe5, 0xaf, 0xb9, 0xe6, 0x8e, 0xa5, 0xe5, 0x89, 0x8d, 0xe7, 0xab, 0xaf, 0xe7,
	0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x12, 0x26, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x50, 0x7d, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0xa8, 0x01, 0x0a, 0x0e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x53, 0x92, 0x41, 0x2e, 0x12, 0x18, 0xe5, 0xbd, 0x95, 0xe5, 0x85, 0xa5, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x12,
	0xe5, 0xbd, 0x95, 0xe5, 0x85, 0xa5, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0xf6, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x01, 0x92, 0x41, 0x7b,
	0x12, 0x10, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x6e, 0x6f, 0x64, 0x65, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x1a, 0x67, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x6e, 0x6f, 0x64, 0x65, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3,
	0xe4, 0xbb, 0x85, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0x9a, 0xe8, 0xa7,
	0xa6, 0xe5, 0x8f, 0x91, 0xe4, 0xbb, 0xbb, 0xe4, 0xbd, 0x95, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe7, 0x9a, 0x84, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5,
	0x8c, 0x96, 0xe5, 0x8a, 0xa8, 0xe4, 0xbd, 0x9c, 0xe3, 0x80, 0x82, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x3a, 0x01, 0x2a, 0x1a, 0x17, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0xda, 0x02,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe9,
	0x01, 0x92, 0x41, 0xac, 0x01, 0x12, 0x2e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0xe5, 0x92, 0x8c, 0x6e, 0x6f, 0x64, 0x65,
	0xe7, 0x9a, 0x84, 0xe8, 0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x7a, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0xe5, 0x92, 0x8c, 0x6e, 0x6f, 0x64, 0x65,
	0xe7, 0x9a, 0x84, 0xe8, 0xbd, 0xac, 0xe7, 0xa7, 0xbb, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe4, 0xb8, 0xba, 0xe4, 0xba, 0x86, 0xe5, 0x85, 0xbc,
	0xe5, 0xae, 0xb9, 0xe5, 0xad, 0x98, 0xe9, 0x87, 0x8f, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xef,
	0xbc, 0x8c, 0xe4, 0xbc, 0x9a, 0xe5, 0x90, 0x8c, 0xe6, 0xad, 0xa5, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0xe7, 0x9a, 0x84, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x1a, 0x2e, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0xed, 0x01, 0x0a, 0x12, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01, 0x92, 0x41, 0x60, 0x12, 0x25,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x6e, 0x6f, 0x64, 0x65, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0x62, 0x63, 0x73, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x1a, 0x37, 0xe6, 0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0x62,
	0x63, 0x73, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x2c, 0xe9, 0x98, 0xb2, 0xe6, 0xad, 0xa2, 0xe8,
	0xaf, 0xaf, 0xe5, 0x9b, 0x9e, 0xe6, 0x94, 0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xb8, 0x01, 0x0a, 0x0a, 0x43,
	0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x72, 0x64, 0x6f,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x72, 0x64, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x63, 0x92, 0x41, 0x37, 0x12, 0x15, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb8, 0x8d,
	0xe5, 0x8f, 0xaf, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xe6, 0x80, 0x81, 0x1a, 0x1e, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0xaf,
	0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x3a, 0x01, 0x2a, 0x1a, 0x1e, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x63,
	0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x12, 0xba, 0x01, 0x0a, 0x0c, 0x55, 0x6e, 0x43, 0x6f, 0x72, 0x64,
	0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x43,
	0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5f, 0x92, 0x41, 0x31, 0x12, 0x12, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x8f,
	0xaf, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xe6, 0x80, 0x81, 0x1a, 0x1b, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe5, 0x8f, 0xaf, 0xe8, 0xb0, 0x83, 0xe5, 0xba,
	0xa6, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a,
	0x1a, 0x20, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x75, 0x6e, 0x63, 0x6f, 0x72, 0x64,
	0x6f, 0x6e, 0x12, 0xba, 0x01, 0x0a, 0x09, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x92, 0x41, 0x3d, 0x12, 0x2a, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0x70, 0x6f, 0x64, 0xe8, 0xbf, 0x81, 0xe7, 0xa7, 0xbb, 0x2c, 0xe5, 0xb0, 0x86, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb8, 0x8a, 0xe7, 0x9a, 0x84, 0x20, 0x50, 0x6f, 0x64, 0x20,
	0xe9, 0xa9, 0xb1, 0xe9, 0x80, 0x90, 0x1a, 0x0f, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x70, 0x6f,
	0x64, 0xe8, 0xbf, 0x81, 0xe7, 0xa7, 0xbb, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a,
	0x22, 0x1d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x12,
	0xda, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x44, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x79, 0x92, 0x41, 0x48, 0x12, 0x26, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb8,
	0x8a, 0xe7, 0x9a, 0x84, 0x20, 0x50, 0x6f, 0x64, 0x20, 0xe9, 0xa9, 0xb1, 0xe9, 0x80, 0x90, 0xe5,
	0x89, 0x8d, 0xe9, 0xa3, 0x8e, 0xe9, 0x99, 0xa9, 0xe6, 0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0x1a, 0x1e,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x70, 0x6f, 0x64, 0xe9, 0xa9, 0xb1, 0xe9, 0x80, 0x90, 0xe5,
	0x89, 0x8d, 0xe9, 0xa3, 0x8e, 0xe9, 0x99, 0xa9, 0xe6, 0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x2f, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0xbb, 0x01, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x92, 0x41, 0x28, 0x12, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x1a, 0x12, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa0, 0x87, 0xe7, 0xad,
	0xbe, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x1a, 0x1e, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0xcf, 0x01, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x59, 0x92, 0x41, 0x28, 0x12, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb3, 0xa8, 0xe8, 0xa7, 0xa3, 0x1a, 0x12, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb3, 0xa8, 0xe8, 0xa7, 0xa3, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x1a, 0x23, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xbb, 0x01, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x92, 0x41, 0x28, 0x12, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa1, 0xe7, 0x82, 0xb9, 0x1a, 0x12, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa1, 0xe7, 0x82,
	0xb9, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x1a, 0x1e, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x2f, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0xfd, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x91, 0x01, 0x92, 0x41, 0x56, 0x12, 0x1d, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x1a, 0x35, 0xe6, 0xa0, 0xb9,
	0xe6, 0x8d, 0xae, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe7, 0x9a, 0x84, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0xe8, 0xaf, 0xa6, 0xe6,
	0x83, 0x85, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x7b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x7d, 0x12, 0xf0, 0x01, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x7c, 0x92, 0x41, 0x3e, 0x12, 0x1d, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0xe8, 0xaf, 0xa6,
	0xe6, 0x83, 0x85, 0x1a, 0x1d, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x1a, 0x30, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x7d, 0x12, 0x81, 0x02,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b,
	0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x8c, 0x01, 0x92, 0x41, 0x45, 0x12, 0x28, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xaf, 0xb9, 0xe5,
	0xba, 0x94, 0xe4, 0xba, 0x91, 0xe7, 0x9a, 0x84, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0x19, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0x91, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3e, 0x3a, 0x01, 0x2a, 0x1a, 0x39, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0xe1, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2a, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6d, 0x92, 0x41, 0x32, 0x12, 0x17, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x1a, 0x17, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x2a, 0x30, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x7d, 0x12, 0xed, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x7f, 0x92, 0x41, 0x50, 0x12, 0x1d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x2f, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12,
	0x24, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xcd, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x46,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x5f, 0x92, 0x41, 0x30, 0x12, 0x16, 0xe5, 0x88, 0x9d, 0xe5, 0xa7,
	0x8b, 0xe5, 0x8c, 0x96, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x1a, 0x16, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe8, 0x81, 0x94, 0xe9,
	0x82, 0xa6, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a,
	0x01, 0x2a, 0x22, 0x21, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x66, 0x65, 0x64, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0xda, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x46, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x26, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x72,
	0x92, 0x41, 0x3e, 0x12, 0x1d, 0xe5, 0xb0, 0x86, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xe5,
	0x8a, 0xa0, 0xe5, 0x85, 0xa5, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x1a, 0x1d, 0xe5, 0xb0, 0x86, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xe5, 0x8a,
	0xa0, 0xe5, 0x85, 0xa5, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x64, 0x64, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0xac, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x92, 0x41, 0x2e,
	0x12, 0x0f, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d,
	0xbf, 0x1a, 0x1b, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe6,
	0x9d, 0xbf, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x12, 0xb0, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x92, 0x41, 0x28, 0x12,
	0x0f, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf,
	0x1a, 0x15, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0x91, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d,
	0xbf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a,
	0x1a, 0x22, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x44, 0x7d, 0x12, 0xb7, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x92,
	0x41, 0x32, 0x12, 0x11, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0xe6,
	0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x1a, 0x1d, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0x89, 0xb9,
	0xe5, 0xae, 0x9a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x2a, 0x22, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x12, 0xaa,
	0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1f, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b,
	0x92, 0x41, 0x2e, 0x12, 0x0b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x1a, 0x1f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x44, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x12, 0x9f, 0x02, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcc,
	0x01, 0x92, 0x41, 0xa8, 0x01, 0x12, 0x11, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x92, 0x01, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d,
	0xae, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe8, 0xbf, 0x87,
	0xe6, 0xbb, 0xa4, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc,
	0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9f, 0x90, 0xe9, 0xa1, 0xb9, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5,
	0x88, 0x99, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe6, 0xad, 0xa4, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef,
	0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0xb8, 0x01,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x50, 0x43,
	0x12, 0x25, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x50, 0x43,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x56, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x57, 0x92, 0x41, 0x2e, 0x12, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xba, 0x91, 0x56,
	0x50, 0x43, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x18, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe4, 0xba, 0x91, 0x56, 0x50, 0x43, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x76, 0x70, 0x63, 0x12, 0xbe, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x50, 0x43, 0x12, 0x25, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56,
	0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x92, 0x41, 0x22, 0x12,
	0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0x91, 0x76, 0x70, 0x63, 0x1a, 0x12, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0x91, 0x76, 0x70, 0x63, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x1a, 0x2d, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x76, 0x70, 0x63, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0x7d, 0x2f, 0x7b, 0x76, 0x70, 0x63, 0x49, 0x44, 0x7d, 0x12, 0xcd, 0x01, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x50, 0x43, 0x12, 0x25, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x56, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x92, 0x41, 0x34,
	0x12, 0x15, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x76, 0x70,
	0x63, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x1b, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7,
	0x89, 0xb9, 0xe5, 0xae, 0x9a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x76, 0x70, 0x63, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x2a, 0x2d, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x76, 0x70, 0x63, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0x7d, 0x2f, 0x7b, 0x76, 0x70, 0x63, 0x49, 0x44, 0x7d, 0x12, 0xb3, 0x02, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x50, 0x43, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x50, 0x43, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd7, 0x01, 0x92, 0x41, 0xb0, 0x01, 0x12, 0x15, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x56, 0x50, 0x43, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x1a, 0x96, 0x01, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x20, 0x56, 0x50, 0x43, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc, 0x8c,
	0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9f, 0x90, 0xe9, 0xa1, 0xb9, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0x88,
	0x99, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe6, 0xad, 0xa4, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc,
	0x8c, 0xe5, 0x88, 0x99, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x76, 0x70, 0x63, 0x12,
	0xe3, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x92, 0x41, 0x49, 0x12, 0x18, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x2d, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x44, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe7, 0x9a, 0x84, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x44, 0x7d, 0x12, 0xc1, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x50, 0x43,
	0x43, 0x69, 0x64, 0x72, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x50, 0x43, 0x43, 0x69, 0x64, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x50, 0x43, 0x43,
	0x69, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x92, 0x41, 0x3f,
	0x12, 0x14, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x76, 0x70, 0x63, 0x20, 0x63, 0x69, 0x64, 0x72,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x27, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x76, 0x70,
	0x63, 0x49, 0x44, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0x76,
	0x70, 0x63, 0xe7, 0x9a, 0x84, 0x63, 0x69, 0x64, 0x72, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x70, 0x63, 0x63, 0x69, 0x64,
	0x72, 0x2f, 0x7b, 0x76, 0x70, 0x63, 0x49, 0x44, 0x7d, 0x12, 0xce, 0x01, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a,
	0x92, 0x41, 0x40, 0x12, 0x0f, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe7, 0xbb, 0x84, 0x1a, 0x2d, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xef, 0xbc, 0x8c, 0xe7, 0x94,
	0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9,
	0xe3, 0x80, 0x82, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xc4, 0x01, 0x0a, 0x0f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x60, 0x92, 0x41, 0x28, 0x12, 0x0f, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x15, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x4e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x1a, 0x2a, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x7d, 0x12, 0xc4, 0x02, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdf, 0x01, 0x92, 0x41, 0xa9, 0x01, 0x12, 0x0f, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x95,
	0x01, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0x89, 0xb9, 0xe5, 0xae, 0x9a, 0x4e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe3, 0x80, 0x82, 0xe5, 0xbd, 0x93, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0xe6, 0x9c, 0x89, 0xe7, 0x95, 0x99, 0xe5, 0xad, 0x98, 0xe7, 0x9a,
	0x84, 0x4e, 0x6f, 0x64, 0x65, 0xe6, 0x97, 0xb6, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe5, 0x85,
	0x81, 0xe8, 0xae, 0xb8, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe8, 0xa6, 0x81, 0xe5, 0x88, 0xa0, 0xe9,
	0x99, 0xa4, 0xe6, 0x9c, 0x89, 0x4e, 0x6f, 0x64, 0x65, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xb7, 0xe8, 0xae, 0xbe, 0xe7, 0xbd,
	0xae, 0xe5, 0xbc, 0xba, 0xe5, 0x88, 0xb6, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0xe3, 0x80, 0x82, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x2a, 0x2a, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x7d, 0x12, 0xc0, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x92, 0x41, 0x30, 0x12, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x1d, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12,
	0x2a, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x6e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x7d, 0x12, 0xed, 0x01, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x7a, 0x92, 0x41, 0x3d, 0x12, 0x1e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x1b, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d,
	0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0xb7, 0x02, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd8, 0x01, 0x92, 0x41, 0xb0,
	0x01, 0x12, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x96, 0x01, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d,
	0xae, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe8, 0xbf, 0x87,
	0xe6, 0xbb, 0xa4, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9f, 0x90, 0xe9, 0xa1,
	0xb9, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba,
	0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe6, 0xad, 0xa4, 0xe6,
	0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x89,
	0x80, 0xe6, 0x9c, 0x89, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba,
	0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x88, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73, 0x70, 0x22, 0x96, 0x01, 0x92, 0x41, 0x52, 0x12, 0x27, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x97, 0xb6, 0xe6, 0x8e,
	0xa8, 0xe8, 0x8d, 0x90, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x1a, 0x27, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x97, 0xb6, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90, 0xe7, 0x9a, 0x84,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0xf4, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01, 0x92, 0x41, 0x4f, 0x12, 0x15,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xa7, 0xbb, 0xe5, 0x85, 0xa5, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0x1a, 0x36, 0xe5, 0xb0, 0x86, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe5, 0xb7, 0xb2, 0xe6, 0x9c, 0x89, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7,
	0xa7, 0xbb, 0xe5, 0x85, 0xa5, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe8, 0xbf,
	0x9b, 0xe8, 0xa1, 0x8c, 0xe7, 0xba, 0xb3, 0xe7, 0xae, 0xa1, 0xe3, 0x80, 0x82, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x91, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x6f,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x92, 0x41,
	0x60, 0x12, 0x15, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe7, 0xa7, 0xbb, 0xe9,
	0x99, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x1a, 0x47, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a,
	0x49, 0x50, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe4, 0xbb, 0x8e, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe7, 0xbb, 0x84, 0xe4, 0xb8, 0xad, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0xef, 0xbc, 0x8c,
	0xe4, 0xbd, 0x86, 0xe6, 0x98, 0xaf, 0xe8, 0xaf, 0xa5, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4,
	0xbb, 0x8d, 0xe7, 0x84, 0xb6, 0xe5, 0x9c, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xb8,
	0xad, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x2a, 0x2f, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0xfa, 0x03, 0x0a, 0x11,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x03, 0x92, 0x41, 0xcc, 0x02, 0x12, 0x1b, 0xe5,
	0x9b, 0x9e, 0xe6, 0x94, 0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe4, 0xb8,
	0xad, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x1a, 0xac, 0x02, 0xe6, 0x8c, 0x87,
	0xe5, 0xae, 0x9a, 0x49, 0x50, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe4, 0xbb, 0x8e, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe4, 0xb8, 0xad, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4,
	0xef, 0xbc, 0x8c, 0xe4, 0xb9, 0x9f, 0xe4, 0xbb, 0x8e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4,
	0xb8, 0xad, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe6, 0xb8,
	0x85, 0xe7, 0x90, 0x86, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x9b, 0x9e, 0xe6, 0x94, 0xb6,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe3, 0x80, 0x82, 0xe8, 0xaf, 0xa5, 0xe6, 0x8e, 0xa5, 0xe5,
	0x8f, 0xa3, 0xe4, 0xb8, 0xba, 0xe5, 0xbc, 0x82, 0xe6, 0xad, 0xa5, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f,
	0xa3, 0xef, 0xbc, 0x8c, 0xe5, 0xbd, 0x93, 0xe8, 0xaf, 0xa5, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3,
	0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x97, 0xb6, 0xef,
	0xbc, 0x8c, 0xe4, 0xbb, 0x85, 0xe8, 0x83, 0xbd, 0xe7, 0xa1, 0xae, 0xe8, 0xae, 0xa4, 0xe6, 0xb8,
	0x85, 0xe7, 0x90, 0x86, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4,
	0xbf, 0x9d, 0xe8, 0xaf, 0x81, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb8, 0x85, 0xe7, 0x90,
	0x86, 0xe5, 0xb7, 0xb2, 0xe7, 0xbb, 0x8f, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xef, 0xbc, 0x8c,
	0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe7, 0xa1, 0xae, 0xe8,
	0xae, 0xa4, 0xe8, 0xbf, 0x9b, 0xe5, 0xba, 0xa6, 0xef, 0xbc, 0x8c, 0xe9, 0x9c, 0x80, 0xe8, 0xa6,
	0x81, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84,
	0x54, 0x61, 0x73, 0x6b, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe3, 0x80, 0x82, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x3a,
	0x01, 0x2a, 0x2a, 0x34, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x7d, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0xac, 0x04, 0x0a, 0x13, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x32,
	0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56,
	0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbb, 0x03, 0x92, 0x41, 0xfb, 0x02,
	0x12, 0x4a, 0xe5, 0x9b, 0x9e, 0xe6, 0x94, 0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb,
	0x84, 0xe4, 0xb8, 0xad, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x8c,
	0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x71, 0x75, 0x65, 0x72, 0x79, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe6, 0xb8, 0x85,
	0xe7, 0x90, 0x86, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x1a, 0xac, 0x02, 0xe6,
	0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x49, 0x50, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe4, 0xbb, 0x8e,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe4, 0xb8, 0xad, 0xe7, 0xa7, 0xbb, 0xe9,
	0x99, 0xa4, 0xef, 0xbc, 0x8c, 0xe4, 0xb9, 0x9f, 0xe4, 0xbb, 0x8e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe4, 0xb8, 0xad, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6,
	0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x9b, 0x9e, 0xe6,
	0x94, 0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe3, 0x80, 0x82, 0xe8, 0xaf, 0xa5, 0xe6, 0x8e,
	0xa5, 0xe5, 0x8f, 0xa3, 0xe4, 0xb8, 0xba, 0xe5, 0xbc, 0x82, 0xe6, 0xad, 0xa5, 0xe6, 0x8e, 0xa5,
	0xe5, 0x8f, 0xa3, 0xef, 0xbc, 0x8c, 0xe5, 0xbd, 0x93, 0xe8, 0xaf, 0xa5, 0xe6, 0x8e, 0xa5, 0xe5,
	0x8f, 0xa3, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x97,
	0xb6, 0xef, 0xbc, 0x8c, 0xe4, 0xbb, 0x85, 0xe8, 0x83, 0xbd, 0xe7, 0xa1, 0xae, 0xe8, 0xae, 0xa4,
	0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0xad, 0xa3, 0xe5,
	0xb8, 0xb8, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe8, 0x83,
	0xbd, 0xe4, 0xbf, 0x9d, 0xe8, 0xaf, 0x81, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb8, 0x85,
	0xe7, 0x90, 0x86, 0xe5, 0xb7, 0xb2, 0xe7, 0xbb, 0x8f, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xef,
	0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe7, 0xa1,
	0xae, 0xe8, 0xae, 0xa4, 0xe8, 0xbf, 0x9b, 0xe5, 0xba, 0xa6, 0xef, 0xbc, 0x8c, 0xe9, 0x9c, 0x80,
	0xe8, 0xa6, 0x81, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0x9a, 0x84, 0x54, 0x61, 0x73, 0x6b, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe8, 0xaf, 0xa6, 0xe7,
	0xbb, 0x86, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe3, 0x80, 0x82, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x36, 0x2a, 0x34, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x7d, 0x2f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0xd6, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x92, 0x41, 0x39,
	0x12, 0x10, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6e, 0x6f, 0x64, 0x65, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x1a, 0x25, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xb1, 0x9e, 0xe4, 0xba, 0x8e,
	0xe8, 0xaf, 0xa5, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe7, 0x9a, 0x84, 0x4e,
	0x6f, 0x64, 0x65, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12,
	0x2f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x6e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0xe0, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x32, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73,
	0x92, 0x41, 0x39, 0x12, 0x10, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6e, 0x6f, 0x64, 0x65, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x25, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xb1, 0x9e,
	0xe4, 0xba, 0x8e, 0xe8, 0xaf, 0xa5, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe7,
	0x9a, 0x84, 0x4e, 0x6f, 0x64, 0x65, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x31, 0x12, 0x2f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x7d, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0xe0, 0x03, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2d,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe6, 0x02,
	0x92, 0x41, 0xa1, 0x02, 0x12, 0x17, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x44, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x85, 0x02,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe4,
	0xb8, 0xad, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4,
	0xbc, 0x9a, 0xe5, 0xaf, 0xbc, 0xe8, 0x87, 0xb4, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0,
	0xe5, 0xbc, 0x95, 0xe5, 0x85, 0xa5, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8, 0xe8, 0xbf, 0x9b, 0xe8,
	0xa1, 0x8c, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe5, 0xb9, 0xb6, 0xe5, 0x8a,
	0xa0, 0xe5, 0x85, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe3, 0x80, 0x82, 0xe8, 0xaf, 0xa5,
	0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe7, 0x9a, 0x84, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0xe5, 0x8f, 0xaa, 0xe8, 0x83, 0xbd,
	0xe6, 0xaf, 0x94, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe8, 0xa7, 0x84, 0xe6, 0xa8, 0xa1, 0xe5,
	0xa4, 0xa7, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe6, 0xaf, 0x94, 0xe4, 0xb9,
	0x8b, 0xe5, 0x89, 0x8d, 0xe5, 0xb0, 0x8f, 0xef, 0xbc, 0x9b, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c,
	0xe8, 0xa6, 0x81, 0xe5, 0x87, 0x8f, 0xe5, 0xb0, 0x8f, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7,
	0xbb, 0x84, 0xe7, 0x9a, 0x84, 0xe8, 0xa7, 0x84, 0xe6, 0xa8, 0xa1, 0xe8, 0xaf, 0xb7, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x22, 0x36,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x6e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x7d, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0xba, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x2d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xc0, 0x01, 0x92, 0x41, 0x7c, 0x12, 0x17, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x44, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a,
	0x61, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0xe4, 0xb8, 0xad, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0x9a, 0x84, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe4, 0xb8,
	0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf, 0xe4, 0xbf, 0xae, 0xe6, 0xad, 0xa3, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe4, 0xb8, 0x8d, 0xe4, 0xb8, 0x80, 0xe8, 0x87, 0xb4, 0xe6, 0x83, 0x85, 0xe5,
	0x86, 0xb5, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x22, 0x36, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x7d, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0xb4, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78,
	0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x53, 0x69,
	0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd, 0x01, 0x92, 0x41, 0x7b,
	0x12, 0x1b, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x6d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x2f,
	0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x5c, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe4, 0xb8,
	0xad, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xe7, 0x9a, 0x84, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe6, 0x9c, 0x80, 0xe5, 0xb0,
	0x8f, 0xe9, 0x99, 0x90, 0xe9, 0xa2, 0x9d, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81,
	0xe6, 0x98, 0xaf, 0xe5, 0x8d, 0x8f, 0xe8, 0xb0, 0x83, 0xe5, 0xa4, 0x9a, 0x6e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x39, 0x3a, 0x01, 0x2a, 0x22, 0x34, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x7d,
	0x2f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x88, 0x02, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x92, 0x41, 0x4c, 0x12, 0x24, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe5, 0xae, 0x9a, 0xe6, 0x97,
	0xb6, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5,
	0x1a, 0x24, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1,
	0xa0, 0xe5, 0xae, 0x9a, 0xe6, 0x97, 0xb6, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9,
	0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x3a, 0x01, 0x2a, 0x22,
	0x34, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x6e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0xbb, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbb, 0x01, 0x92, 0x41, 0x7e, 0x12, 0x2d, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe7, 0x9a, 0x84, 0xe7,
	0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb8,
	0x8a, 0xe6, 0x9e, 0xb6, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac, 0x1a, 0x4d, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0xe4, 0xba, 0x91, 0xe7, 0x9a, 0x84, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe6, 0x96, 0xb9,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0x84, 0x9a, 0xe6, 0x9c, 0xac, 0x2c, 0x20, 0xe7, 0x9b,
	0xae, 0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12,
	0x32, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b,
	0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x12, 0x90, 0x02, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x84, 0x01, 0x92, 0x41, 0x46, 0x12, 0x1e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0,
	0xe8, 0xbd, 0xac, 0xe6, 0x8d, 0xa2, 0xe4, 0xb8, 0xba, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6,
	0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x1a, 0x24, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0,
	0xe8, 0xbd, 0xac, 0xe6, 0x8d, 0xa2, 0xe4, 0xb8, 0xba, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6,
	0xa8, 0xa1, 0xe7, 0x89, 0x88, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x35, 0x22, 0x33, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x95, 0x02, 0x0a, 0x18, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x01, 0x92, 0x41, 0x4c, 0x12, 0x24, 0xe5, 0xbc,
	0x80, 0xe5, 0x90, 0xaf, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe5,
	0xae, 0xb9, 0x1a, 0x24, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe7, 0xbb, 0x84, 0xe7, 0x9a, 0x84, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe4, 0xbc, 0xb8, 0xe7,
	0xbc, 0xa9, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x3a, 0x01,
	0x2a, 0x22, 0x3b, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x99,
	0x02, 0x0a, 0x19, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x30, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x96, 0x01, 0x92, 0x41, 0x4c, 0x12, 0x24, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0x87,
	0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0x1a, 0x24, 0xe5,
	0x85, 0xb3, 0xe9, 0x97, 0xad, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xbb, 0x84, 0xe7, 0x9a,
	0x84, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0xe5, 0x8a, 0x9f,
	0xe8, 0x83, 0xbd, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x3a, 0x01, 0x2a, 0x22, 0x3c, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xa3, 0x02, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x01, 0x92, 0x41, 0x60,
	0x12, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb5, 0x1a, 0x44, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe6, 0x88, 0x96, 0xe8,
	0x80, 0x85, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb5,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x7d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x12, 0xd7, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x33, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcb, 0x01, 0x92,
	0x41, 0x68, 0x12, 0x2c, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe7, 0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x43, 0x41, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb5,
	0x1a, 0x38, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbb,
	0xb4, 0xe5, 0xba, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe6, 0xb1, 0xa0, 0xe7, 0x9a, 0x84, 0x43, 0x41, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb5, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a,
	0x12, 0x58, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x7d,
	0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x59, 0x92, 0x41, 0x34, 0x12, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xbb, 0xbb,
	0xe5, 0x8a, 0xa1, 0x1a, 0x24, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x95, 0xbf, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe7, 0x9a, 0x84, 0xe5, 0x90, 0x8e,
	0xe5, 0x8f, 0xb0, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a,
	0x01, 0x2a, 0x22, 0x17, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x83, 0x02, 0x0a, 0x09,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb0,
	0x01, 0x92, 0x41, 0x7c, 0x12, 0x10, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0xe5, 0xa4, 0xb1, 0xe8,
	0xb4, 0xa5, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x68, 0xe9, 0x92, 0x88, 0xe5, 0xaf, 0xb9, 0xe5, 0xa4,
	0xb1, 0xe8, 0xb4, 0xa5, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x2c, 0x20, 0xe8,
	0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0xe6, 0x93, 0x8d, 0xe4, 0xbd,
	0x9c, 0x2e, 0x20, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0xe4, 0xbb, 0x85, 0xe9, 0x99, 0x90, 0xe4,
	0xba, 0x8e, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe4, 0xb8,
	0x94, 0xe4, 0xbb, 0x8e, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5,
	0x73, 0x74, 0x65, 0x70, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x1a, 0x26, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x7d, 0x2f, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x12, 0xb8, 0x02, 0x0a, 0x08, 0x53, 0x6b, 0x69, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1f,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x53, 0x6b, 0x69, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x53, 0x6b, 0x69, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xe8, 0x01, 0x92, 0x41, 0xb4, 0x01, 0x12, 0x16, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87,
	0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x54, 0x61, 0x73, 0x6b,
	0x1a, 0x99, 0x01, 0xe9, 0x92, 0x88, 0xe5, 0xaf, 0xb9, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe7,
	0x9a, 0x84, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x2c, 0x20, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c,
	0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0x2e, 0x20, 0xe8, 0xb7,
	0xb3, 0xe8, 0xbf, 0x87, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe4, 0xbb, 0x85, 0xe6, 0x93, 0x8d,
	0xe4, 0xbd, 0x9c, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe4,
	0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe4, 0xb8, 0x94, 0xe4, 0xbb, 0x8e, 0xe4, 0xb8, 0x8b, 0xe4, 0xb8,
	0x80, 0xe6, 0xad, 0xa5, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c,
	0x2c, 0x20, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0xe6, 0x9c,
	0x89, 0xe7, 0x9b, 0xb8, 0xe4, 0xba, 0x92, 0xe4, 0xbe, 0x9d, 0xe8, 0xb5, 0x96, 0xe4, 0xb8, 0x8d,
	0xe5, 0xbb, 0xba, 0xe8, 0xae, 0xae, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x1a, 0x25, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x7b,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x6b, 0x69, 0x70, 0x12, 0xa1, 0x01, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4c, 0x92, 0x41, 0x1e, 0x12, 0x0a, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x54,
	0x61, 0x73, 0x6b, 0x1a, 0x10, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x54, 0x61, 0x73, 0x6b, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x1a, 0x20,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x7d,
	0x12, 0x9e, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x21, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x92, 0x41, 0x1e, 0x12, 0x0a, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x10, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7,
	0x89, 0xb9, 0xe5, 0xae, 0x9a, 0x54, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x2a,
	0x20, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x7d, 0x12, 0x9d, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51,
	0x92, 0x41, 0x26, 0x12, 0x0a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x54, 0x61, 0x73, 0x6b, 0x1a,
	0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12,
	0x20, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x7d, 0x12, 0x99, 0x02, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1f,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xc9, 0x01, 0x92, 0x41, 0xa6, 0x01, 0x12, 0x10, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0x54, 0x61, 0x73, 0x6b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x91, 0x01, 0xe6, 0xa0, 0xb9,
	0xe6, 0x8d, 0xae, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe8,
	0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0x54, 0x61, 0x73, 0x6b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef,
	0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9f, 0x90, 0xe9, 0xa1, 0xb9, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c,
	0xe5, 0x88, 0x99, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe6, 0xad, 0xa4, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x89, 0x80, 0xe6, 0x9c,
	0x89, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba,
	0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x90, 0x02,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x92, 0x41, 0x61,
	0x12, 0x1e, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x3f, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2d, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xe4, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe7, 0x01,
	0x92, 0x41, 0xa8, 0x01, 0x12, 0x38, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0xe8, 0xaf, 0xa5, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe4,
	0xb8, 0xba, 0xe5, 0x85, 0xa8, 0xe9, 0x87, 0x8f, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x1a, 0x6c,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xef, 0xbc,
	0x8c, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xe5,
	0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xef, 0xbc, 0x8c, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe4, 0xb8, 0xba, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x35, 0x3a, 0x01, 0x2a, 0x1a, 0x30, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x12, 0xda, 0x03, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x33, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xce, 0x02, 0x92, 0x41, 0xfa, 0x01, 0x12, 0x7b, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8,
	0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xef, 0xbc, 0x8c, 0xe4,
	0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0x87,
	0xaa, 0xe7, 0xa0, 0x94, 0xe4, 0xba, 0x91, 0xe4, 0xbe, 0xbf, 0xe4, 0xba, 0x8e, 0xe4, 0xba, 0xa7,
	0xe5, 0x93, 0x81, 0xe8, 0xae, 0xb0, 0xe5, 0xbf, 0x86, 0xe4, 0xb8, 0x8a, 0xe6, 0xac, 0xa1, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x1a, 0x7b, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8,
	0xa6, 0x81, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0x87, 0xaa, 0xe7, 0xa0,
	0x94, 0xe4, 0xba, 0x91, 0xe4, 0xbe, 0xbf, 0xe4, 0xba, 0x8e, 0xe4, 0xba, 0xa7, 0xe5, 0x93, 0x81,
	0xe8, 0xae, 0xb0, 0xe5, 0xbf, 0x86, 0xe4, 0xb8, 0x8a, 0xe6, 0xac, 0xa1, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe6, 0xb1, 0xa0, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x3a, 0x01, 0x2a, 0x1a, 0x45, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x7d, 0x12, 0x87, 0x02, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x8a, 0x01, 0x92, 0x41, 0x4f, 0x12, 0x1e, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x2d, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6,
	0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x2a, 0x30, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x12, 0x87,
	0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f,
	0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x93, 0x01, 0x92, 0x41, 0x58, 0x12, 0x1e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x36, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe7,
	0x9a, 0x84, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x12, 0xf5, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xfe, 0x01, 0x92, 0x41, 0xce, 0x01, 0x12, 0x24, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0xa5, 0x01, 0xe6,
	0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9f,
	0x90, 0xe9, 0xa1, 0xb9, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0xba,
	0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe6,
	0xad, 0xa4, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe6, 0x9e,
	0x9c, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe9, 0x83, 0xbd,
	0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x8a, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01,
	0x92, 0x41, 0x48, 0x12, 0x22, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x2f, 0xe5, 0x85, 0xb3, 0xe9,
	0x97, 0xad, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xbc, 0xb9, 0xe6, 0x80, 0xa7, 0xe6, 0x89,
	0xa9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0x1a, 0x22, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x2f,
	0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xbc, 0xb9, 0xe6,
	0x80, 0xa7, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3c, 0x3a, 0x01, 0x2a, 0x1a, 0x37, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x8a, 0x02,
	0x0a, 0x15, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74,
	0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x53,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x92, 0x41, 0x50, 0x12, 0x26, 0x43, 0x41, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xae, 0x9e, 0xe9, 0x99, 0x85, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xe5, 0x90, 0x8c, 0xe6, 0xad, 0xa5, 0xe8, 0x87, 0xb3, 0xe7, 0xae, 0xa1, 0xe6, 0x8e, 0xa7, 0xe7,
	0xab, 0xaf, 0x1a, 0x26, 0x43, 0x41, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xae, 0x9e, 0xe9,
	0x99, 0x85, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe5, 0x90, 0x8c, 0xe6, 0xad, 0xa5, 0xe8, 0x87,
	0xb3, 0xe7, 0xae, 0xa1, 0xe6, 0x8e, 0xa7, 0xe7, 0xab, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a,
	0x3a, 0x01, 0x2a, 0x1a, 0x35, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x12, 0xf3, 0x01, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x85, 0x01, 0x92, 0x41, 0x42, 0x12, 0x18,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0x1a, 0x26, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe7,
	0x89, 0x88, 0x28, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x3a, 0x01, 0x2a, 0x22, 0x35, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x12, 0xfc, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e,
	0x01, 0x92, 0x41, 0x3a, 0x12, 0x1e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x18, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4b, 0x3a, 0x01, 0x2a, 0x1a, 0x46, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d,
	0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b,
	0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x7d, 0x12,
	0xf3, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x85, 0x01,
	0x92, 0x41, 0x34, 0x12, 0x18, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x18, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0x89, 0xb9, 0xe5, 0xae, 0x9a, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x2a, 0x46, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x44, 0x7d, 0x12, 0xfa, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x02,
	0x92, 0x41, 0xd1, 0x01, 0x12, 0x24, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0xe4, 0xb8, 0x8b, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8,
	0xa1, 0xe7, 0x89, 0x88, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0xa8, 0x01, 0xe6, 0xa0, 0xb9,
	0xe6, 0x8d, 0xae, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe8,
	0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d,
	0xbf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c,
	0xe6, 0x9f, 0x90, 0xe9, 0xa1, 0xb9, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe5, 0x80, 0xbc, 0xe4,
	0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe5, 0xbf, 0xbd, 0xe7, 0x95,
	0xa5, 0xe6, 0xad, 0xa4, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82,
	0xe6, 0x9e, 0x9c, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe9,
	0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe4, 0xb8, 0x8b, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6,
	0xa8, 0xa1, 0xe7, 0x89, 0x88, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x12, 0xfc, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x92, 0x41, 0x46, 0x12, 0x2a, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8b, 0xe7, 0x9a,
	0x84, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1,
	0xe7, 0x89, 0x88, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x1a, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0xe8, 0xaf, 0xa6,
	0xe6, 0x83, 0x85, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x12, 0x46, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44,
	0x7d, 0x12, 0xee, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7b, 0x92, 0x41, 0x36, 0x12, 0x12, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0x1a, 0x20,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe6, 0xa8, 0xa1, 0xe7,
	0x89, 0x88, 0x28, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x3a, 0x01, 0x2a, 0x22, 0x37, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x12, 0xfd, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x01, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x18, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0x89,
	0xb9, 0xe5, 0xae, 0x9a, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x2a, 0x4a, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f,
	0x7b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x44, 0x7d, 0x12, 0x82, 0x03, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x94, 0x02, 0x92, 0x41, 0xd1, 0x01, 0x12, 0x24, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9,
	0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8b, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0xa8, 0x01,
	0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8,
	0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82,
	0xe6, 0x9e, 0x9c, 0xe6, 0x9f, 0x90, 0xe9, 0xa1, 0xb9, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe5,
	0x80, 0xbc, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe5, 0xbf,
	0xbd, 0xe7, 0x95, 0xa5, 0xe6, 0xad, 0xa4, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe3, 0x80, 0x82,
	0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0x88,
	0x99, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8b, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe8, 0x8a, 0x82, 0xe7,
	0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0xd5, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x92, 0x41, 0x2e, 0x12, 0x15, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x1a, 0x15, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5,
	0x8f, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01,
	0x2a, 0x22, 0x2c, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0xdb, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0x92,
	0x41, 0x28, 0x12, 0x0f, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6,
	0xe5, 0x8f, 0xb7, 0x1a, 0x15, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0x91, 0xe8, 0xb4,
	0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d,
	0x3a, 0x01, 0x2a, 0x1a, 0x38, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x12, 0x94, 0x02,
	0x0a, 0x13, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3,
	0x01, 0x92, 0x41, 0x69, 0x12, 0x0f, 0xe8, 0xbf, 0x81, 0xe7, 0xa7, 0xbb, 0xe4, 0xba, 0x91, 0xe8,
	0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x1a, 0x56, 0xe8, 0xbf, 0x81, 0xe7, 0xa7, 0xbb, 0xe5, 0x8a, 0xa0,
	0xe5, 0xaf, 0x86, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x28, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa, 0xe8,
	0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe8, 0xbf, 0x81, 0xe7, 0xa7, 0xbb, 0xe3, 0x80, 0x81, 0xe5, 0xa4,
	0x9a, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe3, 0x80, 0x81, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8,
	0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe8, 0xbf, 0x81, 0xe7, 0xa7, 0xbb, 0x29, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x1a, 0x2c, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0xea, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x7d, 0x92, 0x41, 0x3a, 0x12, 0x18, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x20, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x1a, 0x1e, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0x89, 0xb9, 0xe5, 0xae, 0x9a, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x20, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x2a, 0x38, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x7d, 0x12, 0xd6, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xee, 0x01, 0x92, 0x41, 0xb6, 0x01,
	0x12, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0xe8, 0xb4,
	0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x99, 0x01, 0xe6, 0xa0, 0xb9,
	0xe6, 0x8d, 0xae, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe8,
	0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f,
	0xb7, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c,
	0xe6, 0x9f, 0x90, 0xe9, 0xa1, 0xb9, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe5, 0x80, 0xbc, 0xe4,
	0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe5, 0xbf, 0xbd, 0xe7, 0x95,
	0xa5, 0xe6, 0xad, 0xa4, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82,
	0xe6, 0x9e, 0x9c, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe9,
	0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89,
	0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0xf3, 0x02, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xfd, 0x01, 0x92, 0x41, 0xd6, 0x01, 0x12, 0x38, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x20, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x2c, 0x20, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x1a, 0x99, 0x01, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x20, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc,
	0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9f, 0x90, 0xe9, 0xa1, 0xb9, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5,
	0x88, 0x99, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe6, 0xad, 0xa4, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef,
	0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0xe5, 0x01, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78,
	0x92, 0x41, 0x34, 0x12, 0x18, 0xe6, 0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0xe4, 0xba, 0x91, 0xe8, 0xb4,
	0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe6, 0x80, 0xa7, 0x1a, 0x18, 0xe6,
	0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x8f,
	0xaf, 0xe7, 0x94, 0xa8, 0xe6, 0x80, 0xa7, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x3a, 0x01, 0x2a,
	0x22, 0x36, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xe6, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01,
	0x92, 0x41, 0x46, 0x12, 0x21, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x61, 0x77, 0x73, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x21, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x61, 0x77,
	0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72,
	0x6f, 0x6c, 0x65, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12,
	0x30, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x12, 0xe1, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x92, 0x41,
	0x3a, 0x12, 0x1b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x1b,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x34, 0x12, 0x32, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0xcc, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x92, 0x41, 0x32, 0x12,
	0x17, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9f, 0x9f, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x17, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0xe8, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x92, 0x41, 0x44, 0x12, 0x20, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe5, 0x8f, 0xaf,
	0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x20, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0xe5,
	0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f,
	0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x12,
	0xee, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x92, 0x41, 0x3e, 0x12, 0x1d,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f,
	0x9f, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x1d, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x12, 0xd1, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x70,
	0x63, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x70, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x56, 0x70, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x73, 0x92, 0x41, 0x40, 0x12, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xba, 0x91, 0xe6,
	0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0x76, 0x70, 0x63, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xba, 0x91, 0xe6,
	0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0x76, 0x70, 0x63, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f,
	0x76, 0x70, 0x63, 0x73, 0x12, 0xfd, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x69,
	0x64, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x70,
	0x63, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x69, 0x64, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x69, 0x64, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e, 0x92, 0x41, 0x36, 0x12, 0x19, 0xe4, 0xba, 0x91, 0x76, 0x70,
	0x63, 0xe4, 0xb8, 0x8b, 0x63, 0x69, 0x64, 0x72, 0xe5, 0x86, 0xb2, 0xe7, 0xaa, 0x81, 0xe6, 0xa3,
	0x80, 0xe6, 0xb5, 0x8b, 0x1a, 0x19, 0xe4, 0xba, 0x91, 0x76, 0x70, 0x63, 0xe4, 0xb8, 0x8b, 0x63,
	0x69, 0x64, 0x72, 0xe5, 0x86, 0xb2, 0xe7, 0xaa, 0x81, 0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x76, 0x70, 0x63, 0x73, 0x2f,
	0x7b, 0x76, 0x70, 0x63, 0x49, 0x64, 0x7d, 0x2f, 0x63, 0x69, 0x64, 0x72, 0x63, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x12, 0xdf, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x92, 0x41,
	0x42, 0x12, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x76, 0x70, 0x63, 0xe5, 0xad, 0x90, 0xe7,
	0xbd, 0x91, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x29, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae,
	0x76, 0x70, 0x63, 0x49, 0x44, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0x76, 0x70, 0x63, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0xe7, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x2e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6b, 0x92, 0x41, 0x2e, 0x12, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8, 0xe7, 0xbb, 0x84, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a,
	0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8, 0xe7, 0xbb, 0x84,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0x7d, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0xc0, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72,
	0x73, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x92, 0x41,
	0x2e, 0x12, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xaf, 0x86, 0xe9, 0x92, 0xa5, 0xe5,
	0xaf, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe5, 0xaf, 0x86, 0xe9, 0x92, 0xa5, 0xe5, 0xaf, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x6b, 0x65, 0x79, 0x70, 0x61,
	0x69, 0x72, 0x73, 0x12, 0xef, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2c,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x92, 0x41, 0x3c,
	0x12, 0x10, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x4e, 0x6f, 0x64, 0x65, 0xe6, 0x9c, 0xba, 0xe5,
	0x9e, 0x8b, 0x1a, 0x28, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe7, 0xad, 0x9b, 0xe9, 0x80, 0x89,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x4e, 0x6f, 0x64, 0x65,
	0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x33, 0x12, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0xf6, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x92, 0x41, 0x4d, 0x12, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe7, 0xa3, 0x81, 0xe7, 0x9b, 0x98, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x1a, 0x37, 0xe6,
	0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x4e, 0x6f, 0x64, 0x65, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe6, 0x94, 0xaf, 0xe6, 0x8c,
	0x81, 0xe7, 0x9a, 0x84, 0xe7, 0xa3, 0x81, 0xe7, 0x9b, 0x98, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22,
	0x2d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x44, 0x7d, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0xa5,
	0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x31, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x01, 0x92, 0x41, 0x3c, 0x12, 0x10, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0x4e, 0x6f, 0x64, 0x65, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x1a, 0x28, 0xe6, 0xa0,
	0xb9, 0xe6, 0x8d, 0xae, 0xe7, 0xad, 0x9b, 0xe9, 0x80, 0x89, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x4e, 0x6f, 0x64, 0x65, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x12, 0x58, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44,
	0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x2f, 0x7b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0xcf, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x65, 0x92, 0x41, 0x2e, 0x12, 0x15, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xba,
	0x91, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x15, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xba, 0x91, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0xf8, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x27, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x4f, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x90, 0x01, 0x92, 0x41, 0x5a, 0x12, 0x22, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x4e, 0x6f,
	0x64, 0x65, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe9, 0x95,
	0x9c, 0xe5, 0x83, 0x8f, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x34, 0xe6, 0xa0, 0xb9, 0xe6,
	0x8d, 0xae, 0xe7, 0xad, 0x9b, 0xe9, 0x80, 0x89, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0x4e, 0x6f, 0x64, 0x65, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xb3,
	0xbb, 0xe7, 0xbb, 0x9f, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x6f, 0x73, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0xe9, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x7c, 0x92, 0x41, 0x44, 0x12, 0x10, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x4e, 0x6f,
	0x64, 0x65, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x30, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae,
	0xe7, 0xad, 0x9b, 0xe9, 0x80, 0x89, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe5, 0x90, 0x84, 0xe4, 0xb8, 0xaa, 0xe4, 0xba, 0x91, 0xe7, 0x9a, 0x84, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f,
	0x12, 0x2d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x95, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa1, 0x01, 0x92, 0x41, 0x66, 0x12, 0x1a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x4e, 0x6f, 0x64, 0x65, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc, 0x88, 0x50, 0x4f,
	0x53, 0x54, 0xef, 0xbc, 0x89, 0x1a, 0x48, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x20, 0x50, 0x4f,
	0x53, 0x54, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x90, 0x84, 0xe4, 0xb8, 0xaa, 0xe4,
	0xba, 0x91, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0xe4, 0xbb, 0xa5, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe6, 0x9b, 0xb4, 0xe9, 0x95, 0xbf,
	0xe7, 0x9a, 0x84, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0xe2, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x92, 0x41, 0x38, 0x12, 0x15, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x1a, 0x1f, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x41, 0x4b, 0x53, 0x4b,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0xe9, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x67, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xba, 0x91, 0xe5,
	0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe5, 0xb8, 0xa6, 0xe5, 0xae, 0xbd, 0xe5, 0x8c, 0x85, 0x1a, 0x18,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xba, 0x91, 0xe5, 0x85, 0xb1, 0xe4, 0xba, 0xab, 0xe5,
	0xb8, 0xa6, 0xe5, 0xae, 0xbd, 0xe5, 0x8c, 0x85, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x44, 0x7d, 0x2f, 0x62, 0x77, 0x70, 0x73, 0x12, 0xfc, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x92,
	0x41, 0x4e, 0x12, 0x1c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x4e, 0x6f, 0x64, 0x65, 0xe7, 0x9a,
	0x84, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x1a, 0x2e, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe7, 0xad, 0x9b, 0xe9, 0x80, 0x89, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x4e, 0x6f, 0x64, 0x65, 0xe7, 0x9a,
	0x84, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0xc9, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x28, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5f, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6,
	0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x1a, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe6,
	0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x12, 0x20, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6c,
	0x6f, 0x67, 0x73, 0x12, 0xe0, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x32, 0x12, 0x28, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x74, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x93, 0x8d,
	0xe4, 0xbd, 0x9c, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a,
	0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe6, 0x97, 0xa5,
	0xe5, 0xbf, 0x97, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12,
	0x35, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0xd1, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x65, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a,
	0x92, 0x41, 0x40, 0x12, 0x1e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a,
	0xa1, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x1a, 0x1e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a,
	0xa1, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x74, 0x65, 0x70, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x26,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x5d, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x18,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xae, 0xb0, 0xe5,
	0xbd, 0x95, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x83,
	0x02, 0x0a, 0x12, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x44, 0x62, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x44, 0x62, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x44, 0x62, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x01, 0x92,
	0x41, 0x65, 0x12, 0x2b, 0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86, 0xe5, 0x8e, 0x86, 0xe5, 0x8f, 0xb2,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x2f, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0xae, 0xb0,
	0xe5, 0xbd, 0x95, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0x1a,
	0x36, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0x20, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0x20, 0xe6, 0x8e, 0x92, 0xe5, 0xba,
	0x8f, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0x8e, 0x86, 0xe5, 0x8f, 0xb2, 0x6e, 0xe6, 0x9d,
	0xa1, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x2a, 0x25, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x62, 0x64, 0x61, 0x74, 0x61, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x7d, 0x12, 0xcb, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x29, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6a, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xa8, 0xa1, 0xe5, 0x9e, 0x8b, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0xe6, 0xa8, 0xa1, 0xe5, 0x9e, 0x8b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x44, 0x7d, 0x12, 0xcc, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x71,
	0x92, 0x41, 0x34, 0x12, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe6, 0xa8, 0xa1, 0xe5, 0x9e, 0x8b, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x1a, 0x18, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xa8, 0xa1, 0xe5, 0x9e,
	0x8b, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x12, 0x96, 0x02, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x42,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x65, 0x72, 0x6d, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x6d,
	0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xa5, 0x01, 0x92, 0x41, 0x6c, 0x12, 0x34, 0xe6, 0xa0, 0xa1, 0xe9, 0xaa, 0x8c,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x2c, 0xe5, 0xbd, 0x93,
	0xe6, 0x97, 0xa0, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe6, 0x97, 0xb6, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe6, 0x97, 0xa0, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x55, 0x52, 0x4c, 0x1a, 0x34,
	0xe6, 0xa0, 0xa1, 0xe9, 0xaa, 0x8c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x9d, 0x83, 0xe9,
	0x99, 0x90, 0x2c, 0xe5, 0xbd, 0x93, 0xe6, 0x97, 0xa0, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe6,
	0x97, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x97, 0xa0, 0xe6, 0x9d, 0x83, 0xe9, 0x99,
	0x90, 0x55, 0x52, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x12, 0xac, 0x01, 0x0a, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x4b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x4b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x59,
	0x92, 0x41, 0x2e, 0x12, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xba, 0x91, 0xe5, 0x8c,
	0xba, 0xe5, 0x9f, 0x9f, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x15, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x6d, 0x61, 0x6e, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0xd2, 0x01, 0x0a, 0x0e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x43, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x25, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x43, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x7d, 0x92, 0x41, 0x40, 0x12, 0x1e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xb8, 0x9a, 0xe5,
	0x8a, 0xa1, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe6, 0x8b,
	0x93, 0xe6, 0x89, 0x91, 0x1a, 0x1e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xb8, 0x9a, 0xe5,
	0x8a, 0xa1, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe6, 0x8b,
	0x93, 0xe6, 0x89, 0x91, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x7d, 0x2f, 0x63, 0x63, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0xa8,
	0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6b, 0x53, 0x6f, 0x70, 0x73, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6b, 0x53,
	0x6f, 0x70, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6b, 0x53, 0x6f, 0x70,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb1, 0x01, 0x92, 0x41, 0x6d, 0x12, 0x27, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe8, 0xbf, 0x90, 0xe7, 0xbb, 0xb4, 0xe4,
	0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0x9a, 0x84, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x42, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe6, 0x9c, 0x89, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7, 0x9a, 0x84, 0xe4, 0xb8,
	0x9a, 0xe5, 0x8a, 0xa1, 0xe4, 0xb8, 0x8b, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe8, 0xbf, 0x90,
	0xe7, 0xbb, 0xb4, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0x9a, 0x84, 0xe6, 0xa8, 0xa1, 0xe6,
	0x9d, 0xbf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x6b, 0x73, 0x6f, 0x70, 0x73, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2f, 0x7b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x7d, 0x2f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0xb5, 0x02, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x42, 0x6b, 0x53, 0x6f, 0x70, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6b, 0x53, 0x6f, 0x70, 0x73, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6b, 0x53, 0x6f, 0x70, 0x73, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xbe, 0x01, 0x92, 0x41, 0x6d, 0x12, 0x27, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0xa0,
	0x87, 0xe5, 0x87, 0x86, 0xe8, 0xbf, 0x90, 0xe7, 0xbb, 0xb4, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1,
	0xe7, 0x9a, 0x84, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a,
	0x42, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x9c, 0x89,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe4,
	0xb8, 0x8b, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe8, 0xbf, 0x90, 0xe7, 0xbb, 0xb4, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0x9a, 0x84, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x12, 0x46, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6b,
	0x73, 0x6f, 0x70, 0x73, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x7b, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44,
	0x7d, 0x12, 0xa7, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xad, 0x01, 0x92, 0x41,
	0x7a, 0x12, 0x24, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x42, 0x43, 0x53, 0xe5, 0xb9, 0xb3, 0xe5,
	0x8f, 0xb0, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0xae, 0xe7, 0x9a, 0x84, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d,
	0xbf, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x1a, 0x52, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x42,
	0x43, 0x53, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0xae, 0xe7, 0x9a,
	0x84, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x2c, 0xe7, 0x94,
	0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0xb8, 0xb2, 0xe6, 0x9f, 0x93, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0xe7, 0x9a, 0x84, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe8, 0xbf, 0x90, 0xe7, 0xbb, 0xb4, 0xe4,
	0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2a, 0x12, 0x28, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6b, 0x73, 0x6f, 0x70, 0x73, 0x2f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x0f,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x6b, 0x53, 0x6f, 0x70, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x6b, 0x53, 0x6f, 0x70, 0x73, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x6b,
	0x53, 0x6f, 0x70, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x61, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe8, 0xb0, 0x83, 0xe8, 0xaf, 0x95, 0xe6, 0xa0, 0x87,
	0xe5, 0x87, 0x86, 0xe8, 0xbf, 0x90, 0xe7, 0xbb, 0xb4, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x1a,
	0x18, 0xe8, 0xb0, 0x83, 0xe8, 0xaf, 0x95, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe8, 0xbf, 0x90,
	0xe7, 0xbb, 0xb4, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a,
	0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6b, 0x73, 0x6f, 0x70, 0x73, 0x2f, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x12, 0x93, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x92, 0x41, 0x44,
	0x12, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x49, 0x50, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9,
	0xe5, 0x99, 0xa8, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x1a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x49, 0x50, 0xe9, 0x80, 0x89, 0xe6,
	0x8b, 0xa9, 0xe5, 0x99, 0xa8, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x3a, 0x01, 0x2a, 0x22, 0x4a, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x77, 0x65, 0x62, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x7d,
	0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x12, 0xaf, 0x02, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x42, 0x69, 0x7a, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x48, 0x6f, 0x73, 0x74,
	0x12, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x7a, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x69, 0x7a, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc1, 0x01, 0x92, 0x41, 0x6e, 0x12, 0x35, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe7, 0x9a, 0x84, 0xe6, 0x8b,
	0x93, 0xe6, 0x89, 0x91, 0xe6, 0xa0, 0x91, 0x2c, 0x20, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe4,
	0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe7, 0xbb,
	0xb4, 0xe5, 0xba, 0xa6, 0x1a, 0x35, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xb8, 0x9a, 0xe5,
	0x8a, 0xa1, 0xe7, 0x9a, 0x84, 0xe6, 0x8b, 0x93, 0xe6, 0x89, 0x91, 0xe6, 0xa0, 0x91, 0x2c, 0x20,
	0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe4,
	0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe7, 0xbb, 0xb4, 0xe5, 0xba, 0xa6, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x4a, 0x3a, 0x01, 0x2a, 0x22, 0x45, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x62, 0x2f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x7d, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xa3, 0x02, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xbb, 0x01, 0x92, 0x41, 0x66, 0x12, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe6, 0x8b, 0x93, 0xe6, 0x89, 0x91, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0x1a, 0x50, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8b, 0x93, 0xe6, 0x89, 0x91, 0xe7, 0x9a, 0x84, 0xe4, 0xb8,
	0xbb, 0xe6, 0x9c, 0xba, 0x2c, 0x20, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe6,
	0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe7, 0xbb, 0xb4, 0xe5, 0xba,
	0xa6, 0xe4, 0xb8, 0x8b, 0xe7, 0x9a, 0x84, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x3a, 0x01, 0x2a, 0x22, 0x47, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x62,
	0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x7d, 0x2f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0xbe, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2e, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64,
	0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64,
	0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc1,
	0x01, 0x92, 0x41, 0x6a, 0x12, 0x14, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8b, 0x93, 0xe6,
	0x89, 0x91, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0x49, 0x44, 0x1a, 0x52, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe6, 0x8b, 0x93, 0xe6, 0x89, 0x91, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c,
	0xba, 0x49, 0x44, 0x2c, 0x20, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0x85, 0xe6, 0x94,
	0xaf, 0xe6, 0x8c, 0x81, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe7, 0xbb, 0xb4, 0xe5, 0xba, 0xa6,
	0xe4, 0xb8, 0x8b, 0xe7, 0x9a, 0x84, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4e, 0x3a, 0x01, 0x2a, 0x22, 0x49, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x62, 0x2f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x7d, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x7d, 0x2f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x64, 0x73, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x85, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x01, 0x92, 0x41, 0x52, 0x12, 0x27, 0xe6,
	0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0x49, 0x44, 0x73, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x27, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe4, 0xb8,
	0xbb, 0xe6, 0x9c, 0xba, 0x49, 0x44, 0x73, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x9c, 0xba,
	0xe5, 0x99, 0xa8, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x45, 0x3a, 0x01, 0x2a, 0x22, 0x40, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x62,
	0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x7d, 0x2f, 0x68, 0x6f, 0x73,
	0x74, 0x73, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0xc4, 0x02, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd9, 0x01, 0x92, 0x41, 0x8d, 0x01, 0x12, 0x32, 0xe6, 0xa0,
	0xb9, 0xe6, 0x8d, 0xae, 0x49, 0x50, 0x2f, 0x49, 0x50, 0x76, 0x36, 0x2f, 0xe4, 0xb8, 0xbb, 0xe6,
	0x9c, 0xba, 0xe5, 0x90, 0x8d, 0xe7, 0xad, 0x89, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x1a, 0x57, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x9f, 0x90, 0xe4, 0xb8, 0xaa, 0xe4, 0xb8,
	0x9a, 0xe5, 0x8a, 0xa1, 0xe4, 0xb8, 0x8b, 0x20, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89,
	0x8b, 0xe5, 0x8a, 0xa8, 0xe8, 0xbe, 0x93, 0xe5, 0x85, 0xa5, 0xe7, 0x9a, 0x84, 0x49, 0x50, 0x2f,
	0x49, 0x50, 0x76, 0x36, 0x2f, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe5, 0x90, 0x8d, 0xe7, 0xad,
	0x89, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xb8, 0xbb,
	0xe6, 0x9c, 0xba, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x3a,
	0x01, 0x2a, 0x22, 0x3d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x62, 0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x64, 0x7d, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x84, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01, 0x92, 0x41, 0x41, 0x12, 0x15,
	0xe5, 0xbd, 0x95, 0xe5, 0x85, 0xa5, 0xe4, 0xba, 0x91, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x1a, 0x28, 0xe5, 0xbd, 0x95, 0xe5, 0x85, 0xa5, 0xe4, 0xba, 0x91,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7, 0x89, 0x88,
	0xe6, 0x9c, 0xac, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x43, 0x3a, 0x01, 0x2a, 0x22, 0x3e, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d,
	0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x8b, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x94, 0x01, 0x92, 0x41, 0x3d, 0x12, 0x15, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0x91,
	0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x1a, 0x24, 0xe6, 0x9b,
	0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0x91, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7, 0x89, 0x88,
	0xe6, 0x9c, 0xac, 0xe7, 0x9a, 0x84, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x3a, 0x01, 0x2a, 0x1a, 0x49, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x44, 0x7d, 0x12, 0x88, 0x02, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x01,
	0x92, 0x41, 0x3d, 0x12, 0x15, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe4, 0xba, 0x91, 0xe7, 0xbb,
	0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x1a, 0x24, 0xe5, 0x88, 0xa0, 0xe9,
	0x99, 0xa4, 0xe4, 0xba, 0x91, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7, 0x89, 0x88, 0xe6, 0x9c,
	0xac, 0xe7, 0x9a, 0x84, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x2a, 0x49, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44,
	0x7d, 0x12, 0x85, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x94, 0x01, 0x92, 0x41, 0x40, 0x12, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe4, 0xba, 0x91, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x1a,
	0x27, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe4, 0xba, 0x91, 0xe7, 0xbb, 0x84, 0xe4,
	0xbb, 0xb6, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x12, 0x49,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x44, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x7d, 0x12, 0x8d, 0x02, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x30, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x92,
	0x41, 0x4a, 0x12, 0x23, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xba, 0x91, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe5, 0x85, 0xac, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0xe5, 0x89, 0x8d, 0xe7, 0xbc,
	0x80, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x23, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4,
	0xba, 0x91, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x85, 0xac, 0xe7, 0xbd, 0x91, 0x49, 0x50,
	0xe5, 0x89, 0x8d, 0xe7, 0xbc, 0x80, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x37, 0x12, 0x35, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x2f, 0x7b, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xa1, 0x01, 0x0a, 0x06, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x58, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1,
	0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7, 0xe6, 0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0xe6, 0x8e, 0xa5, 0xe5,
	0x8f, 0xa3, 0x1a, 0x18, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7,
	0xe6, 0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x12, 0x19, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0xf6, 0x01,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x82, 0x01, 0x92, 0x41, 0x52, 0x12, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6,
	0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x1a, 0x3c, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9,
	0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe6, 0x8f,
	0x90, 0xe4, 0xbe, 0x9b, 0xe5, 0xae, 0x8c, 0xe6, 0x95, 0xb4, 0xe7, 0x9a, 0x84, 0xe9, 0x85, 0x8d,
	0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a,
	0x01, 0x2a, 0x22, 0x22, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0xf9, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x85, 0x01, 0x92, 0x41, 0x45,
	0x12, 0x18, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x29, 0xe6, 0xa0, 0xb9, 0xe6,
	0x8d, 0xae, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x49, 0x44, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe7, 0x89, 0xb9, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9,
	0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x2a, 0x35, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f,
	0x7b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x44, 0x7d, 0x12, 0xb2, 0x03, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xc4, 0x02, 0x92, 0x41, 0x96, 0x02, 0x12, 0x2d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4,
	0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe4, 0xba, 0x91, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe4, 0xb8,
	0x8b, 0xe7, 0x9a, 0x84, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x1a, 0xe4, 0x01, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe8, 0xbf, 0x87, 0xe6, 0xbb,
	0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d,
	0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe6, 0x8c, 0x89, 0xe4,
	0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xe3, 0x80, 0x81, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0x49, 0x44, 0xe3, 0x80, 0x81, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xe7, 0xad, 0x89,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe3, 0x80, 0x82, 0xe5,
	0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9f, 0x90, 0xe9, 0xa1, 0xb9, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0xe5, 0x80, 0xbc, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99,
	0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe6, 0xad, 0xa4, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe3,
	0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe6, 0x9d,
	0xa1, 0xe4, 0xbb, 0xb6, 0xe9, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x8c,
	0xe5, 0x88, 0x99, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9,
	0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8b, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe6, 0xa8,
	0xa1, 0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe3, 0x80, 0x82, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x83, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01, 0x92, 0x41,
	0x4c, 0x12, 0x12, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe9,
	0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x1a, 0x36, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6, 0xa8, 0xa1,
	0xe6, 0x9d, 0xbf, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe9, 0x9c, 0x80, 0xe8,
	0xa6, 0x81, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe5, 0xae, 0x8c, 0xe6, 0x95, 0xb4, 0xe7, 0x9a,
	0x84, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3a, 0x3a, 0x01, 0x2a, 0x1a, 0x35, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x44, 0x7d, 0x42, 0xa2, 0x01,
	0x92, 0x41, 0x8c, 0x01, 0x12, 0x20, 0x0a, 0x17, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x20, 0x44, 0x6f, 0x63, 0x32,
	0x05, 0x30, 0x2e, 0x31, 0x2e, 0x30, 0x22, 0x0a, 0x2f, 0x62, 0x63, 0x73, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x34, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x23, 0x0a, 0x21, 0x0a, 0x0a, 0x41,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x13, 0x08, 0x02, 0x1a, 0x0d, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x10,
	0x0a, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00,
	0x5a, 0x10, 0x2e, 0x3b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_clustermanager_proto_rawDescOnce sync.Once
	file_clustermanager_proto_rawDescData = file_clustermanager_proto_rawDesc
)

func file_clustermanager_proto_rawDescGZIP() []byte {
	file_clustermanager_proto_rawDescOnce.Do(func() {
		file_clustermanager_proto_rawDescData = protoimpl.X.CompressGZIP(file_clustermanager_proto_rawDescData)
	})
	return file_clustermanager_proto_rawDescData
}

var file_clustermanager_proto_msgTypes = make([]protoimpl.MessageInfo, 547)
var file_clustermanager_proto_goTypes = []interface{}{
	(*Cluster)(nil),                              // 0: clustermanager.Cluster
	(*SharedClusterRanges)(nil),                  // 1: clustermanager.SharedClusterRanges
	(*Node)(nil),                                 // 2: clustermanager.Node
	(*NetworkSetting)(nil),                       // 3: clustermanager.NetworkSetting
	(*SubnetSource)(nil),                         // 4: clustermanager.SubnetSource
	(*ExistedSubnetIDs)(nil),                     // 5: clustermanager.ExistedSubnetIDs
	(*NewSubnet)(nil),                            // 6: clustermanager.NewSubnet
	(*UpgradePolicy)(nil),                        // 7: clustermanager.UpgradePolicy
	(*ClusterBasicSetting)(nil),                  // 8: clustermanager.ClusterBasicSetting
	(*ClusterAdvanceSetting)(nil),                // 9: clustermanager.ClusterAdvanceSetting
	(*ClusterConnectSetting)(nil),                // 10: clustermanager.ClusterConnectSetting
	(*NodeSetting)(nil),                          // 11: clustermanager.NodeSetting
	(*NodeLoginInfo)(nil),                        // 12: clustermanager.NodeLoginInfo
	(*NodeAdvancedInfo)(nil),                     // 13: clustermanager.NodeAdvancedInfo
	(*ClusterCredential)(nil),                    // 14: clustermanager.ClusterCredential
	(*Namespace)(nil),                            // 15: clustermanager.Namespace
	(*ResourceQuota)(nil),                        // 16: clustermanager.ResourceQuota
	(*Credential)(nil),                           // 17: clustermanager.Credential
	(*BKOpsPlugin)(nil),                          // 18: clustermanager.BKOpsPlugin
	(*Action)(nil),                               // 19: clustermanager.Action
	(*ClusterMgr)(nil),                           // 20: clustermanager.ClusterMgr
	(*ManagedConfig)(nil),                        // 21: clustermanager.ManagedConfig
	(*NodeGroupMgr)(nil),                         // 22: clustermanager.NodeGroupMgr
	(*OSInfo)(nil),                               // 23: clustermanager.OSInfo
	(*Account)(nil),                              // 24: clustermanager.Account
	(*CloudAccount)(nil),                         // 25: clustermanager.CloudAccount
	(*CreateCloudAccountRequest)(nil),            // 26: clustermanager.CreateCloudAccountRequest
	(*CreateCloudAccountResponse)(nil),           // 27: clustermanager.CreateCloudAccountResponse
	(*UpdateCloudAccountRequest)(nil),            // 28: clustermanager.UpdateCloudAccountRequest
	(*UpdateCloudAccountResponse)(nil),           // 29: clustermanager.UpdateCloudAccountResponse
	(*MigrateCloudAccountRequest)(nil),           // 30: clustermanager.MigrateCloudAccountRequest
	(*OriginEncrypt)(nil),                        // 31: clustermanager.OriginEncrypt
	(*MigrateCloudAccountResponse)(nil),          // 32: clustermanager.MigrateCloudAccountResponse
	(*DeleteCloudAccountRequest)(nil),            // 33: clustermanager.DeleteCloudAccountRequest
	(*DeleteCloudAccountResponse)(nil),           // 34: clustermanager.DeleteCloudAccountResponse
	(*ListCloudAccountPermRequest)(nil),          // 35: clustermanager.ListCloudAccountPermRequest
	(*ListCloudAccountPermResponse)(nil),         // 36: clustermanager.ListCloudAccountPermResponse
	(*ListCloudAccountRequest)(nil),              // 37: clustermanager.ListCloudAccountRequest
	(*VerifyCloudAccountRequest)(nil),            // 38: clustermanager.VerifyCloudAccountRequest
	(*VerifyCloudAccountResponse)(nil),           // 39: clustermanager.VerifyCloudAccountResponse
	(*CloudAccountInfo)(nil),                     // 40: clustermanager.CloudAccountInfo
	(*ListCloudAccountResponse)(nil),             // 41: clustermanager.ListCloudAccountResponse
	(*CloudVPC)(nil),                             // 42: clustermanager.CloudVPC
	(*Cidr)(nil),                                 // 43: clustermanager.Cidr
	(*CidrState)(nil),                            // 44: clustermanager.CidrState
	(*CreateCloudVPCRequest)(nil),                // 45: clustermanager.CreateCloudVPCRequest
	(*CreateCloudVPCResponse)(nil),               // 46: clustermanager.CreateCloudVPCResponse
	(*UpdateCloudVPCRequest)(nil),                // 47: clustermanager.UpdateCloudVPCRequest
	(*UpdateCloudVPCResponse)(nil),               // 48: clustermanager.UpdateCloudVPCResponse
	(*DeleteCloudVPCRequest)(nil),                // 49: clustermanager.DeleteCloudVPCRequest
	(*DeleteCloudVPCResponse)(nil),               // 50: clustermanager.DeleteCloudVPCResponse
	(*ListCloudVPCRequest)(nil),                  // 51: clustermanager.ListCloudVPCRequest
	(*ListCloudVPCResponse)(nil),                 // 52: clustermanager.ListCloudVPCResponse
	(*CloudVPCResp)(nil),                         // 53: clustermanager.CloudVPCResp
	(*CidrDetailInfo)(nil),                       // 54: clustermanager.CidrDetailInfo
	(*ListCloudRegionsRequest)(nil),              // 55: clustermanager.ListCloudRegionsRequest
	(*ListCloudRegionsResponse)(nil),             // 56: clustermanager.ListCloudRegionsResponse
	(*CloudRegion)(nil),                          // 57: clustermanager.CloudRegion
	(*GetVPCCidrRequest)(nil),                    // 58: clustermanager.GetVPCCidrRequest
	(*GetVPCCidrResponse)(nil),                   // 59: clustermanager.GetVPCCidrResponse
	(*VPCCidr)(nil),                              // 60: clustermanager.VPCCidr
	(*Cloud)(nil),                                // 61: clustermanager.Cloud
	(*CloudConfigInfo)(nil),                      // 62: clustermanager.CloudConfigInfo
	(*CloudNetworkInfo)(nil),                     // 63: clustermanager.CloudNetworkInfo
	(*EnvCidrStep)(nil),                          // 64: clustermanager.EnvCidrStep
	(*NetworkMode)(nil),                          // 65: clustermanager.NetworkMode
	(*NodeGroup)(nil),                            // 66: clustermanager.NodeGroup
	(*CloudArea)(nil),                            // 67: clustermanager.CloudArea
	(*AutoScalingGroup)(nil),                     // 68: clustermanager.AutoScalingGroup
	(*TimeRange)(nil),                            // 69: clustermanager.TimeRange
	(*DataDisk)(nil),                             // 70: clustermanager.DataDisk
	(*CloudDataDisk)(nil),                        // 71: clustermanager.CloudDataDisk
	(*InternetAccessible)(nil),                   // 72: clustermanager.InternetAccessible
	(*InstanceTemplateConfig)(nil),               // 73: clustermanager.InstanceTemplateConfig
	(*InstanceChargePrepaid)(nil),                // 74: clustermanager.InstanceChargePrepaid
	(*LaunchConfiguration)(nil),                  // 75: clustermanager.LaunchConfiguration
	(*KeyInfo)(nil),                              // 76: clustermanager.KeyInfo
	(*ImageInfo)(nil),                            // 77: clustermanager.ImageInfo
	(*ClusterAutoScalingOption)(nil),             // 78: clustermanager.ClusterAutoScalingOption
	(*WebhookMode)(nil),                          // 79: clustermanager.WebhookMode
	(*Taint)(nil),                                // 80: clustermanager.Taint
	(*NodeTemplate)(nil),                         // 81: clustermanager.NodeTemplate
	(*ClusterModule)(nil),                        // 82: clustermanager.ClusterModule
	(*ModuleInfo)(nil),                           // 83: clustermanager.ModuleInfo
	(*RunTimeInfo)(nil),                          // 84: clustermanager.RunTimeInfo
	(*CreateNodeTemplateRequest)(nil),            // 85: clustermanager.CreateNodeTemplateRequest
	(*CreateNodeTemplateResponse)(nil),           // 86: clustermanager.CreateNodeTemplateResponse
	(*UpdateNodeTemplateRequest)(nil),            // 87: clustermanager.UpdateNodeTemplateRequest
	(*UpdateNodeTemplateResponse)(nil),           // 88: clustermanager.UpdateNodeTemplateResponse
	(*DeleteNodeTemplateRequest)(nil),            // 89: clustermanager.DeleteNodeTemplateRequest
	(*DeleteNodeTemplateResponse)(nil),           // 90: clustermanager.DeleteNodeTemplateResponse
	(*GetNodeTemplateRequest)(nil),               // 91: clustermanager.GetNodeTemplateRequest
	(*GetNodeTemplateResponse)(nil),              // 92: clustermanager.GetNodeTemplateResponse
	(*ListNodeTemplateRequest)(nil),              // 93: clustermanager.ListNodeTemplateRequest
	(*ListNodeTemplateResponse)(nil),             // 94: clustermanager.ListNodeTemplateResponse
	(*Project)(nil),                              // 95: clustermanager.Project
	(*Task)(nil),                                 // 96: clustermanager.Task
	(*Step)(nil),                                 // 97: clustermanager.Step
	(*TkeCidr)(nil),                              // 98: clustermanager.TkeCidr
	(*TkeCidrCount)(nil),                         // 99: clustermanager.TkeCidrCount
	(*CreateClusterReq)(nil),                     // 100: clustermanager.CreateClusterReq
	(*CreateClusterResp)(nil),                    // 101: clustermanager.CreateClusterResp
	(*AddSubnetToClusterReq)(nil),                // 102: clustermanager.AddSubnetToClusterReq
	(*AddSubnetToClusterResp)(nil),               // 103: clustermanager.AddSubnetToClusterResp
	(*SwitchClusterUnderlayNetworkReq)(nil),      // 104: clustermanager.SwitchClusterUnderlayNetworkReq
	(*SwitchClusterUnderlayNetworkResp)(nil),     // 105: clustermanager.SwitchClusterUnderlayNetworkResp
	(*CreateVirtualClusterReq)(nil),              // 106: clustermanager.CreateVirtualClusterReq
	(*NamespaceInfo)(nil),                        // 107: clustermanager.NamespaceInfo
	(*NamespaceQuota)(nil),                       // 108: clustermanager.NamespaceQuota
	(*CreateVirtualClusterResp)(nil),             // 109: clustermanager.CreateVirtualClusterResp
	(*RecommendNodeGroupConfReq)(nil),            // 110: clustermanager.RecommendNodeGroupConfReq
	(*InstanceProfile)(nil),                      // 111: clustermanager.InstanceProfile
	(*HardwareProfile)(nil),                      // 112: clustermanager.HardwareProfile
	(*NetworkProfile)(nil),                       // 113: clustermanager.NetworkProfile
	(*ScalingProfile)(nil),                       // 114: clustermanager.ScalingProfile
	(*RecommendNodeGroupConf)(nil),               // 115: clustermanager.RecommendNodeGroupConf
	(*RecommendNodeGroupConfResp)(nil),           // 116: clustermanager.RecommendNodeGroupConfResp
	(*KubeConfigReq)(nil),                        // 117: clustermanager.KubeConfigReq
	(*KubeConfigConnectReq)(nil),                 // 118: clustermanager.KubeConfigConnectReq
	(*KubeConfigResp)(nil),                       // 119: clustermanager.KubeConfigResp
	(*KubeConfigConnectResp)(nil),                // 120: clustermanager.KubeConfigConnectResp
	(*ImportCloudMode)(nil),                      // 121: clustermanager.ImportCloudMode
	(*ImportClusterReq)(nil),                     // 122: clustermanager.ImportClusterReq
	(*ImportClusterResp)(nil),                    // 123: clustermanager.ImportClusterResp
	(*DeleteVirtualClusterReq)(nil),              // 124: clustermanager.DeleteVirtualClusterReq
	(*DeleteVirtualClusterResp)(nil),             // 125: clustermanager.DeleteVirtualClusterResp
	(*UpdateVirtualClusterQuotaReq)(nil),         // 126: clustermanager.UpdateVirtualClusterQuotaReq
	(*UpdateVirtualClusterQuotaResp)(nil),        // 127: clustermanager.UpdateVirtualClusterQuotaResp
	(*DeleteClusterReq)(nil),                     // 128: clustermanager.DeleteClusterReq
	(*DeleteClusterResp)(nil),                    // 129: clustermanager.DeleteClusterResp
	(*UpdateClusterReq)(nil),                     // 130: clustermanager.UpdateClusterReq
	(*UpdateClusterResp)(nil),                    // 131: clustermanager.UpdateClusterResp
	(*RetryCreateClusterReq)(nil),                // 132: clustermanager.RetryCreateClusterReq
	(*RetryCreateClusterResp)(nil),               // 133: clustermanager.RetryCreateClusterResp
	(*GetClusterReq)(nil),                        // 134: clustermanager.GetClusterReq
	(*GetClusterResp)(nil),                       // 135: clustermanager.GetClusterResp
	(*ExtraClusterInfo)(nil),                     // 136: clustermanager.ExtraClusterInfo
	(*CheckNodesRequest)(nil),                    // 137: clustermanager.CheckNodesRequest
	(*CheckNodesResponse)(nil),                   // 138: clustermanager.CheckNodesResponse
	(*NodeResult)(nil),                           // 139: clustermanager.NodeResult
	(*UnCordonNodeRequest)(nil),                  // 140: clustermanager.UnCordonNodeRequest
	(*UnCordonNodeResponse)(nil),                 // 141: clustermanager.UnCordonNodeResponse
	(*CordonNodeRequest)(nil),                    // 142: clustermanager.CordonNodeRequest
	(*CordonNodeResponse)(nil),                   // 143: clustermanager.CordonNodeResponse
	(*UpdateNodeRequest)(nil),                    // 144: clustermanager.UpdateNodeRequest
	(*UpdateNodeResponse)(nil),                   // 145: clustermanager.UpdateNodeResponse
	(*NodeStatus)(nil),                           // 146: clustermanager.NodeStatus
	(*UpdateClusterModuleRequest)(nil),           // 147: clustermanager.UpdateClusterModuleRequest
	(*UpdateClusterModuleResponse)(nil),          // 148: clustermanager.UpdateClusterModuleResponse
	(*RecordNodeInfoRequest)(nil),                // 149: clustermanager.RecordNodeInfoRequest
	(*GetNodeRequest)(nil),                       // 150: clustermanager.GetNodeRequest
	(*GetNodeResponse)(nil),                      // 151: clustermanager.GetNodeResponse
	(*GetNodeInfoRequest)(nil),                   // 152: clustermanager.GetNodeInfoRequest
	(*GetNodeInfoResponse)(nil),                  // 153: clustermanager.GetNodeInfoResponse
	(*NodeConfig)(nil),                           // 154: clustermanager.NodeConfig
	(*NodeInfo)(nil),                             // 155: clustermanager.NodeInfo
	(*ListCommonClusterReq)(nil),                 // 156: clustermanager.ListCommonClusterReq
	(*ListCommonClusterResp)(nil),                // 157: clustermanager.ListCommonClusterResp
	(*ListProjectClusterReq)(nil),                // 158: clustermanager.ListProjectClusterReq
	(*ListProjectClusterResp)(nil),               // 159: clustermanager.ListProjectClusterResp
	(*ListBusinessClusterReq)(nil),               // 160: clustermanager.ListBusinessClusterReq
	(*ListBusinessClusterResp)(nil),              // 161: clustermanager.ListBusinessClusterResp
	(*ListClusterReq)(nil),                       // 162: clustermanager.ListClusterReq
	(*ListClusterResp)(nil),                      // 163: clustermanager.ListClusterResp
	(*ListClusterV2Req)(nil),                     // 164: clustermanager.ListClusterV2Req
	(*ListClusterV2Resp)(nil),                    // 165: clustermanager.ListClusterV2Resp
	(*ExtraInfo)(nil),                            // 166: clustermanager.ExtraInfo
	(*WebAnnotations)(nil),                       // 167: clustermanager.WebAnnotations
	(*WebAnnotationsV2)(nil),                     // 168: clustermanager.WebAnnotationsV2
	(*ListNodesInClusterRequest)(nil),            // 169: clustermanager.ListNodesInClusterRequest
	(*ListNodesInClusterResponse)(nil),           // 170: clustermanager.ListNodesInClusterResponse
	(*ClusterNode)(nil),                          // 171: clustermanager.ClusterNode
	(*GetClustersMetaDataRequest)(nil),           // 172: clustermanager.GetClustersMetaDataRequest
	(*GetClustersMetaDataResponse)(nil),          // 173: clustermanager.GetClustersMetaDataResponse
	(*ClusterMeta)(nil),                          // 174: clustermanager.ClusterMeta
	(*ListMastersInClusterRequest)(nil),          // 175: clustermanager.ListMastersInClusterRequest
	(*ListMastersInClusterResponse)(nil),         // 176: clustermanager.ListMastersInClusterResponse
	(*GetClusterCredentialReq)(nil),              // 177: clustermanager.GetClusterCredentialReq
	(*GetClusterCredentialResp)(nil),             // 178: clustermanager.GetClusterCredentialResp
	(*UpdateClusterCredentialReq)(nil),           // 179: clustermanager.UpdateClusterCredentialReq
	(*UpdateClusterCredentialResp)(nil),          // 180: clustermanager.UpdateClusterCredentialResp
	(*UpdateClusterKubeConfigReq)(nil),           // 181: clustermanager.UpdateClusterKubeConfigReq
	(*UpdateClusterKubeConfigResp)(nil),          // 182: clustermanager.UpdateClusterKubeConfigResp
	(*DeleteClusterCredentialReq)(nil),           // 183: clustermanager.DeleteClusterCredentialReq
	(*DeleteClusterCredentialResp)(nil),          // 184: clustermanager.DeleteClusterCredentialResp
	(*ListClusterCredentialReq)(nil),             // 185: clustermanager.ListClusterCredentialReq
	(*ListClusterCredentialResp)(nil),            // 186: clustermanager.ListClusterCredentialResp
	(*InitFederationClusterReq)(nil),             // 187: clustermanager.InitFederationClusterReq
	(*InitFederationClusterResp)(nil),            // 188: clustermanager.InitFederationClusterResp
	(*AddFederatedClusterReq)(nil),               // 189: clustermanager.AddFederatedClusterReq
	(*AddFederatedClusterResp)(nil),              // 190: clustermanager.AddFederatedClusterResp
	(*CreateCloudRequest)(nil),                   // 191: clustermanager.CreateCloudRequest
	(*CreateCloudResponse)(nil),                  // 192: clustermanager.CreateCloudResponse
	(*UpdateCloudRequest)(nil),                   // 193: clustermanager.UpdateCloudRequest
	(*UpdateCloudResponse)(nil),                  // 194: clustermanager.UpdateCloudResponse
	(*DeleteCloudRequest)(nil),                   // 195: clustermanager.DeleteCloudRequest
	(*DeleteCloudResponse)(nil),                  // 196: clustermanager.DeleteCloudResponse
	(*GetCloudRequest)(nil),                      // 197: clustermanager.GetCloudRequest
	(*GetCloudResponse)(nil),                     // 198: clustermanager.GetCloudResponse
	(*ListCloudRequest)(nil),                     // 199: clustermanager.ListCloudRequest
	(*ListCloudResponse)(nil),                    // 200: clustermanager.ListCloudResponse
	(*CreateNodeGroupRequest)(nil),               // 201: clustermanager.CreateNodeGroupRequest
	(*GroupExtraInfo)(nil),                       // 202: clustermanager.GroupExtraInfo
	(*CreateNodeGroupResponse)(nil),              // 203: clustermanager.CreateNodeGroupResponse
	(*CreateNodeGroupResponseData)(nil),          // 204: clustermanager.CreateNodeGroupResponseData
	(*UpdateNodeGroupRequest)(nil),               // 205: clustermanager.UpdateNodeGroupRequest
	(*UpdateNodeGroupResponse)(nil),              // 206: clustermanager.UpdateNodeGroupResponse
	(*DeleteNodeGroupRequest)(nil),               // 207: clustermanager.DeleteNodeGroupRequest
	(*DeleteNodeGroupResponse)(nil),              // 208: clustermanager.DeleteNodeGroupResponse
	(*DeleteNodeGroupResponseData)(nil),          // 209: clustermanager.DeleteNodeGroupResponseData
	(*GetNodeGroupRequest)(nil),                  // 210: clustermanager.GetNodeGroupRequest
	(*GetNodeGroupResponse)(nil),                 // 211: clustermanager.GetNodeGroupResponse
	(*ListClusterNodeGroupRequest)(nil),          // 212: clustermanager.ListClusterNodeGroupRequest
	(*ListClusterNodeGroupResponse)(nil),         // 213: clustermanager.ListClusterNodeGroupResponse
	(*ListNodeGroupRequest)(nil),                 // 214: clustermanager.ListNodeGroupRequest
	(*ListNodeGroupResponse)(nil),                // 215: clustermanager.ListNodeGroupResponse
	(*AddNodesRequest)(nil),                      // 216: clustermanager.AddNodesRequest
	(*AddNodesResponse)(nil),                     // 217: clustermanager.AddNodesResponse
	(*AddNodesV2Request)(nil),                    // 218: clustermanager.AddNodesV2Request
	(*AddNodesV2Response)(nil),                   // 219: clustermanager.AddNodesV2Response
	(*BatchDeleteClusterNodesRequest)(nil),       // 220: clustermanager.BatchDeleteClusterNodesRequest
	(*BatchDeleteClusterNodesResponse)(nil),      // 221: clustermanager.BatchDeleteClusterNodesResponse
	(*BatchNodesStatus)(nil),                     // 222: clustermanager.BatchNodesStatus
	(*DeleteNodesRequest)(nil),                   // 223: clustermanager.DeleteNodesRequest
	(*DeleteNodesResponse)(nil),                  // 224: clustermanager.DeleteNodesResponse
	(*MoveNodesToGroupRequest)(nil),              // 225: clustermanager.MoveNodesToGroupRequest
	(*MoveNodesToGroupResponse)(nil),             // 226: clustermanager.MoveNodesToGroupResponse
	(*RemoveNodesFromGroupRequest)(nil),          // 227: clustermanager.RemoveNodesFromGroupRequest
	(*RemoveNodesFromGroupResponse)(nil),         // 228: clustermanager.RemoveNodesFromGroupResponse
	(*CleanNodesInGroupRequest)(nil),             // 229: clustermanager.CleanNodesInGroupRequest
	(*CleanNodesInGroupResponse)(nil),            // 230: clustermanager.CleanNodesInGroupResponse
	(*CleanNodesInGroupV2Request)(nil),           // 231: clustermanager.CleanNodesInGroupV2Request
	(*CleanNodesInGroupV2Response)(nil),          // 232: clustermanager.CleanNodesInGroupV2Response
	(*ListNodesInGroupV2Request)(nil),            // 233: clustermanager.ListNodesInGroupV2Request
	(*ListNodesInGroupV2Response)(nil),           // 234: clustermanager.ListNodesInGroupV2Response
	(*NodeGroupNode)(nil),                        // 235: clustermanager.NodeGroupNode
	(*ListNodesInGroupResponse)(nil),             // 236: clustermanager.ListNodesInGroupResponse
	(*UpdateGroupMinMaxSizeRequest)(nil),         // 237: clustermanager.UpdateGroupMinMaxSizeRequest
	(*UpdateGroupMinMaxSizeResponse)(nil),        // 238: clustermanager.UpdateGroupMinMaxSizeResponse
	(*UpdateGroupAsTimeRangeRequest)(nil),        // 239: clustermanager.UpdateGroupAsTimeRangeRequest
	(*UpdateGroupAsTimeRangeResponse)(nil),       // 240: clustermanager.UpdateGroupAsTimeRangeResponse
	(*TransNodeGroupToNodeTemplateRequest)(nil),  // 241: clustermanager.TransNodeGroupToNodeTemplateRequest
	(*TransNodeGroupToNodeTemplateResponse)(nil), // 242: clustermanager.TransNodeGroupToNodeTemplateResponse
	(*UpdateGroupDesiredSizeRequest)(nil),        // 243: clustermanager.UpdateGroupDesiredSizeRequest
	(*UpdateGroupDesiredSizeResponse)(nil),       // 244: clustermanager.UpdateGroupDesiredSizeResponse
	(*UpdateGroupDesiredNodeRequest)(nil),        // 245: clustermanager.UpdateGroupDesiredNodeRequest
	(*UpdateGroupDesiredNodeResponse)(nil),       // 246: clustermanager.UpdateGroupDesiredNodeResponse
	(*EnableNodeGroupAutoScaleRequest)(nil),      // 247: clustermanager.EnableNodeGroupAutoScaleRequest
	(*EnableNodeGroupAutoScaleResponse)(nil),     // 248: clustermanager.EnableNodeGroupAutoScaleResponse
	(*DisableNodeGroupAutoScaleRequest)(nil),     // 249: clustermanager.DisableNodeGroupAutoScaleRequest
	(*DisableNodeGroupAutoScaleResponse)(nil),    // 250: clustermanager.DisableNodeGroupAutoScaleResponse
	(*CreateTaskRequest)(nil),                    // 251: clustermanager.CreateTaskRequest
	(*CreateTaskResponse)(nil),                   // 252: clustermanager.CreateTaskResponse
	(*RetryTaskRequest)(nil),                     // 253: clustermanager.RetryTaskRequest
	(*RetryTaskResponse)(nil),                    // 254: clustermanager.RetryTaskResponse
	(*SkipTaskRequest)(nil),                      // 255: clustermanager.SkipTaskRequest
	(*SkipTaskResponse)(nil),                     // 256: clustermanager.SkipTaskResponse
	(*UpdateTaskRequest)(nil),                    // 257: clustermanager.UpdateTaskRequest
	(*UpdateTaskResponse)(nil),                   // 258: clustermanager.UpdateTaskResponse
	(*DeleteTaskRequest)(nil),                    // 259: clustermanager.DeleteTaskRequest
	(*DeleteTaskResponse)(nil),                   // 260: clustermanager.DeleteTaskResponse
	(*GetTaskRequest)(nil),                       // 261: clustermanager.GetTaskRequest
	(*GetTaskResponse)(nil),                      // 262: clustermanager.GetTaskResponse
	(*ListTaskRequest)(nil),                      // 263: clustermanager.ListTaskRequest
	(*ListTaskResponse)(nil),                     // 264: clustermanager.ListTaskResponse
	(*CreateAutoScalingOptionRequest)(nil),       // 265: clustermanager.CreateAutoScalingOptionRequest
	(*CreateAutoScalingOptionResponse)(nil),      // 266: clustermanager.CreateAutoScalingOptionResponse
	(*UpdateAutoScalingOptionRequest)(nil),       // 267: clustermanager.UpdateAutoScalingOptionRequest
	(*UpdateAutoScalingOptionResponse)(nil),      // 268: clustermanager.UpdateAutoScalingOptionResponse
	(*UpdateAsOptionDeviceProviderRequest)(nil),  // 269: clustermanager.UpdateAsOptionDeviceProviderRequest
	(*UpdateAsOptionDeviceProviderResponse)(nil), // 270: clustermanager.UpdateAsOptionDeviceProviderResponse
	(*SyncAutoScalingOptionRequest)(nil),         // 271: clustermanager.SyncAutoScalingOptionRequest
	(*SyncAutoScalingOptionResponse)(nil),        // 272: clustermanager.SyncAutoScalingOptionResponse
	(*DeleteAutoScalingOptionRequest)(nil),       // 273: clustermanager.DeleteAutoScalingOptionRequest
	(*DeleteAutoScalingOptionResponse)(nil),      // 274: clustermanager.DeleteAutoScalingOptionResponse
	(*GetAutoScalingOptionRequest)(nil),          // 275: clustermanager.GetAutoScalingOptionRequest
	(*GetAutoScalingOptionResponse)(nil),         // 276: clustermanager.GetAutoScalingOptionResponse
	(*ListAutoScalingOptionRequest)(nil),         // 277: clustermanager.ListAutoScalingOptionRequest
	(*ListAutoScalingOptionResponse)(nil),        // 278: clustermanager.ListAutoScalingOptionResponse
	(*UpdateAutoScalingStatusRequest)(nil),       // 279: clustermanager.UpdateAutoScalingStatusRequest
	(*UpdateAutoScalingStatusResponse)(nil),      // 280: clustermanager.UpdateAutoScalingStatusResponse
	(*ServiceRoleInfo)(nil),                      // 281: clustermanager.ServiceRoleInfo
	(*GetServiceRolesRequest)(nil),               // 282: clustermanager.GetServiceRolesRequest
	(*GetServiceRolesResponse)(nil),              // 283: clustermanager.GetServiceRolesResponse
	(*ResourceGroupInfo)(nil),                    // 284: clustermanager.ResourceGroupInfo
	(*GetResourceGroupsRequest)(nil),             // 285: clustermanager.GetResourceGroupsRequest
	(*GetResourceGroupsResponse)(nil),            // 286: clustermanager.GetResourceGroupsResponse
	(*RegionInfo)(nil),                           // 287: clustermanager.RegionInfo
	(*GetCloudRegionsRequest)(nil),               // 288: clustermanager.GetCloudRegionsRequest
	(*GetCloudRegionsResponse)(nil),              // 289: clustermanager.GetCloudRegionsResponse
	(*ZoneInfo)(nil),                             // 290: clustermanager.ZoneInfo
	(*CloudClusterInfo)(nil),                     // 291: clustermanager.CloudClusterInfo
	(*ListCloudRegionClusterRequest)(nil),        // 292: clustermanager.ListCloudRegionClusterRequest
	(*ListCloudRegionClusterResponse)(nil),       // 293: clustermanager.ListCloudRegionClusterResponse
	(*GetCloudRegionZonesRequest)(nil),           // 294: clustermanager.GetCloudRegionZonesRequest
	(*GetCloudRegionZonesResponse)(nil),          // 295: clustermanager.GetCloudRegionZonesResponse
	(*OperationLog)(nil),                         // 296: clustermanager.OperationLog
	(*TaskOperationLog)(nil),                     // 297: clustermanager.TaskOperationLog
	(*TaskStepLog)(nil),                          // 298: clustermanager.TaskStepLog
	(*ListCloudInstanceTypeRequest)(nil),         // 299: clustermanager.ListCloudInstanceTypeRequest
	(*ListCloudInstanceTypeResponse)(nil),        // 300: clustermanager.ListCloudInstanceTypeResponse
	(*InstanceType)(nil),                         // 301: clustermanager.InstanceType
	(*ListCloudDiskTypesRequest)(nil),            // 302: clustermanager.ListCloudDiskTypesRequest
	(*ListCloudDiskTypesResponse)(nil),           // 303: clustermanager.ListCloudDiskTypesResponse
	(*DiskConfigSet)(nil),                        // 304: clustermanager.DiskConfigSet
	(*GetMasterSuggestedMachinesRequest)(nil),    // 305: clustermanager.GetMasterSuggestedMachinesRequest
	(*GetMasterSuggestedMachinesResponse)(nil),   // 306: clustermanager.GetMasterSuggestedMachinesResponse
	(*ListCloudInstancesRequest)(nil),            // 307: clustermanager.ListCloudInstancesRequest
	(*ListCloudInstancesResponse)(nil),           // 308: clustermanager.ListCloudInstancesResponse
	(*CloudNode)(nil),                            // 309: clustermanager.CloudNode
	(*GetCloudAccountTypeRequest)(nil),           // 310: clustermanager.GetCloudAccountTypeRequest
	(*GetCloudAccountTypeResponse)(nil),          // 311: clustermanager.GetCloudAccountTypeResponse
	(*CloudAccountType)(nil),                     // 312: clustermanager.CloudAccountType
	(*GetCloudBandwidthPackagesRequest)(nil),     // 313: clustermanager.GetCloudBandwidthPackagesRequest
	(*GetCloudBandwidthPackagesResponse)(nil),    // 314: clustermanager.GetCloudBandwidthPackagesResponse
	(*BandwidthPackageInfo)(nil),                 // 315: clustermanager.BandwidthPackageInfo
	(*ListCloudOsImageRequest)(nil),              // 316: clustermanager.ListCloudOsImageRequest
	(*ListCloudOsImageResponse)(nil),             // 317: clustermanager.ListCloudOsImageResponse
	(*OsImage)(nil),                              // 318: clustermanager.OsImage
	(*ClusterInfo)(nil),                          // 319: clustermanager.ClusterInfo
	(*ListCloudRuntimeInfoRequest)(nil),          // 320: clustermanager.ListCloudRuntimeInfoRequest
	(*ListCloudRuntimeInfoResponse)(nil),         // 321: clustermanager.ListCloudRuntimeInfoResponse
	(*RunTimeVersion)(nil),                       // 322: clustermanager.RunTimeVersion
	(*ListCloudProjectsRequest)(nil),             // 323: clustermanager.ListCloudProjectsRequest
	(*ListCloudProjectsResponse)(nil),            // 324: clustermanager.ListCloudProjectsResponse
	(*CloudProject)(nil),                         // 325: clustermanager.CloudProject
	(*ListCloudVpcsRequest)(nil),                 // 326: clustermanager.ListCloudVpcsRequest
	(*ListCloudVpcsResponse)(nil),                // 327: clustermanager.ListCloudVpcsResponse
	(*CloudVpc)(nil),                             // 328: clustermanager.CloudVpc
	(*AssistantCidr)(nil),                        // 329: clustermanager.AssistantCidr
	(*ListCloudSubnetsRequest)(nil),              // 330: clustermanager.ListCloudSubnetsRequest
	(*ListCloudSubnetsResponse)(nil),             // 331: clustermanager.ListCloudSubnetsResponse
	(*Subnet)(nil),                               // 332: clustermanager.Subnet
	(*CheckCidrConflictFromVpcRequest)(nil),      // 333: clustermanager.CheckCidrConflictFromVpcRequest
	(*CheckCidrConflictFromVpcResponse)(nil),     // 334: clustermanager.CheckCidrConflictFromVpcResponse
	(*ConflictInfo)(nil),                         // 335: clustermanager.ConflictInfo
	(*ListCloudSecurityGroupsRequest)(nil),       // 336: clustermanager.ListCloudSecurityGroupsRequest
	(*ListCloudSecurityGroupsResponse)(nil),      // 337: clustermanager.ListCloudSecurityGroupsResponse
	(*ListKeyPairsRequest)(nil),                  // 338: clustermanager.ListKeyPairsRequest
	(*ListKeyPairsResponse)(nil),                 // 339: clustermanager.ListKeyPairsResponse
	(*KeyPair)(nil),                              // 340: clustermanager.KeyPair
	(*ListOperationLogsRequest)(nil),             // 341: clustermanager.ListOperationLogsRequest
	(*ListTaskStepLogsRequest)(nil),              // 342: clustermanager.ListTaskStepLogsRequest
	(*ListOperationLogsResponse)(nil),            // 343: clustermanager.ListOperationLogsResponse
	(*ListTaskRecordsRequest)(nil),               // 344: clustermanager.ListTaskRecordsRequest
	(*ListTaskRecordsResponse)(nil),              // 345: clustermanager.ListTaskRecordsResponse
	(*TaskRecordsResponseData)(nil),              // 346: clustermanager.TaskRecordsResponseData
	(*TaskRecordStep)(nil),                       // 347: clustermanager.TaskRecordStep
	(*TaskRecordStepData)(nil),                   // 348: clustermanager.TaskRecordStepData
	(*ListOperationLogsResponseData)(nil),        // 349: clustermanager.ListOperationLogsResponseData
	(*OperationLogDetail)(nil),                   // 350: clustermanager.OperationLogDetail
	(*ListTaskStepLogsResponse)(nil),             // 351: clustermanager.ListTaskStepLogsResponse
	(*ListTaskStepLogsResponseData)(nil),         // 352: clustermanager.ListTaskStepLogsResponseData
	(*TaskStepLogDetail)(nil),                    // 353: clustermanager.TaskStepLogDetail
	(*CleanDbHistoryDataRequest)(nil),            // 354: clustermanager.CleanDbHistoryDataRequest
	(*CleanDbHistoryDataResponse)(nil),           // 355: clustermanager.CleanDbHistoryDataResponse
	(*SecurityGroup)(nil),                        // 356: clustermanager.SecurityGroup
	(*NodeOperationStatus)(nil),                  // 357: clustermanager.NodeOperationStatus
	(*NodeOperationStatusInfo)(nil),              // 358: clustermanager.NodeOperationStatusInfo
	(*DrainNodeRequest)(nil),                     // 359: clustermanager.DrainNodeRequest
	(*DrainNodeResponse)(nil),                    // 360: clustermanager.DrainNodeResponse
	(*CheckDrainNodeData)(nil),                   // 361: clustermanager.CheckDrainNodeData
	(*EvictionRisk)(nil),                         // 362: clustermanager.EvictionRisk
	(*CheckDrainNodeRequest)(nil),                // 363: clustermanager.CheckDrainNodeRequest
	(*CheckDrainNodeResponse)(nil),               // 364: clustermanager.CheckDrainNodeResponse
	(*NodeAnnotation)(nil),                       // 365: clustermanager.NodeAnnotation
	(*UpdateNodeAnnotationsRequest)(nil),         // 366: clustermanager.UpdateNodeAnnotationsRequest
	(*UpdateNodeAnnotationsResponse)(nil),        // 367: clustermanager.UpdateNodeAnnotationsResponse
	(*NodeLabel)(nil),                            // 368: clustermanager.NodeLabel
	(*UpdateNodeLabelsRequest)(nil),              // 369: clustermanager.UpdateNodeLabelsRequest
	(*UpdateNodeLabelsResponse)(nil),             // 370: clustermanager.UpdateNodeLabelsResponse
	(*NodeTaint)(nil),                            // 371: clustermanager.NodeTaint
	(*UpdateNodeTaintsRequest)(nil),              // 372: clustermanager.UpdateNodeTaintsRequest
	(*UpdateNodeTaintsResponse)(nil),             // 373: clustermanager.UpdateNodeTaintsResponse
	(*HealthRequest)(nil),                        // 374: clustermanager.HealthRequest
	(*HealthResponse)(nil),                       // 375: clustermanager.HealthResponse
	(*ListResourceSchemaRequest)(nil),            // 376: clustermanager.ListResourceSchemaRequest
	(*GetResourceSchemaRequest)(nil),             // 377: clustermanager.GetResourceSchemaRequest
	(*QueryPermByActionIDReqData)(nil),           // 378: clustermanager.QueryPermByActionIDReqData
	(*QueryPermByActionIDRequest)(nil),           // 379: clustermanager.QueryPermByActionIDRequest
	(*Perms)(nil),                                // 380: clustermanager.Perms
	(*QueryPermByActionIDResponse)(nil),          // 381: clustermanager.QueryPermByActionIDResponse
	(*CommonResp)(nil),                           // 382: clustermanager.CommonResp
	(*CommonListResp)(nil),                       // 383: clustermanager.CommonListResp
	(*ListBKCloudRequest)(nil),                   // 384: clustermanager.ListBKCloudRequest
	(*ListCCTopologyRequest)(nil),                // 385: clustermanager.ListCCTopologyRequest
	(*GetBkSopsTemplateListRequest)(nil),         // 386: clustermanager.GetBkSopsTemplateListRequest
	(*GetBkSopsTemplateListResponse)(nil),        // 387: clustermanager.GetBkSopsTemplateListResponse
	(*TemplateInfo)(nil),                         // 388: clustermanager.TemplateInfo
	(*GetBkSopsTemplateInfoRequest)(nil),         // 389: clustermanager.GetBkSopsTemplateInfoRequest
	(*GetBkSopsTemplateInfoResponse)(nil),        // 390: clustermanager.GetBkSopsTemplateInfoResponse
	(*TemplateDetailInfo)(nil),                   // 391: clustermanager.TemplateDetailInfo
	(*ConstantValue)(nil),                        // 392: clustermanager.ConstantValue
	(*GetInnerTemplateValuesRequest)(nil),        // 393: clustermanager.GetInnerTemplateValuesRequest
	(*GetInnerTemplateValuesResponse)(nil),       // 394: clustermanager.GetInnerTemplateValuesResponse
	(*TemplateValue)(nil),                        // 395: clustermanager.TemplateValue
	(*DebugBkSopsTaskRequest)(nil),               // 396: clustermanager.DebugBkSopsTaskRequest
	(*DebugBkSopsTaskResponse)(nil),              // 397: clustermanager.DebugBkSopsTaskResponse
	(*DebugBkSopsTaskInfo)(nil),                  // 398: clustermanager.DebugBkSopsTaskInfo
	(*CloudModuleFlag)(nil),                      // 399: clustermanager.CloudModuleFlag
	(*FlagInfo)(nil),                             // 400: clustermanager.flagInfo
	(*ValueRegex)(nil),                           // 401: clustermanager.valueRegex
	(*NumberRange)(nil),                          // 402: clustermanager.NumberRange
	(*CreateCloudModuleFlagRequest)(nil),         // 403: clustermanager.CreateCloudModuleFlagRequest
	(*CreateCloudModuleFlagResponse)(nil),        // 404: clustermanager.CreateCloudModuleFlagResponse
	(*UpdateCloudModuleFlagRequest)(nil),         // 405: clustermanager.UpdateCloudModuleFlagRequest
	(*UpdateCloudModuleFlagResponse)(nil),        // 406: clustermanager.UpdateCloudModuleFlagResponse
	(*DeleteCloudModuleFlagRequest)(nil),         // 407: clustermanager.DeleteCloudModuleFlagRequest
	(*DeleteCloudModuleFlagResponse)(nil),        // 408: clustermanager.DeleteCloudModuleFlagResponse
	(*ListCloudModuleFlagRequest)(nil),           // 409: clustermanager.ListCloudModuleFlagRequest
	(*ListCloudModuleFlagResponse)(nil),          // 410: clustermanager.ListCloudModuleFlagResponse
	(*GetExternalNodeScriptRequest)(nil),         // 411: clustermanager.GetExternalNodeScriptRequest
	(*GetExternalNodeScriptResponse)(nil),        // 412: clustermanager.GetExternalNodeScriptResponse
	(*MapStruct)(nil),                            // 413: clustermanager.MapStruct
	(*GetBatchCustomSettingRequest)(nil),         // 414: clustermanager.GetBatchCustomSettingRequest
	(*GetBatchCustomSettingResponse)(nil),        // 415: clustermanager.GetBatchCustomSettingResponse
	(*ScopeInfo)(nil),                            // 416: clustermanager.ScopeInfo
	(*GetBizTopologyHostRequest)(nil),            // 417: clustermanager.GetBizTopologyHostRequest
	(*GetBizTopologyHostResponse)(nil),           // 418: clustermanager.GetBizTopologyHostResponse
	(*NodeData)(nil),                             // 419: clustermanager.NodeData
	(*GetTopologyNodesRequest)(nil),              // 420: clustermanager.GetTopologyNodesRequest
	(*GetTopologyNodesResponse)(nil),             // 421: clustermanager.GetTopologyNodesResponse
	(*GetTopologyNodesData)(nil),                 // 422: clustermanager.GetTopologyNodesData
	(*HostData)(nil),                             // 423: clustermanager.HostData
	(*HostCloudArea)(nil),                        // 424: clustermanager.HostCloudArea
	(*GetTopologyHostIdsNodesRequest)(nil),       // 425: clustermanager.GetTopologyHostIdsNodesRequest
	(*GetTopologyHostIdsNodesResponse)(nil),      // 426: clustermanager.GetTopologyHostIdsNodesResponse
	(*GetTopologyHostIdsNodesData)(nil),          // 427: clustermanager.GetTopologyHostIdsNodesData
	(*HostIDsNodeData)(nil),                      // 428: clustermanager.HostIDsNodeData
	(*Meta)(nil),                                 // 429: clustermanager.Meta
	(*GetHostsDetailsRequest)(nil),               // 430: clustermanager.GetHostsDetailsRequest
	(*GetHostsDetailsResponse)(nil),              // 431: clustermanager.GetHostsDetailsResponse
	(*HostDataWithMeta)(nil),                     // 432: clustermanager.HostDataWithMeta
	(*GetScopeHostCheckRequest)(nil),             // 433: clustermanager.GetScopeHostCheckRequest
	(*GetScopeHostCheckResponse)(nil),            // 434: clustermanager.GetScopeHostCheckResponse
	(*NotifyConfig)(nil),                         // 435: clustermanager.NotifyConfig
	(*NotifyData)(nil),                           // 436: clustermanager.NotifyData
	(*NotifyTemplate)(nil),                       // 437: clustermanager.NotifyTemplate
	(*CreateNotifyTemplateRequest)(nil),          // 438: clustermanager.CreateNotifyTemplateRequest
	(*CreateNotifyTemplateResponse)(nil),         // 439: clustermanager.CreateNotifyTemplateResponse
	(*DeleteNotifyTemplateRequest)(nil),          // 440: clustermanager.DeleteNotifyTemplateRequest
	(*DeleteNotifyTemplateResponse)(nil),         // 441: clustermanager.DeleteNotifyTemplateResponse
	(*ListNotifyTemplateRequest)(nil),            // 442: clustermanager.ListNotifyTemplateRequest
	(*ListNotifyTemplateResponse)(nil),           // 443: clustermanager.ListNotifyTemplateResponse
	(*GetProviderResourceUsageRequest)(nil),      // 444: clustermanager.GetProviderResourceUsageRequest
	(*GetProviderResourceUsageResponse)(nil),     // 445: clustermanager.GetProviderResourceUsageResponse
	(*BusinessInfo)(nil),                         // 446: clustermanager.BusinessInfo
	(*GetProjectResourceQuotaUsageRequest)(nil),  // 447: clustermanager.GetProjectResourceQuotaUsageRequest
	(*GetProjectResourceQuotaUsageResponse)(nil), // 448: clustermanager.GetProjectResourceQuotaUsageResponse
	(*ProjectAutoscalerQuota)(nil),               // 449: clustermanager.ProjectAutoscalerQuota
	(*ListCloudNodePublicPrefixRequest)(nil),     // 450: clustermanager.ListCloudNodePublicPrefixRequest
	(*ListCloudNodePublicPrefixResponse)(nil),    // 451: clustermanager.ListCloudNodePublicPrefixResponse
	(*NodePublicPrefix)(nil),                     // 452: clustermanager.NodePublicPrefix
	(*GetClusterSharedProjectRequest)(nil),       // 453: clustermanager.GetClusterSharedProjectRequest
	(*GetClusterSharedProjectResponse)(nil),      // 454: clustermanager.GetClusterSharedProjectResponse
	(*GPUArgs)(nil),                              // 455: clustermanager.GPUArgs
	(*DriverVersion)(nil),                        // 456: clustermanager.DriverVersion
	(*CUDNN)(nil),                                // 457: clustermanager.CUDNN
	(*CustomDriver)(nil),                         // 458: clustermanager.CustomDriver
	(*ClusterBasicInfo)(nil),                     // 459: clustermanager.ClusterBasicInfo
	(*TemplateConfig)(nil),                       // 460: clustermanager.TemplateConfig
	(*TemplateConfigInfo)(nil),                   // 461: clustermanager.TemplateConfigInfo
	(*CloudTemplateConfig)(nil),                  // 462: clustermanager.CloudTemplateConfig
	(*CloudNetworkTemplateConfig)(nil),           // 463: clustermanager.CloudNetworkTemplateConfig
	(*CreateTemplateConfigRequest)(nil),          // 464: clustermanager.CreateTemplateConfigRequest
	(*CreateTemplateConfigResponse)(nil),         // 465: clustermanager.CreateTemplateConfigResponse
	(*DeleteTemplateConfigRequest)(nil),          // 466: clustermanager.DeleteTemplateConfigRequest
	(*DeleteTemplateConfigResponse)(nil),         // 467: clustermanager.DeleteTemplateConfigResponse
	(*ListTemplateConfigRequest)(nil),            // 468: clustermanager.ListTemplateConfigRequest
	(*ListTemplateConfigResponse)(nil),           // 469: clustermanager.ListTemplateConfigResponse
	(*UpdateTemplateConfigRequest)(nil),          // 470: clustermanager.UpdateTemplateConfigRequest
	(*UpdateTemplateConfigResponse)(nil),         // 471: clustermanager.UpdateTemplateConfigResponse
	nil,                                          // 472: clustermanager.Cluster.LabelsEntry
	nil,                                          // 473: clustermanager.Cluster.BcsAddonsEntry
	nil,                                          // 474: clustermanager.Cluster.ExtraAddonsEntry
	nil,                                          // 475: clustermanager.Cluster.MasterEntry
	nil,                                          // 476: clustermanager.Cluster.ExtraInfoEntry
	nil,                                          // 477: clustermanager.ClusterBasicSetting.ClusterTagsEntry
	nil,                                          // 478: clustermanager.ClusterAdvanceSetting.ExtraArgsEntry
	nil,                                          // 479: clustermanager.NodeSetting.LabelsEntry
	nil,                                          // 480: clustermanager.NodeSetting.ExtraArgsEntry
	nil,                                          // 481: clustermanager.Namespace.LabelsEntry
	nil,                                          // 482: clustermanager.BKOpsPlugin.ParamsEntry
	nil,                                          // 483: clustermanager.Action.PluginsEntry
	nil,                                          // 484: clustermanager.OSInfo.RegionsEntry
	nil,                                          // 485: clustermanager.Cloud.OpsPluginsEntry
	nil,                                          // 486: clustermanager.Cloud.ExtraPluginsEntry
	nil,                                          // 487: clustermanager.Cloud.PlatformInfoEntry
	nil,                                          // 488: clustermanager.NodeGroup.LabelsEntry
	nil,                                          // 489: clustermanager.NodeGroup.TaintsEntry
	nil,                                          // 490: clustermanager.NodeGroup.TagsEntry
	nil,                                          // 491: clustermanager.NodeGroup.ExtraInfoEntry
	nil,                                          // 492: clustermanager.LaunchConfiguration.SelectorEntry
	nil,                                          // 493: clustermanager.NodeTemplate.LabelsEntry
	nil,                                          // 494: clustermanager.NodeTemplate.ExtraArgsEntry
	nil,                                          // 495: clustermanager.NodeTemplate.AnnotationsEntry
	nil,                                          // 496: clustermanager.NodeTemplate.ExtraInfoEntry
	nil,                                          // 497: clustermanager.CreateNodeTemplateRequest.LabelsEntry
	nil,                                          // 498: clustermanager.CreateNodeTemplateRequest.ExtraArgsEntry
	nil,                                          // 499: clustermanager.UpdateNodeTemplateRequest.LabelsEntry
	nil,                                          // 500: clustermanager.UpdateNodeTemplateRequest.ExtraArgsEntry
	nil,                                          // 501: clustermanager.Project.CredentialsEntry
	nil,                                          // 502: clustermanager.Task.StepsEntry
	nil,                                          // 503: clustermanager.Task.CommonParamsEntry
	nil,                                          // 504: clustermanager.Step.ParamsEntry
	nil,                                          // 505: clustermanager.CreateClusterReq.LabelsEntry
	nil,                                          // 506: clustermanager.CreateClusterReq.BcsAddonsEntry
	nil,                                          // 507: clustermanager.CreateClusterReq.ExtraAddonsEntry
	nil,                                          // 508: clustermanager.CreateClusterReq.ExtraInfoEntry
	nil,                                          // 509: clustermanager.CreateVirtualClusterReq.LabelsEntry
	nil,                                          // 510: clustermanager.CreateVirtualClusterReq.ExtraInfoEntry
	nil,                                          // 511: clustermanager.NamespaceInfo.LabelsEntry
	nil,                                          // 512: clustermanager.NamespaceInfo.AnnotationsEntry
	nil,                                          // 513: clustermanager.ImportClusterReq.LabelsEntry
	nil,                                          // 514: clustermanager.ImportClusterReq.ExtraInfoEntry
	nil,                                          // 515: clustermanager.UpdateClusterReq.LabelsEntry
	nil,                                          // 516: clustermanager.UpdateClusterReq.BcsAddonsEntry
	nil,                                          // 517: clustermanager.UpdateClusterReq.ExtraAddonsEntry
	nil,                                          // 518: clustermanager.UpdateClusterReq.ExtraInfoEntry
	nil,                                          // 519: clustermanager.CheckNodesResponse.DataEntry
	nil,                                          // 520: clustermanager.ListProjectClusterResp.ClusterExtraInfoEntry
	nil,                                          // 521: clustermanager.ListClusterResp.ClusterExtraInfoEntry
	nil,                                          // 522: clustermanager.WebAnnotations.PermsEntry
	nil,                                          // 523: clustermanager.ClusterNode.LabelsEntry
	nil,                                          // 524: clustermanager.ClusterNode.AnnotationsEntry
	nil,                                          // 525: clustermanager.CreateCloudRequest.OpsPluginsEntry
	nil,                                          // 526: clustermanager.CreateCloudRequest.ExtraPluginsEntry
	nil,                                          // 527: clustermanager.CreateCloudRequest.PlatformInfoEntry
	nil,                                          // 528: clustermanager.UpdateCloudRequest.OpsPluginsEntry
	nil,                                          // 529: clustermanager.UpdateCloudRequest.ExtraPluginsEntry
	nil,                                          // 530: clustermanager.UpdateCloudRequest.PlatformInfoEntry
	nil,                                          // 531: clustermanager.CreateNodeGroupRequest.LabelsEntry
	nil,                                          // 532: clustermanager.CreateNodeGroupRequest.TaintsEntry
	nil,                                          // 533: clustermanager.CreateNodeGroupRequest.TagsEntry
	nil,                                          // 534: clustermanager.UpdateNodeGroupRequest.LabelsEntry
	nil,                                          // 535: clustermanager.UpdateNodeGroupRequest.TaintsEntry
	nil,                                          // 536: clustermanager.UpdateNodeGroupRequest.TagsEntry
	nil,                                          // 537: clustermanager.UpdateNodeGroupRequest.ExtraInfoEntry
	nil,                                          // 538: clustermanager.CreateTaskRequest.StepsEntry
	nil,                                          // 539: clustermanager.UpdateTaskRequest.StepsEntry
	nil,                                          // 540: clustermanager.ListCloudRuntimeInfoResponse.DataEntry
	nil,                                          // 541: clustermanager.NodeAnnotation.AnnotationsEntry
	nil,                                          // 542: clustermanager.NodeLabel.LabelsEntry
	nil,                                          // 543: clustermanager.Perms.PermsEntry
	nil,                                          // 544: clustermanager.DebugBkSopsTaskRequest.ConstantEntry
	nil,                                          // 545: clustermanager.MapStruct.ValuesEntry
	nil,                                          // 546: clustermanager.ClusterBasicInfo.LabelsEntry
	(*wrappers.BoolValue)(nil),                   // 547: google.protobuf.BoolValue
	(*wrappers.UInt32Value)(nil),                 // 548: google.protobuf.UInt32Value
	(*wrappers.StringValue)(nil),                 // 549: google.protobuf.StringValue
	(*_struct.Struct)(nil),                       // 550: google.protobuf.Struct
	(*wrappers.Int32Value)(nil),                  // 551: google.protobuf.Int32Value
	(*_struct.ListValue)(nil),                    // 552: google.protobuf.ListValue
	(*_struct.Value)(nil),                        // 553: google.protobuf.Value
}
var file_clustermanager_proto_depIdxs = []int32{
	472, // 0: clustermanager.Cluster.labels:type_name -> clustermanager.Cluster.LabelsEntry
	473, // 1: clustermanager.Cluster.bcsAddons:type_name -> clustermanager.Cluster.BcsAddonsEntry
	474, // 2: clustermanager.Cluster.extraAddons:type_name -> clustermanager.Cluster.ExtraAddonsEntry
	475, // 3: clustermanager.Cluster.master:type_name -> clustermanager.Cluster.MasterEntry
	3,   // 4: clustermanager.Cluster.networkSettings:type_name -> clustermanager.NetworkSetting
	8,   // 5: clustermanager.Cluster.clusterBasicSettings:type_name -> clustermanager.ClusterBasicSetting
	9,   // 6: clustermanager.Cluster.clusterAdvanceSettings:type_name -> clustermanager.ClusterAdvanceSetting
	11,  // 7: clustermanager.Cluster.nodeSettings:type_name -> clustermanager.NodeSetting
	73,  // 8: clustermanager.Cluster.template:type_name -> clustermanager.InstanceTemplateConfig
	476, // 9: clustermanager.Cluster.extraInfo:type_name -> clustermanager.Cluster.ExtraInfoEntry
	1,   // 10: clustermanager.Cluster.sharedRanges:type_name -> clustermanager.SharedClusterRanges
	4,   // 11: clustermanager.NetworkSetting.subnetSource:type_name -> clustermanager.SubnetSource
	6,   // 12: clustermanager.SubnetSource.new:type_name -> clustermanager.NewSubnet
	5,   // 13: clustermanager.SubnetSource.existed:type_name -> clustermanager.ExistedSubnetIDs
	477, // 14: clustermanager.ClusterBasicSetting.clusterTags:type_name -> clustermanager.ClusterBasicSetting.ClusterTagsEntry
	67,  // 15: clustermanager.ClusterBasicSetting.area:type_name -> clustermanager.CloudArea
	82,  // 16: clustermanager.ClusterBasicSetting.module:type_name -> clustermanager.ClusterModule
	7,   // 17: clustermanager.ClusterBasicSetting.upgradePolicy:type_name -> clustermanager.UpgradePolicy
	478, // 18: clustermanager.ClusterAdvanceSetting.extraArgs:type_name -> clustermanager.ClusterAdvanceSetting.ExtraArgsEntry
	10,  // 19: clustermanager.ClusterAdvanceSetting.clusterConnectSetting:type_name -> clustermanager.ClusterConnectSetting
	72,  // 20: clustermanager.ClusterConnectSetting.internet:type_name -> clustermanager.InternetAccessible
	479, // 21: clustermanager.NodeSetting.labels:type_name -> clustermanager.NodeSetting.LabelsEntry
	480, // 22: clustermanager.NodeSetting.extraArgs:type_name -> clustermanager.NodeSetting.ExtraArgsEntry
	80,  // 23: clustermanager.NodeSetting.taints:type_name -> clustermanager.Taint
	12,  // 24: clustermanager.NodeSetting.masterLogin:type_name -> clustermanager.NodeLoginInfo
	12,  // 25: clustermanager.NodeSetting.workerLogin:type_name -> clustermanager.NodeLoginInfo
	76,  // 26: clustermanager.NodeLoginInfo.keyPair:type_name -> clustermanager.KeyInfo
	481, // 27: clustermanager.Namespace.labels:type_name -> clustermanager.Namespace.LabelsEntry
	16,  // 28: clustermanager.Namespace.quotaList:type_name -> clustermanager.ResourceQuota
	482, // 29: clustermanager.BKOpsPlugin.params:type_name -> clustermanager.BKOpsPlugin.ParamsEntry
	483, // 30: clustermanager.Action.plugins:type_name -> clustermanager.Action.PluginsEntry
	19,  // 31: clustermanager.ClusterMgr.createCluster:type_name -> clustermanager.Action
	19,  // 32: clustermanager.ClusterMgr.deleteCluster:type_name -> clustermanager.Action
	19,  // 33: clustermanager.ClusterMgr.addNodesToCluster:type_name -> clustermanager.Action
	19,  // 34: clustermanager.ClusterMgr.deleteNodesFromCluster:type_name -> clustermanager.Action
	19,  // 35: clustermanager.ClusterMgr.importCluster:type_name -> clustermanager.Action
	19,  // 36: clustermanager.ClusterMgr.commonMixedAction:type_name -> clustermanager.Action
	19,  // 37: clustermanager.ClusterMgr.checkExternalNodeEmptyAction:type_name -> clustermanager.Action
	21,  // 38: clustermanager.ClusterMgr.managedConfig:type_name -> clustermanager.ManagedConfig
	19,  // 39: clustermanager.NodeGroupMgr.createNodeGroup:type_name -> clustermanager.Action
	19,  // 40: clustermanager.NodeGroupMgr.deleteNodeGroup:type_name -> clustermanager.Action
	19,  // 41: clustermanager.NodeGroupMgr.moveNodesToGroup:type_name -> clustermanager.Action
	19,  // 42: clustermanager.NodeGroupMgr.removeNodesFromGroup:type_name -> clustermanager.Action
	19,  // 43: clustermanager.NodeGroupMgr.cleanNodesInGroup:type_name -> clustermanager.Action
	19,  // 44: clustermanager.NodeGroupMgr.updateDesiredNodes:type_name -> clustermanager.Action
	19,  // 45: clustermanager.NodeGroupMgr.addExternalNodesToCluster:type_name -> clustermanager.Action
	19,  // 46: clustermanager.NodeGroupMgr.deleteExternalNodesFromCluster:type_name -> clustermanager.Action
	484, // 47: clustermanager.OSInfo.regions:type_name -> clustermanager.OSInfo.RegionsEntry
	24,  // 48: clustermanager.CloudAccount.account:type_name -> clustermanager.Account
	24,  // 49: clustermanager.CreateCloudAccountRequest.account:type_name -> clustermanager.Account
	547, // 50: clustermanager.CreateCloudAccountRequest.enable:type_name -> google.protobuf.BoolValue
	25,  // 51: clustermanager.CreateCloudAccountResponse.data:type_name -> clustermanager.CloudAccount
	547, // 52: clustermanager.UpdateCloudAccountRequest.enable:type_name -> google.protobuf.BoolValue
	24,  // 53: clustermanager.UpdateCloudAccountRequest.account:type_name -> clustermanager.Account
	31,  // 54: clustermanager.MigrateCloudAccountRequest.encrypt:type_name -> clustermanager.OriginEncrypt
	25,  // 55: clustermanager.ListCloudAccountPermResponse.data:type_name -> clustermanager.CloudAccount
	24,  // 56: clustermanager.VerifyCloudAccountRequest.account:type_name -> clustermanager.Account
	25,  // 57: clustermanager.CloudAccountInfo.account:type_name -> clustermanager.CloudAccount
	40,  // 58: clustermanager.ListCloudAccountResponse.data:type_name -> clustermanager.CloudAccountInfo
	167, // 59: clustermanager.ListCloudAccountResponse.web_annotations:type_name -> clustermanager.WebAnnotations
	43,  // 60: clustermanager.CloudVPC.overlay:type_name -> clustermanager.Cidr
	43,  // 61: clustermanager.CloudVPC.underlay:type_name -> clustermanager.Cidr
	44,  // 62: clustermanager.Cidr.cidrs:type_name -> clustermanager.CidrState
	43,  // 63: clustermanager.CreateCloudVPCRequest.overlay:type_name -> clustermanager.Cidr
	43,  // 64: clustermanager.CreateCloudVPCRequest.underlay:type_name -> clustermanager.Cidr
	548, // 65: clustermanager.UpdateCloudVPCRequest.reservedIPNum:type_name -> google.protobuf.UInt32Value
	549, // 66: clustermanager.UpdateCloudVPCRequest.businessID:type_name -> google.protobuf.StringValue
	43,  // 67: clustermanager.UpdateCloudVPCRequest.overlay:type_name -> clustermanager.Cidr
	43,  // 68: clustermanager.UpdateCloudVPCRequest.underlay:type_name -> clustermanager.Cidr
	42,  // 69: clustermanager.UpdateCloudVPCResponse.data:type_name -> clustermanager.CloudVPC
	42,  // 70: clustermanager.DeleteCloudVPCResponse.data:type_name -> clustermanager.CloudVPC
	53,  // 71: clustermanager.ListCloudVPCResponse.data:type_name -> clustermanager.CloudVPCResp
	54,  // 72: clustermanager.CloudVPCResp.overlay:type_name -> clustermanager.CidrDetailInfo
	54,  // 73: clustermanager.CloudVPCResp.underlay:type_name -> clustermanager.CidrDetailInfo
	44,  // 74: clustermanager.CidrDetailInfo.cidrs:type_name -> clustermanager.CidrState
	57,  // 75: clustermanager.ListCloudRegionsResponse.data:type_name -> clustermanager.CloudRegion
	60,  // 76: clustermanager.GetVPCCidrResponse.data:type_name -> clustermanager.VPCCidr
	485, // 77: clustermanager.Cloud.opsPlugins:type_name -> clustermanager.Cloud.OpsPluginsEntry
	486, // 78: clustermanager.Cloud.extraPlugins:type_name -> clustermanager.Cloud.ExtraPluginsEntry
	17,  // 79: clustermanager.Cloud.cloudCredential:type_name -> clustermanager.Credential
	23,  // 80: clustermanager.Cloud.osManagement:type_name -> clustermanager.OSInfo
	20,  // 81: clustermanager.Cloud.clusterManagement:type_name -> clustermanager.ClusterMgr
	22,  // 82: clustermanager.Cloud.nodeGroupManagement:type_name -> clustermanager.NodeGroupMgr
	63,  // 83: clustermanager.Cloud.networkInfo:type_name -> clustermanager.CloudNetworkInfo
	62,  // 84: clustermanager.Cloud.confInfo:type_name -> clustermanager.CloudConfigInfo
	487, // 85: clustermanager.Cloud.platformInfo:type_name -> clustermanager.Cloud.PlatformInfoEntry
	64,  // 86: clustermanager.CloudNetworkInfo.cidrSteps:type_name -> clustermanager.EnvCidrStep
	65,  // 87: clustermanager.CloudNetworkInfo.vpcCniModes:type_name -> clustermanager.NetworkMode
	68,  // 88: clustermanager.NodeGroup.autoScaling:type_name -> clustermanager.AutoScalingGroup
	75,  // 89: clustermanager.NodeGroup.launchTemplate:type_name -> clustermanager.LaunchConfiguration
	488, // 90: clustermanager.NodeGroup.labels:type_name -> clustermanager.NodeGroup.LabelsEntry
	489, // 91: clustermanager.NodeGroup.taints:type_name -> clustermanager.NodeGroup.TaintsEntry
	81,  // 92: clustermanager.NodeGroup.nodeTemplate:type_name -> clustermanager.NodeTemplate
	490, // 93: clustermanager.NodeGroup.tags:type_name -> clustermanager.NodeGroup.TagsEntry
	67,  // 94: clustermanager.NodeGroup.area:type_name -> clustermanager.CloudArea
	491, // 95: clustermanager.NodeGroup.extraInfo:type_name -> clustermanager.NodeGroup.ExtraInfoEntry
	69,  // 96: clustermanager.AutoScalingGroup.timeRanges:type_name -> clustermanager.TimeRange
	70,  // 97: clustermanager.InstanceTemplateConfig.systemDisk:type_name -> clustermanager.DataDisk
	70,  // 98: clustermanager.InstanceTemplateConfig.dataDisks:type_name -> clustermanager.DataDisk
	77,  // 99: clustermanager.InstanceTemplateConfig.imageInfo:type_name -> clustermanager.ImageInfo
	71,  // 100: clustermanager.InstanceTemplateConfig.cloudDataDisks:type_name -> clustermanager.CloudDataDisk
	76,  // 101: clustermanager.InstanceTemplateConfig.keyPair:type_name -> clustermanager.KeyInfo
	74,  // 102: clustermanager.InstanceTemplateConfig.charge:type_name -> clustermanager.InstanceChargePrepaid
	72,  // 103: clustermanager.InstanceTemplateConfig.internetAccess:type_name -> clustermanager.InternetAccessible
	70,  // 104: clustermanager.LaunchConfiguration.systemDisk:type_name -> clustermanager.DataDisk
	70,  // 105: clustermanager.LaunchConfiguration.dataDisks:type_name -> clustermanager.DataDisk
	72,  // 106: clustermanager.LaunchConfiguration.internetAccess:type_name -> clustermanager.InternetAccessible
	77,  // 107: clustermanager.LaunchConfiguration.imageInfo:type_name -> clustermanager.ImageInfo
	492, // 108: clustermanager.LaunchConfiguration.selector:type_name -> clustermanager.LaunchConfiguration.SelectorEntry
	76,  // 109: clustermanager.LaunchConfiguration.keyPair:type_name -> clustermanager.KeyInfo
	74,  // 110: clustermanager.LaunchConfiguration.charge:type_name -> clustermanager.InstanceChargePrepaid
	83,  // 111: clustermanager.ClusterAutoScalingOption.module:type_name -> clustermanager.ModuleInfo
	79,  // 112: clustermanager.ClusterAutoScalingOption.webhook:type_name -> clustermanager.WebhookMode
	493, // 113: clustermanager.NodeTemplate.labels:type_name -> clustermanager.NodeTemplate.LabelsEntry
	80,  // 114: clustermanager.NodeTemplate.taints:type_name -> clustermanager.Taint
	71,  // 115: clustermanager.NodeTemplate.dataDisks:type_name -> clustermanager.CloudDataDisk
	494, // 116: clustermanager.NodeTemplate.extraArgs:type_name -> clustermanager.NodeTemplate.ExtraArgsEntry
	19,  // 117: clustermanager.NodeTemplate.bcsScaleOutAddons:type_name -> clustermanager.Action
	19,  // 118: clustermanager.NodeTemplate.bcsScaleInAddons:type_name -> clustermanager.Action
	19,  // 119: clustermanager.NodeTemplate.scaleOutExtraAddons:type_name -> clustermanager.Action
	19,  // 120: clustermanager.NodeTemplate.scaleInExtraAddons:type_name -> clustermanager.Action
	84,  // 121: clustermanager.NodeTemplate.runtime:type_name -> clustermanager.RunTimeInfo
	83,  // 122: clustermanager.NodeTemplate.module:type_name -> clustermanager.ModuleInfo
	495, // 123: clustermanager.NodeTemplate.annotations:type_name -> clustermanager.NodeTemplate.AnnotationsEntry
	77,  // 124: clustermanager.NodeTemplate.image:type_name -> clustermanager.ImageInfo
	455, // 125: clustermanager.NodeTemplate.gpuArgs:type_name -> clustermanager.GPUArgs
	496, // 126: clustermanager.NodeTemplate.extraInfo:type_name -> clustermanager.NodeTemplate.ExtraInfoEntry
	497, // 127: clustermanager.CreateNodeTemplateRequest.labels:type_name -> clustermanager.CreateNodeTemplateRequest.LabelsEntry
	80,  // 128: clustermanager.CreateNodeTemplateRequest.taints:type_name -> clustermanager.Taint
	71,  // 129: clustermanager.CreateNodeTemplateRequest.dataDisks:type_name -> clustermanager.CloudDataDisk
	498, // 130: clustermanager.CreateNodeTemplateRequest.extraArgs:type_name -> clustermanager.CreateNodeTemplateRequest.ExtraArgsEntry
	19,  // 131: clustermanager.CreateNodeTemplateRequest.scaleOutExtraAddons:type_name -> clustermanager.Action
	19,  // 132: clustermanager.CreateNodeTemplateRequest.scaleInExtraAddons:type_name -> clustermanager.Action
	84,  // 133: clustermanager.CreateNodeTemplateRequest.runtime:type_name -> clustermanager.RunTimeInfo
	83,  // 134: clustermanager.CreateNodeTemplateRequest.module:type_name -> clustermanager.ModuleInfo
	549, // 135: clustermanager.CreateNodeTemplateRequest.ScaleInPreScript:type_name -> google.protobuf.StringValue
	549, // 136: clustermanager.CreateNodeTemplateRequest.ScaleInPostScript:type_name -> google.protobuf.StringValue
	413, // 137: clustermanager.CreateNodeTemplateRequest.annotations:type_name -> clustermanager.MapStruct
	77,  // 138: clustermanager.CreateNodeTemplateRequest.imageInfo:type_name -> clustermanager.ImageInfo
	455, // 139: clustermanager.CreateNodeTemplateRequest.gpuArgs:type_name -> clustermanager.GPUArgs
	413, // 140: clustermanager.CreateNodeTemplateRequest.extraInfo:type_name -> clustermanager.MapStruct
	168, // 141: clustermanager.CreateNodeTemplateResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	499, // 142: clustermanager.UpdateNodeTemplateRequest.labels:type_name -> clustermanager.UpdateNodeTemplateRequest.LabelsEntry
	80,  // 143: clustermanager.UpdateNodeTemplateRequest.taints:type_name -> clustermanager.Taint
	548, // 144: clustermanager.UpdateNodeTemplateRequest.unSchedulable:type_name -> google.protobuf.UInt32Value
	71,  // 145: clustermanager.UpdateNodeTemplateRequest.dataDisks:type_name -> clustermanager.CloudDataDisk
	500, // 146: clustermanager.UpdateNodeTemplateRequest.extraArgs:type_name -> clustermanager.UpdateNodeTemplateRequest.ExtraArgsEntry
	19,  // 147: clustermanager.UpdateNodeTemplateRequest.scaleOutExtraAddons:type_name -> clustermanager.Action
	19,  // 148: clustermanager.UpdateNodeTemplateRequest.scaleInExtraAddons:type_name -> clustermanager.Action
	84,  // 149: clustermanager.UpdateNodeTemplateRequest.runtime:type_name -> clustermanager.RunTimeInfo
	83,  // 150: clustermanager.UpdateNodeTemplateRequest.module:type_name -> clustermanager.ModuleInfo
	549, // 151: clustermanager.UpdateNodeTemplateRequest.ScaleInPreScript:type_name -> google.protobuf.StringValue
	549, // 152: clustermanager.UpdateNodeTemplateRequest.ScaleInPostScript:type_name -> google.protobuf.StringValue
	413, // 153: clustermanager.UpdateNodeTemplateRequest.annotations:type_name -> clustermanager.MapStruct
	77,  // 154: clustermanager.UpdateNodeTemplateRequest.imageInfo:type_name -> clustermanager.ImageInfo
	455, // 155: clustermanager.UpdateNodeTemplateRequest.gpuArgs:type_name -> clustermanager.GPUArgs
	413, // 156: clustermanager.UpdateNodeTemplateRequest.extraInfo:type_name -> clustermanager.MapStruct
	168, // 157: clustermanager.UpdateNodeTemplateResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	168, // 158: clustermanager.DeleteNodeTemplateResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	81,  // 159: clustermanager.GetNodeTemplateResponse.data:type_name -> clustermanager.NodeTemplate
	168, // 160: clustermanager.GetNodeTemplateResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	81,  // 161: clustermanager.ListNodeTemplateResponse.data:type_name -> clustermanager.NodeTemplate
	501, // 162: clustermanager.Project.credentials:type_name -> clustermanager.Project.CredentialsEntry
	502, // 163: clustermanager.Task.steps:type_name -> clustermanager.Task.StepsEntry
	503, // 164: clustermanager.Task.commonParams:type_name -> clustermanager.Task.CommonParamsEntry
	504, // 165: clustermanager.Step.params:type_name -> clustermanager.Step.ParamsEntry
	505, // 166: clustermanager.CreateClusterReq.labels:type_name -> clustermanager.CreateClusterReq.LabelsEntry
	506, // 167: clustermanager.CreateClusterReq.bcsAddons:type_name -> clustermanager.CreateClusterReq.BcsAddonsEntry
	507, // 168: clustermanager.CreateClusterReq.extraAddons:type_name -> clustermanager.CreateClusterReq.ExtraAddonsEntry
	3,   // 169: clustermanager.CreateClusterReq.networkSettings:type_name -> clustermanager.NetworkSetting
	8,   // 170: clustermanager.CreateClusterReq.clusterBasicSettings:type_name -> clustermanager.ClusterBasicSetting
	9,   // 171: clustermanager.CreateClusterReq.clusterAdvanceSettings:type_name -> clustermanager.ClusterAdvanceSetting
	11,  // 172: clustermanager.CreateClusterReq.nodeSettings:type_name -> clustermanager.NodeSetting
	73,  // 173: clustermanager.CreateClusterReq.instances:type_name -> clustermanager.InstanceTemplateConfig
	508, // 174: clustermanager.CreateClusterReq.extraInfo:type_name -> clustermanager.CreateClusterReq.ExtraInfoEntry
	66,  // 175: clustermanager.CreateClusterReq.nodeGroups:type_name -> clustermanager.NodeGroup
	1,   // 176: clustermanager.CreateClusterReq.sharedRanges:type_name -> clustermanager.SharedClusterRanges
	0,   // 177: clustermanager.CreateClusterResp.data:type_name -> clustermanager.Cluster
	96,  // 178: clustermanager.CreateClusterResp.task:type_name -> clustermanager.Task
	168, // 179: clustermanager.CreateClusterResp.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	4,   // 180: clustermanager.AddSubnetToClusterReq.subnet:type_name -> clustermanager.SubnetSource
	168, // 181: clustermanager.AddSubnetToClusterResp.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	4,   // 182: clustermanager.SwitchClusterUnderlayNetworkReq.subnet:type_name -> clustermanager.SubnetSource
	96,  // 183: clustermanager.SwitchClusterUnderlayNetworkResp.task:type_name -> clustermanager.Task
	168, // 184: clustermanager.SwitchClusterUnderlayNetworkResp.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	0,   // 185: clustermanager.SwitchClusterUnderlayNetworkResp.cluster:type_name -> clustermanager.Cluster
	509, // 186: clustermanager.CreateVirtualClusterReq.labels:type_name -> clustermanager.CreateVirtualClusterReq.LabelsEntry
	3,   // 187: clustermanager.CreateVirtualClusterReq.networkSettings:type_name -> clustermanager.NetworkSetting
	8,   // 188: clustermanager.CreateVirtualClusterReq.clusterBasicSettings:type_name -> clustermanager.ClusterBasicSetting
	9,   // 189: clustermanager.CreateVirtualClusterReq.clusterAdvanceSettings:type_name -> clustermanager.ClusterAdvanceSetting
	11,  // 190: clustermanager.CreateVirtualClusterReq.nodeSettings:type_name -> clustermanager.NodeSetting
	510, // 191: clustermanager.CreateVirtualClusterReq.extraInfo:type_name -> clustermanager.CreateVirtualClusterReq.ExtraInfoEntry
	107, // 192: clustermanager.CreateVirtualClusterReq.ns:type_name -> clustermanager.NamespaceInfo
	511, // 193: clustermanager.NamespaceInfo.labels:type_name -> clustermanager.NamespaceInfo.LabelsEntry
	512, // 194: clustermanager.NamespaceInfo.annotations:type_name -> clustermanager.NamespaceInfo.AnnotationsEntry
	108, // 195: clustermanager.NamespaceInfo.quota:type_name -> clustermanager.NamespaceQuota
	0,   // 196: clustermanager.CreateVirtualClusterResp.data:type_name -> clustermanager.Cluster
	96,  // 197: clustermanager.CreateVirtualClusterResp.task:type_name -> clustermanager.Task
	168, // 198: clustermanager.CreateVirtualClusterResp.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	70,  // 199: clustermanager.HardwareProfile.systemDisk:type_name -> clustermanager.DataDisk
	70,  // 200: clustermanager.HardwareProfile.dataDisks:type_name -> clustermanager.DataDisk
	111, // 201: clustermanager.RecommendNodeGroupConf.instanceProfile:type_name -> clustermanager.InstanceProfile
	112, // 202: clustermanager.RecommendNodeGroupConf.hardwareProfile:type_name -> clustermanager.HardwareProfile
	113, // 203: clustermanager.RecommendNodeGroupConf.networkProfile:type_name -> clustermanager.NetworkProfile
	114, // 204: clustermanager.RecommendNodeGroupConf.scalingProfile:type_name -> clustermanager.ScalingProfile
	115, // 205: clustermanager.RecommendNodeGroupConfResp.data:type_name -> clustermanager.RecommendNodeGroupConf
	547, // 206: clustermanager.ImportClusterReq.isExclusive:type_name -> google.protobuf.BoolValue
	513, // 207: clustermanager.ImportClusterReq.labels:type_name -> clustermanager.ImportClusterReq.LabelsEntry
	121, // 208: clustermanager.ImportClusterReq.cloudMode:type_name -> clustermanager.ImportCloudMode
	514, // 209: clustermanager.ImportClusterReq.extraInfo:type_name -> clustermanager.ImportClusterReq.ExtraInfoEntry
	67,  // 210: clustermanager.ImportClusterReq.area:type_name -> clustermanager.CloudArea
	550, // 211: clustermanager.ImportClusterResp.data:type_name -> google.protobuf.Struct
	0,   // 212: clustermanager.DeleteVirtualClusterResp.data:type_name -> clustermanager.Cluster
	96,  // 213: clustermanager.DeleteVirtualClusterResp.task:type_name -> clustermanager.Task
	168, // 214: clustermanager.DeleteVirtualClusterResp.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	108, // 215: clustermanager.UpdateVirtualClusterQuotaReq.quota:type_name -> clustermanager.NamespaceQuota
	108, // 216: clustermanager.UpdateVirtualClusterQuotaResp.data:type_name -> clustermanager.NamespaceQuota
	0,   // 217: clustermanager.DeleteClusterResp.data:type_name -> clustermanager.Cluster
	96,  // 218: clustermanager.DeleteClusterResp.task:type_name -> clustermanager.Task
	168, // 219: clustermanager.DeleteClusterResp.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	547, // 220: clustermanager.UpdateClusterReq.isExclusive:type_name -> google.protobuf.BoolValue
	515, // 221: clustermanager.UpdateClusterReq.labels:type_name -> clustermanager.UpdateClusterReq.LabelsEntry
	516, // 222: clustermanager.UpdateClusterReq.bcsAddons:type_name -> clustermanager.UpdateClusterReq.BcsAddonsEntry
	517, // 223: clustermanager.UpdateClusterReq.extraAddons:type_name -> clustermanager.UpdateClusterReq.ExtraAddonsEntry
	3,   // 224: clustermanager.UpdateClusterReq.networkSettings:type_name -> clustermanager.NetworkSetting
	8,   // 225: clustermanager.UpdateClusterReq.clusterBasicSettings:type_name -> clustermanager.ClusterBasicSetting
	9,   // 226: clustermanager.UpdateClusterReq.clusterAdvanceSettings:type_name -> clustermanager.ClusterAdvanceSetting
	11,  // 227: clustermanager.UpdateClusterReq.nodeSettings:type_name -> clustermanager.NodeSetting
	518, // 228: clustermanager.UpdateClusterReq.ExtraInfo:type_name -> clustermanager.UpdateClusterReq.ExtraInfoEntry
	547, // 229: clustermanager.UpdateClusterReq.isCommonCluster:type_name -> google.protobuf.BoolValue
	549, // 230: clustermanager.UpdateClusterReq.description:type_name -> google.protobuf.StringValue
	547, // 231: clustermanager.UpdateClusterReq.is_shared:type_name -> google.protobuf.BoolValue
	547, // 232: clustermanager.UpdateClusterReq.isMixed:type_name -> google.protobuf.BoolValue
	1,   // 233: clustermanager.UpdateClusterReq.sharedRanges:type_name -> clustermanager.SharedClusterRanges
	413, // 234: clustermanager.UpdateClusterReq.labels2:type_name -> clustermanager.MapStruct
	0,   // 235: clustermanager.UpdateClusterResp.data:type_name -> clustermanager.Cluster
	168, // 236: clustermanager.UpdateClusterResp.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	0,   // 237: clustermanager.RetryCreateClusterResp.data:type_name -> clustermanager.Cluster
	96,  // 238: clustermanager.RetryCreateClusterResp.task:type_name -> clustermanager.Task
	0,   // 239: clustermanager.GetClusterResp.data:type_name -> clustermanager.Cluster
	136, // 240: clustermanager.GetClusterResp.extra:type_name -> clustermanager.ExtraClusterInfo
	168, // 241: clustermanager.GetClusterResp.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	519, // 242: clustermanager.CheckNodesResponse.data:type_name -> clustermanager.CheckNodesResponse.DataEntry
	357, // 243: clustermanager.UnCordonNodeResponse.data:type_name -> clustermanager.NodeOperationStatus
	357, // 244: clustermanager.CordonNodeResponse.data:type_name -> clustermanager.NodeOperationStatus
	146, // 245: clustermanager.UpdateNodeResponse.data:type_name -> clustermanager.NodeStatus
	82,  // 246: clustermanager.UpdateClusterModuleRequest.module:type_name -> clustermanager.ClusterModule
	82,  // 247: clustermanager.UpdateClusterModuleResponse.data:type_name -> clustermanager.ClusterModule
	2,   // 248: clustermanager.RecordNodeInfoRequest.nodes:type_name -> clustermanager.Node
	2,   // 249: clustermanager.GetNodeResponse.data:type_name -> clustermanager.Node
	155, // 250: clustermanager.GetNodeInfoResponse.data:type_name -> clustermanager.NodeInfo
	154, // 251: clustermanager.NodeInfo.instanceConfig:type_name -> clustermanager.NodeConfig
	290, // 252: clustermanager.NodeInfo.zoneInfo:type_name -> clustermanager.ZoneInfo
	66,  // 253: clustermanager.NodeInfo.group:type_name -> clustermanager.NodeGroup
	81,  // 254: clustermanager.NodeInfo.nodeTemplate:type_name -> clustermanager.NodeTemplate
	0,   // 255: clustermanager.ListCommonClusterResp.data:type_name -> clustermanager.Cluster
	167, // 256: clustermanager.ListCommonClusterResp.web_annotations:type_name -> clustermanager.WebAnnotations
	0,   // 257: clustermanager.ListProjectClusterResp.data:type_name -> clustermanager.Cluster
	520, // 258: clustermanager.ListProjectClusterResp.clusterExtraInfo:type_name -> clustermanager.ListProjectClusterResp.ClusterExtraInfoEntry
	168, // 259: clustermanager.ListProjectClusterResp.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	459, // 260: clustermanager.ListBusinessClusterResp.data:type_name -> clustermanager.ClusterBasicInfo
	0,   // 261: clustermanager.ListClusterResp.data:type_name -> clustermanager.Cluster
	521, // 262: clustermanager.ListClusterResp.clusterExtraInfo:type_name -> clustermanager.ListClusterResp.ClusterExtraInfoEntry
	167, // 263: clustermanager.ListClusterResp.web_annotations:type_name -> clustermanager.WebAnnotations
	459, // 264: clustermanager.ListClusterV2Resp.data:type_name -> clustermanager.ClusterBasicInfo
	522, // 265: clustermanager.WebAnnotations.perms:type_name -> clustermanager.WebAnnotations.PermsEntry
	550, // 266: clustermanager.WebAnnotationsV2.perms:type_name -> google.protobuf.Struct
	171, // 267: clustermanager.ListNodesInClusterResponse.data:type_name -> clustermanager.ClusterNode
	168, // 268: clustermanager.ListNodesInClusterResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	523, // 269: clustermanager.ClusterNode.labels:type_name -> clustermanager.ClusterNode.LabelsEntry
	80,  // 270: clustermanager.ClusterNode.taints:type_name -> clustermanager.Taint
	524, // 271: clustermanager.ClusterNode.annotations:type_name -> clustermanager.ClusterNode.AnnotationsEntry
	174, // 272: clustermanager.GetClustersMetaDataResponse.data:type_name -> clustermanager.ClusterMeta
	168, // 273: clustermanager.GetClustersMetaDataResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	171, // 274: clustermanager.ListMastersInClusterResponse.data:type_name -> clustermanager.ClusterNode
	168, // 275: clustermanager.ListMastersInClusterResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	14,  // 276: clustermanager.GetClusterCredentialResp.data:type_name -> clustermanager.ClusterCredential
	14,  // 277: clustermanager.ListClusterCredentialResp.data:type_name -> clustermanager.ClusterCredential
	525, // 278: clustermanager.CreateCloudRequest.opsPlugins:type_name -> clustermanager.CreateCloudRequest.OpsPluginsEntry
	526, // 279: clustermanager.CreateCloudRequest.extraPlugins:type_name -> clustermanager.CreateCloudRequest.ExtraPluginsEntry
	17,  // 280: clustermanager.CreateCloudRequest.cloudCredential:type_name -> clustermanager.Credential
	23,  // 281: clustermanager.CreateCloudRequest.osManagement:type_name -> clustermanager.OSInfo
	20,  // 282: clustermanager.CreateCloudRequest.clusterManagement:type_name -> clustermanager.ClusterMgr
	22,  // 283: clustermanager.CreateCloudRequest.nodeGroupManagement:type_name -> clustermanager.NodeGroupMgr
	63,  // 284: clustermanager.CreateCloudRequest.networkInfo:type_name -> clustermanager.CloudNetworkInfo
	62,  // 285: clustermanager.CreateCloudRequest.confInfo:type_name -> clustermanager.CloudConfigInfo
	527, // 286: clustermanager.CreateCloudRequest.platformInfo:type_name -> clustermanager.CreateCloudRequest.PlatformInfoEntry
	528, // 287: clustermanager.UpdateCloudRequest.opsPlugins:type_name -> clustermanager.UpdateCloudRequest.OpsPluginsEntry
	529, // 288: clustermanager.UpdateCloudRequest.extraPlugins:type_name -> clustermanager.UpdateCloudRequest.ExtraPluginsEntry
	17,  // 289: clustermanager.UpdateCloudRequest.cloudCredential:type_name -> clustermanager.Credential
	23,  // 290: clustermanager.UpdateCloudRequest.osManagement:type_name -> clustermanager.OSInfo
	20,  // 291: clustermanager.UpdateCloudRequest.clusterManagement:type_name -> clustermanager.ClusterMgr
	22,  // 292: clustermanager.UpdateCloudRequest.nodeGroupManagement:type_name -> clustermanager.NodeGroupMgr
	63,  // 293: clustermanager.UpdateCloudRequest.networkInfo:type_name -> clustermanager.CloudNetworkInfo
	62,  // 294: clustermanager.UpdateCloudRequest.confInfo:type_name -> clustermanager.CloudConfigInfo
	530, // 295: clustermanager.UpdateCloudRequest.platformInfo:type_name -> clustermanager.UpdateCloudRequest.PlatformInfoEntry
	61,  // 296: clustermanager.UpdateCloudResponse.data:type_name -> clustermanager.Cloud
	61,  // 297: clustermanager.DeleteCloudResponse.data:type_name -> clustermanager.Cloud
	61,  // 298: clustermanager.GetCloudResponse.data:type_name -> clustermanager.Cloud
	61,  // 299: clustermanager.ListCloudResponse.data:type_name -> clustermanager.Cloud
	68,  // 300: clustermanager.CreateNodeGroupRequest.autoScaling:type_name -> clustermanager.AutoScalingGroup
	75,  // 301: clustermanager.CreateNodeGroupRequest.launchTemplate:type_name -> clustermanager.LaunchConfiguration
	531, // 302: clustermanager.CreateNodeGroupRequest.labels:type_name -> clustermanager.CreateNodeGroupRequest.LabelsEntry
	532, // 303: clustermanager.CreateNodeGroupRequest.taints:type_name -> clustermanager.CreateNodeGroupRequest.TaintsEntry
	81,  // 304: clustermanager.CreateNodeGroupRequest.nodeTemplate:type_name -> clustermanager.NodeTemplate
	533, // 305: clustermanager.CreateNodeGroupRequest.tags:type_name -> clustermanager.CreateNodeGroupRequest.TagsEntry
	202, // 306: clustermanager.CreateNodeGroupRequest.extra:type_name -> clustermanager.GroupExtraInfo
	204, // 307: clustermanager.CreateNodeGroupResponse.data:type_name -> clustermanager.CreateNodeGroupResponseData
	168, // 308: clustermanager.CreateNodeGroupResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	66,  // 309: clustermanager.CreateNodeGroupResponseData.nodeGroup:type_name -> clustermanager.NodeGroup
	96,  // 310: clustermanager.CreateNodeGroupResponseData.task:type_name -> clustermanager.Task
	547, // 311: clustermanager.UpdateNodeGroupRequest.enableAutoscale:type_name -> google.protobuf.BoolValue
	68,  // 312: clustermanager.UpdateNodeGroupRequest.autoScaling:type_name -> clustermanager.AutoScalingGroup
	75,  // 313: clustermanager.UpdateNodeGroupRequest.launchTemplate:type_name -> clustermanager.LaunchConfiguration
	81,  // 314: clustermanager.UpdateNodeGroupRequest.nodeTemplate:type_name -> clustermanager.NodeTemplate
	534, // 315: clustermanager.UpdateNodeGroupRequest.labels:type_name -> clustermanager.UpdateNodeGroupRequest.LabelsEntry
	535, // 316: clustermanager.UpdateNodeGroupRequest.taints:type_name -> clustermanager.UpdateNodeGroupRequest.TaintsEntry
	536, // 317: clustermanager.UpdateNodeGroupRequest.tags:type_name -> clustermanager.UpdateNodeGroupRequest.TagsEntry
	548, // 318: clustermanager.UpdateNodeGroupRequest.bkCloudID:type_name -> google.protobuf.UInt32Value
	549, // 319: clustermanager.UpdateNodeGroupRequest.cloudAreaName:type_name -> google.protobuf.StringValue
	537, // 320: clustermanager.UpdateNodeGroupRequest.extraInfo:type_name -> clustermanager.UpdateNodeGroupRequest.ExtraInfoEntry
	66,  // 321: clustermanager.UpdateNodeGroupResponse.data:type_name -> clustermanager.NodeGroup
	168, // 322: clustermanager.UpdateNodeGroupResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	209, // 323: clustermanager.DeleteNodeGroupResponse.data:type_name -> clustermanager.DeleteNodeGroupResponseData
	168, // 324: clustermanager.DeleteNodeGroupResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	66,  // 325: clustermanager.DeleteNodeGroupResponseData.nodeGroup:type_name -> clustermanager.NodeGroup
	96,  // 326: clustermanager.DeleteNodeGroupResponseData.task:type_name -> clustermanager.Task
	66,  // 327: clustermanager.GetNodeGroupResponse.data:type_name -> clustermanager.NodeGroup
	168, // 328: clustermanager.GetNodeGroupResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	66,  // 329: clustermanager.ListClusterNodeGroupResponse.data:type_name -> clustermanager.NodeGroup
	168, // 330: clustermanager.ListClusterNodeGroupResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	66,  // 331: clustermanager.ListNodeGroupResponse.data:type_name -> clustermanager.NodeGroup
	12,  // 332: clustermanager.AddNodesRequest.login:type_name -> clustermanager.NodeLoginInfo
	13,  // 333: clustermanager.AddNodesRequest.advance:type_name -> clustermanager.NodeAdvancedInfo
	96,  // 334: clustermanager.AddNodesResponse.data:type_name -> clustermanager.Task
	168, // 335: clustermanager.AddNodesResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	12,  // 336: clustermanager.AddNodesV2Request.login:type_name -> clustermanager.NodeLoginInfo
	13,  // 337: clustermanager.AddNodesV2Request.advance:type_name -> clustermanager.NodeAdvancedInfo
	96,  // 338: clustermanager.AddNodesV2Response.data:type_name -> clustermanager.Task
	168, // 339: clustermanager.AddNodesV2Response.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	222, // 340: clustermanager.BatchDeleteClusterNodesResponse.data:type_name -> clustermanager.BatchNodesStatus
	168, // 341: clustermanager.BatchDeleteClusterNodesResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	96,  // 342: clustermanager.DeleteNodesResponse.data:type_name -> clustermanager.Task
	168, // 343: clustermanager.DeleteNodesResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	96,  // 344: clustermanager.MoveNodesToGroupResponse.data:type_name -> clustermanager.Task
	168, // 345: clustermanager.MoveNodesToGroupResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	96,  // 346: clustermanager.RemoveNodesFromGroupResponse.data:type_name -> clustermanager.Task
	168, // 347: clustermanager.RemoveNodesFromGroupResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	96,  // 348: clustermanager.CleanNodesInGroupResponse.data:type_name -> clustermanager.Task
	168, // 349: clustermanager.CleanNodesInGroupResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	96,  // 350: clustermanager.CleanNodesInGroupV2Response.data:type_name -> clustermanager.Task
	168, // 351: clustermanager.CleanNodesInGroupV2Response.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	235, // 352: clustermanager.ListNodesInGroupV2Response.data:type_name -> clustermanager.NodeGroupNode
	168, // 353: clustermanager.ListNodesInGroupV2Response.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	2,   // 354: clustermanager.ListNodesInGroupResponse.data:type_name -> clustermanager.Node
	168, // 355: clustermanager.ListNodesInGroupResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	168, // 356: clustermanager.UpdateGroupMinMaxSizeResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	69,  // 357: clustermanager.UpdateGroupAsTimeRangeRequest.timeRanges:type_name -> clustermanager.TimeRange
	168, // 358: clustermanager.UpdateGroupAsTimeRangeResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	81,  // 359: clustermanager.TransNodeGroupToNodeTemplateResponse.template:type_name -> clustermanager.NodeTemplate
	168, // 360: clustermanager.UpdateGroupDesiredSizeResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	96,  // 361: clustermanager.UpdateGroupDesiredNodeResponse.data:type_name -> clustermanager.Task
	168, // 362: clustermanager.UpdateGroupDesiredNodeResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	168, // 363: clustermanager.EnableNodeGroupAutoScaleResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	168, // 364: clustermanager.DisableNodeGroupAutoScaleResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	538, // 365: clustermanager.CreateTaskRequest.steps:type_name -> clustermanager.CreateTaskRequest.StepsEntry
	96,  // 366: clustermanager.CreateTaskResponse.data:type_name -> clustermanager.Task
	96,  // 367: clustermanager.RetryTaskResponse.data:type_name -> clustermanager.Task
	96,  // 368: clustermanager.SkipTaskResponse.data:type_name -> clustermanager.Task
	539, // 369: clustermanager.UpdateTaskRequest.steps:type_name -> clustermanager.UpdateTaskRequest.StepsEntry
	96,  // 370: clustermanager.UpdateTaskResponse.data:type_name -> clustermanager.Task
	96,  // 371: clustermanager.DeleteTaskResponse.data:type_name -> clustermanager.Task
	96,  // 372: clustermanager.GetTaskResponse.data:type_name -> clustermanager.Task
	96,  // 373: clustermanager.ListTaskResponse.data:type_name -> clustermanager.Task
	96,  // 374: clustermanager.ListTaskResponse.latestTask:type_name -> clustermanager.Task
	547, // 375: clustermanager.CreateAutoScalingOptionRequest.scaleUpFromZero:type_name -> google.protobuf.BoolValue
	548, // 376: clustermanager.CreateAutoScalingOptionRequest.scaleDownDelayAfterFailure:type_name -> google.protobuf.UInt32Value
	78,  // 377: clustermanager.CreateAutoScalingOptionResponse.data:type_name -> clustermanager.ClusterAutoScalingOption
	547, // 378: clustermanager.UpdateAutoScalingOptionRequest.skipNodesWithLocalStorage:type_name -> google.protobuf.BoolValue
	547, // 379: clustermanager.UpdateAutoScalingOptionRequest.skipNodesWithSystemPods:type_name -> google.protobuf.BoolValue
	547, // 380: clustermanager.UpdateAutoScalingOptionRequest.ignoreDaemonSetsUtilization:type_name -> google.protobuf.BoolValue
	548, // 381: clustermanager.UpdateAutoScalingOptionRequest.bufferResourceRatio:type_name -> google.protobuf.UInt32Value
	547, // 382: clustermanager.UpdateAutoScalingOptionRequest.scaleUpFromZero:type_name -> google.protobuf.BoolValue
	548, // 383: clustermanager.UpdateAutoScalingOptionRequest.scaleDownDelayAfterFailure:type_name -> google.protobuf.UInt32Value
	83,  // 384: clustermanager.UpdateAutoScalingOptionRequest.module:type_name -> clustermanager.ModuleInfo
	79,  // 385: clustermanager.UpdateAutoScalingOptionRequest.webhook:type_name -> clustermanager.WebhookMode
	551, // 386: clustermanager.UpdateAutoScalingOptionRequest.expendablePodsPriorityCutoff:type_name -> google.protobuf.Int32Value
	548, // 387: clustermanager.UpdateAutoScalingOptionRequest.newPodScaleUpDelay:type_name -> google.protobuf.UInt32Value
	78,  // 388: clustermanager.UpdateAutoScalingOptionResponse.data:type_name -> clustermanager.ClusterAutoScalingOption
	168, // 389: clustermanager.UpdateAutoScalingOptionResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	547, // 390: clustermanager.SyncAutoScalingOptionRequest.scaleUpFromZero:type_name -> google.protobuf.BoolValue
	548, // 391: clustermanager.SyncAutoScalingOptionRequest.scaleDownDelayAfterFailure:type_name -> google.protobuf.UInt32Value
	79,  // 392: clustermanager.SyncAutoScalingOptionRequest.webhook:type_name -> clustermanager.WebhookMode
	551, // 393: clustermanager.SyncAutoScalingOptionRequest.expendablePodsPriorityCutoff:type_name -> google.protobuf.Int32Value
	548, // 394: clustermanager.SyncAutoScalingOptionRequest.newPodScaleUpDelay:type_name -> google.protobuf.UInt32Value
	78,  // 395: clustermanager.SyncAutoScalingOptionResponse.data:type_name -> clustermanager.ClusterAutoScalingOption
	168, // 396: clustermanager.SyncAutoScalingOptionResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	78,  // 397: clustermanager.DeleteAutoScalingOptionResponse.data:type_name -> clustermanager.ClusterAutoScalingOption
	168, // 398: clustermanager.DeleteAutoScalingOptionResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	78,  // 399: clustermanager.GetAutoScalingOptionResponse.data:type_name -> clustermanager.ClusterAutoScalingOption
	168, // 400: clustermanager.GetAutoScalingOptionResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	78,  // 401: clustermanager.ListAutoScalingOptionResponse.data:type_name -> clustermanager.ClusterAutoScalingOption
	78,  // 402: clustermanager.UpdateAutoScalingStatusResponse.data:type_name -> clustermanager.ClusterAutoScalingOption
	168, // 403: clustermanager.UpdateAutoScalingStatusResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	281, // 404: clustermanager.GetServiceRolesResponse.data:type_name -> clustermanager.ServiceRoleInfo
	284, // 405: clustermanager.GetResourceGroupsResponse.data:type_name -> clustermanager.ResourceGroupInfo
	287, // 406: clustermanager.GetCloudRegionsResponse.data:type_name -> clustermanager.RegionInfo
	291, // 407: clustermanager.ListCloudRegionClusterResponse.data:type_name -> clustermanager.CloudClusterInfo
	290, // 408: clustermanager.GetCloudRegionZonesResponse.data:type_name -> clustermanager.ZoneInfo
	301, // 409: clustermanager.ListCloudInstanceTypeResponse.data:type_name -> clustermanager.InstanceType
	70,  // 410: clustermanager.InstanceType.systemDisk:type_name -> clustermanager.DataDisk
	70,  // 411: clustermanager.InstanceType.dataDisks:type_name -> clustermanager.DataDisk
	304, // 412: clustermanager.ListCloudDiskTypesResponse.data:type_name -> clustermanager.DiskConfigSet
	73,  // 413: clustermanager.GetMasterSuggestedMachinesResponse.data:type_name -> clustermanager.InstanceTemplateConfig
	309, // 414: clustermanager.ListCloudInstancesResponse.data:type_name -> clustermanager.CloudNode
	312, // 415: clustermanager.GetCloudAccountTypeResponse.data:type_name -> clustermanager.CloudAccountType
	315, // 416: clustermanager.GetCloudBandwidthPackagesResponse.data:type_name -> clustermanager.BandwidthPackageInfo
	318, // 417: clustermanager.ListCloudOsImageResponse.data:type_name -> clustermanager.OsImage
	319, // 418: clustermanager.OsImage.clusters:type_name -> clustermanager.ClusterInfo
	540, // 419: clustermanager.ListCloudRuntimeInfoResponse.data:type_name -> clustermanager.ListCloudRuntimeInfoResponse.DataEntry
	325, // 420: clustermanager.ListCloudProjectsResponse.data:type_name -> clustermanager.CloudProject
	328, // 421: clustermanager.ListCloudVpcsResponse.data:type_name -> clustermanager.CloudVpc
	329, // 422: clustermanager.CloudVpc.cidrs:type_name -> clustermanager.AssistantCidr
	332, // 423: clustermanager.ListCloudSubnetsResponse.data:type_name -> clustermanager.Subnet
	319, // 424: clustermanager.Subnet.cluster:type_name -> clustermanager.ClusterInfo
	335, // 425: clustermanager.CheckCidrConflictFromVpcResponse.data:type_name -> clustermanager.ConflictInfo
	356, // 426: clustermanager.ListCloudSecurityGroupsResponse.data:type_name -> clustermanager.SecurityGroup
	340, // 427: clustermanager.ListKeyPairsResponse.data:type_name -> clustermanager.KeyPair
	349, // 428: clustermanager.ListOperationLogsResponse.data:type_name -> clustermanager.ListOperationLogsResponseData
	346, // 429: clustermanager.ListTaskRecordsResponse.data:type_name -> clustermanager.TaskRecordsResponseData
	347, // 430: clustermanager.TaskRecordsResponseData.step:type_name -> clustermanager.TaskRecordStep
	348, // 431: clustermanager.TaskRecordStep.data:type_name -> clustermanager.TaskRecordStepData
	350, // 432: clustermanager.ListOperationLogsResponseData.results:type_name -> clustermanager.OperationLogDetail
	96,  // 433: clustermanager.OperationLogDetail.task:type_name -> clustermanager.Task
	352, // 434: clustermanager.ListTaskStepLogsResponse.data:type_name -> clustermanager.ListTaskStepLogsResponseData
	353, // 435: clustermanager.ListTaskStepLogsResponseData.results:type_name -> clustermanager.TaskStepLogDetail
	358, // 436: clustermanager.NodeOperationStatus.fail:type_name -> clustermanager.NodeOperationStatusInfo
	358, // 437: clustermanager.NodeOperationStatus.success:type_name -> clustermanager.NodeOperationStatusInfo
	96,  // 438: clustermanager.DrainNodeResponse.data:type_name -> clustermanager.Task
	362, // 439: clustermanager.CheckDrainNodeData.evictionRisk:type_name -> clustermanager.EvictionRisk
	361, // 440: clustermanager.CheckDrainNodeResponse.data:type_name -> clustermanager.CheckDrainNodeData
	541, // 441: clustermanager.NodeAnnotation.annotations:type_name -> clustermanager.NodeAnnotation.AnnotationsEntry
	365, // 442: clustermanager.UpdateNodeAnnotationsRequest.nodes:type_name -> clustermanager.NodeAnnotation
	357, // 443: clustermanager.UpdateNodeAnnotationsResponse.data:type_name -> clustermanager.NodeOperationStatus
	542, // 444: clustermanager.NodeLabel.labels:type_name -> clustermanager.NodeLabel.LabelsEntry
	368, // 445: clustermanager.UpdateNodeLabelsRequest.nodes:type_name -> clustermanager.NodeLabel
	357, // 446: clustermanager.UpdateNodeLabelsResponse.data:type_name -> clustermanager.NodeOperationStatus
	80,  // 447: clustermanager.NodeTaint.taints:type_name -> clustermanager.Taint
	371, // 448: clustermanager.UpdateNodeTaintsRequest.nodes:type_name -> clustermanager.NodeTaint
	357, // 449: clustermanager.UpdateNodeTaintsResponse.data:type_name -> clustermanager.NodeOperationStatus
	378, // 450: clustermanager.QueryPermByActionIDRequest.perm_ctx:type_name -> clustermanager.QueryPermByActionIDReqData
	543, // 451: clustermanager.Perms.perms:type_name -> clustermanager.Perms.PermsEntry
	380, // 452: clustermanager.QueryPermByActionIDResponse.data:type_name -> clustermanager.Perms
	550, // 453: clustermanager.CommonResp.data:type_name -> google.protobuf.Struct
	552, // 454: clustermanager.CommonListResp.data:type_name -> google.protobuf.ListValue
	547, // 455: clustermanager.ListCCTopologyRequest.filterInter:type_name -> google.protobuf.BoolValue
	388, // 456: clustermanager.GetBkSopsTemplateListResponse.data:type_name -> clustermanager.TemplateInfo
	391, // 457: clustermanager.GetBkSopsTemplateInfoResponse.data:type_name -> clustermanager.TemplateDetailInfo
	392, // 458: clustermanager.TemplateDetailInfo.values:type_name -> clustermanager.ConstantValue
	395, // 459: clustermanager.GetInnerTemplateValuesResponse.data:type_name -> clustermanager.TemplateValue
	544, // 460: clustermanager.DebugBkSopsTaskRequest.constant:type_name -> clustermanager.DebugBkSopsTaskRequest.ConstantEntry
	398, // 461: clustermanager.DebugBkSopsTaskResponse.data:type_name -> clustermanager.DebugBkSopsTaskInfo
	96,  // 462: clustermanager.DebugBkSopsTaskInfo.task:type_name -> clustermanager.Task
	401, // 463: clustermanager.CloudModuleFlag.regex:type_name -> clustermanager.valueRegex
	402, // 464: clustermanager.CloudModuleFlag.range:type_name -> clustermanager.NumberRange
	547, // 465: clustermanager.flagInfo.enable:type_name -> google.protobuf.BoolValue
	401, // 466: clustermanager.flagInfo.regex:type_name -> clustermanager.valueRegex
	402, // 467: clustermanager.flagInfo.range:type_name -> clustermanager.NumberRange
	400, // 468: clustermanager.CreateCloudModuleFlagRequest.flagList:type_name -> clustermanager.flagInfo
	400, // 469: clustermanager.UpdateCloudModuleFlagRequest.flagList:type_name -> clustermanager.flagInfo
	399, // 470: clustermanager.ListCloudModuleFlagResponse.data:type_name -> clustermanager.CloudModuleFlag
	168, // 471: clustermanager.GetExternalNodeScriptResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	545, // 472: clustermanager.MapStruct.values:type_name -> clustermanager.MapStruct.ValuesEntry
	550, // 473: clustermanager.GetBatchCustomSettingResponse.data:type_name -> google.protobuf.Struct
	416, // 474: clustermanager.GetBizTopologyHostRequest.scopeList:type_name -> clustermanager.ScopeInfo
	552, // 475: clustermanager.GetBizTopologyHostResponse.data:type_name -> google.protobuf.ListValue
	419, // 476: clustermanager.GetTopologyNodesRequest.nodeList:type_name -> clustermanager.NodeData
	551, // 477: clustermanager.GetTopologyNodesRequest.alive:type_name -> google.protobuf.Int32Value
	422, // 478: clustermanager.GetTopologyNodesResponse.data:type_name -> clustermanager.GetTopologyNodesData
	423, // 479: clustermanager.GetTopologyNodesData.data:type_name -> clustermanager.HostData
	424, // 480: clustermanager.HostData.cloudArea:type_name -> clustermanager.HostCloudArea
	419, // 481: clustermanager.GetTopologyHostIdsNodesRequest.nodeList:type_name -> clustermanager.NodeData
	551, // 482: clustermanager.GetTopologyHostIdsNodesRequest.alive:type_name -> google.protobuf.Int32Value
	427, // 483: clustermanager.GetTopologyHostIdsNodesResponse.data:type_name -> clustermanager.GetTopologyHostIdsNodesData
	428, // 484: clustermanager.GetTopologyHostIdsNodesData.data:type_name -> clustermanager.HostIDsNodeData
	429, // 485: clustermanager.HostIDsNodeData.meta:type_name -> clustermanager.Meta
	428, // 486: clustermanager.GetHostsDetailsRequest.hostList:type_name -> clustermanager.HostIDsNodeData
	432, // 487: clustermanager.GetHostsDetailsResponse.data:type_name -> clustermanager.HostDataWithMeta
	424, // 488: clustermanager.HostDataWithMeta.cloudArea:type_name -> clustermanager.HostCloudArea
	429, // 489: clustermanager.HostDataWithMeta.meta:type_name -> clustermanager.Meta
	423, // 490: clustermanager.GetScopeHostCheckResponse.data:type_name -> clustermanager.HostData
	435, // 491: clustermanager.NotifyTemplate.config:type_name -> clustermanager.NotifyConfig
	436, // 492: clustermanager.NotifyTemplate.createCluster:type_name -> clustermanager.NotifyData
	436, // 493: clustermanager.NotifyTemplate.deleteCluster:type_name -> clustermanager.NotifyData
	436, // 494: clustermanager.NotifyTemplate.createNodeGroup:type_name -> clustermanager.NotifyData
	436, // 495: clustermanager.NotifyTemplate.deleteNodeGroup:type_name -> clustermanager.NotifyData
	436, // 496: clustermanager.NotifyTemplate.updateNodeGroup:type_name -> clustermanager.NotifyData
	436, // 497: clustermanager.NotifyTemplate.groupScaleOutNode:type_name -> clustermanager.NotifyData
	436, // 498: clustermanager.NotifyTemplate.groupScaleInNode:type_name -> clustermanager.NotifyData
	547, // 499: clustermanager.CreateNotifyTemplateRequest.enable:type_name -> google.protobuf.BoolValue
	436, // 500: clustermanager.CreateNotifyTemplateRequest.createCluster:type_name -> clustermanager.NotifyData
	436, // 501: clustermanager.CreateNotifyTemplateRequest.deleteCluster:type_name -> clustermanager.NotifyData
	436, // 502: clustermanager.CreateNotifyTemplateRequest.createNodeGroup:type_name -> clustermanager.NotifyData
	436, // 503: clustermanager.CreateNotifyTemplateRequest.deleteNodeGroup:type_name -> clustermanager.NotifyData
	436, // 504: clustermanager.CreateNotifyTemplateRequest.updateNodeGroup:type_name -> clustermanager.NotifyData
	436, // 505: clustermanager.CreateNotifyTemplateRequest.groupScaleOutNode:type_name -> clustermanager.NotifyData
	436, // 506: clustermanager.CreateNotifyTemplateRequest.groupScaleInNode:type_name -> clustermanager.NotifyData
	435, // 507: clustermanager.CreateNotifyTemplateRequest.config:type_name -> clustermanager.NotifyConfig
	168, // 508: clustermanager.CreateNotifyTemplateResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	168, // 509: clustermanager.DeleteNotifyTemplateResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	437, // 510: clustermanager.ListNotifyTemplateResponse.data:type_name -> clustermanager.NotifyTemplate
	548, // 511: clustermanager.GetProviderResourceUsageRequest.ratio:type_name -> google.protobuf.UInt32Value
	548, // 512: clustermanager.GetProviderResourceUsageRequest.available:type_name -> google.protobuf.UInt32Value
	550, // 513: clustermanager.GetProviderResourceUsageResponse.data:type_name -> google.protobuf.Struct
	552, // 514: clustermanager.GetProjectResourceQuotaUsageResponse.data:type_name -> google.protobuf.ListValue
	168, // 515: clustermanager.GetProjectResourceQuotaUsageResponse.web_annotations:type_name -> clustermanager.WebAnnotationsV2
	452, // 516: clustermanager.ListCloudNodePublicPrefixResponse.data:type_name -> clustermanager.NodePublicPrefix
	552, // 517: clustermanager.GetClusterSharedProjectResponse.data:type_name -> google.protobuf.ListValue
	456, // 518: clustermanager.GPUArgs.driver:type_name -> clustermanager.DriverVersion
	456, // 519: clustermanager.GPUArgs.cuda:type_name -> clustermanager.DriverVersion
	457, // 520: clustermanager.GPUArgs.cudnn:type_name -> clustermanager.CUDNN
	458, // 521: clustermanager.GPUArgs.customDriver:type_name -> clustermanager.CustomDriver
	546, // 522: clustermanager.ClusterBasicInfo.labels:type_name -> clustermanager.ClusterBasicInfo.LabelsEntry
	462, // 523: clustermanager.TemplateConfigInfo.cloudTemplateConfig:type_name -> clustermanager.CloudTemplateConfig
	463, // 524: clustermanager.CloudTemplateConfig.cloudNetworkTemplateConfig:type_name -> clustermanager.CloudNetworkTemplateConfig
	64,  // 525: clustermanager.CloudNetworkTemplateConfig.cidrSteps:type_name -> clustermanager.EnvCidrStep
	462, // 526: clustermanager.CreateTemplateConfigRequest.cloudTemplateConfig:type_name -> clustermanager.CloudTemplateConfig
	461, // 527: clustermanager.ListTemplateConfigResponse.data:type_name -> clustermanager.TemplateConfigInfo
	462, // 528: clustermanager.UpdateTemplateConfigRequest.cloudTemplateConfig:type_name -> clustermanager.CloudTemplateConfig
	18,  // 529: clustermanager.Cluster.BcsAddonsEntry.value:type_name -> clustermanager.BKOpsPlugin
	18,  // 530: clustermanager.Cluster.ExtraAddonsEntry.value:type_name -> clustermanager.BKOpsPlugin
	2,   // 531: clustermanager.Cluster.MasterEntry.value:type_name -> clustermanager.Node
	18,  // 532: clustermanager.Action.PluginsEntry.value:type_name -> clustermanager.BKOpsPlugin
	18,  // 533: clustermanager.Cloud.OpsPluginsEntry.value:type_name -> clustermanager.BKOpsPlugin
	18,  // 534: clustermanager.Cloud.ExtraPluginsEntry.value:type_name -> clustermanager.BKOpsPlugin
	17,  // 535: clustermanager.Project.CredentialsEntry.value:type_name -> clustermanager.Credential
	97,  // 536: clustermanager.Task.StepsEntry.value:type_name -> clustermanager.Step
	18,  // 537: clustermanager.CreateClusterReq.BcsAddonsEntry.value:type_name -> clustermanager.BKOpsPlugin
	18,  // 538: clustermanager.CreateClusterReq.ExtraAddonsEntry.value:type_name -> clustermanager.BKOpsPlugin
	18,  // 539: clustermanager.UpdateClusterReq.BcsAddonsEntry.value:type_name -> clustermanager.BKOpsPlugin
	18,  // 540: clustermanager.UpdateClusterReq.ExtraAddonsEntry.value:type_name -> clustermanager.BKOpsPlugin
	139, // 541: clustermanager.CheckNodesResponse.DataEntry.value:type_name -> clustermanager.NodeResult
	166, // 542: clustermanager.ListProjectClusterResp.ClusterExtraInfoEntry.value:type_name -> clustermanager.ExtraInfo
	166, // 543: clustermanager.ListClusterResp.ClusterExtraInfoEntry.value:type_name -> clustermanager.ExtraInfo
	550, // 544: clustermanager.WebAnnotations.PermsEntry.value:type_name -> google.protobuf.Struct
	18,  // 545: clustermanager.CreateCloudRequest.OpsPluginsEntry.value:type_name -> clustermanager.BKOpsPlugin
	18,  // 546: clustermanager.CreateCloudRequest.ExtraPluginsEntry.value:type_name -> clustermanager.BKOpsPlugin
	18,  // 547: clustermanager.UpdateCloudRequest.OpsPluginsEntry.value:type_name -> clustermanager.BKOpsPlugin
	18,  // 548: clustermanager.UpdateCloudRequest.ExtraPluginsEntry.value:type_name -> clustermanager.BKOpsPlugin
	97,  // 549: clustermanager.CreateTaskRequest.StepsEntry.value:type_name -> clustermanager.Step
	97,  // 550: clustermanager.UpdateTaskRequest.StepsEntry.value:type_name -> clustermanager.Step
	322, // 551: clustermanager.ListCloudRuntimeInfoResponse.DataEntry.value:type_name -> clustermanager.RunTimeVersion
	553, // 552: clustermanager.Perms.PermsEntry.value:type_name -> google.protobuf.Value
	100, // 553: clustermanager.ClusterManager.CreateCluster:input_type -> clustermanager.CreateClusterReq
	132, // 554: clustermanager.ClusterManager.RetryCreateClusterTask:input_type -> clustermanager.RetryCreateClusterReq
	117, // 555: clustermanager.ClusterManager.CheckCloudKubeConfig:input_type -> clustermanager.KubeConfigReq
	118, // 556: clustermanager.ClusterManager.CheckCloudKubeConfigConnect:input_type -> clustermanager.KubeConfigConnectReq
	122, // 557: clustermanager.ClusterManager.ImportCluster:input_type -> clustermanager.ImportClusterReq
	130, // 558: clustermanager.ClusterManager.UpdateCluster:input_type -> clustermanager.UpdateClusterReq
	216, // 559: clustermanager.ClusterManager.AddNodesToCluster:input_type -> clustermanager.AddNodesRequest
	218, // 560: clustermanager.ClusterManager.AddNodesToClusterV2:input_type -> clustermanager.AddNodesV2Request
	223, // 561: clustermanager.ClusterManager.DeleteNodesFromCluster:input_type -> clustermanager.DeleteNodesRequest
	220, // 562: clustermanager.ClusterManager.BatchDeleteNodesFromCluster:input_type -> clustermanager.BatchDeleteClusterNodesRequest
	172, // 563: clustermanager.ClusterManager.GetClustersMetaData:input_type -> clustermanager.GetClustersMetaDataRequest
	169, // 564: clustermanager.ClusterManager.ListNodesInCluster:input_type -> clustermanager.ListNodesInClusterRequest
	175, // 565: clustermanager.ClusterManager.ListMastersInCluster:input_type -> clustermanager.ListMastersInClusterRequest
	128, // 566: clustermanager.ClusterManager.DeleteCluster:input_type -> clustermanager.DeleteClusterReq
	134, // 567: clustermanager.ClusterManager.GetCluster:input_type -> clustermanager.GetClusterReq
	453, // 568: clustermanager.ClusterManager.GetClusterSharedProject:input_type -> clustermanager.GetClusterSharedProjectRequest
	158, // 569: clustermanager.ClusterManager.ListProjectCluster:input_type -> clustermanager.ListProjectClusterReq
	160, // 570: clustermanager.ClusterManager.ListBusinessCluster:input_type -> clustermanager.ListBusinessClusterReq
	162, // 571: clustermanager.ClusterManager.ListCluster:input_type -> clustermanager.ListClusterReq
	164, // 572: clustermanager.ClusterManager.ListClusterV2:input_type -> clustermanager.ListClusterV2Req
	156, // 573: clustermanager.ClusterManager.ListCommonCluster:input_type -> clustermanager.ListCommonClusterReq
	102, // 574: clustermanager.ClusterManager.AddSubnetToCluster:input_type -> clustermanager.AddSubnetToClusterReq
	104, // 575: clustermanager.ClusterManager.SwitchClusterUnderlayNetwork:input_type -> clustermanager.SwitchClusterUnderlayNetworkReq
	106, // 576: clustermanager.ClusterManager.CreateVirtualCluster:input_type -> clustermanager.CreateVirtualClusterReq
	124, // 577: clustermanager.ClusterManager.DeleteVirtualCluster:input_type -> clustermanager.DeleteVirtualClusterReq
	126, // 578: clustermanager.ClusterManager.UpdateVirtualClusterQuota:input_type -> clustermanager.UpdateVirtualClusterQuotaReq
	150, // 579: clustermanager.ClusterManager.GetNode:input_type -> clustermanager.GetNodeRequest
	152, // 580: clustermanager.ClusterManager.GetNodeInfo:input_type -> clustermanager.GetNodeInfoRequest
	149, // 581: clustermanager.ClusterManager.RecordNodeInfo:input_type -> clustermanager.RecordNodeInfoRequest
	144, // 582: clustermanager.ClusterManager.UpdateNode:input_type -> clustermanager.UpdateNodeRequest
	147, // 583: clustermanager.ClusterManager.UpdateClusterModule:input_type -> clustermanager.UpdateClusterModuleRequest
	137, // 584: clustermanager.ClusterManager.CheckNodeInCluster:input_type -> clustermanager.CheckNodesRequest
	142, // 585: clustermanager.ClusterManager.CordonNode:input_type -> clustermanager.CordonNodeRequest
	140, // 586: clustermanager.ClusterManager.UnCordonNode:input_type -> clustermanager.UnCordonNodeRequest
	359, // 587: clustermanager.ClusterManager.DrainNode:input_type -> clustermanager.DrainNodeRequest
	363, // 588: clustermanager.ClusterManager.CheckDrainNode:input_type -> clustermanager.CheckDrainNodeRequest
	369, // 589: clustermanager.ClusterManager.UpdateNodeLabels:input_type -> clustermanager.UpdateNodeLabelsRequest
	366, // 590: clustermanager.ClusterManager.UpdateNodeAnnotations:input_type -> clustermanager.UpdateNodeAnnotationsRequest
	372, // 591: clustermanager.ClusterManager.UpdateNodeTaints:input_type -> clustermanager.UpdateNodeTaintsRequest
	177, // 592: clustermanager.ClusterManager.GetClusterCredential:input_type -> clustermanager.GetClusterCredentialReq
	179, // 593: clustermanager.ClusterManager.UpdateClusterCredential:input_type -> clustermanager.UpdateClusterCredentialReq
	181, // 594: clustermanager.ClusterManager.UpdateClusterKubeConfig:input_type -> clustermanager.UpdateClusterKubeConfigReq
	183, // 595: clustermanager.ClusterManager.DeleteClusterCredential:input_type -> clustermanager.DeleteClusterCredentialReq
	185, // 596: clustermanager.ClusterManager.ListClusterCredential:input_type -> clustermanager.ListClusterCredentialReq
	187, // 597: clustermanager.ClusterManager.InitFederationCluster:input_type -> clustermanager.InitFederationClusterReq
	189, // 598: clustermanager.ClusterManager.AddFederatedCluster:input_type -> clustermanager.AddFederatedClusterReq
	191, // 599: clustermanager.ClusterManager.CreateCloud:input_type -> clustermanager.CreateCloudRequest
	193, // 600: clustermanager.ClusterManager.UpdateCloud:input_type -> clustermanager.UpdateCloudRequest
	195, // 601: clustermanager.ClusterManager.DeleteCloud:input_type -> clustermanager.DeleteCloudRequest
	197, // 602: clustermanager.ClusterManager.GetCloud:input_type -> clustermanager.GetCloudRequest
	199, // 603: clustermanager.ClusterManager.ListCloud:input_type -> clustermanager.ListCloudRequest
	45,  // 604: clustermanager.ClusterManager.CreateCloudVPC:input_type -> clustermanager.CreateCloudVPCRequest
	47,  // 605: clustermanager.ClusterManager.UpdateCloudVPC:input_type -> clustermanager.UpdateCloudVPCRequest
	49,  // 606: clustermanager.ClusterManager.DeleteCloudVPC:input_type -> clustermanager.DeleteCloudVPCRequest
	51,  // 607: clustermanager.ClusterManager.ListCloudVPC:input_type -> clustermanager.ListCloudVPCRequest
	55,  // 608: clustermanager.ClusterManager.ListCloudRegions:input_type -> clustermanager.ListCloudRegionsRequest
	58,  // 609: clustermanager.ClusterManager.GetVPCCidr:input_type -> clustermanager.GetVPCCidrRequest
	201, // 610: clustermanager.ClusterManager.CreateNodeGroup:input_type -> clustermanager.CreateNodeGroupRequest
	205, // 611: clustermanager.ClusterManager.UpdateNodeGroup:input_type -> clustermanager.UpdateNodeGroupRequest
	207, // 612: clustermanager.ClusterManager.DeleteNodeGroup:input_type -> clustermanager.DeleteNodeGroupRequest
	210, // 613: clustermanager.ClusterManager.GetNodeGroup:input_type -> clustermanager.GetNodeGroupRequest
	212, // 614: clustermanager.ClusterManager.ListClusterNodeGroup:input_type -> clustermanager.ListClusterNodeGroupRequest
	214, // 615: clustermanager.ClusterManager.ListNodeGroup:input_type -> clustermanager.ListNodeGroupRequest
	110, // 616: clustermanager.ClusterManager.RecommendNodeGroupConf:input_type -> clustermanager.RecommendNodeGroupConfReq
	225, // 617: clustermanager.ClusterManager.MoveNodesToGroup:input_type -> clustermanager.MoveNodesToGroupRequest
	227, // 618: clustermanager.ClusterManager.RemoveNodesFromGroup:input_type -> clustermanager.RemoveNodesFromGroupRequest
	229, // 619: clustermanager.ClusterManager.CleanNodesInGroup:input_type -> clustermanager.CleanNodesInGroupRequest
	231, // 620: clustermanager.ClusterManager.CleanNodesInGroupV2:input_type -> clustermanager.CleanNodesInGroupV2Request
	210, // 621: clustermanager.ClusterManager.ListNodesInGroup:input_type -> clustermanager.GetNodeGroupRequest
	233, // 622: clustermanager.ClusterManager.ListNodesInGroupV2:input_type -> clustermanager.ListNodesInGroupV2Request
	245, // 623: clustermanager.ClusterManager.UpdateGroupDesiredNode:input_type -> clustermanager.UpdateGroupDesiredNodeRequest
	243, // 624: clustermanager.ClusterManager.UpdateGroupDesiredSize:input_type -> clustermanager.UpdateGroupDesiredSizeRequest
	237, // 625: clustermanager.ClusterManager.UpdateGroupMinMaxSize:input_type -> clustermanager.UpdateGroupMinMaxSizeRequest
	239, // 626: clustermanager.ClusterManager.UpdateGroupAsTimeRange:input_type -> clustermanager.UpdateGroupAsTimeRangeRequest
	411, // 627: clustermanager.ClusterManager.GetExternalNodeScriptByGroupID:input_type -> clustermanager.GetExternalNodeScriptRequest
	241, // 628: clustermanager.ClusterManager.TransNodeGroupToNodeTemplate:input_type -> clustermanager.TransNodeGroupToNodeTemplateRequest
	247, // 629: clustermanager.ClusterManager.EnableNodeGroupAutoScale:input_type -> clustermanager.EnableNodeGroupAutoScaleRequest
	249, // 630: clustermanager.ClusterManager.DisableNodeGroupAutoScale:input_type -> clustermanager.DisableNodeGroupAutoScaleRequest
	444, // 631: clustermanager.ClusterManager.GetProviderResourceUsage:input_type -> clustermanager.GetProviderResourceUsageRequest
	447, // 632: clustermanager.ClusterManager.GetProjectResourceQuotaUsage:input_type -> clustermanager.GetProjectResourceQuotaUsageRequest
	251, // 633: clustermanager.ClusterManager.CreateTask:input_type -> clustermanager.CreateTaskRequest
	253, // 634: clustermanager.ClusterManager.RetryTask:input_type -> clustermanager.RetryTaskRequest
	255, // 635: clustermanager.ClusterManager.SkipTask:input_type -> clustermanager.SkipTaskRequest
	257, // 636: clustermanager.ClusterManager.UpdateTask:input_type -> clustermanager.UpdateTaskRequest
	259, // 637: clustermanager.ClusterManager.DeleteTask:input_type -> clustermanager.DeleteTaskRequest
	261, // 638: clustermanager.ClusterManager.GetTask:input_type -> clustermanager.GetTaskRequest
	263, // 639: clustermanager.ClusterManager.ListTask:input_type -> clustermanager.ListTaskRequest
	265, // 640: clustermanager.ClusterManager.CreateAutoScalingOption:input_type -> clustermanager.CreateAutoScalingOptionRequest
	267, // 641: clustermanager.ClusterManager.UpdateAutoScalingOption:input_type -> clustermanager.UpdateAutoScalingOptionRequest
	269, // 642: clustermanager.ClusterManager.UpdateAsOptionDeviceProvider:input_type -> clustermanager.UpdateAsOptionDeviceProviderRequest
	273, // 643: clustermanager.ClusterManager.DeleteAutoScalingOption:input_type -> clustermanager.DeleteAutoScalingOptionRequest
	275, // 644: clustermanager.ClusterManager.GetAutoScalingOption:input_type -> clustermanager.GetAutoScalingOptionRequest
	277, // 645: clustermanager.ClusterManager.ListAutoScalingOption:input_type -> clustermanager.ListAutoScalingOptionRequest
	279, // 646: clustermanager.ClusterManager.UpdateAutoScalingStatus:input_type -> clustermanager.UpdateAutoScalingStatusRequest
	271, // 647: clustermanager.ClusterManager.SyncAutoScalingOption:input_type -> clustermanager.SyncAutoScalingOptionRequest
	85,  // 648: clustermanager.ClusterManager.CreateNodeTemplate:input_type -> clustermanager.CreateNodeTemplateRequest
	87,  // 649: clustermanager.ClusterManager.UpdateNodeTemplate:input_type -> clustermanager.UpdateNodeTemplateRequest
	89,  // 650: clustermanager.ClusterManager.DeleteNodeTemplate:input_type -> clustermanager.DeleteNodeTemplateRequest
	93,  // 651: clustermanager.ClusterManager.ListNodeTemplate:input_type -> clustermanager.ListNodeTemplateRequest
	91,  // 652: clustermanager.ClusterManager.GetNodeTemplate:input_type -> clustermanager.GetNodeTemplateRequest
	438, // 653: clustermanager.ClusterManager.CreateNotifyTemplate:input_type -> clustermanager.CreateNotifyTemplateRequest
	440, // 654: clustermanager.ClusterManager.DeleteNotifyTemplate:input_type -> clustermanager.DeleteNotifyTemplateRequest
	442, // 655: clustermanager.ClusterManager.ListNotifyTemplate:input_type -> clustermanager.ListNotifyTemplateRequest
	26,  // 656: clustermanager.ClusterManager.CreateCloudAccount:input_type -> clustermanager.CreateCloudAccountRequest
	28,  // 657: clustermanager.ClusterManager.UpdateCloudAccount:input_type -> clustermanager.UpdateCloudAccountRequest
	30,  // 658: clustermanager.ClusterManager.MigrateCloudAccount:input_type -> clustermanager.MigrateCloudAccountRequest
	33,  // 659: clustermanager.ClusterManager.DeleteCloudAccount:input_type -> clustermanager.DeleteCloudAccountRequest
	37,  // 660: clustermanager.ClusterManager.ListCloudAccount:input_type -> clustermanager.ListCloudAccountRequest
	35,  // 661: clustermanager.ClusterManager.ListCloudAccountToPerm:input_type -> clustermanager.ListCloudAccountPermRequest
	38,  // 662: clustermanager.ClusterManager.VerifyCloudAccount:input_type -> clustermanager.VerifyCloudAccountRequest
	282, // 663: clustermanager.ClusterManager.GetServiceRoles:input_type -> clustermanager.GetServiceRolesRequest
	285, // 664: clustermanager.ClusterManager.GetResourceGroups:input_type -> clustermanager.GetResourceGroupsRequest
	288, // 665: clustermanager.ClusterManager.GetCloudRegions:input_type -> clustermanager.GetCloudRegionsRequest
	294, // 666: clustermanager.ClusterManager.GetCloudRegionZones:input_type -> clustermanager.GetCloudRegionZonesRequest
	292, // 667: clustermanager.ClusterManager.ListCloudRegionCluster:input_type -> clustermanager.ListCloudRegionClusterRequest
	326, // 668: clustermanager.ClusterManager.ListCloudVpcs:input_type -> clustermanager.ListCloudVpcsRequest
	333, // 669: clustermanager.ClusterManager.CheckCidrConflictFromVpc:input_type -> clustermanager.CheckCidrConflictFromVpcRequest
	330, // 670: clustermanager.ClusterManager.ListCloudSubnets:input_type -> clustermanager.ListCloudSubnetsRequest
	336, // 671: clustermanager.ClusterManager.ListCloudSecurityGroups:input_type -> clustermanager.ListCloudSecurityGroupsRequest
	338, // 672: clustermanager.ClusterManager.ListKeypairs:input_type -> clustermanager.ListKeyPairsRequest
	299, // 673: clustermanager.ClusterManager.ListCloudInstanceTypes:input_type -> clustermanager.ListCloudInstanceTypeRequest
	302, // 674: clustermanager.ClusterManager.ListCloudDiskTypes:input_type -> clustermanager.ListCloudDiskTypesRequest
	305, // 675: clustermanager.ClusterManager.GetMasterSuggestedMachines:input_type -> clustermanager.GetMasterSuggestedMachinesRequest
	323, // 676: clustermanager.ClusterManager.ListCloudProjects:input_type -> clustermanager.ListCloudProjectsRequest
	316, // 677: clustermanager.ClusterManager.ListCloudOsImage:input_type -> clustermanager.ListCloudOsImageRequest
	307, // 678: clustermanager.ClusterManager.ListCloudInstances:input_type -> clustermanager.ListCloudInstancesRequest
	307, // 679: clustermanager.ClusterManager.ListCloudInstancesByPost:input_type -> clustermanager.ListCloudInstancesRequest
	310, // 680: clustermanager.ClusterManager.GetCloudAccountType:input_type -> clustermanager.GetCloudAccountTypeRequest
	313, // 681: clustermanager.ClusterManager.GetCloudBandwidthPackages:input_type -> clustermanager.GetCloudBandwidthPackagesRequest
	320, // 682: clustermanager.ClusterManager.ListCloudRuntimeInfo:input_type -> clustermanager.ListCloudRuntimeInfoRequest
	341, // 683: clustermanager.ClusterManager.ListOperationLogs:input_type -> clustermanager.ListOperationLogsRequest
	341, // 684: clustermanager.ClusterManager.ListOperationLogsV2:input_type -> clustermanager.ListOperationLogsRequest
	342, // 685: clustermanager.ClusterManager.ListTaskStepLogs:input_type -> clustermanager.ListTaskStepLogsRequest
	344, // 686: clustermanager.ClusterManager.ListTaskRecords:input_type -> clustermanager.ListTaskRecordsRequest
	354, // 687: clustermanager.ClusterManager.CleanDbHistoryData:input_type -> clustermanager.CleanDbHistoryDataRequest
	376, // 688: clustermanager.ClusterManager.ListResourceSchema:input_type -> clustermanager.ListResourceSchemaRequest
	377, // 689: clustermanager.ClusterManager.GetResourceSchema:input_type -> clustermanager.GetResourceSchemaRequest
	379, // 690: clustermanager.ClusterManager.QueryPermByActionID:input_type -> clustermanager.QueryPermByActionIDRequest
	384, // 691: clustermanager.ClusterManager.ListBKCloud:input_type -> clustermanager.ListBKCloudRequest
	385, // 692: clustermanager.ClusterManager.ListCCTopology:input_type -> clustermanager.ListCCTopologyRequest
	386, // 693: clustermanager.ClusterManager.GetBkSopsTemplateList:input_type -> clustermanager.GetBkSopsTemplateListRequest
	389, // 694: clustermanager.ClusterManager.GetBkSopsTemplateInfo:input_type -> clustermanager.GetBkSopsTemplateInfoRequest
	393, // 695: clustermanager.ClusterManager.GetInnerTemplateValues:input_type -> clustermanager.GetInnerTemplateValuesRequest
	396, // 696: clustermanager.ClusterManager.DebugBkSopsTask:input_type -> clustermanager.DebugBkSopsTaskRequest
	414, // 697: clustermanager.ClusterManager.GetBatchCustomSetting:input_type -> clustermanager.GetBatchCustomSettingRequest
	417, // 698: clustermanager.ClusterManager.GetBizTopologyHost:input_type -> clustermanager.GetBizTopologyHostRequest
	420, // 699: clustermanager.ClusterManager.GetTopologyNodes:input_type -> clustermanager.GetTopologyNodesRequest
	425, // 700: clustermanager.ClusterManager.GetTopologyHostIdsNodes:input_type -> clustermanager.GetTopologyHostIdsNodesRequest
	430, // 701: clustermanager.ClusterManager.GetHostsDetails:input_type -> clustermanager.GetHostsDetailsRequest
	433, // 702: clustermanager.ClusterManager.GetScopeHostCheck:input_type -> clustermanager.GetScopeHostCheckRequest
	403, // 703: clustermanager.ClusterManager.CreateCloudModuleFlag:input_type -> clustermanager.CreateCloudModuleFlagRequest
	405, // 704: clustermanager.ClusterManager.UpdateCloudModuleFlag:input_type -> clustermanager.UpdateCloudModuleFlagRequest
	407, // 705: clustermanager.ClusterManager.DeleteCloudModuleFlag:input_type -> clustermanager.DeleteCloudModuleFlagRequest
	409, // 706: clustermanager.ClusterManager.ListCloudModuleFlag:input_type -> clustermanager.ListCloudModuleFlagRequest
	450, // 707: clustermanager.ClusterManager.ListCloudNodePublicPrefix:input_type -> clustermanager.ListCloudNodePublicPrefixRequest
	374, // 708: clustermanager.ClusterManager.Health:input_type -> clustermanager.HealthRequest
	464, // 709: clustermanager.ClusterManager.CreateTemplateConfig:input_type -> clustermanager.CreateTemplateConfigRequest
	466, // 710: clustermanager.ClusterManager.DeleteTemplateConfig:input_type -> clustermanager.DeleteTemplateConfigRequest
	468, // 711: clustermanager.ClusterManager.ListTemplateConfig:input_type -> clustermanager.ListTemplateConfigRequest
	470, // 712: clustermanager.ClusterManager.UpdateTemplateConfig:input_type -> clustermanager.UpdateTemplateConfigRequest
	101, // 713: clustermanager.ClusterManager.CreateCluster:output_type -> clustermanager.CreateClusterResp
	133, // 714: clustermanager.ClusterManager.RetryCreateClusterTask:output_type -> clustermanager.RetryCreateClusterResp
	119, // 715: clustermanager.ClusterManager.CheckCloudKubeConfig:output_type -> clustermanager.KubeConfigResp
	120, // 716: clustermanager.ClusterManager.CheckCloudKubeConfigConnect:output_type -> clustermanager.KubeConfigConnectResp
	123, // 717: clustermanager.ClusterManager.ImportCluster:output_type -> clustermanager.ImportClusterResp
	131, // 718: clustermanager.ClusterManager.UpdateCluster:output_type -> clustermanager.UpdateClusterResp
	217, // 719: clustermanager.ClusterManager.AddNodesToCluster:output_type -> clustermanager.AddNodesResponse
	219, // 720: clustermanager.ClusterManager.AddNodesToClusterV2:output_type -> clustermanager.AddNodesV2Response
	224, // 721: clustermanager.ClusterManager.DeleteNodesFromCluster:output_type -> clustermanager.DeleteNodesResponse
	221, // 722: clustermanager.ClusterManager.BatchDeleteNodesFromCluster:output_type -> clustermanager.BatchDeleteClusterNodesResponse
	173, // 723: clustermanager.ClusterManager.GetClustersMetaData:output_type -> clustermanager.GetClustersMetaDataResponse
	170, // 724: clustermanager.ClusterManager.ListNodesInCluster:output_type -> clustermanager.ListNodesInClusterResponse
	176, // 725: clustermanager.ClusterManager.ListMastersInCluster:output_type -> clustermanager.ListMastersInClusterResponse
	129, // 726: clustermanager.ClusterManager.DeleteCluster:output_type -> clustermanager.DeleteClusterResp
	135, // 727: clustermanager.ClusterManager.GetCluster:output_type -> clustermanager.GetClusterResp
	454, // 728: clustermanager.ClusterManager.GetClusterSharedProject:output_type -> clustermanager.GetClusterSharedProjectResponse
	159, // 729: clustermanager.ClusterManager.ListProjectCluster:output_type -> clustermanager.ListProjectClusterResp
	161, // 730: clustermanager.ClusterManager.ListBusinessCluster:output_type -> clustermanager.ListBusinessClusterResp
	163, // 731: clustermanager.ClusterManager.ListCluster:output_type -> clustermanager.ListClusterResp
	165, // 732: clustermanager.ClusterManager.ListClusterV2:output_type -> clustermanager.ListClusterV2Resp
	157, // 733: clustermanager.ClusterManager.ListCommonCluster:output_type -> clustermanager.ListCommonClusterResp
	103, // 734: clustermanager.ClusterManager.AddSubnetToCluster:output_type -> clustermanager.AddSubnetToClusterResp
	105, // 735: clustermanager.ClusterManager.SwitchClusterUnderlayNetwork:output_type -> clustermanager.SwitchClusterUnderlayNetworkResp
	109, // 736: clustermanager.ClusterManager.CreateVirtualCluster:output_type -> clustermanager.CreateVirtualClusterResp
	125, // 737: clustermanager.ClusterManager.DeleteVirtualCluster:output_type -> clustermanager.DeleteVirtualClusterResp
	127, // 738: clustermanager.ClusterManager.UpdateVirtualClusterQuota:output_type -> clustermanager.UpdateVirtualClusterQuotaResp
	151, // 739: clustermanager.ClusterManager.GetNode:output_type -> clustermanager.GetNodeResponse
	153, // 740: clustermanager.ClusterManager.GetNodeInfo:output_type -> clustermanager.GetNodeInfoResponse
	382, // 741: clustermanager.ClusterManager.RecordNodeInfo:output_type -> clustermanager.CommonResp
	145, // 742: clustermanager.ClusterManager.UpdateNode:output_type -> clustermanager.UpdateNodeResponse
	148, // 743: clustermanager.ClusterManager.UpdateClusterModule:output_type -> clustermanager.UpdateClusterModuleResponse
	138, // 744: clustermanager.ClusterManager.CheckNodeInCluster:output_type -> clustermanager.CheckNodesResponse
	143, // 745: clustermanager.ClusterManager.CordonNode:output_type -> clustermanager.CordonNodeResponse
	141, // 746: clustermanager.ClusterManager.UnCordonNode:output_type -> clustermanager.UnCordonNodeResponse
	360, // 747: clustermanager.ClusterManager.DrainNode:output_type -> clustermanager.DrainNodeResponse
	364, // 748: clustermanager.ClusterManager.CheckDrainNode:output_type -> clustermanager.CheckDrainNodeResponse
	370, // 749: clustermanager.ClusterManager.UpdateNodeLabels:output_type -> clustermanager.UpdateNodeLabelsResponse
	367, // 750: clustermanager.ClusterManager.UpdateNodeAnnotations:output_type -> clustermanager.UpdateNodeAnnotationsResponse
	373, // 751: clustermanager.ClusterManager.UpdateNodeTaints:output_type -> clustermanager.UpdateNodeTaintsResponse
	178, // 752: clustermanager.ClusterManager.GetClusterCredential:output_type -> clustermanager.GetClusterCredentialResp
	180, // 753: clustermanager.ClusterManager.UpdateClusterCredential:output_type -> clustermanager.UpdateClusterCredentialResp
	182, // 754: clustermanager.ClusterManager.UpdateClusterKubeConfig:output_type -> clustermanager.UpdateClusterKubeConfigResp
	184, // 755: clustermanager.ClusterManager.DeleteClusterCredential:output_type -> clustermanager.DeleteClusterCredentialResp
	186, // 756: clustermanager.ClusterManager.ListClusterCredential:output_type -> clustermanager.ListClusterCredentialResp
	188, // 757: clustermanager.ClusterManager.InitFederationCluster:output_type -> clustermanager.InitFederationClusterResp
	190, // 758: clustermanager.ClusterManager.AddFederatedCluster:output_type -> clustermanager.AddFederatedClusterResp
	192, // 759: clustermanager.ClusterManager.CreateCloud:output_type -> clustermanager.CreateCloudResponse
	194, // 760: clustermanager.ClusterManager.UpdateCloud:output_type -> clustermanager.UpdateCloudResponse
	196, // 761: clustermanager.ClusterManager.DeleteCloud:output_type -> clustermanager.DeleteCloudResponse
	198, // 762: clustermanager.ClusterManager.GetCloud:output_type -> clustermanager.GetCloudResponse
	200, // 763: clustermanager.ClusterManager.ListCloud:output_type -> clustermanager.ListCloudResponse
	46,  // 764: clustermanager.ClusterManager.CreateCloudVPC:output_type -> clustermanager.CreateCloudVPCResponse
	48,  // 765: clustermanager.ClusterManager.UpdateCloudVPC:output_type -> clustermanager.UpdateCloudVPCResponse
	50,  // 766: clustermanager.ClusterManager.DeleteCloudVPC:output_type -> clustermanager.DeleteCloudVPCResponse
	52,  // 767: clustermanager.ClusterManager.ListCloudVPC:output_type -> clustermanager.ListCloudVPCResponse
	56,  // 768: clustermanager.ClusterManager.ListCloudRegions:output_type -> clustermanager.ListCloudRegionsResponse
	59,  // 769: clustermanager.ClusterManager.GetVPCCidr:output_type -> clustermanager.GetVPCCidrResponse
	203, // 770: clustermanager.ClusterManager.CreateNodeGroup:output_type -> clustermanager.CreateNodeGroupResponse
	206, // 771: clustermanager.ClusterManager.UpdateNodeGroup:output_type -> clustermanager.UpdateNodeGroupResponse
	208, // 772: clustermanager.ClusterManager.DeleteNodeGroup:output_type -> clustermanager.DeleteNodeGroupResponse
	211, // 773: clustermanager.ClusterManager.GetNodeGroup:output_type -> clustermanager.GetNodeGroupResponse
	213, // 774: clustermanager.ClusterManager.ListClusterNodeGroup:output_type -> clustermanager.ListClusterNodeGroupResponse
	215, // 775: clustermanager.ClusterManager.ListNodeGroup:output_type -> clustermanager.ListNodeGroupResponse
	116, // 776: clustermanager.ClusterManager.RecommendNodeGroupConf:output_type -> clustermanager.RecommendNodeGroupConfResp
	226, // 777: clustermanager.ClusterManager.MoveNodesToGroup:output_type -> clustermanager.MoveNodesToGroupResponse
	228, // 778: clustermanager.ClusterManager.RemoveNodesFromGroup:output_type -> clustermanager.RemoveNodesFromGroupResponse
	230, // 779: clustermanager.ClusterManager.CleanNodesInGroup:output_type -> clustermanager.CleanNodesInGroupResponse
	232, // 780: clustermanager.ClusterManager.CleanNodesInGroupV2:output_type -> clustermanager.CleanNodesInGroupV2Response
	236, // 781: clustermanager.ClusterManager.ListNodesInGroup:output_type -> clustermanager.ListNodesInGroupResponse
	234, // 782: clustermanager.ClusterManager.ListNodesInGroupV2:output_type -> clustermanager.ListNodesInGroupV2Response
	246, // 783: clustermanager.ClusterManager.UpdateGroupDesiredNode:output_type -> clustermanager.UpdateGroupDesiredNodeResponse
	244, // 784: clustermanager.ClusterManager.UpdateGroupDesiredSize:output_type -> clustermanager.UpdateGroupDesiredSizeResponse
	238, // 785: clustermanager.ClusterManager.UpdateGroupMinMaxSize:output_type -> clustermanager.UpdateGroupMinMaxSizeResponse
	240, // 786: clustermanager.ClusterManager.UpdateGroupAsTimeRange:output_type -> clustermanager.UpdateGroupAsTimeRangeResponse
	412, // 787: clustermanager.ClusterManager.GetExternalNodeScriptByGroupID:output_type -> clustermanager.GetExternalNodeScriptResponse
	242, // 788: clustermanager.ClusterManager.TransNodeGroupToNodeTemplate:output_type -> clustermanager.TransNodeGroupToNodeTemplateResponse
	248, // 789: clustermanager.ClusterManager.EnableNodeGroupAutoScale:output_type -> clustermanager.EnableNodeGroupAutoScaleResponse
	250, // 790: clustermanager.ClusterManager.DisableNodeGroupAutoScale:output_type -> clustermanager.DisableNodeGroupAutoScaleResponse
	445, // 791: clustermanager.ClusterManager.GetProviderResourceUsage:output_type -> clustermanager.GetProviderResourceUsageResponse
	448, // 792: clustermanager.ClusterManager.GetProjectResourceQuotaUsage:output_type -> clustermanager.GetProjectResourceQuotaUsageResponse
	252, // 793: clustermanager.ClusterManager.CreateTask:output_type -> clustermanager.CreateTaskResponse
	254, // 794: clustermanager.ClusterManager.RetryTask:output_type -> clustermanager.RetryTaskResponse
	256, // 795: clustermanager.ClusterManager.SkipTask:output_type -> clustermanager.SkipTaskResponse
	258, // 796: clustermanager.ClusterManager.UpdateTask:output_type -> clustermanager.UpdateTaskResponse
	260, // 797: clustermanager.ClusterManager.DeleteTask:output_type -> clustermanager.DeleteTaskResponse
	262, // 798: clustermanager.ClusterManager.GetTask:output_type -> clustermanager.GetTaskResponse
	264, // 799: clustermanager.ClusterManager.ListTask:output_type -> clustermanager.ListTaskResponse
	266, // 800: clustermanager.ClusterManager.CreateAutoScalingOption:output_type -> clustermanager.CreateAutoScalingOptionResponse
	268, // 801: clustermanager.ClusterManager.UpdateAutoScalingOption:output_type -> clustermanager.UpdateAutoScalingOptionResponse
	270, // 802: clustermanager.ClusterManager.UpdateAsOptionDeviceProvider:output_type -> clustermanager.UpdateAsOptionDeviceProviderResponse
	274, // 803: clustermanager.ClusterManager.DeleteAutoScalingOption:output_type -> clustermanager.DeleteAutoScalingOptionResponse
	276, // 804: clustermanager.ClusterManager.GetAutoScalingOption:output_type -> clustermanager.GetAutoScalingOptionResponse
	278, // 805: clustermanager.ClusterManager.ListAutoScalingOption:output_type -> clustermanager.ListAutoScalingOptionResponse
	280, // 806: clustermanager.ClusterManager.UpdateAutoScalingStatus:output_type -> clustermanager.UpdateAutoScalingStatusResponse
	272, // 807: clustermanager.ClusterManager.SyncAutoScalingOption:output_type -> clustermanager.SyncAutoScalingOptionResponse
	86,  // 808: clustermanager.ClusterManager.CreateNodeTemplate:output_type -> clustermanager.CreateNodeTemplateResponse
	88,  // 809: clustermanager.ClusterManager.UpdateNodeTemplate:output_type -> clustermanager.UpdateNodeTemplateResponse
	90,  // 810: clustermanager.ClusterManager.DeleteNodeTemplate:output_type -> clustermanager.DeleteNodeTemplateResponse
	94,  // 811: clustermanager.ClusterManager.ListNodeTemplate:output_type -> clustermanager.ListNodeTemplateResponse
	92,  // 812: clustermanager.ClusterManager.GetNodeTemplate:output_type -> clustermanager.GetNodeTemplateResponse
	439, // 813: clustermanager.ClusterManager.CreateNotifyTemplate:output_type -> clustermanager.CreateNotifyTemplateResponse
	441, // 814: clustermanager.ClusterManager.DeleteNotifyTemplate:output_type -> clustermanager.DeleteNotifyTemplateResponse
	443, // 815: clustermanager.ClusterManager.ListNotifyTemplate:output_type -> clustermanager.ListNotifyTemplateResponse
	27,  // 816: clustermanager.ClusterManager.CreateCloudAccount:output_type -> clustermanager.CreateCloudAccountResponse
	29,  // 817: clustermanager.ClusterManager.UpdateCloudAccount:output_type -> clustermanager.UpdateCloudAccountResponse
	32,  // 818: clustermanager.ClusterManager.MigrateCloudAccount:output_type -> clustermanager.MigrateCloudAccountResponse
	34,  // 819: clustermanager.ClusterManager.DeleteCloudAccount:output_type -> clustermanager.DeleteCloudAccountResponse
	41,  // 820: clustermanager.ClusterManager.ListCloudAccount:output_type -> clustermanager.ListCloudAccountResponse
	36,  // 821: clustermanager.ClusterManager.ListCloudAccountToPerm:output_type -> clustermanager.ListCloudAccountPermResponse
	39,  // 822: clustermanager.ClusterManager.VerifyCloudAccount:output_type -> clustermanager.VerifyCloudAccountResponse
	283, // 823: clustermanager.ClusterManager.GetServiceRoles:output_type -> clustermanager.GetServiceRolesResponse
	286, // 824: clustermanager.ClusterManager.GetResourceGroups:output_type -> clustermanager.GetResourceGroupsResponse
	289, // 825: clustermanager.ClusterManager.GetCloudRegions:output_type -> clustermanager.GetCloudRegionsResponse
	295, // 826: clustermanager.ClusterManager.GetCloudRegionZones:output_type -> clustermanager.GetCloudRegionZonesResponse
	293, // 827: clustermanager.ClusterManager.ListCloudRegionCluster:output_type -> clustermanager.ListCloudRegionClusterResponse
	327, // 828: clustermanager.ClusterManager.ListCloudVpcs:output_type -> clustermanager.ListCloudVpcsResponse
	334, // 829: clustermanager.ClusterManager.CheckCidrConflictFromVpc:output_type -> clustermanager.CheckCidrConflictFromVpcResponse
	331, // 830: clustermanager.ClusterManager.ListCloudSubnets:output_type -> clustermanager.ListCloudSubnetsResponse
	337, // 831: clustermanager.ClusterManager.ListCloudSecurityGroups:output_type -> clustermanager.ListCloudSecurityGroupsResponse
	339, // 832: clustermanager.ClusterManager.ListKeypairs:output_type -> clustermanager.ListKeyPairsResponse
	300, // 833: clustermanager.ClusterManager.ListCloudInstanceTypes:output_type -> clustermanager.ListCloudInstanceTypeResponse
	303, // 834: clustermanager.ClusterManager.ListCloudDiskTypes:output_type -> clustermanager.ListCloudDiskTypesResponse
	306, // 835: clustermanager.ClusterManager.GetMasterSuggestedMachines:output_type -> clustermanager.GetMasterSuggestedMachinesResponse
	324, // 836: clustermanager.ClusterManager.ListCloudProjects:output_type -> clustermanager.ListCloudProjectsResponse
	317, // 837: clustermanager.ClusterManager.ListCloudOsImage:output_type -> clustermanager.ListCloudOsImageResponse
	308, // 838: clustermanager.ClusterManager.ListCloudInstances:output_type -> clustermanager.ListCloudInstancesResponse
	308, // 839: clustermanager.ClusterManager.ListCloudInstancesByPost:output_type -> clustermanager.ListCloudInstancesResponse
	311, // 840: clustermanager.ClusterManager.GetCloudAccountType:output_type -> clustermanager.GetCloudAccountTypeResponse
	314, // 841: clustermanager.ClusterManager.GetCloudBandwidthPackages:output_type -> clustermanager.GetCloudBandwidthPackagesResponse
	321, // 842: clustermanager.ClusterManager.ListCloudRuntimeInfo:output_type -> clustermanager.ListCloudRuntimeInfoResponse
	343, // 843: clustermanager.ClusterManager.ListOperationLogs:output_type -> clustermanager.ListOperationLogsResponse
	343, // 844: clustermanager.ClusterManager.ListOperationLogsV2:output_type -> clustermanager.ListOperationLogsResponse
	351, // 845: clustermanager.ClusterManager.ListTaskStepLogs:output_type -> clustermanager.ListTaskStepLogsResponse
	345, // 846: clustermanager.ClusterManager.ListTaskRecords:output_type -> clustermanager.ListTaskRecordsResponse
	355, // 847: clustermanager.ClusterManager.CleanDbHistoryData:output_type -> clustermanager.CleanDbHistoryDataResponse
	383, // 848: clustermanager.ClusterManager.ListResourceSchema:output_type -> clustermanager.CommonListResp
	382, // 849: clustermanager.ClusterManager.GetResourceSchema:output_type -> clustermanager.CommonResp
	381, // 850: clustermanager.ClusterManager.QueryPermByActionID:output_type -> clustermanager.QueryPermByActionIDResponse
	383, // 851: clustermanager.ClusterManager.ListBKCloud:output_type -> clustermanager.CommonListResp
	382, // 852: clustermanager.ClusterManager.ListCCTopology:output_type -> clustermanager.CommonResp
	387, // 853: clustermanager.ClusterManager.GetBkSopsTemplateList:output_type -> clustermanager.GetBkSopsTemplateListResponse
	390, // 854: clustermanager.ClusterManager.GetBkSopsTemplateInfo:output_type -> clustermanager.GetBkSopsTemplateInfoResponse
	394, // 855: clustermanager.ClusterManager.GetInnerTemplateValues:output_type -> clustermanager.GetInnerTemplateValuesResponse
	397, // 856: clustermanager.ClusterManager.DebugBkSopsTask:output_type -> clustermanager.DebugBkSopsTaskResponse
	415, // 857: clustermanager.ClusterManager.GetBatchCustomSetting:output_type -> clustermanager.GetBatchCustomSettingResponse
	418, // 858: clustermanager.ClusterManager.GetBizTopologyHost:output_type -> clustermanager.GetBizTopologyHostResponse
	421, // 859: clustermanager.ClusterManager.GetTopologyNodes:output_type -> clustermanager.GetTopologyNodesResponse
	426, // 860: clustermanager.ClusterManager.GetTopologyHostIdsNodes:output_type -> clustermanager.GetTopologyHostIdsNodesResponse
	431, // 861: clustermanager.ClusterManager.GetHostsDetails:output_type -> clustermanager.GetHostsDetailsResponse
	434, // 862: clustermanager.ClusterManager.GetScopeHostCheck:output_type -> clustermanager.GetScopeHostCheckResponse
	404, // 863: clustermanager.ClusterManager.CreateCloudModuleFlag:output_type -> clustermanager.CreateCloudModuleFlagResponse
	406, // 864: clustermanager.ClusterManager.UpdateCloudModuleFlag:output_type -> clustermanager.UpdateCloudModuleFlagResponse
	408, // 865: clustermanager.ClusterManager.DeleteCloudModuleFlag:output_type -> clustermanager.DeleteCloudModuleFlagResponse
	410, // 866: clustermanager.ClusterManager.ListCloudModuleFlag:output_type -> clustermanager.ListCloudModuleFlagResponse
	451, // 867: clustermanager.ClusterManager.ListCloudNodePublicPrefix:output_type -> clustermanager.ListCloudNodePublicPrefixResponse
	375, // 868: clustermanager.ClusterManager.Health:output_type -> clustermanager.HealthResponse
	465, // 869: clustermanager.ClusterManager.CreateTemplateConfig:output_type -> clustermanager.CreateTemplateConfigResponse
	467, // 870: clustermanager.ClusterManager.DeleteTemplateConfig:output_type -> clustermanager.DeleteTemplateConfigResponse
	469, // 871: clustermanager.ClusterManager.ListTemplateConfig:output_type -> clustermanager.ListTemplateConfigResponse
	471, // 872: clustermanager.ClusterManager.UpdateTemplateConfig:output_type -> clustermanager.UpdateTemplateConfigResponse
	713, // [713:873] is the sub-list for method output_type
	553, // [553:713] is the sub-list for method input_type
	553, // [553:553] is the sub-list for extension type_name
	553, // [553:553] is the sub-list for extension extendee
	0,   // [0:553] is the sub-list for field type_name
}

func init() { file_clustermanager_proto_init() }
func file_clustermanager_proto_init() {
	if File_clustermanager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_clustermanager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedClusterRanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistedSubnetIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSubnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterBasicSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAdvanceSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConnectSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeLoginInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeAdvancedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Namespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceQuota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BKOpsPlugin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMgr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeGroupMgr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloudAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloudAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrateCloudAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OriginEncrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrateCloudAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudAccountPermRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudAccountPermResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyCloudAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyCloudAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudVPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cidr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CidrState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudVPCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudVPCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloudVPCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloudVPCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudVPCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudVPCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudVPCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudVPCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudVPCResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CidrDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudRegionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudRegionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVPCCidrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVPCCidrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPCCidr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cloud); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudNetworkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvCidrStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoScalingGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataDisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudDataDisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternetAccessible); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTemplateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceChargePrepaid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAutoScalingOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Taint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunTimeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TkeCidr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TkeCidrCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubnetToClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubnetToClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchClusterUnderlayNetworkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchClusterUnderlayNetworkResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVirtualClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceQuota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVirtualClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendNodeGroupConfReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalingProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendNodeGroupConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendNodeGroupConfResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeConfigConnectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeConfigConnectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportCloudMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVirtualClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVirtualClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVirtualClusterQuotaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVirtualClusterQuotaResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryCreateClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryCreateClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnCordonNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnCordonNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CordonNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CordonNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterModuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterModuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordNodeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommonClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommonClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterV2Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterV2Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebAnnotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebAnnotationsV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodesInClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodesInClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClustersMetaDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClustersMetaDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMastersInClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMastersInClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterCredentialReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterCredentialResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterCredentialReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterCredentialResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterKubeConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterKubeConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterCredentialReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterCredentialResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterCredentialReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterCredentialResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitFederationClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitFederationClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFederatedClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFederatedClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloudRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloudResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeGroupResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeGroupResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterNodeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterNodeGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNodesV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNodesV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDeleteClusterNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDeleteClusterNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchNodesStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveNodesToGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveNodesToGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNodesFromGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNodesFromGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanNodesInGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanNodesInGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanNodesInGroupV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanNodesInGroupV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodesInGroupV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodesInGroupV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeGroupNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodesInGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupMinMaxSizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupMinMaxSizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupAsTimeRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupAsTimeRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransNodeGroupToNodeTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransNodeGroupToNodeTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupDesiredSizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupDesiredSizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupDesiredNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupDesiredNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableNodeGroupAutoScaleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableNodeGroupAutoScaleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableNodeGroupAutoScaleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableNodeGroupAutoScaleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkipTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkipTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAutoScalingOptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAutoScalingOptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAutoScalingOptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAutoScalingOptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAsOptionDeviceProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAsOptionDeviceProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncAutoScalingOptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncAutoScalingOptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAutoScalingOptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAutoScalingOptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAutoScalingOptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAutoScalingOptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAutoScalingOptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAutoScalingOptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAutoScalingStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAutoScalingStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceRoleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceRolesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceRolesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudRegionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudRegionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZoneInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudRegionClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudRegionClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudRegionZonesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudRegionZonesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOperationLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStepLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudInstanceTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudInstanceTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudDiskTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudDiskTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskConfigSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMasterSuggestedMachinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMasterSuggestedMachinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudAccountTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudAccountTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAccountType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudBandwidthPackagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudBandwidthPackagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BandwidthPackageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudOsImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudOsImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudRuntimeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudRuntimeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunTimeVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudVpcsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudVpcsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudVpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssistantCidr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudSubnetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudSubnetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCidrConflictFromVpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCidrConflictFromVpcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConflictInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudSecurityGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudSecurityGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKeyPairsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKeyPairsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOperationLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTaskStepLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOperationLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTaskRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTaskRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRecordsResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRecordStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRecordStepData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOperationLogsResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationLogDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTaskStepLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTaskStepLogsResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStepLogDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanDbHistoryDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanDbHistoryDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeOperationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeOperationStatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrainNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrainNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDrainNodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvictionRisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDrainNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDrainNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeAnnotationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeAnnotationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeLabelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeLabelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeTaint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeTaintsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeTaintsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourceSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPermByActionIDReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPermByActionIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Perms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPermByActionIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBKCloudRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCCTopologyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBkSopsTemplateListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBkSopsTemplateListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBkSopsTemplateInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBkSopsTemplateInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstantValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInnerTemplateValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInnerTemplateValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugBkSopsTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugBkSopsTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugBkSopsTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudModuleFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueRegex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudModuleFlagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudModuleFlagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloudModuleFlagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloudModuleFlagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudModuleFlagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudModuleFlagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudModuleFlagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudModuleFlagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExternalNodeScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExternalNodeScriptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBatchCustomSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBatchCustomSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[416].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[417].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBizTopologyHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[418].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBizTopologyHostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[419].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[420].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopologyNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[421].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopologyNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[422].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopologyNodesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[423].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[424].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostCloudArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[425].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopologyHostIdsNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[426].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopologyHostIdsNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[427].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopologyHostIdsNodesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[428].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostIDsNodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[429].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[430].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostsDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[431].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostsDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[432].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostDataWithMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[433].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScopeHostCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[434].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScopeHostCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[435].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[436].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[437].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[438].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotifyTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[439].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotifyTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[440].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNotifyTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[441].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNotifyTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[442].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNotifyTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[443].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNotifyTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[444].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProviderResourceUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[445].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProviderResourceUsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[446].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[447].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectResourceQuotaUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[448].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectResourceQuotaUsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[449].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectAutoscalerQuota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[450].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudNodePublicPrefixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[451].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudNodePublicPrefixResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[452].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodePublicPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[453].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterSharedProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[454].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterSharedProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[455].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPUArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[456].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriverVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[457].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUDNN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[458].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDriver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[459].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[460].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[461].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[462].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudTemplateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[463].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudNetworkTemplateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[464].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTemplateConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[465].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTemplateConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[466].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTemplateConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[467].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTemplateConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[468].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTemplateConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[469].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTemplateConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[470].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTemplateConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clustermanager_proto_msgTypes[471].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTemplateConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clustermanager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   547,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_clustermanager_proto_goTypes,
		DependencyIndexes: file_clustermanager_proto_depIdxs,
		MessageInfos:      file_clustermanager_proto_msgTypes,
	}.Build()
	File_clustermanager_proto = out.File
	file_clustermanager_proto_rawDesc = nil
	file_clustermanager_proto_goTypes = nil
	file_clustermanager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ClusterManagerClient is the client API for ClusterManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterManagerClient interface {
	// * cluster management
	CreateCluster(ctx context.Context, in *CreateClusterReq, opts ...grpc.CallOption) (*CreateClusterResp, error)
	RetryCreateClusterTask(ctx context.Context, in *RetryCreateClusterReq, opts ...grpc.CallOption) (*RetryCreateClusterResp, error)
	CheckCloudKubeConfig(ctx context.Context, in *KubeConfigReq, opts ...grpc.CallOption) (*KubeConfigResp, error)
	CheckCloudKubeConfigConnect(ctx context.Context, in *KubeConfigConnectReq, opts ...grpc.CallOption) (*KubeConfigConnectResp, error)
	ImportCluster(ctx context.Context, in *ImportClusterReq, opts ...grpc.CallOption) (*ImportClusterResp, error)
	UpdateCluster(ctx context.Context, in *UpdateClusterReq, opts ...grpc.CallOption) (*UpdateClusterResp, error)
	AddNodesToCluster(ctx context.Context, in *AddNodesRequest, opts ...grpc.CallOption) (*AddNodesResponse, error)
	AddNodesToClusterV2(ctx context.Context, in *AddNodesV2Request, opts ...grpc.CallOption) (*AddNodesV2Response, error)
	DeleteNodesFromCluster(ctx context.Context, in *DeleteNodesRequest, opts ...grpc.CallOption) (*DeleteNodesResponse, error)
	BatchDeleteNodesFromCluster(ctx context.Context, in *BatchDeleteClusterNodesRequest, opts ...grpc.CallOption) (*BatchDeleteClusterNodesResponse, error)
	GetClustersMetaData(ctx context.Context, in *GetClustersMetaDataRequest, opts ...grpc.CallOption) (*GetClustersMetaDataResponse, error)
	ListNodesInCluster(ctx context.Context, in *ListNodesInClusterRequest, opts ...grpc.CallOption) (*ListNodesInClusterResponse, error)
	ListMastersInCluster(ctx context.Context, in *ListMastersInClusterRequest, opts ...grpc.CallOption) (*ListMastersInClusterResponse, error)
	DeleteCluster(ctx context.Context, in *DeleteClusterReq, opts ...grpc.CallOption) (*DeleteClusterResp, error)
	GetCluster(ctx context.Context, in *GetClusterReq, opts ...grpc.CallOption) (*GetClusterResp, error)
	GetClusterSharedProject(ctx context.Context, in *GetClusterSharedProjectRequest, opts ...grpc.CallOption) (*GetClusterSharedProjectResponse, error)
	ListProjectCluster(ctx context.Context, in *ListProjectClusterReq, opts ...grpc.CallOption) (*ListProjectClusterResp, error)
	ListBusinessCluster(ctx context.Context, in *ListBusinessClusterReq, opts ...grpc.CallOption) (*ListBusinessClusterResp, error)
	ListCluster(ctx context.Context, in *ListClusterReq, opts ...grpc.CallOption) (*ListClusterResp, error)
	ListClusterV2(ctx context.Context, in *ListClusterV2Req, opts ...grpc.CallOption) (*ListClusterV2Resp, error)
	ListCommonCluster(ctx context.Context, in *ListCommonClusterReq, opts ...grpc.CallOption) (*ListCommonClusterResp, error)
	AddSubnetToCluster(ctx context.Context, in *AddSubnetToClusterReq, opts ...grpc.CallOption) (*AddSubnetToClusterResp, error)
	SwitchClusterUnderlayNetwork(ctx context.Context, in *SwitchClusterUnderlayNetworkReq, opts ...grpc.CallOption) (*SwitchClusterUnderlayNetworkResp, error)
	CreateVirtualCluster(ctx context.Context, in *CreateVirtualClusterReq, opts ...grpc.CallOption) (*CreateVirtualClusterResp, error)
	DeleteVirtualCluster(ctx context.Context, in *DeleteVirtualClusterReq, opts ...grpc.CallOption) (*DeleteVirtualClusterResp, error)
	UpdateVirtualClusterQuota(ctx context.Context, in *UpdateVirtualClusterQuotaReq, opts ...grpc.CallOption) (*UpdateVirtualClusterQuotaResp, error)
	// * node management
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoResponse, error)
	RecordNodeInfo(ctx context.Context, in *RecordNodeInfoRequest, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error)
	UpdateClusterModule(ctx context.Context, in *UpdateClusterModuleRequest, opts ...grpc.CallOption) (*UpdateClusterModuleResponse, error)
	CheckNodeInCluster(ctx context.Context, in *CheckNodesRequest, opts ...grpc.CallOption) (*CheckNodesResponse, error)
	CordonNode(ctx context.Context, in *CordonNodeRequest, opts ...grpc.CallOption) (*CordonNodeResponse, error)
	UnCordonNode(ctx context.Context, in *UnCordonNodeRequest, opts ...grpc.CallOption) (*UnCordonNodeResponse, error)
	DrainNode(ctx context.Context, in *DrainNodeRequest, opts ...grpc.CallOption) (*DrainNodeResponse, error)
	CheckDrainNode(ctx context.Context, in *CheckDrainNodeRequest, opts ...grpc.CallOption) (*CheckDrainNodeResponse, error)
	UpdateNodeLabels(ctx context.Context, in *UpdateNodeLabelsRequest, opts ...grpc.CallOption) (*UpdateNodeLabelsResponse, error)
	UpdateNodeAnnotations(ctx context.Context, in *UpdateNodeAnnotationsRequest, opts ...grpc.CallOption) (*UpdateNodeAnnotationsResponse, error)
	UpdateNodeTaints(ctx context.Context, in *UpdateNodeTaintsRequest, opts ...grpc.CallOption) (*UpdateNodeTaintsResponse, error)
	// * cluster credential management
	GetClusterCredential(ctx context.Context, in *GetClusterCredentialReq, opts ...grpc.CallOption) (*GetClusterCredentialResp, error)
	UpdateClusterCredential(ctx context.Context, in *UpdateClusterCredentialReq, opts ...grpc.CallOption) (*UpdateClusterCredentialResp, error)
	UpdateClusterKubeConfig(ctx context.Context, in *UpdateClusterKubeConfigReq, opts ...grpc.CallOption) (*UpdateClusterKubeConfigResp, error)
	DeleteClusterCredential(ctx context.Context, in *DeleteClusterCredentialReq, opts ...grpc.CallOption) (*DeleteClusterCredentialResp, error)
	ListClusterCredential(ctx context.Context, in *ListClusterCredentialReq, opts ...grpc.CallOption) (*ListClusterCredentialResp, error)
	// * federation cluster management
	InitFederationCluster(ctx context.Context, in *InitFederationClusterReq, opts ...grpc.CallOption) (*InitFederationClusterResp, error)
	AddFederatedCluster(ctx context.Context, in *AddFederatedClusterReq, opts ...grpc.CallOption) (*AddFederatedClusterResp, error)
	// * Cloud information management *
	CreateCloud(ctx context.Context, in *CreateCloudRequest, opts ...grpc.CallOption) (*CreateCloudResponse, error)
	UpdateCloud(ctx context.Context, in *UpdateCloudRequest, opts ...grpc.CallOption) (*UpdateCloudResponse, error)
	DeleteCloud(ctx context.Context, in *DeleteCloudRequest, opts ...grpc.CallOption) (*DeleteCloudResponse, error)
	GetCloud(ctx context.Context, in *GetCloudRequest, opts ...grpc.CallOption) (*GetCloudResponse, error)
	ListCloud(ctx context.Context, in *ListCloudRequest, opts ...grpc.CallOption) (*ListCloudResponse, error)
	// * Cloud VPC information management *
	CreateCloudVPC(ctx context.Context, in *CreateCloudVPCRequest, opts ...grpc.CallOption) (*CreateCloudVPCResponse, error)
	UpdateCloudVPC(ctx context.Context, in *UpdateCloudVPCRequest, opts ...grpc.CallOption) (*UpdateCloudVPCResponse, error)
	DeleteCloudVPC(ctx context.Context, in *DeleteCloudVPCRequest, opts ...grpc.CallOption) (*DeleteCloudVPCResponse, error)
	ListCloudVPC(ctx context.Context, in *ListCloudVPCRequest, opts ...grpc.CallOption) (*ListCloudVPCResponse, error)
	ListCloudRegions(ctx context.Context, in *ListCloudRegionsRequest, opts ...grpc.CallOption) (*ListCloudRegionsResponse, error)
	GetVPCCidr(ctx context.Context, in *GetVPCCidrRequest, opts ...grpc.CallOption) (*GetVPCCidrResponse, error)
	// * NodeGroup information management *
	CreateNodeGroup(ctx context.Context, in *CreateNodeGroupRequest, opts ...grpc.CallOption) (*CreateNodeGroupResponse, error)
	UpdateNodeGroup(ctx context.Context, in *UpdateNodeGroupRequest, opts ...grpc.CallOption) (*UpdateNodeGroupResponse, error)
	DeleteNodeGroup(ctx context.Context, in *DeleteNodeGroupRequest, opts ...grpc.CallOption) (*DeleteNodeGroupResponse, error)
	GetNodeGroup(ctx context.Context, in *GetNodeGroupRequest, opts ...grpc.CallOption) (*GetNodeGroupResponse, error)
	ListClusterNodeGroup(ctx context.Context, in *ListClusterNodeGroupRequest, opts ...grpc.CallOption) (*ListClusterNodeGroupResponse, error)
	ListNodeGroup(ctx context.Context, in *ListNodeGroupRequest, opts ...grpc.CallOption) (*ListNodeGroupResponse, error)
	RecommendNodeGroupConf(ctx context.Context, in *RecommendNodeGroupConfReq, opts ...grpc.CallOption) (*RecommendNodeGroupConfResp, error)
	MoveNodesToGroup(ctx context.Context, in *MoveNodesToGroupRequest, opts ...grpc.CallOption) (*MoveNodesToGroupResponse, error)
	RemoveNodesFromGroup(ctx context.Context, in *RemoveNodesFromGroupRequest, opts ...grpc.CallOption) (*RemoveNodesFromGroupResponse, error)
	CleanNodesInGroup(ctx context.Context, in *CleanNodesInGroupRequest, opts ...grpc.CallOption) (*CleanNodesInGroupResponse, error)
	CleanNodesInGroupV2(ctx context.Context, in *CleanNodesInGroupV2Request, opts ...grpc.CallOption) (*CleanNodesInGroupV2Response, error)
	ListNodesInGroup(ctx context.Context, in *GetNodeGroupRequest, opts ...grpc.CallOption) (*ListNodesInGroupResponse, error)
	ListNodesInGroupV2(ctx context.Context, in *ListNodesInGroupV2Request, opts ...grpc.CallOption) (*ListNodesInGroupV2Response, error)
	UpdateGroupDesiredNode(ctx context.Context, in *UpdateGroupDesiredNodeRequest, opts ...grpc.CallOption) (*UpdateGroupDesiredNodeResponse, error)
	UpdateGroupDesiredSize(ctx context.Context, in *UpdateGroupDesiredSizeRequest, opts ...grpc.CallOption) (*UpdateGroupDesiredSizeResponse, error)
	UpdateGroupMinMaxSize(ctx context.Context, in *UpdateGroupMinMaxSizeRequest, opts ...grpc.CallOption) (*UpdateGroupMinMaxSizeResponse, error)
	UpdateGroupAsTimeRange(ctx context.Context, in *UpdateGroupAsTimeRangeRequest, opts ...grpc.CallOption) (*UpdateGroupAsTimeRangeResponse, error)
	GetExternalNodeScriptByGroupID(ctx context.Context, in *GetExternalNodeScriptRequest, opts ...grpc.CallOption) (*GetExternalNodeScriptResponse, error)
	TransNodeGroupToNodeTemplate(ctx context.Context, in *TransNodeGroupToNodeTemplateRequest, opts ...grpc.CallOption) (*TransNodeGroupToNodeTemplateResponse, error)
	EnableNodeGroupAutoScale(ctx context.Context, in *EnableNodeGroupAutoScaleRequest, opts ...grpc.CallOption) (*EnableNodeGroupAutoScaleResponse, error)
	DisableNodeGroupAutoScale(ctx context.Context, in *DisableNodeGroupAutoScaleRequest, opts ...grpc.CallOption) (*DisableNodeGroupAutoScaleResponse, error)
	GetProviderResourceUsage(ctx context.Context, in *GetProviderResourceUsageRequest, opts ...grpc.CallOption) (*GetProviderResourceUsageResponse, error)
	GetProjectResourceQuotaUsage(ctx context.Context, in *GetProjectResourceQuotaUsageRequest, opts ...grpc.CallOption) (*GetProjectResourceQuotaUsageResponse, error)
	// * Task information management *
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	RetryTask(ctx context.Context, in *RetryTaskRequest, opts ...grpc.CallOption) (*RetryTaskResponse, error)
	SkipTask(ctx context.Context, in *SkipTaskRequest, opts ...grpc.CallOption) (*SkipTaskResponse, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
	ListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*ListTaskResponse, error)
	// * ClusterAutoScalingOption information management *
	CreateAutoScalingOption(ctx context.Context, in *CreateAutoScalingOptionRequest, opts ...grpc.CallOption) (*CreateAutoScalingOptionResponse, error)
	UpdateAutoScalingOption(ctx context.Context, in *UpdateAutoScalingOptionRequest, opts ...grpc.CallOption) (*UpdateAutoScalingOptionResponse, error)
	UpdateAsOptionDeviceProvider(ctx context.Context, in *UpdateAsOptionDeviceProviderRequest, opts ...grpc.CallOption) (*UpdateAsOptionDeviceProviderResponse, error)
	DeleteAutoScalingOption(ctx context.Context, in *DeleteAutoScalingOptionRequest, opts ...grpc.CallOption) (*DeleteAutoScalingOptionResponse, error)
	GetAutoScalingOption(ctx context.Context, in *GetAutoScalingOptionRequest, opts ...grpc.CallOption) (*GetAutoScalingOptionResponse, error)
	ListAutoScalingOption(ctx context.Context, in *ListAutoScalingOptionRequest, opts ...grpc.CallOption) (*ListAutoScalingOptionResponse, error)
	UpdateAutoScalingStatus(ctx context.Context, in *UpdateAutoScalingStatusRequest, opts ...grpc.CallOption) (*UpdateAutoScalingStatusResponse, error)
	SyncAutoScalingOption(ctx context.Context, in *SyncAutoScalingOptionRequest, opts ...grpc.CallOption) (*SyncAutoScalingOptionResponse, error)
	// Cloud NodeTemplate info management
	CreateNodeTemplate(ctx context.Context, in *CreateNodeTemplateRequest, opts ...grpc.CallOption) (*CreateNodeTemplateResponse, error)
	UpdateNodeTemplate(ctx context.Context, in *UpdateNodeTemplateRequest, opts ...grpc.CallOption) (*UpdateNodeTemplateResponse, error)
	DeleteNodeTemplate(ctx context.Context, in *DeleteNodeTemplateRequest, opts ...grpc.CallOption) (*DeleteNodeTemplateResponse, error)
	ListNodeTemplate(ctx context.Context, in *ListNodeTemplateRequest, opts ...grpc.CallOption) (*ListNodeTemplateResponse, error)
	GetNodeTemplate(ctx context.Context, in *GetNodeTemplateRequest, opts ...grpc.CallOption) (*GetNodeTemplateResponse, error)
	// NotifyTemplate info management
	CreateNotifyTemplate(ctx context.Context, in *CreateNotifyTemplateRequest, opts ...grpc.CallOption) (*CreateNotifyTemplateResponse, error)
	DeleteNotifyTemplate(ctx context.Context, in *DeleteNotifyTemplateRequest, opts ...grpc.CallOption) (*DeleteNotifyTemplateResponse, error)
	ListNotifyTemplate(ctx context.Context, in *ListNotifyTemplateRequest, opts ...grpc.CallOption) (*ListNotifyTemplateResponse, error)
	// Cloud Account information management
	CreateCloudAccount(ctx context.Context, in *CreateCloudAccountRequest, opts ...grpc.CallOption) (*CreateCloudAccountResponse, error)
	UpdateCloudAccount(ctx context.Context, in *UpdateCloudAccountRequest, opts ...grpc.CallOption) (*UpdateCloudAccountResponse, error)
	MigrateCloudAccount(ctx context.Context, in *MigrateCloudAccountRequest, opts ...grpc.CallOption) (*MigrateCloudAccountResponse, error)
	DeleteCloudAccount(ctx context.Context, in *DeleteCloudAccountRequest, opts ...grpc.CallOption) (*DeleteCloudAccountResponse, error)
	ListCloudAccount(ctx context.Context, in *ListCloudAccountRequest, opts ...grpc.CallOption) (*ListCloudAccountResponse, error)
	ListCloudAccountToPerm(ctx context.Context, in *ListCloudAccountPermRequest, opts ...grpc.CallOption) (*ListCloudAccountPermResponse, error)
	VerifyCloudAccount(ctx context.Context, in *VerifyCloudAccountRequest, opts ...grpc.CallOption) (*VerifyCloudAccountResponse, error)
	// Cloud Resource management
	GetServiceRoles(ctx context.Context, in *GetServiceRolesRequest, opts ...grpc.CallOption) (*GetServiceRolesResponse, error)
	GetResourceGroups(ctx context.Context, in *GetResourceGroupsRequest, opts ...grpc.CallOption) (*GetResourceGroupsResponse, error)
	GetCloudRegions(ctx context.Context, in *GetCloudRegionsRequest, opts ...grpc.CallOption) (*GetCloudRegionsResponse, error)
	GetCloudRegionZones(ctx context.Context, in *GetCloudRegionZonesRequest, opts ...grpc.CallOption) (*GetCloudRegionZonesResponse, error)
	ListCloudRegionCluster(ctx context.Context, in *ListCloudRegionClusterRequest, opts ...grpc.CallOption) (*ListCloudRegionClusterResponse, error)
	ListCloudVpcs(ctx context.Context, in *ListCloudVpcsRequest, opts ...grpc.CallOption) (*ListCloudVpcsResponse, error)
	CheckCidrConflictFromVpc(ctx context.Context, in *CheckCidrConflictFromVpcRequest, opts ...grpc.CallOption) (*CheckCidrConflictFromVpcResponse, error)
	ListCloudSubnets(ctx context.Context, in *ListCloudSubnetsRequest, opts ...grpc.CallOption) (*ListCloudSubnetsResponse, error)
	ListCloudSecurityGroups(ctx context.Context, in *ListCloudSecurityGroupsRequest, opts ...grpc.CallOption) (*ListCloudSecurityGroupsResponse, error)
	ListKeypairs(ctx context.Context, in *ListKeyPairsRequest, opts ...grpc.CallOption) (*ListKeyPairsResponse, error)
	ListCloudInstanceTypes(ctx context.Context, in *ListCloudInstanceTypeRequest, opts ...grpc.CallOption) (*ListCloudInstanceTypeResponse, error)
	ListCloudDiskTypes(ctx context.Context, in *ListCloudDiskTypesRequest, opts ...grpc.CallOption) (*ListCloudDiskTypesResponse, error)
	GetMasterSuggestedMachines(ctx context.Context, in *GetMasterSuggestedMachinesRequest, opts ...grpc.CallOption) (*GetMasterSuggestedMachinesResponse, error)
	ListCloudProjects(ctx context.Context, in *ListCloudProjectsRequest, opts ...grpc.CallOption) (*ListCloudProjectsResponse, error)
	ListCloudOsImage(ctx context.Context, in *ListCloudOsImageRequest, opts ...grpc.CallOption) (*ListCloudOsImageResponse, error)
	ListCloudInstances(ctx context.Context, in *ListCloudInstancesRequest, opts ...grpc.CallOption) (*ListCloudInstancesResponse, error)
	ListCloudInstancesByPost(ctx context.Context, in *ListCloudInstancesRequest, opts ...grpc.CallOption) (*ListCloudInstancesResponse, error)
	GetCloudAccountType(ctx context.Context, in *GetCloudAccountTypeRequest, opts ...grpc.CallOption) (*GetCloudAccountTypeResponse, error)
	GetCloudBandwidthPackages(ctx context.Context, in *GetCloudBandwidthPackagesRequest, opts ...grpc.CallOption) (*GetCloudBandwidthPackagesResponse, error)
	ListCloudRuntimeInfo(ctx context.Context, in *ListCloudRuntimeInfoRequest, opts ...grpc.CallOption) (*ListCloudRuntimeInfoResponse, error)
	// Operation logs
	ListOperationLogs(ctx context.Context, in *ListOperationLogsRequest, opts ...grpc.CallOption) (*ListOperationLogsResponse, error)
	// Operation logs
	ListOperationLogsV2(ctx context.Context, in *ListOperationLogsRequest, opts ...grpc.CallOption) (*ListOperationLogsResponse, error)
	// Task Step logs
	ListTaskStepLogs(ctx context.Context, in *ListTaskStepLogsRequest, opts ...grpc.CallOption) (*ListTaskStepLogsResponse, error)
	// Task records
	ListTaskRecords(ctx context.Context, in *ListTaskRecordsRequest, opts ...grpc.CallOption) (*ListTaskRecordsResponse, error)
	// CleanDbHistoryData clean DB history data
	CleanDbHistoryData(ctx context.Context, in *CleanDbHistoryDataRequest, opts ...grpc.CallOption) (*CleanDbHistoryDataResponse, error)
	// ** ResourceSchema **
	// ListResourceSchema
	ListResourceSchema(ctx context.Context, in *ListResourceSchemaRequest, opts ...grpc.CallOption) (*CommonListResp, error)
	// GetResourceSchema
	GetResourceSchema(ctx context.Context, in *GetResourceSchemaRequest, opts ...grpc.CallOption) (*CommonResp, error)
	// Perm interface
	QueryPermByActionID(ctx context.Context, in *QueryPermByActionIDRequest, opts ...grpc.CallOption) (*QueryPermByActionIDResponse, error)
	// thirdParty interface(cmdb/bksops等)
	ListBKCloud(ctx context.Context, in *ListBKCloudRequest, opts ...grpc.CallOption) (*CommonListResp, error)
	ListCCTopology(ctx context.Context, in *ListCCTopologyRequest, opts ...grpc.CallOption) (*CommonResp, error)
	GetBkSopsTemplateList(ctx context.Context, in *GetBkSopsTemplateListRequest, opts ...grpc.CallOption) (*GetBkSopsTemplateListResponse, error)
	GetBkSopsTemplateInfo(ctx context.Context, in *GetBkSopsTemplateInfoRequest, opts ...grpc.CallOption) (*GetBkSopsTemplateInfoResponse, error)
	GetInnerTemplateValues(ctx context.Context, in *GetInnerTemplateValuesRequest, opts ...grpc.CallOption) (*GetInnerTemplateValuesResponse, error)
	DebugBkSopsTask(ctx context.Context, in *DebugBkSopsTaskRequest, opts ...grpc.CallOption) (*DebugBkSopsTaskResponse, error)
	// IP selector interface
	// 批量获取多个配置项, 返回配置项内容map
	GetBatchCustomSetting(ctx context.Context, in *GetBatchCustomSettingRequest, opts ...grpc.CallOption) (*GetBatchCustomSettingResponse, error)
	// 批量获取含各节点主机数量的拓扑树
	GetBizTopologyHost(ctx context.Context, in *GetBizTopologyHostRequest, opts ...grpc.CallOption) (*GetBizTopologyHostResponse, error)
	// 根据多个拓扑节点与搜索条件批量分页查询所包含的主机信息(当前仅支持业务拓扑节点)
	GetTopologyNodes(ctx context.Context, in *GetTopologyNodesRequest, opts ...grpc.CallOption) (*GetTopologyNodesResponse, error)
	// 根据多个拓扑节点与搜索条件批量分页查询所包含的主机ID，用于IP选择器全选（当前仅支持业务拓扑节点，业务集仅支持传入业务集根节点）
	GetTopologyHostIdsNodes(ctx context.Context, in *GetTopologyHostIdsNodesRequest, opts ...grpc.CallOption) (*GetTopologyHostIdsNodesResponse, error)
	// 根据主机IDs获取机器详情信息
	GetHostsDetails(ctx context.Context, in *GetHostsDetailsRequest, opts ...grpc.CallOption) (*GetHostsDetailsResponse, error)
	// 根据用户手动输入的IP/IPv6/主机名/hostId等关键字信息获取真实存在的机器信息
	GetScopeHostCheck(ctx context.Context, in *GetScopeHostCheckRequest, opts ...grpc.CallOption) (*GetScopeHostCheckResponse, error)
	// Cloud module flag management
	CreateCloudModuleFlag(ctx context.Context, in *CreateCloudModuleFlagRequest, opts ...grpc.CallOption) (*CreateCloudModuleFlagResponse, error)
	UpdateCloudModuleFlag(ctx context.Context, in *UpdateCloudModuleFlagRequest, opts ...grpc.CallOption) (*UpdateCloudModuleFlagResponse, error)
	DeleteCloudModuleFlag(ctx context.Context, in *DeleteCloudModuleFlagRequest, opts ...grpc.CallOption) (*DeleteCloudModuleFlagResponse, error)
	ListCloudModuleFlag(ctx context.Context, in *ListCloudModuleFlagRequest, opts ...grpc.CallOption) (*ListCloudModuleFlagResponse, error)
	ListCloudNodePublicPrefix(ctx context.Context, in *ListCloudNodePublicPrefixRequest, opts ...grpc.CallOption) (*ListCloudNodePublicPrefixResponse, error)
	// cluster manager health interface
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	CreateTemplateConfig(ctx context.Context, in *CreateTemplateConfigRequest, opts ...grpc.CallOption) (*CreateTemplateConfigResponse, error)
	DeleteTemplateConfig(ctx context.Context, in *DeleteTemplateConfigRequest, opts ...grpc.CallOption) (*DeleteTemplateConfigResponse, error)
	ListTemplateConfig(ctx context.Context, in *ListTemplateConfigRequest, opts ...grpc.CallOption) (*ListTemplateConfigResponse, error)
	UpdateTemplateConfig(ctx context.Context, in *UpdateTemplateConfigRequest, opts ...grpc.CallOption) (*UpdateTemplateConfigResponse, error)
}

type clusterManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterManagerClient(cc grpc.ClientConnInterface) ClusterManagerClient {
	return &clusterManagerClient{cc}
}

func (c *clusterManagerClient) CreateCluster(ctx context.Context, in *CreateClusterReq, opts ...grpc.CallOption) (*CreateClusterResp, error) {
	out := new(CreateClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) RetryCreateClusterTask(ctx context.Context, in *RetryCreateClusterReq, opts ...grpc.CallOption) (*RetryCreateClusterResp, error) {
	out := new(RetryCreateClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/RetryCreateClusterTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CheckCloudKubeConfig(ctx context.Context, in *KubeConfigReq, opts ...grpc.CallOption) (*KubeConfigResp, error) {
	out := new(KubeConfigResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CheckCloudKubeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CheckCloudKubeConfigConnect(ctx context.Context, in *KubeConfigConnectReq, opts ...grpc.CallOption) (*KubeConfigConnectResp, error) {
	out := new(KubeConfigConnectResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CheckCloudKubeConfigConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ImportCluster(ctx context.Context, in *ImportClusterReq, opts ...grpc.CallOption) (*ImportClusterResp, error) {
	out := new(ImportClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ImportCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateCluster(ctx context.Context, in *UpdateClusterReq, opts ...grpc.CallOption) (*UpdateClusterResp, error) {
	out := new(UpdateClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) AddNodesToCluster(ctx context.Context, in *AddNodesRequest, opts ...grpc.CallOption) (*AddNodesResponse, error) {
	out := new(AddNodesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/AddNodesToCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) AddNodesToClusterV2(ctx context.Context, in *AddNodesV2Request, opts ...grpc.CallOption) (*AddNodesV2Response, error) {
	out := new(AddNodesV2Response)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/AddNodesToClusterV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteNodesFromCluster(ctx context.Context, in *DeleteNodesRequest, opts ...grpc.CallOption) (*DeleteNodesResponse, error) {
	out := new(DeleteNodesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteNodesFromCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) BatchDeleteNodesFromCluster(ctx context.Context, in *BatchDeleteClusterNodesRequest, opts ...grpc.CallOption) (*BatchDeleteClusterNodesResponse, error) {
	out := new(BatchDeleteClusterNodesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/BatchDeleteNodesFromCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetClustersMetaData(ctx context.Context, in *GetClustersMetaDataRequest, opts ...grpc.CallOption) (*GetClustersMetaDataResponse, error) {
	out := new(GetClustersMetaDataResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetClustersMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListNodesInCluster(ctx context.Context, in *ListNodesInClusterRequest, opts ...grpc.CallOption) (*ListNodesInClusterResponse, error) {
	out := new(ListNodesInClusterResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListNodesInCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListMastersInCluster(ctx context.Context, in *ListMastersInClusterRequest, opts ...grpc.CallOption) (*ListMastersInClusterResponse, error) {
	out := new(ListMastersInClusterResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListMastersInCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteCluster(ctx context.Context, in *DeleteClusterReq, opts ...grpc.CallOption) (*DeleteClusterResp, error) {
	out := new(DeleteClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetCluster(ctx context.Context, in *GetClusterReq, opts ...grpc.CallOption) (*GetClusterResp, error) {
	out := new(GetClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetClusterSharedProject(ctx context.Context, in *GetClusterSharedProjectRequest, opts ...grpc.CallOption) (*GetClusterSharedProjectResponse, error) {
	out := new(GetClusterSharedProjectResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetClusterSharedProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListProjectCluster(ctx context.Context, in *ListProjectClusterReq, opts ...grpc.CallOption) (*ListProjectClusterResp, error) {
	out := new(ListProjectClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListProjectCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListBusinessCluster(ctx context.Context, in *ListBusinessClusterReq, opts ...grpc.CallOption) (*ListBusinessClusterResp, error) {
	out := new(ListBusinessClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListBusinessCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCluster(ctx context.Context, in *ListClusterReq, opts ...grpc.CallOption) (*ListClusterResp, error) {
	out := new(ListClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListClusterV2(ctx context.Context, in *ListClusterV2Req, opts ...grpc.CallOption) (*ListClusterV2Resp, error) {
	out := new(ListClusterV2Resp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListClusterV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCommonCluster(ctx context.Context, in *ListCommonClusterReq, opts ...grpc.CallOption) (*ListCommonClusterResp, error) {
	out := new(ListCommonClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCommonCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) AddSubnetToCluster(ctx context.Context, in *AddSubnetToClusterReq, opts ...grpc.CallOption) (*AddSubnetToClusterResp, error) {
	out := new(AddSubnetToClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/AddSubnetToCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) SwitchClusterUnderlayNetwork(ctx context.Context, in *SwitchClusterUnderlayNetworkReq, opts ...grpc.CallOption) (*SwitchClusterUnderlayNetworkResp, error) {
	out := new(SwitchClusterUnderlayNetworkResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/SwitchClusterUnderlayNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CreateVirtualCluster(ctx context.Context, in *CreateVirtualClusterReq, opts ...grpc.CallOption) (*CreateVirtualClusterResp, error) {
	out := new(CreateVirtualClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateVirtualCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteVirtualCluster(ctx context.Context, in *DeleteVirtualClusterReq, opts ...grpc.CallOption) (*DeleteVirtualClusterResp, error) {
	out := new(DeleteVirtualClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteVirtualCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateVirtualClusterQuota(ctx context.Context, in *UpdateVirtualClusterQuotaReq, opts ...grpc.CallOption) (*UpdateVirtualClusterQuotaResp, error) {
	out := new(UpdateVirtualClusterQuotaResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateVirtualClusterQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoResponse, error) {
	out := new(GetNodeInfoResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) RecordNodeInfo(ctx context.Context, in *RecordNodeInfoRequest, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/RecordNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error) {
	out := new(UpdateNodeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateClusterModule(ctx context.Context, in *UpdateClusterModuleRequest, opts ...grpc.CallOption) (*UpdateClusterModuleResponse, error) {
	out := new(UpdateClusterModuleResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateClusterModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CheckNodeInCluster(ctx context.Context, in *CheckNodesRequest, opts ...grpc.CallOption) (*CheckNodesResponse, error) {
	out := new(CheckNodesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CheckNodeInCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CordonNode(ctx context.Context, in *CordonNodeRequest, opts ...grpc.CallOption) (*CordonNodeResponse, error) {
	out := new(CordonNodeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CordonNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UnCordonNode(ctx context.Context, in *UnCordonNodeRequest, opts ...grpc.CallOption) (*UnCordonNodeResponse, error) {
	out := new(UnCordonNodeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UnCordonNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DrainNode(ctx context.Context, in *DrainNodeRequest, opts ...grpc.CallOption) (*DrainNodeResponse, error) {
	out := new(DrainNodeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DrainNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CheckDrainNode(ctx context.Context, in *CheckDrainNodeRequest, opts ...grpc.CallOption) (*CheckDrainNodeResponse, error) {
	out := new(CheckDrainNodeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CheckDrainNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateNodeLabels(ctx context.Context, in *UpdateNodeLabelsRequest, opts ...grpc.CallOption) (*UpdateNodeLabelsResponse, error) {
	out := new(UpdateNodeLabelsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateNodeLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateNodeAnnotations(ctx context.Context, in *UpdateNodeAnnotationsRequest, opts ...grpc.CallOption) (*UpdateNodeAnnotationsResponse, error) {
	out := new(UpdateNodeAnnotationsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateNodeAnnotations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateNodeTaints(ctx context.Context, in *UpdateNodeTaintsRequest, opts ...grpc.CallOption) (*UpdateNodeTaintsResponse, error) {
	out := new(UpdateNodeTaintsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateNodeTaints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetClusterCredential(ctx context.Context, in *GetClusterCredentialReq, opts ...grpc.CallOption) (*GetClusterCredentialResp, error) {
	out := new(GetClusterCredentialResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetClusterCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateClusterCredential(ctx context.Context, in *UpdateClusterCredentialReq, opts ...grpc.CallOption) (*UpdateClusterCredentialResp, error) {
	out := new(UpdateClusterCredentialResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateClusterCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateClusterKubeConfig(ctx context.Context, in *UpdateClusterKubeConfigReq, opts ...grpc.CallOption) (*UpdateClusterKubeConfigResp, error) {
	out := new(UpdateClusterKubeConfigResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateClusterKubeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteClusterCredential(ctx context.Context, in *DeleteClusterCredentialReq, opts ...grpc.CallOption) (*DeleteClusterCredentialResp, error) {
	out := new(DeleteClusterCredentialResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteClusterCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListClusterCredential(ctx context.Context, in *ListClusterCredentialReq, opts ...grpc.CallOption) (*ListClusterCredentialResp, error) {
	out := new(ListClusterCredentialResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListClusterCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) InitFederationCluster(ctx context.Context, in *InitFederationClusterReq, opts ...grpc.CallOption) (*InitFederationClusterResp, error) {
	out := new(InitFederationClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/InitFederationCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) AddFederatedCluster(ctx context.Context, in *AddFederatedClusterReq, opts ...grpc.CallOption) (*AddFederatedClusterResp, error) {
	out := new(AddFederatedClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/AddFederatedCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CreateCloud(ctx context.Context, in *CreateCloudRequest, opts ...grpc.CallOption) (*CreateCloudResponse, error) {
	out := new(CreateCloudResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateCloud(ctx context.Context, in *UpdateCloudRequest, opts ...grpc.CallOption) (*UpdateCloudResponse, error) {
	out := new(UpdateCloudResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteCloud(ctx context.Context, in *DeleteCloudRequest, opts ...grpc.CallOption) (*DeleteCloudResponse, error) {
	out := new(DeleteCloudResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetCloud(ctx context.Context, in *GetCloudRequest, opts ...grpc.CallOption) (*GetCloudResponse, error) {
	out := new(GetCloudResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloud(ctx context.Context, in *ListCloudRequest, opts ...grpc.CallOption) (*ListCloudResponse, error) {
	out := new(ListCloudResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CreateCloudVPC(ctx context.Context, in *CreateCloudVPCRequest, opts ...grpc.CallOption) (*CreateCloudVPCResponse, error) {
	out := new(CreateCloudVPCResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateCloudVPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateCloudVPC(ctx context.Context, in *UpdateCloudVPCRequest, opts ...grpc.CallOption) (*UpdateCloudVPCResponse, error) {
	out := new(UpdateCloudVPCResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateCloudVPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteCloudVPC(ctx context.Context, in *DeleteCloudVPCRequest, opts ...grpc.CallOption) (*DeleteCloudVPCResponse, error) {
	out := new(DeleteCloudVPCResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteCloudVPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudVPC(ctx context.Context, in *ListCloudVPCRequest, opts ...grpc.CallOption) (*ListCloudVPCResponse, error) {
	out := new(ListCloudVPCResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudVPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudRegions(ctx context.Context, in *ListCloudRegionsRequest, opts ...grpc.CallOption) (*ListCloudRegionsResponse, error) {
	out := new(ListCloudRegionsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetVPCCidr(ctx context.Context, in *GetVPCCidrRequest, opts ...grpc.CallOption) (*GetVPCCidrResponse, error) {
	out := new(GetVPCCidrResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetVPCCidr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CreateNodeGroup(ctx context.Context, in *CreateNodeGroupRequest, opts ...grpc.CallOption) (*CreateNodeGroupResponse, error) {
	out := new(CreateNodeGroupResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateNodeGroup(ctx context.Context, in *UpdateNodeGroupRequest, opts ...grpc.CallOption) (*UpdateNodeGroupResponse, error) {
	out := new(UpdateNodeGroupResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteNodeGroup(ctx context.Context, in *DeleteNodeGroupRequest, opts ...grpc.CallOption) (*DeleteNodeGroupResponse, error) {
	out := new(DeleteNodeGroupResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetNodeGroup(ctx context.Context, in *GetNodeGroupRequest, opts ...grpc.CallOption) (*GetNodeGroupResponse, error) {
	out := new(GetNodeGroupResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListClusterNodeGroup(ctx context.Context, in *ListClusterNodeGroupRequest, opts ...grpc.CallOption) (*ListClusterNodeGroupResponse, error) {
	out := new(ListClusterNodeGroupResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListClusterNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListNodeGroup(ctx context.Context, in *ListNodeGroupRequest, opts ...grpc.CallOption) (*ListNodeGroupResponse, error) {
	out := new(ListNodeGroupResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) RecommendNodeGroupConf(ctx context.Context, in *RecommendNodeGroupConfReq, opts ...grpc.CallOption) (*RecommendNodeGroupConfResp, error) {
	out := new(RecommendNodeGroupConfResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/RecommendNodeGroupConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) MoveNodesToGroup(ctx context.Context, in *MoveNodesToGroupRequest, opts ...grpc.CallOption) (*MoveNodesToGroupResponse, error) {
	out := new(MoveNodesToGroupResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/MoveNodesToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) RemoveNodesFromGroup(ctx context.Context, in *RemoveNodesFromGroupRequest, opts ...grpc.CallOption) (*RemoveNodesFromGroupResponse, error) {
	out := new(RemoveNodesFromGroupResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/RemoveNodesFromGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CleanNodesInGroup(ctx context.Context, in *CleanNodesInGroupRequest, opts ...grpc.CallOption) (*CleanNodesInGroupResponse, error) {
	out := new(CleanNodesInGroupResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CleanNodesInGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CleanNodesInGroupV2(ctx context.Context, in *CleanNodesInGroupV2Request, opts ...grpc.CallOption) (*CleanNodesInGroupV2Response, error) {
	out := new(CleanNodesInGroupV2Response)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CleanNodesInGroupV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListNodesInGroup(ctx context.Context, in *GetNodeGroupRequest, opts ...grpc.CallOption) (*ListNodesInGroupResponse, error) {
	out := new(ListNodesInGroupResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListNodesInGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListNodesInGroupV2(ctx context.Context, in *ListNodesInGroupV2Request, opts ...grpc.CallOption) (*ListNodesInGroupV2Response, error) {
	out := new(ListNodesInGroupV2Response)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListNodesInGroupV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateGroupDesiredNode(ctx context.Context, in *UpdateGroupDesiredNodeRequest, opts ...grpc.CallOption) (*UpdateGroupDesiredNodeResponse, error) {
	out := new(UpdateGroupDesiredNodeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateGroupDesiredNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateGroupDesiredSize(ctx context.Context, in *UpdateGroupDesiredSizeRequest, opts ...grpc.CallOption) (*UpdateGroupDesiredSizeResponse, error) {
	out := new(UpdateGroupDesiredSizeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateGroupDesiredSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateGroupMinMaxSize(ctx context.Context, in *UpdateGroupMinMaxSizeRequest, opts ...grpc.CallOption) (*UpdateGroupMinMaxSizeResponse, error) {
	out := new(UpdateGroupMinMaxSizeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateGroupMinMaxSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateGroupAsTimeRange(ctx context.Context, in *UpdateGroupAsTimeRangeRequest, opts ...grpc.CallOption) (*UpdateGroupAsTimeRangeResponse, error) {
	out := new(UpdateGroupAsTimeRangeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateGroupAsTimeRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetExternalNodeScriptByGroupID(ctx context.Context, in *GetExternalNodeScriptRequest, opts ...grpc.CallOption) (*GetExternalNodeScriptResponse, error) {
	out := new(GetExternalNodeScriptResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetExternalNodeScriptByGroupID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) TransNodeGroupToNodeTemplate(ctx context.Context, in *TransNodeGroupToNodeTemplateRequest, opts ...grpc.CallOption) (*TransNodeGroupToNodeTemplateResponse, error) {
	out := new(TransNodeGroupToNodeTemplateResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/TransNodeGroupToNodeTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) EnableNodeGroupAutoScale(ctx context.Context, in *EnableNodeGroupAutoScaleRequest, opts ...grpc.CallOption) (*EnableNodeGroupAutoScaleResponse, error) {
	out := new(EnableNodeGroupAutoScaleResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/EnableNodeGroupAutoScale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DisableNodeGroupAutoScale(ctx context.Context, in *DisableNodeGroupAutoScaleRequest, opts ...grpc.CallOption) (*DisableNodeGroupAutoScaleResponse, error) {
	out := new(DisableNodeGroupAutoScaleResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DisableNodeGroupAutoScale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetProviderResourceUsage(ctx context.Context, in *GetProviderResourceUsageRequest, opts ...grpc.CallOption) (*GetProviderResourceUsageResponse, error) {
	out := new(GetProviderResourceUsageResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetProviderResourceUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetProjectResourceQuotaUsage(ctx context.Context, in *GetProjectResourceQuotaUsageRequest, opts ...grpc.CallOption) (*GetProjectResourceQuotaUsageResponse, error) {
	out := new(GetProjectResourceQuotaUsageResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetProjectResourceQuotaUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) RetryTask(ctx context.Context, in *RetryTaskRequest, opts ...grpc.CallOption) (*RetryTaskResponse, error) {
	out := new(RetryTaskResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/RetryTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) SkipTask(ctx context.Context, in *SkipTaskRequest, opts ...grpc.CallOption) (*SkipTaskResponse, error) {
	out := new(SkipTaskResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/SkipTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error) {
	out := new(UpdateTaskResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error) {
	out := new(DeleteTaskResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*ListTaskResponse, error) {
	out := new(ListTaskResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CreateAutoScalingOption(ctx context.Context, in *CreateAutoScalingOptionRequest, opts ...grpc.CallOption) (*CreateAutoScalingOptionResponse, error) {
	out := new(CreateAutoScalingOptionResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateAutoScalingOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateAutoScalingOption(ctx context.Context, in *UpdateAutoScalingOptionRequest, opts ...grpc.CallOption) (*UpdateAutoScalingOptionResponse, error) {
	out := new(UpdateAutoScalingOptionResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateAutoScalingOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateAsOptionDeviceProvider(ctx context.Context, in *UpdateAsOptionDeviceProviderRequest, opts ...grpc.CallOption) (*UpdateAsOptionDeviceProviderResponse, error) {
	out := new(UpdateAsOptionDeviceProviderResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateAsOptionDeviceProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteAutoScalingOption(ctx context.Context, in *DeleteAutoScalingOptionRequest, opts ...grpc.CallOption) (*DeleteAutoScalingOptionResponse, error) {
	out := new(DeleteAutoScalingOptionResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteAutoScalingOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetAutoScalingOption(ctx context.Context, in *GetAutoScalingOptionRequest, opts ...grpc.CallOption) (*GetAutoScalingOptionResponse, error) {
	out := new(GetAutoScalingOptionResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetAutoScalingOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListAutoScalingOption(ctx context.Context, in *ListAutoScalingOptionRequest, opts ...grpc.CallOption) (*ListAutoScalingOptionResponse, error) {
	out := new(ListAutoScalingOptionResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListAutoScalingOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateAutoScalingStatus(ctx context.Context, in *UpdateAutoScalingStatusRequest, opts ...grpc.CallOption) (*UpdateAutoScalingStatusResponse, error) {
	out := new(UpdateAutoScalingStatusResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateAutoScalingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) SyncAutoScalingOption(ctx context.Context, in *SyncAutoScalingOptionRequest, opts ...grpc.CallOption) (*SyncAutoScalingOptionResponse, error) {
	out := new(SyncAutoScalingOptionResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/SyncAutoScalingOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CreateNodeTemplate(ctx context.Context, in *CreateNodeTemplateRequest, opts ...grpc.CallOption) (*CreateNodeTemplateResponse, error) {
	out := new(CreateNodeTemplateResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateNodeTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateNodeTemplate(ctx context.Context, in *UpdateNodeTemplateRequest, opts ...grpc.CallOption) (*UpdateNodeTemplateResponse, error) {
	out := new(UpdateNodeTemplateResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateNodeTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteNodeTemplate(ctx context.Context, in *DeleteNodeTemplateRequest, opts ...grpc.CallOption) (*DeleteNodeTemplateResponse, error) {
	out := new(DeleteNodeTemplateResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteNodeTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListNodeTemplate(ctx context.Context, in *ListNodeTemplateRequest, opts ...grpc.CallOption) (*ListNodeTemplateResponse, error) {
	out := new(ListNodeTemplateResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListNodeTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetNodeTemplate(ctx context.Context, in *GetNodeTemplateRequest, opts ...grpc.CallOption) (*GetNodeTemplateResponse, error) {
	out := new(GetNodeTemplateResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetNodeTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CreateNotifyTemplate(ctx context.Context, in *CreateNotifyTemplateRequest, opts ...grpc.CallOption) (*CreateNotifyTemplateResponse, error) {
	out := new(CreateNotifyTemplateResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateNotifyTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteNotifyTemplate(ctx context.Context, in *DeleteNotifyTemplateRequest, opts ...grpc.CallOption) (*DeleteNotifyTemplateResponse, error) {
	out := new(DeleteNotifyTemplateResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteNotifyTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListNotifyTemplate(ctx context.Context, in *ListNotifyTemplateRequest, opts ...grpc.CallOption) (*ListNotifyTemplateResponse, error) {
	out := new(ListNotifyTemplateResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListNotifyTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CreateCloudAccount(ctx context.Context, in *CreateCloudAccountRequest, opts ...grpc.CallOption) (*CreateCloudAccountResponse, error) {
	out := new(CreateCloudAccountResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateCloudAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateCloudAccount(ctx context.Context, in *UpdateCloudAccountRequest, opts ...grpc.CallOption) (*UpdateCloudAccountResponse, error) {
	out := new(UpdateCloudAccountResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateCloudAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) MigrateCloudAccount(ctx context.Context, in *MigrateCloudAccountRequest, opts ...grpc.CallOption) (*MigrateCloudAccountResponse, error) {
	out := new(MigrateCloudAccountResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/MigrateCloudAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteCloudAccount(ctx context.Context, in *DeleteCloudAccountRequest, opts ...grpc.CallOption) (*DeleteCloudAccountResponse, error) {
	out := new(DeleteCloudAccountResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteCloudAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudAccount(ctx context.Context, in *ListCloudAccountRequest, opts ...grpc.CallOption) (*ListCloudAccountResponse, error) {
	out := new(ListCloudAccountResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudAccountToPerm(ctx context.Context, in *ListCloudAccountPermRequest, opts ...grpc.CallOption) (*ListCloudAccountPermResponse, error) {
	out := new(ListCloudAccountPermResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudAccountToPerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) VerifyCloudAccount(ctx context.Context, in *VerifyCloudAccountRequest, opts ...grpc.CallOption) (*VerifyCloudAccountResponse, error) {
	out := new(VerifyCloudAccountResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/VerifyCloudAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetServiceRoles(ctx context.Context, in *GetServiceRolesRequest, opts ...grpc.CallOption) (*GetServiceRolesResponse, error) {
	out := new(GetServiceRolesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetServiceRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetResourceGroups(ctx context.Context, in *GetResourceGroupsRequest, opts ...grpc.CallOption) (*GetResourceGroupsResponse, error) {
	out := new(GetResourceGroupsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetResourceGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetCloudRegions(ctx context.Context, in *GetCloudRegionsRequest, opts ...grpc.CallOption) (*GetCloudRegionsResponse, error) {
	out := new(GetCloudRegionsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetCloudRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetCloudRegionZones(ctx context.Context, in *GetCloudRegionZonesRequest, opts ...grpc.CallOption) (*GetCloudRegionZonesResponse, error) {
	out := new(GetCloudRegionZonesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetCloudRegionZones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudRegionCluster(ctx context.Context, in *ListCloudRegionClusterRequest, opts ...grpc.CallOption) (*ListCloudRegionClusterResponse, error) {
	out := new(ListCloudRegionClusterResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudRegionCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudVpcs(ctx context.Context, in *ListCloudVpcsRequest, opts ...grpc.CallOption) (*ListCloudVpcsResponse, error) {
	out := new(ListCloudVpcsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudVpcs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CheckCidrConflictFromVpc(ctx context.Context, in *CheckCidrConflictFromVpcRequest, opts ...grpc.CallOption) (*CheckCidrConflictFromVpcResponse, error) {
	out := new(CheckCidrConflictFromVpcResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CheckCidrConflictFromVpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudSubnets(ctx context.Context, in *ListCloudSubnetsRequest, opts ...grpc.CallOption) (*ListCloudSubnetsResponse, error) {
	out := new(ListCloudSubnetsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudSubnets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudSecurityGroups(ctx context.Context, in *ListCloudSecurityGroupsRequest, opts ...grpc.CallOption) (*ListCloudSecurityGroupsResponse, error) {
	out := new(ListCloudSecurityGroupsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudSecurityGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListKeypairs(ctx context.Context, in *ListKeyPairsRequest, opts ...grpc.CallOption) (*ListKeyPairsResponse, error) {
	out := new(ListKeyPairsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListKeypairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudInstanceTypes(ctx context.Context, in *ListCloudInstanceTypeRequest, opts ...grpc.CallOption) (*ListCloudInstanceTypeResponse, error) {
	out := new(ListCloudInstanceTypeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudInstanceTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudDiskTypes(ctx context.Context, in *ListCloudDiskTypesRequest, opts ...grpc.CallOption) (*ListCloudDiskTypesResponse, error) {
	out := new(ListCloudDiskTypesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudDiskTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetMasterSuggestedMachines(ctx context.Context, in *GetMasterSuggestedMachinesRequest, opts ...grpc.CallOption) (*GetMasterSuggestedMachinesResponse, error) {
	out := new(GetMasterSuggestedMachinesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetMasterSuggestedMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudProjects(ctx context.Context, in *ListCloudProjectsRequest, opts ...grpc.CallOption) (*ListCloudProjectsResponse, error) {
	out := new(ListCloudProjectsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudOsImage(ctx context.Context, in *ListCloudOsImageRequest, opts ...grpc.CallOption) (*ListCloudOsImageResponse, error) {
	out := new(ListCloudOsImageResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudOsImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudInstances(ctx context.Context, in *ListCloudInstancesRequest, opts ...grpc.CallOption) (*ListCloudInstancesResponse, error) {
	out := new(ListCloudInstancesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudInstancesByPost(ctx context.Context, in *ListCloudInstancesRequest, opts ...grpc.CallOption) (*ListCloudInstancesResponse, error) {
	out := new(ListCloudInstancesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudInstancesByPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetCloudAccountType(ctx context.Context, in *GetCloudAccountTypeRequest, opts ...grpc.CallOption) (*GetCloudAccountTypeResponse, error) {
	out := new(GetCloudAccountTypeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetCloudAccountType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetCloudBandwidthPackages(ctx context.Context, in *GetCloudBandwidthPackagesRequest, opts ...grpc.CallOption) (*GetCloudBandwidthPackagesResponse, error) {
	out := new(GetCloudBandwidthPackagesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetCloudBandwidthPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudRuntimeInfo(ctx context.Context, in *ListCloudRuntimeInfoRequest, opts ...grpc.CallOption) (*ListCloudRuntimeInfoResponse, error) {
	out := new(ListCloudRuntimeInfoResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudRuntimeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListOperationLogs(ctx context.Context, in *ListOperationLogsRequest, opts ...grpc.CallOption) (*ListOperationLogsResponse, error) {
	out := new(ListOperationLogsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListOperationLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListOperationLogsV2(ctx context.Context, in *ListOperationLogsRequest, opts ...grpc.CallOption) (*ListOperationLogsResponse, error) {
	out := new(ListOperationLogsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListOperationLogsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListTaskStepLogs(ctx context.Context, in *ListTaskStepLogsRequest, opts ...grpc.CallOption) (*ListTaskStepLogsResponse, error) {
	out := new(ListTaskStepLogsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListTaskStepLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListTaskRecords(ctx context.Context, in *ListTaskRecordsRequest, opts ...grpc.CallOption) (*ListTaskRecordsResponse, error) {
	out := new(ListTaskRecordsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListTaskRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CleanDbHistoryData(ctx context.Context, in *CleanDbHistoryDataRequest, opts ...grpc.CallOption) (*CleanDbHistoryDataResponse, error) {
	out := new(CleanDbHistoryDataResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CleanDbHistoryData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListResourceSchema(ctx context.Context, in *ListResourceSchemaRequest, opts ...grpc.CallOption) (*CommonListResp, error) {
	out := new(CommonListResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListResourceSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetResourceSchema(ctx context.Context, in *GetResourceSchemaRequest, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetResourceSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) QueryPermByActionID(ctx context.Context, in *QueryPermByActionIDRequest, opts ...grpc.CallOption) (*QueryPermByActionIDResponse, error) {
	out := new(QueryPermByActionIDResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/QueryPermByActionID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListBKCloud(ctx context.Context, in *ListBKCloudRequest, opts ...grpc.CallOption) (*CommonListResp, error) {
	out := new(CommonListResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListBKCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCCTopology(ctx context.Context, in *ListCCTopologyRequest, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCCTopology", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetBkSopsTemplateList(ctx context.Context, in *GetBkSopsTemplateListRequest, opts ...grpc.CallOption) (*GetBkSopsTemplateListResponse, error) {
	out := new(GetBkSopsTemplateListResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetBkSopsTemplateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetBkSopsTemplateInfo(ctx context.Context, in *GetBkSopsTemplateInfoRequest, opts ...grpc.CallOption) (*GetBkSopsTemplateInfoResponse, error) {
	out := new(GetBkSopsTemplateInfoResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetBkSopsTemplateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetInnerTemplateValues(ctx context.Context, in *GetInnerTemplateValuesRequest, opts ...grpc.CallOption) (*GetInnerTemplateValuesResponse, error) {
	out := new(GetInnerTemplateValuesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetInnerTemplateValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DebugBkSopsTask(ctx context.Context, in *DebugBkSopsTaskRequest, opts ...grpc.CallOption) (*DebugBkSopsTaskResponse, error) {
	out := new(DebugBkSopsTaskResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DebugBkSopsTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetBatchCustomSetting(ctx context.Context, in *GetBatchCustomSettingRequest, opts ...grpc.CallOption) (*GetBatchCustomSettingResponse, error) {
	out := new(GetBatchCustomSettingResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetBatchCustomSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetBizTopologyHost(ctx context.Context, in *GetBizTopologyHostRequest, opts ...grpc.CallOption) (*GetBizTopologyHostResponse, error) {
	out := new(GetBizTopologyHostResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetBizTopologyHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetTopologyNodes(ctx context.Context, in *GetTopologyNodesRequest, opts ...grpc.CallOption) (*GetTopologyNodesResponse, error) {
	out := new(GetTopologyNodesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetTopologyNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetTopologyHostIdsNodes(ctx context.Context, in *GetTopologyHostIdsNodesRequest, opts ...grpc.CallOption) (*GetTopologyHostIdsNodesResponse, error) {
	out := new(GetTopologyHostIdsNodesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetTopologyHostIdsNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetHostsDetails(ctx context.Context, in *GetHostsDetailsRequest, opts ...grpc.CallOption) (*GetHostsDetailsResponse, error) {
	out := new(GetHostsDetailsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetHostsDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetScopeHostCheck(ctx context.Context, in *GetScopeHostCheckRequest, opts ...grpc.CallOption) (*GetScopeHostCheckResponse, error) {
	out := new(GetScopeHostCheckResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetScopeHostCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CreateCloudModuleFlag(ctx context.Context, in *CreateCloudModuleFlagRequest, opts ...grpc.CallOption) (*CreateCloudModuleFlagResponse, error) {
	out := new(CreateCloudModuleFlagResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateCloudModuleFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateCloudModuleFlag(ctx context.Context, in *UpdateCloudModuleFlagRequest, opts ...grpc.CallOption) (*UpdateCloudModuleFlagResponse, error) {
	out := new(UpdateCloudModuleFlagResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateCloudModuleFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteCloudModuleFlag(ctx context.Context, in *DeleteCloudModuleFlagRequest, opts ...grpc.CallOption) (*DeleteCloudModuleFlagResponse, error) {
	out := new(DeleteCloudModuleFlagResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteCloudModuleFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudModuleFlag(ctx context.Context, in *ListCloudModuleFlagRequest, opts ...grpc.CallOption) (*ListCloudModuleFlagResponse, error) {
	out := new(ListCloudModuleFlagResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudModuleFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudNodePublicPrefix(ctx context.Context, in *ListCloudNodePublicPrefixRequest, opts ...grpc.CallOption) (*ListCloudNodePublicPrefixResponse, error) {
	out := new(ListCloudNodePublicPrefixResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudNodePublicPrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CreateTemplateConfig(ctx context.Context, in *CreateTemplateConfigRequest, opts ...grpc.CallOption) (*CreateTemplateConfigResponse, error) {
	out := new(CreateTemplateConfigResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateTemplateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteTemplateConfig(ctx context.Context, in *DeleteTemplateConfigRequest, opts ...grpc.CallOption) (*DeleteTemplateConfigResponse, error) {
	out := new(DeleteTemplateConfigResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteTemplateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListTemplateConfig(ctx context.Context, in *ListTemplateConfigRequest, opts ...grpc.CallOption) (*ListTemplateConfigResponse, error) {
	out := new(ListTemplateConfigResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListTemplateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateTemplateConfig(ctx context.Context, in *UpdateTemplateConfigRequest, opts ...grpc.CallOption) (*UpdateTemplateConfigResponse, error) {
	out := new(UpdateTemplateConfigResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateTemplateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterManagerServer is the server API for ClusterManager service.
type ClusterManagerServer interface {
	// * cluster management
	CreateCluster(context.Context, *CreateClusterReq) (*CreateClusterResp, error)
	RetryCreateClusterTask(context.Context, *RetryCreateClusterReq) (*RetryCreateClusterResp, error)
	CheckCloudKubeConfig(context.Context, *KubeConfigReq) (*KubeConfigResp, error)
	CheckCloudKubeConfigConnect(context.Context, *KubeConfigConnectReq) (*KubeConfigConnectResp, error)
	ImportCluster(context.Context, *ImportClusterReq) (*ImportClusterResp, error)
	UpdateCluster(context.Context, *UpdateClusterReq) (*UpdateClusterResp, error)
	AddNodesToCluster(context.Context, *AddNodesRequest) (*AddNodesResponse, error)
	AddNodesToClusterV2(context.Context, *AddNodesV2Request) (*AddNodesV2Response, error)
	DeleteNodesFromCluster(context.Context, *DeleteNodesRequest) (*DeleteNodesResponse, error)
	BatchDeleteNodesFromCluster(context.Context, *BatchDeleteClusterNodesRequest) (*BatchDeleteClusterNodesResponse, error)
	GetClustersMetaData(context.Context, *GetClustersMetaDataRequest) (*GetClustersMetaDataResponse, error)
	ListNodesInCluster(context.Context, *ListNodesInClusterRequest) (*ListNodesInClusterResponse, error)
	ListMastersInCluster(context.Context, *ListMastersInClusterRequest) (*ListMastersInClusterResponse, error)
	DeleteCluster(context.Context, *DeleteClusterReq) (*DeleteClusterResp, error)
	GetCluster(context.Context, *GetClusterReq) (*GetClusterResp, error)
	GetClusterSharedProject(context.Context, *GetClusterSharedProjectRequest) (*GetClusterSharedProjectResponse, error)
	ListProjectCluster(context.Context, *ListProjectClusterReq) (*ListProjectClusterResp, error)
	ListBusinessCluster(context.Context, *ListBusinessClusterReq) (*ListBusinessClusterResp, error)
	ListCluster(context.Context, *ListClusterReq) (*ListClusterResp, error)
	ListClusterV2(context.Context, *ListClusterV2Req) (*ListClusterV2Resp, error)
	ListCommonCluster(context.Context, *ListCommonClusterReq) (*ListCommonClusterResp, error)
	AddSubnetToCluster(context.Context, *AddSubnetToClusterReq) (*AddSubnetToClusterResp, error)
	SwitchClusterUnderlayNetwork(context.Context, *SwitchClusterUnderlayNetworkReq) (*SwitchClusterUnderlayNetworkResp, error)
	CreateVirtualCluster(context.Context, *CreateVirtualClusterReq) (*CreateVirtualClusterResp, error)
	DeleteVirtualCluster(context.Context, *DeleteVirtualClusterReq) (*DeleteVirtualClusterResp, error)
	UpdateVirtualClusterQuota(context.Context, *UpdateVirtualClusterQuotaReq) (*UpdateVirtualClusterQuotaResp, error)
	// * node management
	GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	GetNodeInfo(context.Context, *GetNodeInfoRequest) (*GetNodeInfoResponse, error)
	RecordNodeInfo(context.Context, *RecordNodeInfoRequest) (*CommonResp, error)
	UpdateNode(context.Context, *UpdateNodeRequest) (*UpdateNodeResponse, error)
	UpdateClusterModule(context.Context, *UpdateClusterModuleRequest) (*UpdateClusterModuleResponse, error)
	CheckNodeInCluster(context.Context, *CheckNodesRequest) (*CheckNodesResponse, error)
	CordonNode(context.Context, *CordonNodeRequest) (*CordonNodeResponse, error)
	UnCordonNode(context.Context, *UnCordonNodeRequest) (*UnCordonNodeResponse, error)
	DrainNode(context.Context, *DrainNodeRequest) (*DrainNodeResponse, error)
	CheckDrainNode(context.Context, *CheckDrainNodeRequest) (*CheckDrainNodeResponse, error)
	UpdateNodeLabels(context.Context, *UpdateNodeLabelsRequest) (*UpdateNodeLabelsResponse, error)
	UpdateNodeAnnotations(context.Context, *UpdateNodeAnnotationsRequest) (*UpdateNodeAnnotationsResponse, error)
	UpdateNodeTaints(context.Context, *UpdateNodeTaintsRequest) (*UpdateNodeTaintsResponse, error)
	// * cluster credential management
	GetClusterCredential(context.Context, *GetClusterCredentialReq) (*GetClusterCredentialResp, error)
	UpdateClusterCredential(context.Context, *UpdateClusterCredentialReq) (*UpdateClusterCredentialResp, error)
	UpdateClusterKubeConfig(context.Context, *UpdateClusterKubeConfigReq) (*UpdateClusterKubeConfigResp, error)
	DeleteClusterCredential(context.Context, *DeleteClusterCredentialReq) (*DeleteClusterCredentialResp, error)
	ListClusterCredential(context.Context, *ListClusterCredentialReq) (*ListClusterCredentialResp, error)
	// * federation cluster management
	InitFederationCluster(context.Context, *InitFederationClusterReq) (*InitFederationClusterResp, error)
	AddFederatedCluster(context.Context, *AddFederatedClusterReq) (*AddFederatedClusterResp, error)
	// * Cloud information management *
	CreateCloud(context.Context, *CreateCloudRequest) (*CreateCloudResponse, error)
	UpdateCloud(context.Context, *UpdateCloudRequest) (*UpdateCloudResponse, error)
	DeleteCloud(context.Context, *DeleteCloudRequest) (*DeleteCloudResponse, error)
	GetCloud(context.Context, *GetCloudRequest) (*GetCloudResponse, error)
	ListCloud(context.Context, *ListCloudRequest) (*ListCloudResponse, error)
	// * Cloud VPC information management *
	CreateCloudVPC(context.Context, *CreateCloudVPCRequest) (*CreateCloudVPCResponse, error)
	UpdateCloudVPC(context.Context, *UpdateCloudVPCRequest) (*UpdateCloudVPCResponse, error)
	DeleteCloudVPC(context.Context, *DeleteCloudVPCRequest) (*DeleteCloudVPCResponse, error)
	ListCloudVPC(context.Context, *ListCloudVPCRequest) (*ListCloudVPCResponse, error)
	ListCloudRegions(context.Context, *ListCloudRegionsRequest) (*ListCloudRegionsResponse, error)
	GetVPCCidr(context.Context, *GetVPCCidrRequest) (*GetVPCCidrResponse, error)
	// * NodeGroup information management *
	CreateNodeGroup(context.Context, *CreateNodeGroupRequest) (*CreateNodeGroupResponse, error)
	UpdateNodeGroup(context.Context, *UpdateNodeGroupRequest) (*UpdateNodeGroupResponse, error)
	DeleteNodeGroup(context.Context, *DeleteNodeGroupRequest) (*DeleteNodeGroupResponse, error)
	GetNodeGroup(context.Context, *GetNodeGroupRequest) (*GetNodeGroupResponse, error)
	ListClusterNodeGroup(context.Context, *ListClusterNodeGroupRequest) (*ListClusterNodeGroupResponse, error)
	ListNodeGroup(context.Context, *ListNodeGroupRequest) (*ListNodeGroupResponse, error)
	RecommendNodeGroupConf(context.Context, *RecommendNodeGroupConfReq) (*RecommendNodeGroupConfResp, error)
	MoveNodesToGroup(context.Context, *MoveNodesToGroupRequest) (*MoveNodesToGroupResponse, error)
	RemoveNodesFromGroup(context.Context, *RemoveNodesFromGroupRequest) (*RemoveNodesFromGroupResponse, error)
	CleanNodesInGroup(context.Context, *CleanNodesInGroupRequest) (*CleanNodesInGroupResponse, error)
	CleanNodesInGroupV2(context.Context, *CleanNodesInGroupV2Request) (*CleanNodesInGroupV2Response, error)
	ListNodesInGroup(context.Context, *GetNodeGroupRequest) (*ListNodesInGroupResponse, error)
	ListNodesInGroupV2(context.Context, *ListNodesInGroupV2Request) (*ListNodesInGroupV2Response, error)
	UpdateGroupDesiredNode(context.Context, *UpdateGroupDesiredNodeRequest) (*UpdateGroupDesiredNodeResponse, error)
	UpdateGroupDesiredSize(context.Context, *UpdateGroupDesiredSizeRequest) (*UpdateGroupDesiredSizeResponse, error)
	UpdateGroupMinMaxSize(context.Context, *UpdateGroupMinMaxSizeRequest) (*UpdateGroupMinMaxSizeResponse, error)
	UpdateGroupAsTimeRange(context.Context, *UpdateGroupAsTimeRangeRequest) (*UpdateGroupAsTimeRangeResponse, error)
	GetExternalNodeScriptByGroupID(context.Context, *GetExternalNodeScriptRequest) (*GetExternalNodeScriptResponse, error)
	TransNodeGroupToNodeTemplate(context.Context, *TransNodeGroupToNodeTemplateRequest) (*TransNodeGroupToNodeTemplateResponse, error)
	EnableNodeGroupAutoScale(context.Context, *EnableNodeGroupAutoScaleRequest) (*EnableNodeGroupAutoScaleResponse, error)
	DisableNodeGroupAutoScale(context.Context, *DisableNodeGroupAutoScaleRequest) (*DisableNodeGroupAutoScaleResponse, error)
	GetProviderResourceUsage(context.Context, *GetProviderResourceUsageRequest) (*GetProviderResourceUsageResponse, error)
	GetProjectResourceQuotaUsage(context.Context, *GetProjectResourceQuotaUsageRequest) (*GetProjectResourceQuotaUsageResponse, error)
	// * Task information management *
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	RetryTask(context.Context, *RetryTaskRequest) (*RetryTaskResponse, error)
	SkipTask(context.Context, *SkipTaskRequest) (*SkipTaskResponse, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error)
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	ListTask(context.Context, *ListTaskRequest) (*ListTaskResponse, error)
	// * ClusterAutoScalingOption information management *
	CreateAutoScalingOption(context.Context, *CreateAutoScalingOptionRequest) (*CreateAutoScalingOptionResponse, error)
	UpdateAutoScalingOption(context.Context, *UpdateAutoScalingOptionRequest) (*UpdateAutoScalingOptionResponse, error)
	UpdateAsOptionDeviceProvider(context.Context, *UpdateAsOptionDeviceProviderRequest) (*UpdateAsOptionDeviceProviderResponse, error)
	DeleteAutoScalingOption(context.Context, *DeleteAutoScalingOptionRequest) (*DeleteAutoScalingOptionResponse, error)
	GetAutoScalingOption(context.Context, *GetAutoScalingOptionRequest) (*GetAutoScalingOptionResponse, error)
	ListAutoScalingOption(context.Context, *ListAutoScalingOptionRequest) (*ListAutoScalingOptionResponse, error)
	UpdateAutoScalingStatus(context.Context, *UpdateAutoScalingStatusRequest) (*UpdateAutoScalingStatusResponse, error)
	SyncAutoScalingOption(context.Context, *SyncAutoScalingOptionRequest) (*SyncAutoScalingOptionResponse, error)
	// Cloud NodeTemplate info management
	CreateNodeTemplate(context.Context, *CreateNodeTemplateRequest) (*CreateNodeTemplateResponse, error)
	UpdateNodeTemplate(context.Context, *UpdateNodeTemplateRequest) (*UpdateNodeTemplateResponse, error)
	DeleteNodeTemplate(context.Context, *DeleteNodeTemplateRequest) (*DeleteNodeTemplateResponse, error)
	ListNodeTemplate(context.Context, *ListNodeTemplateRequest) (*ListNodeTemplateResponse, error)
	GetNodeTemplate(context.Context, *GetNodeTemplateRequest) (*GetNodeTemplateResponse, error)
	// NotifyTemplate info management
	CreateNotifyTemplate(context.Context, *CreateNotifyTemplateRequest) (*CreateNotifyTemplateResponse, error)
	DeleteNotifyTemplate(context.Context, *DeleteNotifyTemplateRequest) (*DeleteNotifyTemplateResponse, error)
	ListNotifyTemplate(context.Context, *ListNotifyTemplateRequest) (*ListNotifyTemplateResponse, error)
	// Cloud Account information management
	CreateCloudAccount(context.Context, *CreateCloudAccountRequest) (*CreateCloudAccountResponse, error)
	UpdateCloudAccount(context.Context, *UpdateCloudAccountRequest) (*UpdateCloudAccountResponse, error)
	MigrateCloudAccount(context.Context, *MigrateCloudAccountRequest) (*MigrateCloudAccountResponse, error)
	DeleteCloudAccount(context.Context, *DeleteCloudAccountRequest) (*DeleteCloudAccountResponse, error)
	ListCloudAccount(context.Context, *ListCloudAccountRequest) (*ListCloudAccountResponse, error)
	ListCloudAccountToPerm(context.Context, *ListCloudAccountPermRequest) (*ListCloudAccountPermResponse, error)
	VerifyCloudAccount(context.Context, *VerifyCloudAccountRequest) (*VerifyCloudAccountResponse, error)
	// Cloud Resource management
	GetServiceRoles(context.Context, *GetServiceRolesRequest) (*GetServiceRolesResponse, error)
	GetResourceGroups(context.Context, *GetResourceGroupsRequest) (*GetResourceGroupsResponse, error)
	GetCloudRegions(context.Context, *GetCloudRegionsRequest) (*GetCloudRegionsResponse, error)
	GetCloudRegionZones(context.Context, *GetCloudRegionZonesRequest) (*GetCloudRegionZonesResponse, error)
	ListCloudRegionCluster(context.Context, *ListCloudRegionClusterRequest) (*ListCloudRegionClusterResponse, error)
	ListCloudVpcs(context.Context, *ListCloudVpcsRequest) (*ListCloudVpcsResponse, error)
	CheckCidrConflictFromVpc(context.Context, *CheckCidrConflictFromVpcRequest) (*CheckCidrConflictFromVpcResponse, error)
	ListCloudSubnets(context.Context, *ListCloudSubnetsRequest) (*ListCloudSubnetsResponse, error)
	ListCloudSecurityGroups(context.Context, *ListCloudSecurityGroupsRequest) (*ListCloudSecurityGroupsResponse, error)
	ListKeypairs(context.Context, *ListKeyPairsRequest) (*ListKeyPairsResponse, error)
	ListCloudInstanceTypes(context.Context, *ListCloudInstanceTypeRequest) (*ListCloudInstanceTypeResponse, error)
	ListCloudDiskTypes(context.Context, *ListCloudDiskTypesRequest) (*ListCloudDiskTypesResponse, error)
	GetMasterSuggestedMachines(context.Context, *GetMasterSuggestedMachinesRequest) (*GetMasterSuggestedMachinesResponse, error)
	ListCloudProjects(context.Context, *ListCloudProjectsRequest) (*ListCloudProjectsResponse, error)
	ListCloudOsImage(context.Context, *ListCloudOsImageRequest) (*ListCloudOsImageResponse, error)
	ListCloudInstances(context.Context, *ListCloudInstancesRequest) (*ListCloudInstancesResponse, error)
	ListCloudInstancesByPost(context.Context, *ListCloudInstancesRequest) (*ListCloudInstancesResponse, error)
	GetCloudAccountType(context.Context, *GetCloudAccountTypeRequest) (*GetCloudAccountTypeResponse, error)
	GetCloudBandwidthPackages(context.Context, *GetCloudBandwidthPackagesRequest) (*GetCloudBandwidthPackagesResponse, error)
	ListCloudRuntimeInfo(context.Context, *ListCloudRuntimeInfoRequest) (*ListCloudRuntimeInfoResponse, error)
	// Operation logs
	ListOperationLogs(context.Context, *ListOperationLogsRequest) (*ListOperationLogsResponse, error)
	// Operation logs
	ListOperationLogsV2(context.Context, *ListOperationLogsRequest) (*ListOperationLogsResponse, error)
	// Task Step logs
	ListTaskStepLogs(context.Context, *ListTaskStepLogsRequest) (*ListTaskStepLogsResponse, error)
	// Task records
	ListTaskRecords(context.Context, *ListTaskRecordsRequest) (*ListTaskRecordsResponse, error)
	// CleanDbHistoryData clean DB history data
	CleanDbHistoryData(context.Context, *CleanDbHistoryDataRequest) (*CleanDbHistoryDataResponse, error)
	// ** ResourceSchema **
	// ListResourceSchema
	ListResourceSchema(context.Context, *ListResourceSchemaRequest) (*CommonListResp, error)
	// GetResourceSchema
	GetResourceSchema(context.Context, *GetResourceSchemaRequest) (*CommonResp, error)
	// Perm interface
	QueryPermByActionID(context.Context, *QueryPermByActionIDRequest) (*QueryPermByActionIDResponse, error)
	// thirdParty interface(cmdb/bksops等)
	ListBKCloud(context.Context, *ListBKCloudRequest) (*CommonListResp, error)
	ListCCTopology(context.Context, *ListCCTopologyRequest) (*CommonResp, error)
	GetBkSopsTemplateList(context.Context, *GetBkSopsTemplateListRequest) (*GetBkSopsTemplateListResponse, error)
	GetBkSopsTemplateInfo(context.Context, *GetBkSopsTemplateInfoRequest) (*GetBkSopsTemplateInfoResponse, error)
	GetInnerTemplateValues(context.Context, *GetInnerTemplateValuesRequest) (*GetInnerTemplateValuesResponse, error)
	DebugBkSopsTask(context.Context, *DebugBkSopsTaskRequest) (*DebugBkSopsTaskResponse, error)
	// IP selector interface
	// 批量获取多个配置项, 返回配置项内容map
	GetBatchCustomSetting(context.Context, *GetBatchCustomSettingRequest) (*GetBatchCustomSettingResponse, error)
	// 批量获取含各节点主机数量的拓扑树
	GetBizTopologyHost(context.Context, *GetBizTopologyHostRequest) (*GetBizTopologyHostResponse, error)
	// 根据多个拓扑节点与搜索条件批量分页查询所包含的主机信息(当前仅支持业务拓扑节点)
	GetTopologyNodes(context.Context, *GetTopologyNodesRequest) (*GetTopologyNodesResponse, error)
	// 根据多个拓扑节点与搜索条件批量分页查询所包含的主机ID，用于IP选择器全选（当前仅支持业务拓扑节点，业务集仅支持传入业务集根节点）
	GetTopologyHostIdsNodes(context.Context, *GetTopologyHostIdsNodesRequest) (*GetTopologyHostIdsNodesResponse, error)
	// 根据主机IDs获取机器详情信息
	GetHostsDetails(context.Context, *GetHostsDetailsRequest) (*GetHostsDetailsResponse, error)
	// 根据用户手动输入的IP/IPv6/主机名/hostId等关键字信息获取真实存在的机器信息
	GetScopeHostCheck(context.Context, *GetScopeHostCheckRequest) (*GetScopeHostCheckResponse, error)
	// Cloud module flag management
	CreateCloudModuleFlag(context.Context, *CreateCloudModuleFlagRequest) (*CreateCloudModuleFlagResponse, error)
	UpdateCloudModuleFlag(context.Context, *UpdateCloudModuleFlagRequest) (*UpdateCloudModuleFlagResponse, error)
	DeleteCloudModuleFlag(context.Context, *DeleteCloudModuleFlagRequest) (*DeleteCloudModuleFlagResponse, error)
	ListCloudModuleFlag(context.Context, *ListCloudModuleFlagRequest) (*ListCloudModuleFlagResponse, error)
	ListCloudNodePublicPrefix(context.Context, *ListCloudNodePublicPrefixRequest) (*ListCloudNodePublicPrefixResponse, error)
	// cluster manager health interface
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	CreateTemplateConfig(context.Context, *CreateTemplateConfigRequest) (*CreateTemplateConfigResponse, error)
	DeleteTemplateConfig(context.Context, *DeleteTemplateConfigRequest) (*DeleteTemplateConfigResponse, error)
	ListTemplateConfig(context.Context, *ListTemplateConfigRequest) (*ListTemplateConfigResponse, error)
	UpdateTemplateConfig(context.Context, *UpdateTemplateConfigRequest) (*UpdateTemplateConfigResponse, error)
}

// UnimplementedClusterManagerServer can be embedded to have forward compatible implementations.
type UnimplementedClusterManagerServer struct {
}

func (*UnimplementedClusterManagerServer) CreateCluster(context.Context, *CreateClusterReq) (*CreateClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (*UnimplementedClusterManagerServer) RetryCreateClusterTask(context.Context, *RetryCreateClusterReq) (*RetryCreateClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryCreateClusterTask not implemented")
}
func (*UnimplementedClusterManagerServer) CheckCloudKubeConfig(context.Context, *KubeConfigReq) (*KubeConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCloudKubeConfig not implemented")
}
func (*UnimplementedClusterManagerServer) CheckCloudKubeConfigConnect(context.Context, *KubeConfigConnectReq) (*KubeConfigConnectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCloudKubeConfigConnect not implemented")
}
func (*UnimplementedClusterManagerServer) ImportCluster(context.Context, *ImportClusterReq) (*ImportClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCluster not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateCluster(context.Context, *UpdateClusterReq) (*UpdateClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCluster not implemented")
}
func (*UnimplementedClusterManagerServer) AddNodesToCluster(context.Context, *AddNodesRequest) (*AddNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNodesToCluster not implemented")
}
func (*UnimplementedClusterManagerServer) AddNodesToClusterV2(context.Context, *AddNodesV2Request) (*AddNodesV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNodesToClusterV2 not implemented")
}
func (*UnimplementedClusterManagerServer) DeleteNodesFromCluster(context.Context, *DeleteNodesRequest) (*DeleteNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodesFromCluster not implemented")
}
func (*UnimplementedClusterManagerServer) BatchDeleteNodesFromCluster(context.Context, *BatchDeleteClusterNodesRequest) (*BatchDeleteClusterNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteNodesFromCluster not implemented")
}
func (*UnimplementedClusterManagerServer) GetClustersMetaData(context.Context, *GetClustersMetaDataRequest) (*GetClustersMetaDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClustersMetaData not implemented")
}
func (*UnimplementedClusterManagerServer) ListNodesInCluster(context.Context, *ListNodesInClusterRequest) (*ListNodesInClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodesInCluster not implemented")
}
func (*UnimplementedClusterManagerServer) ListMastersInCluster(context.Context, *ListMastersInClusterRequest) (*ListMastersInClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMastersInCluster not implemented")
}
func (*UnimplementedClusterManagerServer) DeleteCluster(context.Context, *DeleteClusterReq) (*DeleteClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (*UnimplementedClusterManagerServer) GetCluster(context.Context, *GetClusterReq) (*GetClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (*UnimplementedClusterManagerServer) GetClusterSharedProject(context.Context, *GetClusterSharedProjectRequest) (*GetClusterSharedProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterSharedProject not implemented")
}
func (*UnimplementedClusterManagerServer) ListProjectCluster(context.Context, *ListProjectClusterReq) (*ListProjectClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectCluster not implemented")
}
func (*UnimplementedClusterManagerServer) ListBusinessCluster(context.Context, *ListBusinessClusterReq) (*ListBusinessClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessCluster not implemented")
}
func (*UnimplementedClusterManagerServer) ListCluster(context.Context, *ListClusterReq) (*ListClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCluster not implemented")
}
func (*UnimplementedClusterManagerServer) ListClusterV2(context.Context, *ListClusterV2Req) (*ListClusterV2Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterV2 not implemented")
}
func (*UnimplementedClusterManagerServer) ListCommonCluster(context.Context, *ListCommonClusterReq) (*ListCommonClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommonCluster not implemented")
}
func (*UnimplementedClusterManagerServer) AddSubnetToCluster(context.Context, *AddSubnetToClusterReq) (*AddSubnetToClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubnetToCluster not implemented")
}
func (*UnimplementedClusterManagerServer) SwitchClusterUnderlayNetwork(context.Context, *SwitchClusterUnderlayNetworkReq) (*SwitchClusterUnderlayNetworkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchClusterUnderlayNetwork not implemented")
}
func (*UnimplementedClusterManagerServer) CreateVirtualCluster(context.Context, *CreateVirtualClusterReq) (*CreateVirtualClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualCluster not implemented")
}
func (*UnimplementedClusterManagerServer) DeleteVirtualCluster(context.Context, *DeleteVirtualClusterReq) (*DeleteVirtualClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualCluster not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateVirtualClusterQuota(context.Context, *UpdateVirtualClusterQuotaReq) (*UpdateVirtualClusterQuotaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVirtualClusterQuota not implemented")
}
func (*UnimplementedClusterManagerServer) GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (*UnimplementedClusterManagerServer) GetNodeInfo(context.Context, *GetNodeInfoRequest) (*GetNodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (*UnimplementedClusterManagerServer) RecordNodeInfo(context.Context, *RecordNodeInfoRequest) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordNodeInfo not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateNode(context.Context, *UpdateNodeRequest) (*UpdateNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateClusterModule(context.Context, *UpdateClusterModuleRequest) (*UpdateClusterModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterModule not implemented")
}
func (*UnimplementedClusterManagerServer) CheckNodeInCluster(context.Context, *CheckNodesRequest) (*CheckNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNodeInCluster not implemented")
}
func (*UnimplementedClusterManagerServer) CordonNode(context.Context, *CordonNodeRequest) (*CordonNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CordonNode not implemented")
}
func (*UnimplementedClusterManagerServer) UnCordonNode(context.Context, *UnCordonNodeRequest) (*UnCordonNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnCordonNode not implemented")
}
func (*UnimplementedClusterManagerServer) DrainNode(context.Context, *DrainNodeRequest) (*DrainNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DrainNode not implemented")
}
func (*UnimplementedClusterManagerServer) CheckDrainNode(context.Context, *CheckDrainNodeRequest) (*CheckDrainNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDrainNode not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateNodeLabels(context.Context, *UpdateNodeLabelsRequest) (*UpdateNodeLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeLabels not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateNodeAnnotations(context.Context, *UpdateNodeAnnotationsRequest) (*UpdateNodeAnnotationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeAnnotations not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateNodeTaints(context.Context, *UpdateNodeTaintsRequest) (*UpdateNodeTaintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeTaints not implemented")
}
func (*UnimplementedClusterManagerServer) GetClusterCredential(context.Context, *GetClusterCredentialReq) (*GetClusterCredentialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterCredential not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateClusterCredential(context.Context, *UpdateClusterCredentialReq) (*UpdateClusterCredentialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterCredential not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateClusterKubeConfig(context.Context, *UpdateClusterKubeConfigReq) (*UpdateClusterKubeConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterKubeConfig not implemented")
}
func (*UnimplementedClusterManagerServer) DeleteClusterCredential(context.Context, *DeleteClusterCredentialReq) (*DeleteClusterCredentialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClusterCredential not implemented")
}
func (*UnimplementedClusterManagerServer) ListClusterCredential(context.Context, *ListClusterCredentialReq) (*ListClusterCredentialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterCredential not implemented")
}
func (*UnimplementedClusterManagerServer) InitFederationCluster(context.Context, *InitFederationClusterReq) (*InitFederationClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitFederationCluster not implemented")
}
func (*UnimplementedClusterManagerServer) AddFederatedCluster(context.Context, *AddFederatedClusterReq) (*AddFederatedClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFederatedCluster not implemented")
}
func (*UnimplementedClusterManagerServer) CreateCloud(context.Context, *CreateCloudRequest) (*CreateCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloud not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateCloud(context.Context, *UpdateCloudRequest) (*UpdateCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloud not implemented")
}
func (*UnimplementedClusterManagerServer) DeleteCloud(context.Context, *DeleteCloudRequest) (*DeleteCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloud not implemented")
}
func (*UnimplementedClusterManagerServer) GetCloud(context.Context, *GetCloudRequest) (*GetCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloud not implemented")
}
func (*UnimplementedClusterManagerServer) ListCloud(context.Context, *ListCloudRequest) (*ListCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloud not implemented")
}
func (*UnimplementedClusterManagerServer) CreateCloudVPC(context.Context, *CreateCloudVPCRequest) (*CreateCloudVPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloudVPC not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateCloudVPC(context.Context, *UpdateCloudVPCRequest) (*UpdateCloudVPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloudVPC not implemented")
}
func (*UnimplementedClusterManagerServer) DeleteCloudVPC(context.Context, *DeleteCloudVPCRequest) (*DeleteCloudVPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudVPC not implemented")
}
func (*UnimplementedClusterManagerServer) ListCloudVPC(context.Context, *ListCloudVPCRequest) (*ListCloudVPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudVPC not implemented")
}
func (*UnimplementedClusterManagerServer) ListCloudRegions(context.Context, *ListCloudRegionsRequest) (*ListCloudRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudRegions not implemented")
}
func (*UnimplementedClusterManagerServer) GetVPCCidr(context.Context, *GetVPCCidrRequest) (*GetVPCCidrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVPCCidr not implemented")
}
func (*UnimplementedClusterManagerServer) CreateNodeGroup(context.Context, *CreateNodeGroupRequest) (*CreateNodeGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodeGroup not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateNodeGroup(context.Context, *UpdateNodeGroupRequest) (*UpdateNodeGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeGroup not implemented")
}
func (*UnimplementedClusterManagerServer) DeleteNodeGroup(context.Context, *DeleteNodeGroupRequest) (*DeleteNodeGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodeGroup not implemented")
}
func (*UnimplementedClusterManagerServer) GetNodeGroup(context.Context, *GetNodeGroupRequest) (*GetNodeGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeGroup not implemented")
}
func (*UnimplementedClusterManagerServer) ListClusterNodeGroup(context.Context, *ListClusterNodeGroupRequest) (*ListClusterNodeGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterNodeGroup not implemented")
}
func (*UnimplementedClusterManagerServer) ListNodeGroup(context.Context, *ListNodeGroupRequest) (*ListNodeGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeGroup not implemented")
}
func (*UnimplementedClusterManagerServer) RecommendNodeGroupConf(context.Context, *RecommendNodeGroupConfReq) (*RecommendNodeGroupConfResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendNodeGroupConf not implemented")
}
func (*UnimplementedClusterManagerServer) MoveNodesToGroup(context.Context, *MoveNodesToGroupRequest) (*MoveNodesToGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveNodesToGroup not implemented")
}
func (*UnimplementedClusterManagerServer) RemoveNodesFromGroup(context.Context, *RemoveNodesFromGroupRequest) (*RemoveNodesFromGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNodesFromGroup not implemented")
}
func (*UnimplementedClusterManagerServer) CleanNodesInGroup(context.Context, *CleanNodesInGroupRequest) (*CleanNodesInGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanNodesInGroup not implemented")
}
func (*UnimplementedClusterManagerServer) CleanNodesInGroupV2(context.Context, *CleanNodesInGroupV2Request) (*CleanNodesInGroupV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanNodesInGroupV2 not implemented")
}
func (*UnimplementedClusterManagerServer) ListNodesInGroup(context.Context, *GetNodeGroupRequest) (*ListNodesInGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodesInGroup not implemented")
}
func (*UnimplementedClusterManagerServer) ListNodesInGroupV2(context.Context, *ListNodesInGroupV2Request) (*ListNodesInGroupV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodesInGroupV2 not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateGroupDesiredNode(context.Context, *UpdateGroupDesiredNodeRequest) (*UpdateGroupDesiredNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupDesiredNode not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateGroupDesiredSize(context.Context, *UpdateGroupDesiredSizeRequest) (*UpdateGroupDesiredSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupDesiredSize not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateGroupMinMaxSize(context.Context, *UpdateGroupMinMaxSizeRequest) (*UpdateGroupMinMaxSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupMinMaxSize not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateGroupAsTimeRange(context.Context, *UpdateGroupAsTimeRangeRequest) (*UpdateGroupAsTimeRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupAsTimeRange not implemented")
}
func (*UnimplementedClusterManagerServer) GetExternalNodeScriptByGroupID(context.Context, *GetExternalNodeScriptRequest) (*GetExternalNodeScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalNodeScriptByGroupID not implemented")
}
func (*UnimplementedClusterManagerServer) TransNodeGroupToNodeTemplate(context.Context, *TransNodeGroupToNodeTemplateRequest) (*TransNodeGroupToNodeTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransNodeGroupToNodeTemplate not implemented")
}
func (*UnimplementedClusterManagerServer) EnableNodeGroupAutoScale(context.Context, *EnableNodeGroupAutoScaleRequest) (*EnableNodeGroupAutoScaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableNodeGroupAutoScale not implemented")
}
func (*UnimplementedClusterManagerServer) DisableNodeGroupAutoScale(context.Context, *DisableNodeGroupAutoScaleRequest) (*DisableNodeGroupAutoScaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableNodeGroupAutoScale not implemented")
}
func (*UnimplementedClusterManagerServer) GetProviderResourceUsage(context.Context, *GetProviderResourceUsageRequest) (*GetProviderResourceUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderResourceUsage not implemented")
}
func (*UnimplementedClusterManagerServer) GetProjectResourceQuotaUsage(context.Context, *GetProjectResourceQuotaUsageRequest) (*GetProjectResourceQuotaUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectResourceQuotaUsage not implemented")
}
func (*UnimplementedClusterManagerServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (*UnimplementedClusterManagerServer) RetryTask(context.Context, *RetryTaskRequest) (*RetryTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryTask not implemented")
}
func (*UnimplementedClusterManagerServer) SkipTask(context.Context, *SkipTaskRequest) (*SkipTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkipTask not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (*UnimplementedClusterManagerServer) DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (*UnimplementedClusterManagerServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (*UnimplementedClusterManagerServer) ListTask(context.Context, *ListTaskRequest) (*ListTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTask not implemented")
}
func (*UnimplementedClusterManagerServer) CreateAutoScalingOption(context.Context, *CreateAutoScalingOptionRequest) (*CreateAutoScalingOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAutoScalingOption not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateAutoScalingOption(context.Context, *UpdateAutoScalingOptionRequest) (*UpdateAutoScalingOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutoScalingOption not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateAsOptionDeviceProvider(context.Context, *UpdateAsOptionDeviceProviderRequest) (*UpdateAsOptionDeviceProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAsOptionDeviceProvider not implemented")
}
func (*UnimplementedClusterManagerServer) DeleteAutoScalingOption(context.Context, *DeleteAutoScalingOptionRequest) (*DeleteAutoScalingOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAutoScalingOption not implemented")
}
func (*UnimplementedClusterManagerServer) GetAutoScalingOption(context.Context, *GetAutoScalingOptionRequest) (*GetAutoScalingOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutoScalingOption not implemented")
}
func (*UnimplementedClusterManagerServer) ListAutoScalingOption(context.Context, *ListAutoScalingOptionRequest) (*ListAutoScalingOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAutoScalingOption not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateAutoScalingStatus(context.Context, *UpdateAutoScalingStatusRequest) (*UpdateAutoScalingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutoScalingStatus not implemented")
}
func (*UnimplementedClusterManagerServer) SyncAutoScalingOption(context.Context, *SyncAutoScalingOptionRequest) (*SyncAutoScalingOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAutoScalingOption not implemented")
}
func (*UnimplementedClusterManagerServer) CreateNodeTemplate(context.Context, *CreateNodeTemplateRequest) (*CreateNodeTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodeTemplate not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateNodeTemplate(context.Context, *UpdateNodeTemplateRequest) (*UpdateNodeTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeTemplate not implemented")
}
func (*UnimplementedClusterManagerServer) DeleteNodeTemplate(context.Context, *DeleteNodeTemplateRequest) (*DeleteNodeTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodeTemplate not implemented")
}
func (*UnimplementedClusterManagerServer) ListNodeTemplate(context.Context, *ListNodeTemplateRequest) (*ListNodeTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeTemplate not implemented")
}
func (*UnimplementedClusterManagerServer) GetNodeTemplate(context.Context, *GetNodeTemplateRequest) (*GetNodeTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeTemplate not implemented")
}
func (*UnimplementedClusterManagerServer) CreateNotifyTemplate(context.Context, *CreateNotifyTemplateRequest) (*CreateNotifyTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotifyTemplate not implemented")
}
func (*UnimplementedClusterManagerServer) DeleteNotifyTemplate(context.Context, *DeleteNotifyTemplateRequest) (*DeleteNotifyTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotifyTemplate not implemented")
}
func (*UnimplementedClusterManagerServer) ListNotifyTemplate(context.Context, *ListNotifyTemplateRequest) (*ListNotifyTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotifyTemplate not implemented")
}
func (*UnimplementedClusterManagerServer) CreateCloudAccount(context.Context, *CreateCloudAccountRequest) (*CreateCloudAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloudAccount not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateCloudAccount(context.Context, *UpdateCloudAccountRequest) (*UpdateCloudAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloudAccount not implemented")
}
func (*UnimplementedClusterManagerServer) MigrateCloudAccount(context.Context, *MigrateCloudAccountRequest) (*MigrateCloudAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateCloudAccount not implemented")
}
func (*UnimplementedClusterManagerServer) DeleteCloudAccount(context.Context, *DeleteCloudAccountRequest) (*DeleteCloudAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudAccount not implemented")
}
func (*UnimplementedClusterManagerServer) ListCloudAccount(context.Context, *ListCloudAccountRequest) (*ListCloudAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudAccount not implemented")
}
func (*UnimplementedClusterManagerServer) ListCloudAccountToPerm(context.Context, *ListCloudAccountPermRequest) (*ListCloudAccountPermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudAccountToPerm not implemented")
}
func (*UnimplementedClusterManagerServer) VerifyCloudAccount(context.Context, *VerifyCloudAccountRequest) (*VerifyCloudAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCloudAccount not implemented")
}
func (*UnimplementedClusterManagerServer) GetServiceRoles(context.Context, *GetServiceRolesRequest) (*GetServiceRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceRoles not implemented")
}
func (*UnimplementedClusterManagerServer) GetResourceGroups(context.Context, *GetResourceGroupsRequest) (*GetResourceGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceGroups not implemented")
}
func (*UnimplementedClusterManagerServer) GetCloudRegions(context.Context, *GetCloudRegionsRequest) (*GetCloudRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudRegions not implemented")
}
func (*UnimplementedClusterManagerServer) GetCloudRegionZones(context.Context, *GetCloudRegionZonesRequest) (*GetCloudRegionZonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudRegionZones not implemented")
}
func (*UnimplementedClusterManagerServer) ListCloudRegionCluster(context.Context, *ListCloudRegionClusterRequest) (*ListCloudRegionClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudRegionCluster not implemented")
}
func (*UnimplementedClusterManagerServer) ListCloudVpcs(context.Context, *ListCloudVpcsRequest) (*ListCloudVpcsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudVpcs not implemented")
}
func (*UnimplementedClusterManagerServer) CheckCidrConflictFromVpc(context.Context, *CheckCidrConflictFromVpcRequest) (*CheckCidrConflictFromVpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCidrConflictFromVpc not implemented")
}
func (*UnimplementedClusterManagerServer) ListCloudSubnets(context.Context, *ListCloudSubnetsRequest) (*ListCloudSubnetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudSubnets not implemented")
}
func (*UnimplementedClusterManagerServer) ListCloudSecurityGroups(context.Context, *ListCloudSecurityGroupsRequest) (*ListCloudSecurityGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudSecurityGroups not implemented")
}
func (*UnimplementedClusterManagerServer) ListKeypairs(context.Context, *ListKeyPairsRequest) (*ListKeyPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeypairs not implemented")
}
func (*UnimplementedClusterManagerServer) ListCloudInstanceTypes(context.Context, *ListCloudInstanceTypeRequest) (*ListCloudInstanceTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudInstanceTypes not implemented")
}
func (*UnimplementedClusterManagerServer) ListCloudDiskTypes(context.Context, *ListCloudDiskTypesRequest) (*ListCloudDiskTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudDiskTypes not implemented")
}
func (*UnimplementedClusterManagerServer) GetMasterSuggestedMachines(context.Context, *GetMasterSuggestedMachinesRequest) (*GetMasterSuggestedMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterSuggestedMachines not implemented")
}
func (*UnimplementedClusterManagerServer) ListCloudProjects(context.Context, *ListCloudProjectsRequest) (*ListCloudProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudProjects not implemented")
}
func (*UnimplementedClusterManagerServer) ListCloudOsImage(context.Context, *ListCloudOsImageRequest) (*ListCloudOsImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudOsImage not implemented")
}
func (*UnimplementedClusterManagerServer) ListCloudInstances(context.Context, *ListCloudInstancesRequest) (*ListCloudInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudInstances not implemented")
}
func (*UnimplementedClusterManagerServer) ListCloudInstancesByPost(context.Context, *ListCloudInstancesRequest) (*ListCloudInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudInstancesByPost not implemented")
}
func (*UnimplementedClusterManagerServer) GetCloudAccountType(context.Context, *GetCloudAccountTypeRequest) (*GetCloudAccountTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudAccountType not implemented")
}
func (*UnimplementedClusterManagerServer) GetCloudBandwidthPackages(context.Context, *GetCloudBandwidthPackagesRequest) (*GetCloudBandwidthPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudBandwidthPackages not implemented")
}
func (*UnimplementedClusterManagerServer) ListCloudRuntimeInfo(context.Context, *ListCloudRuntimeInfoRequest) (*ListCloudRuntimeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudRuntimeInfo not implemented")
}
func (*UnimplementedClusterManagerServer) ListOperationLogs(context.Context, *ListOperationLogsRequest) (*ListOperationLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperationLogs not implemented")
}
func (*UnimplementedClusterManagerServer) ListOperationLogsV2(context.Context, *ListOperationLogsRequest) (*ListOperationLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperationLogsV2 not implemented")
}
func (*UnimplementedClusterManagerServer) ListTaskStepLogs(context.Context, *ListTaskStepLogsRequest) (*ListTaskStepLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskStepLogs not implemented")
}
func (*UnimplementedClusterManagerServer) ListTaskRecords(context.Context, *ListTaskRecordsRequest) (*ListTaskRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskRecords not implemented")
}
func (*UnimplementedClusterManagerServer) CleanDbHistoryData(context.Context, *CleanDbHistoryDataRequest) (*CleanDbHistoryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanDbHistoryData not implemented")
}
func (*UnimplementedClusterManagerServer) ListResourceSchema(context.Context, *ListResourceSchemaRequest) (*CommonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceSchema not implemented")
}
func (*UnimplementedClusterManagerServer) GetResourceSchema(context.Context, *GetResourceSchemaRequest) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceSchema not implemented")
}
func (*UnimplementedClusterManagerServer) QueryPermByActionID(context.Context, *QueryPermByActionIDRequest) (*QueryPermByActionIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPermByActionID not implemented")
}
func (*UnimplementedClusterManagerServer) ListBKCloud(context.Context, *ListBKCloudRequest) (*CommonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBKCloud not implemented")
}
func (*UnimplementedClusterManagerServer) ListCCTopology(context.Context, *ListCCTopologyRequest) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCCTopology not implemented")
}
func (*UnimplementedClusterManagerServer) GetBkSopsTemplateList(context.Context, *GetBkSopsTemplateListRequest) (*GetBkSopsTemplateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBkSopsTemplateList not implemented")
}
func (*UnimplementedClusterManagerServer) GetBkSopsTemplateInfo(context.Context, *GetBkSopsTemplateInfoRequest) (*GetBkSopsTemplateInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBkSopsTemplateInfo not implemented")
}
func (*UnimplementedClusterManagerServer) GetInnerTemplateValues(context.Context, *GetInnerTemplateValuesRequest) (*GetInnerTemplateValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInnerTemplateValues not implemented")
}
func (*UnimplementedClusterManagerServer) DebugBkSopsTask(context.Context, *DebugBkSopsTaskRequest) (*DebugBkSopsTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugBkSopsTask not implemented")
}
func (*UnimplementedClusterManagerServer) GetBatchCustomSetting(context.Context, *GetBatchCustomSettingRequest) (*GetBatchCustomSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchCustomSetting not implemented")
}
func (*UnimplementedClusterManagerServer) GetBizTopologyHost(context.Context, *GetBizTopologyHostRequest) (*GetBizTopologyHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBizTopologyHost not implemented")
}
func (*UnimplementedClusterManagerServer) GetTopologyNodes(context.Context, *GetTopologyNodesRequest) (*GetTopologyNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopologyNodes not implemented")
}
func (*UnimplementedClusterManagerServer) GetTopologyHostIdsNodes(context.Context, *GetTopologyHostIdsNodesRequest) (*GetTopologyHostIdsNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopologyHostIdsNodes not implemented")
}
func (*UnimplementedClusterManagerServer) GetHostsDetails(context.Context, *GetHostsDetailsRequest) (*GetHostsDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostsDetails not implemented")
}
func (*UnimplementedClusterManagerServer) GetScopeHostCheck(context.Context, *GetScopeHostCheckRequest) (*GetScopeHostCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScopeHostCheck not implemented")
}
func (*UnimplementedClusterManagerServer) CreateCloudModuleFlag(context.Context, *CreateCloudModuleFlagRequest) (*CreateCloudModuleFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloudModuleFlag not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateCloudModuleFlag(context.Context, *UpdateCloudModuleFlagRequest) (*UpdateCloudModuleFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloudModuleFlag not implemented")
}
func (*UnimplementedClusterManagerServer) DeleteCloudModuleFlag(context.Context, *DeleteCloudModuleFlagRequest) (*DeleteCloudModuleFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudModuleFlag not implemented")
}
func (*UnimplementedClusterManagerServer) ListCloudModuleFlag(context.Context, *ListCloudModuleFlagRequest) (*ListCloudModuleFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudModuleFlag not implemented")
}
func (*UnimplementedClusterManagerServer) ListCloudNodePublicPrefix(context.Context, *ListCloudNodePublicPrefixRequest) (*ListCloudNodePublicPrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudNodePublicPrefix not implemented")
}
func (*UnimplementedClusterManagerServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (*UnimplementedClusterManagerServer) CreateTemplateConfig(context.Context, *CreateTemplateConfigRequest) (*CreateTemplateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplateConfig not implemented")
}
func (*UnimplementedClusterManagerServer) DeleteTemplateConfig(context.Context, *DeleteTemplateConfigRequest) (*DeleteTemplateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplateConfig not implemented")
}
func (*UnimplementedClusterManagerServer) ListTemplateConfig(context.Context, *ListTemplateConfigRequest) (*ListTemplateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateConfig not implemented")
}
func (*UnimplementedClusterManagerServer) UpdateTemplateConfig(context.Context, *UpdateTemplateConfigRequest) (*UpdateTemplateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplateConfig not implemented")
}

func RegisterClusterManagerServer(s *grpc.Server, srv ClusterManagerServer) {
	s.RegisterService(&_ClusterManager_serviceDesc, srv)
}

func _ClusterManager_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateCluster(ctx, req.(*CreateClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_RetryCreateClusterTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryCreateClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).RetryCreateClusterTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/RetryCreateClusterTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).RetryCreateClusterTask(ctx, req.(*RetryCreateClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CheckCloudKubeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KubeConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CheckCloudKubeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CheckCloudKubeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CheckCloudKubeConfig(ctx, req.(*KubeConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CheckCloudKubeConfigConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KubeConfigConnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CheckCloudKubeConfigConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CheckCloudKubeConfigConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CheckCloudKubeConfigConnect(ctx, req.(*KubeConfigConnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ImportCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ImportCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ImportCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ImportCluster(ctx, req.(*ImportClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateCluster(ctx, req.(*UpdateClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_AddNodesToCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).AddNodesToCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/AddNodesToCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).AddNodesToCluster(ctx, req.(*AddNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_AddNodesToClusterV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNodesV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).AddNodesToClusterV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/AddNodesToClusterV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).AddNodesToClusterV2(ctx, req.(*AddNodesV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteNodesFromCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteNodesFromCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteNodesFromCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteNodesFromCluster(ctx, req.(*DeleteNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_BatchDeleteNodesFromCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteClusterNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).BatchDeleteNodesFromCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/BatchDeleteNodesFromCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).BatchDeleteNodesFromCluster(ctx, req.(*BatchDeleteClusterNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetClustersMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClustersMetaDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetClustersMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetClustersMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetClustersMetaData(ctx, req.(*GetClustersMetaDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListNodesInCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesInClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListNodesInCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListNodesInCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListNodesInCluster(ctx, req.(*ListNodesInClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListMastersInCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMastersInClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListMastersInCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListMastersInCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListMastersInCluster(ctx, req.(*ListMastersInClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteCluster(ctx, req.(*DeleteClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetCluster(ctx, req.(*GetClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetClusterSharedProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterSharedProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetClusterSharedProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetClusterSharedProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetClusterSharedProject(ctx, req.(*GetClusterSharedProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListProjectCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListProjectCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListProjectCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListProjectCluster(ctx, req.(*ListProjectClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListBusinessCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListBusinessCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListBusinessCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListBusinessCluster(ctx, req.(*ListBusinessClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCluster(ctx, req.(*ListClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListClusterV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterV2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListClusterV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListClusterV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListClusterV2(ctx, req.(*ListClusterV2Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCommonCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommonClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCommonCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCommonCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCommonCluster(ctx, req.(*ListCommonClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_AddSubnetToCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubnetToClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).AddSubnetToCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/AddSubnetToCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).AddSubnetToCluster(ctx, req.(*AddSubnetToClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_SwitchClusterUnderlayNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchClusterUnderlayNetworkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).SwitchClusterUnderlayNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/SwitchClusterUnderlayNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).SwitchClusterUnderlayNetwork(ctx, req.(*SwitchClusterUnderlayNetworkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CreateVirtualCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVirtualClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateVirtualCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateVirtualCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateVirtualCluster(ctx, req.(*CreateVirtualClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteVirtualCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVirtualClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteVirtualCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteVirtualCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteVirtualCluster(ctx, req.(*DeleteVirtualClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateVirtualClusterQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVirtualClusterQuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateVirtualClusterQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateVirtualClusterQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateVirtualClusterQuota(ctx, req.(*UpdateVirtualClusterQuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetNodeInfo(ctx, req.(*GetNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_RecordNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).RecordNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/RecordNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).RecordNodeInfo(ctx, req.(*RecordNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateNode(ctx, req.(*UpdateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateClusterModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateClusterModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateClusterModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateClusterModule(ctx, req.(*UpdateClusterModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CheckNodeInCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CheckNodeInCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CheckNodeInCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CheckNodeInCluster(ctx, req.(*CheckNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CordonNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CordonNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CordonNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CordonNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CordonNode(ctx, req.(*CordonNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UnCordonNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnCordonNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UnCordonNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UnCordonNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UnCordonNode(ctx, req.(*UnCordonNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DrainNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrainNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DrainNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DrainNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DrainNode(ctx, req.(*DrainNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CheckDrainNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDrainNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CheckDrainNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CheckDrainNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CheckDrainNode(ctx, req.(*CheckDrainNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateNodeLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateNodeLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateNodeLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateNodeLabels(ctx, req.(*UpdateNodeLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateNodeAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateNodeAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateNodeAnnotations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateNodeAnnotations(ctx, req.(*UpdateNodeAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateNodeTaints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeTaintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateNodeTaints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateNodeTaints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateNodeTaints(ctx, req.(*UpdateNodeTaintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetClusterCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetClusterCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetClusterCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetClusterCredential(ctx, req.(*GetClusterCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateClusterCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateClusterCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateClusterCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateClusterCredential(ctx, req.(*UpdateClusterCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateClusterKubeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterKubeConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateClusterKubeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateClusterKubeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateClusterKubeConfig(ctx, req.(*UpdateClusterKubeConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteClusterCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteClusterCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteClusterCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteClusterCredential(ctx, req.(*DeleteClusterCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListClusterCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListClusterCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListClusterCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListClusterCredential(ctx, req.(*ListClusterCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_InitFederationCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitFederationClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).InitFederationCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/InitFederationCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).InitFederationCluster(ctx, req.(*InitFederationClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_AddFederatedCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFederatedClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).AddFederatedCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/AddFederatedCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).AddFederatedCluster(ctx, req.(*AddFederatedClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CreateCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateCloud(ctx, req.(*CreateCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateCloud(ctx, req.(*UpdateCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteCloud(ctx, req.(*DeleteCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetCloud(ctx, req.(*GetCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloud(ctx, req.(*ListCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CreateCloudVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCloudVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateCloudVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateCloudVPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateCloudVPC(ctx, req.(*CreateCloudVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateCloudVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCloudVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateCloudVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateCloudVPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateCloudVPC(ctx, req.(*UpdateCloudVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteCloudVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloudVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteCloudVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteCloudVPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteCloudVPC(ctx, req.(*DeleteCloudVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudVPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudVPC(ctx, req.(*ListCloudVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudRegions(ctx, req.(*ListCloudRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetVPCCidr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVPCCidrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetVPCCidr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetVPCCidr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetVPCCidr(ctx, req.(*GetVPCCidrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CreateNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateNodeGroup(ctx, req.(*CreateNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateNodeGroup(ctx, req.(*UpdateNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteNodeGroup(ctx, req.(*DeleteNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetNodeGroup(ctx, req.(*GetNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListClusterNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListClusterNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListClusterNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListClusterNodeGroup(ctx, req.(*ListClusterNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListNodeGroup(ctx, req.(*ListNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_RecommendNodeGroupConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendNodeGroupConfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).RecommendNodeGroupConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/RecommendNodeGroupConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).RecommendNodeGroupConf(ctx, req.(*RecommendNodeGroupConfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_MoveNodesToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveNodesToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).MoveNodesToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/MoveNodesToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).MoveNodesToGroup(ctx, req.(*MoveNodesToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_RemoveNodesFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNodesFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).RemoveNodesFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/RemoveNodesFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).RemoveNodesFromGroup(ctx, req.(*RemoveNodesFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CleanNodesInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanNodesInGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CleanNodesInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CleanNodesInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CleanNodesInGroup(ctx, req.(*CleanNodesInGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CleanNodesInGroupV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanNodesInGroupV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CleanNodesInGroupV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CleanNodesInGroupV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CleanNodesInGroupV2(ctx, req.(*CleanNodesInGroupV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListNodesInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListNodesInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListNodesInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListNodesInGroup(ctx, req.(*GetNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListNodesInGroupV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesInGroupV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListNodesInGroupV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListNodesInGroupV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListNodesInGroupV2(ctx, req.(*ListNodesInGroupV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateGroupDesiredNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupDesiredNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateGroupDesiredNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateGroupDesiredNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateGroupDesiredNode(ctx, req.(*UpdateGroupDesiredNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateGroupDesiredSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupDesiredSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateGroupDesiredSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateGroupDesiredSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateGroupDesiredSize(ctx, req.(*UpdateGroupDesiredSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateGroupMinMaxSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupMinMaxSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateGroupMinMaxSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateGroupMinMaxSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateGroupMinMaxSize(ctx, req.(*UpdateGroupMinMaxSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateGroupAsTimeRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupAsTimeRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateGroupAsTimeRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateGroupAsTimeRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateGroupAsTimeRange(ctx, req.(*UpdateGroupAsTimeRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetExternalNodeScriptByGroupID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalNodeScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetExternalNodeScriptByGroupID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetExternalNodeScriptByGroupID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetExternalNodeScriptByGroupID(ctx, req.(*GetExternalNodeScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_TransNodeGroupToNodeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransNodeGroupToNodeTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).TransNodeGroupToNodeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/TransNodeGroupToNodeTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).TransNodeGroupToNodeTemplate(ctx, req.(*TransNodeGroupToNodeTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_EnableNodeGroupAutoScale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableNodeGroupAutoScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).EnableNodeGroupAutoScale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/EnableNodeGroupAutoScale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).EnableNodeGroupAutoScale(ctx, req.(*EnableNodeGroupAutoScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DisableNodeGroupAutoScale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableNodeGroupAutoScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DisableNodeGroupAutoScale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DisableNodeGroupAutoScale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DisableNodeGroupAutoScale(ctx, req.(*DisableNodeGroupAutoScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetProviderResourceUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderResourceUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetProviderResourceUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetProviderResourceUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetProviderResourceUsage(ctx, req.(*GetProviderResourceUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetProjectResourceQuotaUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectResourceQuotaUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetProjectResourceQuotaUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetProjectResourceQuotaUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetProjectResourceQuotaUsage(ctx, req.(*GetProjectResourceQuotaUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_RetryTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).RetryTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/RetryTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).RetryTask(ctx, req.(*RetryTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_SkipTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkipTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).SkipTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/SkipTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).SkipTask(ctx, req.(*SkipTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListTask(ctx, req.(*ListTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CreateAutoScalingOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAutoScalingOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateAutoScalingOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateAutoScalingOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateAutoScalingOption(ctx, req.(*CreateAutoScalingOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateAutoScalingOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAutoScalingOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateAutoScalingOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateAutoScalingOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateAutoScalingOption(ctx, req.(*UpdateAutoScalingOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateAsOptionDeviceProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAsOptionDeviceProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateAsOptionDeviceProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateAsOptionDeviceProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateAsOptionDeviceProvider(ctx, req.(*UpdateAsOptionDeviceProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteAutoScalingOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAutoScalingOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteAutoScalingOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteAutoScalingOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteAutoScalingOption(ctx, req.(*DeleteAutoScalingOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetAutoScalingOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAutoScalingOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetAutoScalingOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetAutoScalingOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetAutoScalingOption(ctx, req.(*GetAutoScalingOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListAutoScalingOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAutoScalingOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListAutoScalingOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListAutoScalingOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListAutoScalingOption(ctx, req.(*ListAutoScalingOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateAutoScalingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAutoScalingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateAutoScalingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateAutoScalingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateAutoScalingStatus(ctx, req.(*UpdateAutoScalingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_SyncAutoScalingOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncAutoScalingOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).SyncAutoScalingOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/SyncAutoScalingOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).SyncAutoScalingOption(ctx, req.(*SyncAutoScalingOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CreateNodeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateNodeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateNodeTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateNodeTemplate(ctx, req.(*CreateNodeTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateNodeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateNodeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateNodeTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateNodeTemplate(ctx, req.(*UpdateNodeTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteNodeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteNodeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteNodeTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteNodeTemplate(ctx, req.(*DeleteNodeTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListNodeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListNodeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListNodeTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListNodeTemplate(ctx, req.(*ListNodeTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetNodeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetNodeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetNodeTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetNodeTemplate(ctx, req.(*GetNodeTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CreateNotifyTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotifyTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateNotifyTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateNotifyTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateNotifyTemplate(ctx, req.(*CreateNotifyTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteNotifyTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotifyTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteNotifyTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteNotifyTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteNotifyTemplate(ctx, req.(*DeleteNotifyTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListNotifyTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotifyTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListNotifyTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListNotifyTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListNotifyTemplate(ctx, req.(*ListNotifyTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CreateCloudAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCloudAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateCloudAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateCloudAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateCloudAccount(ctx, req.(*CreateCloudAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateCloudAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCloudAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateCloudAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateCloudAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateCloudAccount(ctx, req.(*UpdateCloudAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_MigrateCloudAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateCloudAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).MigrateCloudAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/MigrateCloudAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).MigrateCloudAccount(ctx, req.(*MigrateCloudAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteCloudAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloudAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteCloudAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteCloudAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteCloudAccount(ctx, req.(*DeleteCloudAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudAccount(ctx, req.(*ListCloudAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudAccountToPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudAccountPermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudAccountToPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudAccountToPerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudAccountToPerm(ctx, req.(*ListCloudAccountPermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_VerifyCloudAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCloudAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).VerifyCloudAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/VerifyCloudAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).VerifyCloudAccount(ctx, req.(*VerifyCloudAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetServiceRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetServiceRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetServiceRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetServiceRoles(ctx, req.(*GetServiceRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetResourceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetResourceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetResourceGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetResourceGroups(ctx, req.(*GetResourceGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetCloudRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetCloudRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetCloudRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetCloudRegions(ctx, req.(*GetCloudRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetCloudRegionZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudRegionZonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetCloudRegionZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetCloudRegionZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetCloudRegionZones(ctx, req.(*GetCloudRegionZonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudRegionCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudRegionClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudRegionCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudRegionCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudRegionCluster(ctx, req.(*ListCloudRegionClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudVpcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudVpcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudVpcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudVpcs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudVpcs(ctx, req.(*ListCloudVpcsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CheckCidrConflictFromVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCidrConflictFromVpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CheckCidrConflictFromVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CheckCidrConflictFromVpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CheckCidrConflictFromVpc(ctx, req.(*CheckCidrConflictFromVpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudSubnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudSubnetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudSubnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudSubnets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudSubnets(ctx, req.(*ListCloudSubnetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudSecurityGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudSecurityGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudSecurityGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudSecurityGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudSecurityGroups(ctx, req.(*ListCloudSecurityGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListKeypairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListKeypairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListKeypairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListKeypairs(ctx, req.(*ListKeyPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudInstanceTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudInstanceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudInstanceTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudInstanceTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudInstanceTypes(ctx, req.(*ListCloudInstanceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudDiskTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudDiskTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudDiskTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudDiskTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudDiskTypes(ctx, req.(*ListCloudDiskTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetMasterSuggestedMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMasterSuggestedMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetMasterSuggestedMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetMasterSuggestedMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetMasterSuggestedMachines(ctx, req.(*GetMasterSuggestedMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudProjects(ctx, req.(*ListCloudProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudOsImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudOsImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudOsImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudOsImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudOsImage(ctx, req.(*ListCloudOsImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudInstances(ctx, req.(*ListCloudInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudInstancesByPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudInstancesByPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudInstancesByPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudInstancesByPost(ctx, req.(*ListCloudInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetCloudAccountType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudAccountTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetCloudAccountType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetCloudAccountType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetCloudAccountType(ctx, req.(*GetCloudAccountTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetCloudBandwidthPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudBandwidthPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetCloudBandwidthPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetCloudBandwidthPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetCloudBandwidthPackages(ctx, req.(*GetCloudBandwidthPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudRuntimeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudRuntimeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudRuntimeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudRuntimeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudRuntimeInfo(ctx, req.(*ListCloudRuntimeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListOperationLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperationLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListOperationLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListOperationLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListOperationLogs(ctx, req.(*ListOperationLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListOperationLogsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperationLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListOperationLogsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListOperationLogsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListOperationLogsV2(ctx, req.(*ListOperationLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListTaskStepLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskStepLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListTaskStepLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListTaskStepLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListTaskStepLogs(ctx, req.(*ListTaskStepLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListTaskRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListTaskRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListTaskRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListTaskRecords(ctx, req.(*ListTaskRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CleanDbHistoryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanDbHistoryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CleanDbHistoryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CleanDbHistoryData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CleanDbHistoryData(ctx, req.(*CleanDbHistoryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListResourceSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListResourceSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListResourceSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListResourceSchema(ctx, req.(*ListResourceSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetResourceSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetResourceSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetResourceSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetResourceSchema(ctx, req.(*GetResourceSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_QueryPermByActionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPermByActionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).QueryPermByActionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/QueryPermByActionID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).QueryPermByActionID(ctx, req.(*QueryPermByActionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListBKCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBKCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListBKCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListBKCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListBKCloud(ctx, req.(*ListBKCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCCTopology_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCCTopologyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCCTopology(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCCTopology",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCCTopology(ctx, req.(*ListCCTopologyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetBkSopsTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBkSopsTemplateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetBkSopsTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetBkSopsTemplateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetBkSopsTemplateList(ctx, req.(*GetBkSopsTemplateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetBkSopsTemplateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBkSopsTemplateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetBkSopsTemplateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetBkSopsTemplateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetBkSopsTemplateInfo(ctx, req.(*GetBkSopsTemplateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetInnerTemplateValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInnerTemplateValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetInnerTemplateValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetInnerTemplateValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetInnerTemplateValues(ctx, req.(*GetInnerTemplateValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DebugBkSopsTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugBkSopsTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DebugBkSopsTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DebugBkSopsTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DebugBkSopsTask(ctx, req.(*DebugBkSopsTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetBatchCustomSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchCustomSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetBatchCustomSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetBatchCustomSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetBatchCustomSetting(ctx, req.(*GetBatchCustomSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetBizTopologyHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBizTopologyHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetBizTopologyHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetBizTopologyHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetBizTopologyHost(ctx, req.(*GetBizTopologyHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetTopologyNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopologyNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetTopologyNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetTopologyNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetTopologyNodes(ctx, req.(*GetTopologyNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetTopologyHostIdsNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopologyHostIdsNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetTopologyHostIdsNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetTopologyHostIdsNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetTopologyHostIdsNodes(ctx, req.(*GetTopologyHostIdsNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetHostsDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostsDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetHostsDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetHostsDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetHostsDetails(ctx, req.(*GetHostsDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetScopeHostCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScopeHostCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetScopeHostCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetScopeHostCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetScopeHostCheck(ctx, req.(*GetScopeHostCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CreateCloudModuleFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCloudModuleFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateCloudModuleFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateCloudModuleFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateCloudModuleFlag(ctx, req.(*CreateCloudModuleFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateCloudModuleFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCloudModuleFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateCloudModuleFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateCloudModuleFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateCloudModuleFlag(ctx, req.(*UpdateCloudModuleFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteCloudModuleFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloudModuleFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteCloudModuleFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteCloudModuleFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteCloudModuleFlag(ctx, req.(*DeleteCloudModuleFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudModuleFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudModuleFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudModuleFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudModuleFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudModuleFlag(ctx, req.(*ListCloudModuleFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudNodePublicPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudNodePublicPrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudNodePublicPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudNodePublicPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudNodePublicPrefix(ctx, req.(*ListCloudNodePublicPrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CreateTemplateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateTemplateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateTemplateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateTemplateConfig(ctx, req.(*CreateTemplateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteTemplateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteTemplateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteTemplateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteTemplateConfig(ctx, req.(*DeleteTemplateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListTemplateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListTemplateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListTemplateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListTemplateConfig(ctx, req.(*ListTemplateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateTemplateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateTemplateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateTemplateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateTemplateConfig(ctx, req.(*UpdateTemplateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clustermanager.ClusterManager",
	HandlerType: (*ClusterManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCluster",
			Handler:    _ClusterManager_CreateCluster_Handler,
		},
		{
			MethodName: "RetryCreateClusterTask",
			Handler:    _ClusterManager_RetryCreateClusterTask_Handler,
		},
		{
			MethodName: "CheckCloudKubeConfig",
			Handler:    _ClusterManager_CheckCloudKubeConfig_Handler,
		},
		{
			MethodName: "CheckCloudKubeConfigConnect",
			Handler:    _ClusterManager_CheckCloudKubeConfigConnect_Handler,
		},
		{
			MethodName: "ImportCluster",
			Handler:    _ClusterManager_ImportCluster_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _ClusterManager_UpdateCluster_Handler,
		},
		{
			MethodName: "AddNodesToCluster",
			Handler:    _ClusterManager_AddNodesToCluster_Handler,
		},
		{
			MethodName: "AddNodesToClusterV2",
			Handler:    _ClusterManager_AddNodesToClusterV2_Handler,
		},
		{
			MethodName: "DeleteNodesFromCluster",
			Handler:    _ClusterManager_DeleteNodesFromCluster_Handler,
		},
		{
			MethodName: "BatchDeleteNodesFromCluster",
			Handler:    _ClusterManager_BatchDeleteNodesFromCluster_Handler,
		},
		{
			MethodName: "GetClustersMetaData",
			Handler:    _ClusterManager_GetClustersMetaData_Handler,
		},
		{
			MethodName: "ListNodesInCluster",
			Handler:    _ClusterManager_ListNodesInCluster_Handler,
		},
		{
			MethodName: "ListMastersInCluster",
			Handler:    _ClusterManager_ListMastersInCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _ClusterManager_DeleteCluster_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _ClusterManager_GetCluster_Handler,
		},
		{
			MethodName: "GetClusterSharedProject",
			Handler:    _ClusterManager_GetClusterSharedProject_Handler,
		},
		{
			MethodName: "ListProjectCluster",
			Handler:    _ClusterManager_ListProjectCluster_Handler,
		},
		{
			MethodName: "ListBusinessCluster",
			Handler:    _ClusterManager_ListBusinessCluster_Handler,
		},
		{
			MethodName: "ListCluster",
			Handler:    _ClusterManager_ListCluster_Handler,
		},
		{
			MethodName: "ListClusterV2",
			Handler:    _ClusterManager_ListClusterV2_Handler,
		},
		{
			MethodName: "ListCommonCluster",
			Handler:    _ClusterManager_ListCommonCluster_Handler,
		},
		{
			MethodName: "AddSubnetToCluster",
			Handler:    _ClusterManager_AddSubnetToCluster_Handler,
		},
		{
			MethodName: "SwitchClusterUnderlayNetwork",
			Handler:    _ClusterManager_SwitchClusterUnderlayNetwork_Handler,
		},
		{
			MethodName: "CreateVirtualCluster",
			Handler:    _ClusterManager_CreateVirtualCluster_Handler,
		},
		{
			MethodName: "DeleteVirtualCluster",
			Handler:    _ClusterManager_DeleteVirtualCluster_Handler,
		},
		{
			MethodName: "UpdateVirtualClusterQuota",
			Handler:    _ClusterManager_UpdateVirtualClusterQuota_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _ClusterManager_GetNode_Handler,
		},
		{
			MethodName: "GetNodeInfo",
			Handler:    _ClusterManager_GetNodeInfo_Handler,
		},
		{
			MethodName: "RecordNodeInfo",
			Handler:    _ClusterManager_RecordNodeInfo_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _ClusterManager_UpdateNode_Handler,
		},
		{
			MethodName: "UpdateClusterModule",
			Handler:    _ClusterManager_UpdateClusterModule_Handler,
		},
		{
			MethodName: "CheckNodeInCluster",
			Handler:    _ClusterManager_CheckNodeInCluster_Handler,
		},
		{
			MethodName: "CordonNode",
			Handler:    _ClusterManager_CordonNode_Handler,
		},
		{
			MethodName: "UnCordonNode",
			Handler:    _ClusterManager_UnCordonNode_Handler,
		},
		{
			MethodName: "DrainNode",
			Handler:    _ClusterManager_DrainNode_Handler,
		},
		{
			MethodName: "CheckDrainNode",
			Handler:    _ClusterManager_CheckDrainNode_Handler,
		},
		{
			MethodName: "UpdateNodeLabels",
			Handler:    _ClusterManager_UpdateNodeLabels_Handler,
		},
		{
			MethodName: "UpdateNodeAnnotations",
			Handler:    _ClusterManager_UpdateNodeAnnotations_Handler,
		},
		{
			MethodName: "UpdateNodeTaints",
			Handler:    _ClusterManager_UpdateNodeTaints_Handler,
		},
		{
			MethodName: "GetClusterCredential",
			Handler:    _ClusterManager_GetClusterCredential_Handler,
		},
		{
			MethodName: "UpdateClusterCredential",
			Handler:    _ClusterManager_UpdateClusterCredential_Handler,
		},
		{
			MethodName: "UpdateClusterKubeConfig",
			Handler:    _ClusterManager_UpdateClusterKubeConfig_Handler,
		},
		{
			MethodName: "DeleteClusterCredential",
			Handler:    _ClusterManager_DeleteClusterCredential_Handler,
		},
		{
			MethodName: "ListClusterCredential",
			Handler:    _ClusterManager_ListClusterCredential_Handler,
		},
		{
			MethodName: "InitFederationCluster",
			Handler:    _ClusterManager_InitFederationCluster_Handler,
		},
		{
			MethodName: "AddFederatedCluster",
			Handler:    _ClusterManager_AddFederatedCluster_Handler,
		},
		{
			MethodName: "CreateCloud",
			Handler:    _ClusterManager_CreateCloud_Handler,
		},
		{
			MethodName: "UpdateCloud",
			Handler:    _ClusterManager_UpdateCloud_Handler,
		},
		{
			MethodName: "DeleteCloud",
			Handler:    _ClusterManager_DeleteCloud_Handler,
		},
		{
			MethodName: "GetCloud",
			Handler:    _ClusterManager_GetCloud_Handler,
		},
		{
			MethodName: "ListCloud",
			Handler:    _ClusterManager_ListCloud_Handler,
		},
		{
			MethodName: "CreateCloudVPC",
			Handler:    _ClusterManager_CreateCloudVPC_Handler,
		},
		{
			MethodName: "UpdateCloudVPC",
			Handler:    _ClusterManager_UpdateCloudVPC_Handler,
		},
		{
			MethodName: "DeleteCloudVPC",
			Handler:    _ClusterManager_DeleteCloudVPC_Handler,
		},
		{
			MethodName: "ListCloudVPC",
			Handler:    _ClusterManager_ListCloudVPC_Handler,
		},
		{
			MethodName: "ListCloudRegions",
			Handler:    _ClusterManager_ListCloudRegions_Handler,
		},
		{
			MethodName: "GetVPCCidr",
			Handler:    _ClusterManager_GetVPCCidr_Handler,
		},
		{
			MethodName: "CreateNodeGroup",
			Handler:    _ClusterManager_CreateNodeGroup_Handler,
		},
		{
			MethodName: "UpdateNodeGroup",
			Handler:    _ClusterManager_UpdateNodeGroup_Handler,
		},
		{
			MethodName: "DeleteNodeGroup",
			Handler:    _ClusterManager_DeleteNodeGroup_Handler,
		},
		{
			MethodName: "GetNodeGroup",
			Handler:    _ClusterManager_GetNodeGroup_Handler,
		},
		{
			MethodName: "ListClusterNodeGroup",
			Handler:    _ClusterManager_ListClusterNodeGroup_Handler,
		},
		{
			MethodName: "ListNodeGroup",
			Handler:    _ClusterManager_ListNodeGroup_Handler,
		},
		{
			MethodName: "RecommendNodeGroupConf",
			Handler:    _ClusterManager_RecommendNodeGroupConf_Handler,
		},
		{
			MethodName: "MoveNodesToGroup",
			Handler:    _ClusterManager_MoveNodesToGroup_Handler,
		},
		{
			MethodName: "RemoveNodesFromGroup",
			Handler:    _ClusterManager_RemoveNodesFromGroup_Handler,
		},
		{
			MethodName: "CleanNodesInGroup",
			Handler:    _ClusterManager_CleanNodesInGroup_Handler,
		},
		{
			MethodName: "CleanNodesInGroupV2",
			Handler:    _ClusterManager_CleanNodesInGroupV2_Handler,
		},
		{
			MethodName: "ListNodesInGroup",
			Handler:    _ClusterManager_ListNodesInGroup_Handler,
		},
		{
			MethodName: "ListNodesInGroupV2",
			Handler:    _ClusterManager_ListNodesInGroupV2_Handler,
		},
		{
			MethodName: "UpdateGroupDesiredNode",
			Handler:    _ClusterManager_UpdateGroupDesiredNode_Handler,
		},
		{
			MethodName: "UpdateGroupDesiredSize",
			Handler:    _ClusterManager_UpdateGroupDesiredSize_Handler,
		},
		{
			MethodName: "UpdateGroupMinMaxSize",
			Handler:    _ClusterManager_UpdateGroupMinMaxSize_Handler,
		},
		{
			MethodName: "UpdateGroupAsTimeRange",
			Handler:    _ClusterManager_UpdateGroupAsTimeRange_Handler,
		},
		{
			MethodName: "GetExternalNodeScriptByGroupID",
			Handler:    _ClusterManager_GetExternalNodeScriptByGroupID_Handler,
		},
		{
			MethodName: "TransNodeGroupToNodeTemplate",
			Handler:    _ClusterManager_TransNodeGroupToNodeTemplate_Handler,
		},
		{
			MethodName: "EnableNodeGroupAutoScale",
			Handler:    _ClusterManager_EnableNodeGroupAutoScale_Handler,
		},
		{
			MethodName: "DisableNodeGroupAutoScale",
			Handler:    _ClusterManager_DisableNodeGroupAutoScale_Handler,
		},
		{
			MethodName: "GetProviderResourceUsage",
			Handler:    _ClusterManager_GetProviderResourceUsage_Handler,
		},
		{
			MethodName: "GetProjectResourceQuotaUsage",
			Handler:    _ClusterManager_GetProjectResourceQuotaUsage_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _ClusterManager_CreateTask_Handler,
		},
		{
			MethodName: "RetryTask",
			Handler:    _ClusterManager_RetryTask_Handler,
		},
		{
			MethodName: "SkipTask",
			Handler:    _ClusterManager_SkipTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _ClusterManager_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _ClusterManager_DeleteTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _ClusterManager_GetTask_Handler,
		},
		{
			MethodName: "ListTask",
			Handler:    _ClusterManager_ListTask_Handler,
		},
		{
			MethodName: "CreateAutoScalingOption",
			Handler:    _ClusterManager_CreateAutoScalingOption_Handler,
		},
		{
			MethodName: "UpdateAutoScalingOption",
			Handler:    _ClusterManager_UpdateAutoScalingOption_Handler,
		},
		{
			MethodName: "UpdateAsOptionDeviceProvider",
			Handler:    _ClusterManager_UpdateAsOptionDeviceProvider_Handler,
		},
		{
			MethodName: "DeleteAutoScalingOption",
			Handler:    _ClusterManager_DeleteAutoScalingOption_Handler,
		},
		{
			MethodName: "GetAutoScalingOption",
			Handler:    _ClusterManager_GetAutoScalingOption_Handler,
		},
		{
			MethodName: "ListAutoScalingOption",
			Handler:    _ClusterManager_ListAutoScalingOption_Handler,
		},
		{
			MethodName: "UpdateAutoScalingStatus",
			Handler:    _ClusterManager_UpdateAutoScalingStatus_Handler,
		},
		{
			MethodName: "SyncAutoScalingOption",
			Handler:    _ClusterManager_SyncAutoScalingOption_Handler,
		},
		{
			MethodName: "CreateNodeTemplate",
			Handler:    _ClusterManager_CreateNodeTemplate_Handler,
		},
		{
			MethodName: "UpdateNodeTemplate",
			Handler:    _ClusterManager_UpdateNodeTemplate_Handler,
		},
		{
			MethodName: "DeleteNodeTemplate",
			Handler:    _ClusterManager_DeleteNodeTemplate_Handler,
		},
		{
			MethodName: "ListNodeTemplate",
			Handler:    _ClusterManager_ListNodeTemplate_Handler,
		},
		{
			MethodName: "GetNodeTemplate",
			Handler:    _ClusterManager_GetNodeTemplate_Handler,
		},
		{
			MethodName: "CreateNotifyTemplate",
			Handler:    _ClusterManager_CreateNotifyTemplate_Handler,
		},
		{
			MethodName: "DeleteNotifyTemplate",
			Handler:    _ClusterManager_DeleteNotifyTemplate_Handler,
		},
		{
			MethodName: "ListNotifyTemplate",
			Handler:    _ClusterManager_ListNotifyTemplate_Handler,
		},
		{
			MethodName: "CreateCloudAccount",
			Handler:    _ClusterManager_CreateCloudAccount_Handler,
		},
		{
			MethodName: "UpdateCloudAccount",
			Handler:    _ClusterManager_UpdateCloudAccount_Handler,
		},
		{
			MethodName: "MigrateCloudAccount",
			Handler:    _ClusterManager_MigrateCloudAccount_Handler,
		},
		{
			MethodName: "DeleteCloudAccount",
			Handler:    _ClusterManager_DeleteCloudAccount_Handler,
		},
		{
			MethodName: "ListCloudAccount",
			Handler:    _ClusterManager_ListCloudAccount_Handler,
		},
		{
			MethodName: "ListCloudAccountToPerm",
			Handler:    _ClusterManager_ListCloudAccountToPerm_Handler,
		},
		{
			MethodName: "VerifyCloudAccount",
			Handler:    _ClusterManager_VerifyCloudAccount_Handler,
		},
		{
			MethodName: "GetServiceRoles",
			Handler:    _ClusterManager_GetServiceRoles_Handler,
		},
		{
			MethodName: "GetResourceGroups",
			Handler:    _ClusterManager_GetResourceGroups_Handler,
		},
		{
			MethodName: "GetCloudRegions",
			Handler:    _ClusterManager_GetCloudRegions_Handler,
		},
		{
			MethodName: "GetCloudRegionZones",
			Handler:    _ClusterManager_GetCloudRegionZones_Handler,
		},
		{
			MethodName: "ListCloudRegionCluster",
			Handler:    _ClusterManager_ListCloudRegionCluster_Handler,
		},
		{
			MethodName: "ListCloudVpcs",
			Handler:    _ClusterManager_ListCloudVpcs_Handler,
		},
		{
			MethodName: "CheckCidrConflictFromVpc",
			Handler:    _ClusterManager_CheckCidrConflictFromVpc_Handler,
		},
		{
			MethodName: "ListCloudSubnets",
			Handler:    _ClusterManager_ListCloudSubnets_Handler,
		},
		{
			MethodName: "ListCloudSecurityGroups",
			Handler:    _ClusterManager_ListCloudSecurityGroups_Handler,
		},
		{
			MethodName: "ListKeypairs",
			Handler:    _ClusterManager_ListKeypairs_Handler,
		},
		{
			MethodName: "ListCloudInstanceTypes",
			Handler:    _ClusterManager_ListCloudInstanceTypes_Handler,
		},
		{
			MethodName: "ListCloudDiskTypes",
			Handler:    _ClusterManager_ListCloudDiskTypes_Handler,
		},
		{
			MethodName: "GetMasterSuggestedMachines",
			Handler:    _ClusterManager_GetMasterSuggestedMachines_Handler,
		},
		{
			MethodName: "ListCloudProjects",
			Handler:    _ClusterManager_ListCloudProjects_Handler,
		},
		{
			MethodName: "ListCloudOsImage",
			Handler:    _ClusterManager_ListCloudOsImage_Handler,
		},
		{
			MethodName: "ListCloudInstances",
			Handler:    _ClusterManager_ListCloudInstances_Handler,
		},
		{
			MethodName: "ListCloudInstancesByPost",
			Handler:    _ClusterManager_ListCloudInstancesByPost_Handler,
		},
		{
			MethodName: "GetCloudAccountType",
			Handler:    _ClusterManager_GetCloudAccountType_Handler,
		},
		{
			MethodName: "GetCloudBandwidthPackages",
			Handler:    _ClusterManager_GetCloudBandwidthPackages_Handler,
		},
		{
			MethodName: "ListCloudRuntimeInfo",
			Handler:    _ClusterManager_ListCloudRuntimeInfo_Handler,
		},
		{
			MethodName: "ListOperationLogs",
			Handler:    _ClusterManager_ListOperationLogs_Handler,
		},
		{
			MethodName: "ListOperationLogsV2",
			Handler:    _ClusterManager_ListOperationLogsV2_Handler,
		},
		{
			MethodName: "ListTaskStepLogs",
			Handler:    _ClusterManager_ListTaskStepLogs_Handler,
		},
		{
			MethodName: "ListTaskRecords",
			Handler:    _ClusterManager_ListTaskRecords_Handler,
		},
		{
			MethodName: "CleanDbHistoryData",
			Handler:    _ClusterManager_CleanDbHistoryData_Handler,
		},
		{
			MethodName: "ListResourceSchema",
			Handler:    _ClusterManager_ListResourceSchema_Handler,
		},
		{
			MethodName: "GetResourceSchema",
			Handler:    _ClusterManager_GetResourceSchema_Handler,
		},
		{
			MethodName: "QueryPermByActionID",
			Handler:    _ClusterManager_QueryPermByActionID_Handler,
		},
		{
			MethodName: "ListBKCloud",
			Handler:    _ClusterManager_ListBKCloud_Handler,
		},
		{
			MethodName: "ListCCTopology",
			Handler:    _ClusterManager_ListCCTopology_Handler,
		},
		{
			MethodName: "GetBkSopsTemplateList",
			Handler:    _ClusterManager_GetBkSopsTemplateList_Handler,
		},
		{
			MethodName: "GetBkSopsTemplateInfo",
			Handler:    _ClusterManager_GetBkSopsTemplateInfo_Handler,
		},
		{
			MethodName: "GetInnerTemplateValues",
			Handler:    _ClusterManager_GetInnerTemplateValues_Handler,
		},
		{
			MethodName: "DebugBkSopsTask",
			Handler:    _ClusterManager_DebugBkSopsTask_Handler,
		},
		{
			MethodName: "GetBatchCustomSetting",
			Handler:    _ClusterManager_GetBatchCustomSetting_Handler,
		},
		{
			MethodName: "GetBizTopologyHost",
			Handler:    _ClusterManager_GetBizTopologyHost_Handler,
		},
		{
			MethodName: "GetTopologyNodes",
			Handler:    _ClusterManager_GetTopologyNodes_Handler,
		},
		{
			MethodName: "GetTopologyHostIdsNodes",
			Handler:    _ClusterManager_GetTopologyHostIdsNodes_Handler,
		},
		{
			MethodName: "GetHostsDetails",
			Handler:    _ClusterManager_GetHostsDetails_Handler,
		},
		{
			MethodName: "GetScopeHostCheck",
			Handler:    _ClusterManager_GetScopeHostCheck_Handler,
		},
		{
			MethodName: "CreateCloudModuleFlag",
			Handler:    _ClusterManager_CreateCloudModuleFlag_Handler,
		},
		{
			MethodName: "UpdateCloudModuleFlag",
			Handler:    _ClusterManager_UpdateCloudModuleFlag_Handler,
		},
		{
			MethodName: "DeleteCloudModuleFlag",
			Handler:    _ClusterManager_DeleteCloudModuleFlag_Handler,
		},
		{
			MethodName: "ListCloudModuleFlag",
			Handler:    _ClusterManager_ListCloudModuleFlag_Handler,
		},
		{
			MethodName: "ListCloudNodePublicPrefix",
			Handler:    _ClusterManager_ListCloudNodePublicPrefix_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _ClusterManager_Health_Handler,
		},
		{
			MethodName: "CreateTemplateConfig",
			Handler:    _ClusterManager_CreateTemplateConfig_Handler,
		},
		{
			MethodName: "DeleteTemplateConfig",
			Handler:    _ClusterManager_DeleteTemplateConfig_Handler,
		},
		{
			MethodName: "ListTemplateConfig",
			Handler:    _ClusterManager_ListTemplateConfig_Handler,
		},
		{
			MethodName: "UpdateTemplateConfig",
			Handler:    _ClusterManager_UpdateTemplateConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clustermanager.proto",
}
