// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	storage "github.com/Tencent/bk-bcs/bcs-common/pkg/bcsapiv4/storage"
	drivers "github.com/Tencent/bk-bcs/bcs-common/pkg/odm/drivers"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateCustomResourceIndex mocks base method.
func (m *MockStorage) CreateCustomResourceIndex(resourceType string, index drivers.Index) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomResourceIndex", resourceType, index)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomResourceIndex indicates an expected call of CreateCustomResourceIndex.
func (mr *MockStorageMockRecorder) CreateCustomResourceIndex(resourceType, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomResourceIndex", reflect.TypeOf((*MockStorage)(nil).CreateCustomResourceIndex), resourceType, index)
}

// DeleteCustomResource mocks base method.
func (m *MockStorage) DeleteCustomResource(resourceType string, data map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomResource", resourceType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomResource indicates an expected call of DeleteCustomResource.
func (mr *MockStorageMockRecorder) DeleteCustomResource(resourceType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomResource", reflect.TypeOf((*MockStorage)(nil).DeleteCustomResource), resourceType, data)
}

// DeleteCustomResourceIndex mocks base method.
func (m *MockStorage) DeleteCustomResourceIndex(resourceType, indexName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomResourceIndex", resourceType, indexName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomResourceIndex indicates an expected call of DeleteCustomResourceIndex.
func (mr *MockStorageMockRecorder) DeleteCustomResourceIndex(resourceType, indexName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomResourceIndex", reflect.TypeOf((*MockStorage)(nil).DeleteCustomResourceIndex), resourceType, indexName)
}

// GetIPPoolDetailInfo mocks base method.
func (m *MockStorage) GetIPPoolDetailInfo(clusterID string) ([]*storage.IPPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPPoolDetailInfo", clusterID)
	ret0, _ := ret[0].([]*storage.IPPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPPoolDetailInfo indicates an expected call of GetIPPoolDetailInfo.
func (mr *MockStorageMockRecorder) GetIPPoolDetailInfo(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPPoolDetailInfo", reflect.TypeOf((*MockStorage)(nil).GetIPPoolDetailInfo), clusterID)
}

// ListCustomResource mocks base method.
func (m *MockStorage) ListCustomResource(resourceType string, filter map[string]string, dest interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomResource", resourceType, filter, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomResource indicates an expected call of ListCustomResource.
func (mr *MockStorageMockRecorder) ListCustomResource(resourceType, filter, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomResource", reflect.TypeOf((*MockStorage)(nil).ListCustomResource), resourceType, filter, dest)
}

// PutCustomResource mocks base method.
func (m *MockStorage) PutCustomResource(resourceType string, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCustomResource", resourceType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutCustomResource indicates an expected call of PutCustomResource.
func (mr *MockStorageMockRecorder) PutCustomResource(resourceType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCustomResource", reflect.TypeOf((*MockStorage)(nil).PutCustomResource), resourceType, data)
}

// QueryK8SDaemonSet mocks base method.
func (m *MockStorage) QueryK8SDaemonSet(cluster, namespace string) ([]*storage.DaemonSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryK8SDaemonSet", cluster, namespace)
	ret0, _ := ret[0].([]*storage.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryK8SDaemonSet indicates an expected call of QueryK8SDaemonSet.
func (mr *MockStorageMockRecorder) QueryK8SDaemonSet(cluster, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryK8SDaemonSet", reflect.TypeOf((*MockStorage)(nil).QueryK8SDaemonSet), cluster, namespace)
}

// QueryK8SDeployment mocks base method.
func (m *MockStorage) QueryK8SDeployment(cluster, namespace string) ([]*storage.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryK8SDeployment", cluster, namespace)
	ret0, _ := ret[0].([]*storage.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryK8SDeployment indicates an expected call of QueryK8SDeployment.
func (mr *MockStorageMockRecorder) QueryK8SDeployment(cluster, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryK8SDeployment", reflect.TypeOf((*MockStorage)(nil).QueryK8SDeployment), cluster, namespace)
}

// QueryK8SGameDeployment mocks base method.
func (m *MockStorage) QueryK8SGameDeployment(cluster, namespace string) ([]*storage.GameDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryK8SGameDeployment", cluster, namespace)
	ret0, _ := ret[0].([]*storage.GameDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryK8SGameDeployment indicates an expected call of QueryK8SGameDeployment.
func (mr *MockStorageMockRecorder) QueryK8SGameDeployment(cluster, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryK8SGameDeployment", reflect.TypeOf((*MockStorage)(nil).QueryK8SGameDeployment), cluster, namespace)
}

// QueryK8SGameStatefulSet mocks base method.
func (m *MockStorage) QueryK8SGameStatefulSet(cluster, namespace string) ([]*storage.GameStatefulSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryK8SGameStatefulSet", cluster, namespace)
	ret0, _ := ret[0].([]*storage.GameStatefulSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryK8SGameStatefulSet indicates an expected call of QueryK8SGameStatefulSet.
func (mr *MockStorageMockRecorder) QueryK8SGameStatefulSet(cluster, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryK8SGameStatefulSet", reflect.TypeOf((*MockStorage)(nil).QueryK8SGameStatefulSet), cluster, namespace)
}

// QueryK8SNamespace mocks base method.
func (m *MockStorage) QueryK8SNamespace(cluster string) ([]*storage.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryK8SNamespace", cluster)
	ret0, _ := ret[0].([]*storage.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryK8SNamespace indicates an expected call of QueryK8SNamespace.
func (mr *MockStorageMockRecorder) QueryK8SNamespace(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryK8SNamespace", reflect.TypeOf((*MockStorage)(nil).QueryK8SNamespace), cluster)
}

// QueryK8SNode mocks base method.
func (m *MockStorage) QueryK8SNode(cluster string) ([]*storage.K8sNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryK8SNode", cluster)
	ret0, _ := ret[0].([]*storage.K8sNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryK8SNode indicates an expected call of QueryK8SNode.
func (mr *MockStorageMockRecorder) QueryK8SNode(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryK8SNode", reflect.TypeOf((*MockStorage)(nil).QueryK8SNode), cluster)
}

// QueryK8SPod mocks base method.
func (m *MockStorage) QueryK8SPod(cluster, namespace string) ([]*storage.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryK8SPod", cluster, namespace)
	ret0, _ := ret[0].([]*storage.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryK8SPod indicates an expected call of QueryK8SPod.
func (mr *MockStorageMockRecorder) QueryK8SPod(cluster, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryK8SPod", reflect.TypeOf((*MockStorage)(nil).QueryK8SPod), cluster, namespace)
}

// QueryK8SStatefulSet mocks base method.
func (m *MockStorage) QueryK8SStatefulSet(cluster, namespace string) ([]*storage.StatefulSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryK8SStatefulSet", cluster, namespace)
	ret0, _ := ret[0].([]*storage.StatefulSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryK8SStatefulSet indicates an expected call of QueryK8SStatefulSet.
func (mr *MockStorageMockRecorder) QueryK8SStatefulSet(cluster, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryK8SStatefulSet", reflect.TypeOf((*MockStorage)(nil).QueryK8SStatefulSet), cluster, namespace)
}

// QueryK8sGPA mocks base method.
func (m *MockStorage) QueryK8sGPA(cluster, namespace string) ([]*storage.Gpa, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryK8sGPA", cluster, namespace)
	ret0, _ := ret[0].([]*storage.Gpa)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryK8sGPA indicates an expected call of QueryK8sGPA.
func (mr *MockStorageMockRecorder) QueryK8sGPA(cluster, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryK8sGPA", reflect.TypeOf((*MockStorage)(nil).QueryK8sGPA), cluster, namespace)
}

// QueryK8sHPA mocks base method.
func (m *MockStorage) QueryK8sHPA(cluster, namespace string) ([]*storage.Hpa, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryK8sHPA", cluster, namespace)
	ret0, _ := ret[0].([]*storage.Hpa)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryK8sHPA indicates an expected call of QueryK8sHPA.
func (mr *MockStorageMockRecorder) QueryK8sHPA(cluster, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryK8sHPA", reflect.TypeOf((*MockStorage)(nil).QueryK8sHPA), cluster, namespace)
}

// QueryK8sPvc mocks base method.
func (m *MockStorage) QueryK8sPvc(cluster, namespace string) ([]*storage.Pvc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryK8sPvc", cluster, namespace)
	ret0, _ := ret[0].([]*storage.Pvc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryK8sPvc indicates an expected call of QueryK8sPvc.
func (mr *MockStorageMockRecorder) QueryK8sPvc(cluster, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryK8sPvc", reflect.TypeOf((*MockStorage)(nil).QueryK8sPvc), cluster, namespace)
}

// QueryK8sReplicaSet mocks base method.
func (m *MockStorage) QueryK8sReplicaSet(cluster, namespace, name string) ([]*storage.ReplicaSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryK8sReplicaSet", cluster, namespace, name)
	ret0, _ := ret[0].([]*storage.ReplicaSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryK8sReplicaSet indicates an expected call of QueryK8sReplicaSet.
func (mr *MockStorageMockRecorder) QueryK8sReplicaSet(cluster, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryK8sReplicaSet", reflect.TypeOf((*MockStorage)(nil).QueryK8sReplicaSet), cluster, namespace, name)
}

// QueryK8sResourceQuota mocks base method.
func (m *MockStorage) QueryK8sResourceQuota(cluster, namespace string) ([]*storage.ResourceQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryK8sResourceQuota", cluster, namespace)
	ret0, _ := ret[0].([]*storage.ResourceQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryK8sResourceQuota indicates an expected call of QueryK8sResourceQuota.
func (mr *MockStorageMockRecorder) QueryK8sResourceQuota(cluster, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryK8sResourceQuota", reflect.TypeOf((*MockStorage)(nil).QueryK8sResourceQuota), cluster, namespace)
}

// QueryK8sStorageClass mocks base method.
func (m *MockStorage) QueryK8sStorageClass(cluster string) ([]*storage.StorageClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryK8sStorageClass", cluster)
	ret0, _ := ret[0].([]*storage.StorageClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryK8sStorageClass indicates an expected call of QueryK8sStorageClass.
func (mr *MockStorageMockRecorder) QueryK8sStorageClass(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryK8sStorageClass", reflect.TypeOf((*MockStorage)(nil).QueryK8sStorageClass), cluster)
}

// QueryMesosApplication mocks base method.
func (m *MockStorage) QueryMesosApplication(cluster string) ([]*storage.MesosApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMesosApplication", cluster)
	ret0, _ := ret[0].([]*storage.MesosApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMesosApplication indicates an expected call of QueryMesosApplication.
func (mr *MockStorageMockRecorder) QueryMesosApplication(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMesosApplication", reflect.TypeOf((*MockStorage)(nil).QueryMesosApplication), cluster)
}

// QueryMesosDeployment mocks base method.
func (m *MockStorage) QueryMesosDeployment(cluster string) ([]*storage.MesosDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMesosDeployment", cluster)
	ret0, _ := ret[0].([]*storage.MesosDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMesosDeployment indicates an expected call of QueryMesosDeployment.
func (mr *MockStorageMockRecorder) QueryMesosDeployment(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMesosDeployment", reflect.TypeOf((*MockStorage)(nil).QueryMesosDeployment), cluster)
}

// QueryMesosNamespace mocks base method.
func (m *MockStorage) QueryMesosNamespace(cluster string) ([]*storage.MesosNamespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMesosNamespace", cluster)
	ret0, _ := ret[0].([]*storage.MesosNamespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMesosNamespace indicates an expected call of QueryMesosNamespace.
func (mr *MockStorageMockRecorder) QueryMesosNamespace(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMesosNamespace", reflect.TypeOf((*MockStorage)(nil).QueryMesosNamespace), cluster)
}

// QueryMesosTaskgroup mocks base method.
func (m *MockStorage) QueryMesosTaskgroup(cluster string) ([]*storage.Taskgroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMesosTaskgroup", cluster)
	ret0, _ := ret[0].([]*storage.Taskgroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMesosTaskgroup indicates an expected call of QueryMesosTaskgroup.
func (mr *MockStorageMockRecorder) QueryMesosTaskgroup(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMesosTaskgroup", reflect.TypeOf((*MockStorage)(nil).QueryMesosTaskgroup), cluster)
}
