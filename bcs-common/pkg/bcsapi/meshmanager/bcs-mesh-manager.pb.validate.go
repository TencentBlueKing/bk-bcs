// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bcs-mesh-manager.proto

package meshmanager

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on WebAnnotations with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WebAnnotations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebAnnotations with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WebAnnotationsMultiError,
// or nil if none found.
func (m *WebAnnotations) ValidateAll() error {
	return m.validate(true)
}

func (m *WebAnnotations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPerms()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WebAnnotationsValidationError{
					field:  "Perms",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WebAnnotationsValidationError{
					field:  "Perms",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPerms()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebAnnotationsValidationError{
				field:  "Perms",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WebAnnotationsMultiError(errors)
	}

	return nil
}

// WebAnnotationsMultiError is an error wrapping multiple validation errors
// returned by WebAnnotations.ValidateAll() if the designated constraints
// aren't met.
type WebAnnotationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebAnnotationsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebAnnotationsMultiError) AllErrors() []error { return m }

// WebAnnotationsValidationError is the validation error returned by
// WebAnnotations.Validate if the designated constraints aren't met.
type WebAnnotationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebAnnotationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebAnnotationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebAnnotationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebAnnotationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebAnnotationsValidationError) ErrorName() string { return "WebAnnotationsValidationError" }

// Error satisfies the builtin error interface
func (e WebAnnotationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebAnnotations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebAnnotationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebAnnotationsValidationError{}

// Validate checks the field values on ListIstioVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIstioVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIstioVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIstioVersionRequestMultiError, or nil if none found.
func (m *ListIstioVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIstioVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListIstioVersionRequestMultiError(errors)
	}

	return nil
}

// ListIstioVersionRequestMultiError is an error wrapping multiple validation
// errors returned by ListIstioVersionRequest.ValidateAll() if the designated
// constraints aren't met.
type ListIstioVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIstioVersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIstioVersionRequestMultiError) AllErrors() []error { return m }

// ListIstioVersionRequestValidationError is the validation error returned by
// ListIstioVersionRequest.Validate if the designated constraints aren't met.
type ListIstioVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIstioVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIstioVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIstioVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIstioVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIstioVersionRequestValidationError) ErrorName() string {
	return "ListIstioVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListIstioVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIstioVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIstioVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIstioVersionRequestValidationError{}

// Validate checks the field values on ListIstioVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIstioVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIstioVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIstioVersionResponseMultiError, or nil if none found.
func (m *ListIstioVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIstioVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for RequestID

	if all {
		switch v := interface{}(m.GetWebAnnotations()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListIstioVersionResponseValidationError{
					field:  "WebAnnotations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListIstioVersionResponseValidationError{
					field:  "WebAnnotations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListIstioVersionResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListIstioVersionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListIstioVersionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListIstioVersionResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListIstioVersionResponseMultiError(errors)
	}

	return nil
}

// ListIstioVersionResponseMultiError is an error wrapping multiple validation
// errors returned by ListIstioVersionResponse.ValidateAll() if the designated
// constraints aren't met.
type ListIstioVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIstioVersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIstioVersionResponseMultiError) AllErrors() []error { return m }

// ListIstioVersionResponseValidationError is the validation error returned by
// ListIstioVersionResponse.Validate if the designated constraints aren't met.
type ListIstioVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIstioVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIstioVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIstioVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIstioVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIstioVersionResponseValidationError) ErrorName() string {
	return "ListIstioVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListIstioVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIstioVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIstioVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIstioVersionResponseValidationError{}

// Validate checks the field values on IstioVersionAndFeatures with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IstioVersionAndFeatures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IstioVersionAndFeatures with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IstioVersionAndFeaturesMultiError, or nil if none found.
func (m *IstioVersionAndFeatures) ValidateAll() error {
	return m.validate(true)
}

func (m *IstioVersionAndFeatures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIstioVersions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IstioVersionAndFeaturesValidationError{
						field:  fmt.Sprintf("IstioVersions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IstioVersionAndFeaturesValidationError{
						field:  fmt.Sprintf("IstioVersions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IstioVersionAndFeaturesValidationError{
					field:  fmt.Sprintf("IstioVersions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFeatureConfigs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IstioVersionAndFeaturesValidationError{
						field:  fmt.Sprintf("FeatureConfigs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IstioVersionAndFeaturesValidationError{
						field:  fmt.Sprintf("FeatureConfigs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IstioVersionAndFeaturesValidationError{
					field:  fmt.Sprintf("FeatureConfigs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IstioVersionAndFeaturesMultiError(errors)
	}

	return nil
}

// IstioVersionAndFeaturesMultiError is an error wrapping multiple validation
// errors returned by IstioVersionAndFeatures.ValidateAll() if the designated
// constraints aren't met.
type IstioVersionAndFeaturesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IstioVersionAndFeaturesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IstioVersionAndFeaturesMultiError) AllErrors() []error { return m }

// IstioVersionAndFeaturesValidationError is the validation error returned by
// IstioVersionAndFeatures.Validate if the designated constraints aren't met.
type IstioVersionAndFeaturesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IstioVersionAndFeaturesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IstioVersionAndFeaturesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IstioVersionAndFeaturesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IstioVersionAndFeaturesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IstioVersionAndFeaturesValidationError) ErrorName() string {
	return "IstioVersionAndFeaturesValidationError"
}

// Error satisfies the builtin error interface
func (e IstioVersionAndFeaturesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIstioVersionAndFeatures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IstioVersionAndFeaturesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IstioVersionAndFeaturesValidationError{}

// Validate checks the field values on IstioVersion with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IstioVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IstioVersion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IstioVersionMultiError, or
// nil if none found.
func (m *IstioVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *IstioVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for ChartVersion

	// no validation rules for KubeVersion

	if len(errors) > 0 {
		return IstioVersionMultiError(errors)
	}

	return nil
}

// IstioVersionMultiError is an error wrapping multiple validation errors
// returned by IstioVersion.ValidateAll() if the designated constraints aren't met.
type IstioVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IstioVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IstioVersionMultiError) AllErrors() []error { return m }

// IstioVersionValidationError is the validation error returned by
// IstioVersion.Validate if the designated constraints aren't met.
type IstioVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IstioVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IstioVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IstioVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IstioVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IstioVersionValidationError) ErrorName() string { return "IstioVersionValidationError" }

// Error satisfies the builtin error interface
func (e IstioVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIstioVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IstioVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IstioVersionValidationError{}

// Validate checks the field values on FeatureConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FeatureConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeatureConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FeatureConfigMultiError, or
// nil if none found.
func (m *FeatureConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *FeatureConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for DefaultValue

	if len(errors) > 0 {
		return FeatureConfigMultiError(errors)
	}

	return nil
}

// FeatureConfigMultiError is an error wrapping multiple validation errors
// returned by FeatureConfig.ValidateAll() if the designated constraints
// aren't met.
type FeatureConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeatureConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeatureConfigMultiError) AllErrors() []error { return m }

// FeatureConfigValidationError is the validation error returned by
// FeatureConfig.Validate if the designated constraints aren't met.
type FeatureConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeatureConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeatureConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeatureConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeatureConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeatureConfigValidationError) ErrorName() string { return "FeatureConfigValidationError" }

// Error satisfies the builtin error interface
func (e FeatureConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeatureConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeatureConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeatureConfigValidationError{}
