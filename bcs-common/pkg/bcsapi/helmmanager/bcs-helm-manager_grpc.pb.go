// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.5
// source: bcs-helm-manager.proto

package helmmanager

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HelmManager_Available_FullMethodName          = "/helmmanager.HelmManager/Available"
	HelmManager_CreateRepository_FullMethodName   = "/helmmanager.HelmManager/CreateRepository"
	HelmManager_UpdateRepository_FullMethodName   = "/helmmanager.HelmManager/UpdateRepository"
	HelmManager_GetRepository_FullMethodName      = "/helmmanager.HelmManager/GetRepository"
	HelmManager_DeleteRepository_FullMethodName   = "/helmmanager.HelmManager/DeleteRepository"
	HelmManager_ListRepository_FullMethodName     = "/helmmanager.HelmManager/ListRepository"
	HelmManager_ListChartV1_FullMethodName        = "/helmmanager.HelmManager/ListChartV1"
	HelmManager_GetChartDetailV1_FullMethodName   = "/helmmanager.HelmManager/GetChartDetailV1"
	HelmManager_ListChartVersionV1_FullMethodName = "/helmmanager.HelmManager/ListChartVersionV1"
	HelmManager_GetVersionDetailV1_FullMethodName = "/helmmanager.HelmManager/GetVersionDetailV1"
	HelmManager_DeleteChart_FullMethodName        = "/helmmanager.HelmManager/DeleteChart"
	HelmManager_DeleteChartVersion_FullMethodName = "/helmmanager.HelmManager/DeleteChartVersion"
	HelmManager_DownloadChart_FullMethodName      = "/helmmanager.HelmManager/DownloadChart"
	HelmManager_GetChartRelease_FullMethodName    = "/helmmanager.HelmManager/GetChartRelease"
	HelmManager_ListReleaseV1_FullMethodName      = "/helmmanager.HelmManager/ListReleaseV1"
	HelmManager_GetReleaseDetailV1_FullMethodName = "/helmmanager.HelmManager/GetReleaseDetailV1"
	HelmManager_InstallReleaseV1_FullMethodName   = "/helmmanager.HelmManager/InstallReleaseV1"
	HelmManager_UninstallReleaseV1_FullMethodName = "/helmmanager.HelmManager/UninstallReleaseV1"
	HelmManager_UpgradeReleaseV1_FullMethodName   = "/helmmanager.HelmManager/UpgradeReleaseV1"
	HelmManager_RollbackReleaseV1_FullMethodName  = "/helmmanager.HelmManager/RollbackReleaseV1"
	HelmManager_ReleasePreview_FullMethodName     = "/helmmanager.HelmManager/ReleasePreview"
	HelmManager_GetReleaseHistory_FullMethodName  = "/helmmanager.HelmManager/GetReleaseHistory"
	HelmManager_GetReleaseStatus_FullMethodName   = "/helmmanager.HelmManager/GetReleaseStatus"
	HelmManager_GetReleasePods_FullMethodName     = "/helmmanager.HelmManager/GetReleasePods"
)

// HelmManagerClient is the client API for HelmManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelmManagerClient interface {
	//* common service
	Available(ctx context.Context, in *AvailableReq, opts ...grpc.CallOption) (*AvailableResp, error)
	//* repository service
	CreateRepository(ctx context.Context, in *CreateRepositoryReq, opts ...grpc.CallOption) (*CreateRepositoryResp, error)
	UpdateRepository(ctx context.Context, in *UpdateRepositoryReq, opts ...grpc.CallOption) (*UpdateRepositoryResp, error)
	GetRepository(ctx context.Context, in *GetRepositoryReq, opts ...grpc.CallOption) (*GetRepositoryResp, error)
	DeleteRepository(ctx context.Context, in *DeleteRepositoryReq, opts ...grpc.CallOption) (*DeleteRepositoryResp, error)
	ListRepository(ctx context.Context, in *ListRepositoryReq, opts ...grpc.CallOption) (*ListRepositoryResp, error)
	//* chart service
	ListChartV1(ctx context.Context, in *ListChartV1Req, opts ...grpc.CallOption) (*ListChartV1Resp, error)
	GetChartDetailV1(ctx context.Context, in *GetChartDetailV1Req, opts ...grpc.CallOption) (*GetChartDetailV1Resp, error)
	ListChartVersionV1(ctx context.Context, in *ListChartVersionV1Req, opts ...grpc.CallOption) (*ListChartVersionV1Resp, error)
	GetVersionDetailV1(ctx context.Context, in *GetVersionDetailV1Req, opts ...grpc.CallOption) (*GetVersionDetailV1Resp, error)
	DeleteChart(ctx context.Context, in *DeleteChartReq, opts ...grpc.CallOption) (*DeleteChartResp, error)
	DeleteChartVersion(ctx context.Context, in *DeleteChartVersionReq, opts ...grpc.CallOption) (*DeleteChartVersionResp, error)
	DownloadChart(ctx context.Context, in *DownloadChartReq, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	GetChartRelease(ctx context.Context, in *GetChartReleaseReq, opts ...grpc.CallOption) (*GetChartReleaseResp, error)
	//* release service
	ListReleaseV1(ctx context.Context, in *ListReleaseV1Req, opts ...grpc.CallOption) (*ListReleaseV1Resp, error)
	GetReleaseDetailV1(ctx context.Context, in *GetReleaseDetailV1Req, opts ...grpc.CallOption) (*GetReleaseDetailV1Resp, error)
	InstallReleaseV1(ctx context.Context, in *InstallReleaseV1Req, opts ...grpc.CallOption) (*InstallReleaseV1Resp, error)
	UninstallReleaseV1(ctx context.Context, in *UninstallReleaseV1Req, opts ...grpc.CallOption) (*UninstallReleaseV1Resp, error)
	UpgradeReleaseV1(ctx context.Context, in *UpgradeReleaseV1Req, opts ...grpc.CallOption) (*UpgradeReleaseV1Resp, error)
	RollbackReleaseV1(ctx context.Context, in *RollbackReleaseV1Req, opts ...grpc.CallOption) (*RollbackReleaseV1Resp, error)
	ReleasePreview(ctx context.Context, in *ReleasePreviewReq, opts ...grpc.CallOption) (*ReleasePreviewResp, error)
	GetReleaseHistory(ctx context.Context, in *GetReleaseHistoryReq, opts ...grpc.CallOption) (*GetReleaseHistoryResp, error)
	GetReleaseStatus(ctx context.Context, in *GetReleaseStatusReq, opts ...grpc.CallOption) (*CommonListResp, error)
	GetReleasePods(ctx context.Context, in *GetReleasePodsReq, opts ...grpc.CallOption) (*CommonListResp, error)
}

type helmManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewHelmManagerClient(cc grpc.ClientConnInterface) HelmManagerClient {
	return &helmManagerClient{cc}
}

func (c *helmManagerClient) Available(ctx context.Context, in *AvailableReq, opts ...grpc.CallOption) (*AvailableResp, error) {
	out := new(AvailableResp)
	err := c.cc.Invoke(ctx, HelmManager_Available_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) CreateRepository(ctx context.Context, in *CreateRepositoryReq, opts ...grpc.CallOption) (*CreateRepositoryResp, error) {
	out := new(CreateRepositoryResp)
	err := c.cc.Invoke(ctx, HelmManager_CreateRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) UpdateRepository(ctx context.Context, in *UpdateRepositoryReq, opts ...grpc.CallOption) (*UpdateRepositoryResp, error) {
	out := new(UpdateRepositoryResp)
	err := c.cc.Invoke(ctx, HelmManager_UpdateRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) GetRepository(ctx context.Context, in *GetRepositoryReq, opts ...grpc.CallOption) (*GetRepositoryResp, error) {
	out := new(GetRepositoryResp)
	err := c.cc.Invoke(ctx, HelmManager_GetRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) DeleteRepository(ctx context.Context, in *DeleteRepositoryReq, opts ...grpc.CallOption) (*DeleteRepositoryResp, error) {
	out := new(DeleteRepositoryResp)
	err := c.cc.Invoke(ctx, HelmManager_DeleteRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) ListRepository(ctx context.Context, in *ListRepositoryReq, opts ...grpc.CallOption) (*ListRepositoryResp, error) {
	out := new(ListRepositoryResp)
	err := c.cc.Invoke(ctx, HelmManager_ListRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) ListChartV1(ctx context.Context, in *ListChartV1Req, opts ...grpc.CallOption) (*ListChartV1Resp, error) {
	out := new(ListChartV1Resp)
	err := c.cc.Invoke(ctx, HelmManager_ListChartV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) GetChartDetailV1(ctx context.Context, in *GetChartDetailV1Req, opts ...grpc.CallOption) (*GetChartDetailV1Resp, error) {
	out := new(GetChartDetailV1Resp)
	err := c.cc.Invoke(ctx, HelmManager_GetChartDetailV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) ListChartVersionV1(ctx context.Context, in *ListChartVersionV1Req, opts ...grpc.CallOption) (*ListChartVersionV1Resp, error) {
	out := new(ListChartVersionV1Resp)
	err := c.cc.Invoke(ctx, HelmManager_ListChartVersionV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) GetVersionDetailV1(ctx context.Context, in *GetVersionDetailV1Req, opts ...grpc.CallOption) (*GetVersionDetailV1Resp, error) {
	out := new(GetVersionDetailV1Resp)
	err := c.cc.Invoke(ctx, HelmManager_GetVersionDetailV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) DeleteChart(ctx context.Context, in *DeleteChartReq, opts ...grpc.CallOption) (*DeleteChartResp, error) {
	out := new(DeleteChartResp)
	err := c.cc.Invoke(ctx, HelmManager_DeleteChart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) DeleteChartVersion(ctx context.Context, in *DeleteChartVersionReq, opts ...grpc.CallOption) (*DeleteChartVersionResp, error) {
	out := new(DeleteChartVersionResp)
	err := c.cc.Invoke(ctx, HelmManager_DeleteChartVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) DownloadChart(ctx context.Context, in *DownloadChartReq, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, HelmManager_DownloadChart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) GetChartRelease(ctx context.Context, in *GetChartReleaseReq, opts ...grpc.CallOption) (*GetChartReleaseResp, error) {
	out := new(GetChartReleaseResp)
	err := c.cc.Invoke(ctx, HelmManager_GetChartRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) ListReleaseV1(ctx context.Context, in *ListReleaseV1Req, opts ...grpc.CallOption) (*ListReleaseV1Resp, error) {
	out := new(ListReleaseV1Resp)
	err := c.cc.Invoke(ctx, HelmManager_ListReleaseV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) GetReleaseDetailV1(ctx context.Context, in *GetReleaseDetailV1Req, opts ...grpc.CallOption) (*GetReleaseDetailV1Resp, error) {
	out := new(GetReleaseDetailV1Resp)
	err := c.cc.Invoke(ctx, HelmManager_GetReleaseDetailV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) InstallReleaseV1(ctx context.Context, in *InstallReleaseV1Req, opts ...grpc.CallOption) (*InstallReleaseV1Resp, error) {
	out := new(InstallReleaseV1Resp)
	err := c.cc.Invoke(ctx, HelmManager_InstallReleaseV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) UninstallReleaseV1(ctx context.Context, in *UninstallReleaseV1Req, opts ...grpc.CallOption) (*UninstallReleaseV1Resp, error) {
	out := new(UninstallReleaseV1Resp)
	err := c.cc.Invoke(ctx, HelmManager_UninstallReleaseV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) UpgradeReleaseV1(ctx context.Context, in *UpgradeReleaseV1Req, opts ...grpc.CallOption) (*UpgradeReleaseV1Resp, error) {
	out := new(UpgradeReleaseV1Resp)
	err := c.cc.Invoke(ctx, HelmManager_UpgradeReleaseV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) RollbackReleaseV1(ctx context.Context, in *RollbackReleaseV1Req, opts ...grpc.CallOption) (*RollbackReleaseV1Resp, error) {
	out := new(RollbackReleaseV1Resp)
	err := c.cc.Invoke(ctx, HelmManager_RollbackReleaseV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) ReleasePreview(ctx context.Context, in *ReleasePreviewReq, opts ...grpc.CallOption) (*ReleasePreviewResp, error) {
	out := new(ReleasePreviewResp)
	err := c.cc.Invoke(ctx, HelmManager_ReleasePreview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) GetReleaseHistory(ctx context.Context, in *GetReleaseHistoryReq, opts ...grpc.CallOption) (*GetReleaseHistoryResp, error) {
	out := new(GetReleaseHistoryResp)
	err := c.cc.Invoke(ctx, HelmManager_GetReleaseHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) GetReleaseStatus(ctx context.Context, in *GetReleaseStatusReq, opts ...grpc.CallOption) (*CommonListResp, error) {
	out := new(CommonListResp)
	err := c.cc.Invoke(ctx, HelmManager_GetReleaseStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerClient) GetReleasePods(ctx context.Context, in *GetReleasePodsReq, opts ...grpc.CallOption) (*CommonListResp, error) {
	out := new(CommonListResp)
	err := c.cc.Invoke(ctx, HelmManager_GetReleasePods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelmManagerServer is the server API for HelmManager service.
// All implementations must embed UnimplementedHelmManagerServer
// for forward compatibility
type HelmManagerServer interface {
	//* common service
	Available(context.Context, *AvailableReq) (*AvailableResp, error)
	//* repository service
	CreateRepository(context.Context, *CreateRepositoryReq) (*CreateRepositoryResp, error)
	UpdateRepository(context.Context, *UpdateRepositoryReq) (*UpdateRepositoryResp, error)
	GetRepository(context.Context, *GetRepositoryReq) (*GetRepositoryResp, error)
	DeleteRepository(context.Context, *DeleteRepositoryReq) (*DeleteRepositoryResp, error)
	ListRepository(context.Context, *ListRepositoryReq) (*ListRepositoryResp, error)
	//* chart service
	ListChartV1(context.Context, *ListChartV1Req) (*ListChartV1Resp, error)
	GetChartDetailV1(context.Context, *GetChartDetailV1Req) (*GetChartDetailV1Resp, error)
	ListChartVersionV1(context.Context, *ListChartVersionV1Req) (*ListChartVersionV1Resp, error)
	GetVersionDetailV1(context.Context, *GetVersionDetailV1Req) (*GetVersionDetailV1Resp, error)
	DeleteChart(context.Context, *DeleteChartReq) (*DeleteChartResp, error)
	DeleteChartVersion(context.Context, *DeleteChartVersionReq) (*DeleteChartVersionResp, error)
	DownloadChart(context.Context, *DownloadChartReq) (*httpbody.HttpBody, error)
	GetChartRelease(context.Context, *GetChartReleaseReq) (*GetChartReleaseResp, error)
	//* release service
	ListReleaseV1(context.Context, *ListReleaseV1Req) (*ListReleaseV1Resp, error)
	GetReleaseDetailV1(context.Context, *GetReleaseDetailV1Req) (*GetReleaseDetailV1Resp, error)
	InstallReleaseV1(context.Context, *InstallReleaseV1Req) (*InstallReleaseV1Resp, error)
	UninstallReleaseV1(context.Context, *UninstallReleaseV1Req) (*UninstallReleaseV1Resp, error)
	UpgradeReleaseV1(context.Context, *UpgradeReleaseV1Req) (*UpgradeReleaseV1Resp, error)
	RollbackReleaseV1(context.Context, *RollbackReleaseV1Req) (*RollbackReleaseV1Resp, error)
	ReleasePreview(context.Context, *ReleasePreviewReq) (*ReleasePreviewResp, error)
	GetReleaseHistory(context.Context, *GetReleaseHistoryReq) (*GetReleaseHistoryResp, error)
	GetReleaseStatus(context.Context, *GetReleaseStatusReq) (*CommonListResp, error)
	GetReleasePods(context.Context, *GetReleasePodsReq) (*CommonListResp, error)
	mustEmbedUnimplementedHelmManagerServer()
}

// UnimplementedHelmManagerServer must be embedded to have forward compatible implementations.
type UnimplementedHelmManagerServer struct {
}

func (UnimplementedHelmManagerServer) Available(context.Context, *AvailableReq) (*AvailableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Available not implemented")
}
func (UnimplementedHelmManagerServer) CreateRepository(context.Context, *CreateRepositoryReq) (*CreateRepositoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepository not implemented")
}
func (UnimplementedHelmManagerServer) UpdateRepository(context.Context, *UpdateRepositoryReq) (*UpdateRepositoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepository not implemented")
}
func (UnimplementedHelmManagerServer) GetRepository(context.Context, *GetRepositoryReq) (*GetRepositoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepository not implemented")
}
func (UnimplementedHelmManagerServer) DeleteRepository(context.Context, *DeleteRepositoryReq) (*DeleteRepositoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepository not implemented")
}
func (UnimplementedHelmManagerServer) ListRepository(context.Context, *ListRepositoryReq) (*ListRepositoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepository not implemented")
}
func (UnimplementedHelmManagerServer) ListChartV1(context.Context, *ListChartV1Req) (*ListChartV1Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChartV1 not implemented")
}
func (UnimplementedHelmManagerServer) GetChartDetailV1(context.Context, *GetChartDetailV1Req) (*GetChartDetailV1Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChartDetailV1 not implemented")
}
func (UnimplementedHelmManagerServer) ListChartVersionV1(context.Context, *ListChartVersionV1Req) (*ListChartVersionV1Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChartVersionV1 not implemented")
}
func (UnimplementedHelmManagerServer) GetVersionDetailV1(context.Context, *GetVersionDetailV1Req) (*GetVersionDetailV1Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionDetailV1 not implemented")
}
func (UnimplementedHelmManagerServer) DeleteChart(context.Context, *DeleteChartReq) (*DeleteChartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChart not implemented")
}
func (UnimplementedHelmManagerServer) DeleteChartVersion(context.Context, *DeleteChartVersionReq) (*DeleteChartVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChartVersion not implemented")
}
func (UnimplementedHelmManagerServer) DownloadChart(context.Context, *DownloadChartReq) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadChart not implemented")
}
func (UnimplementedHelmManagerServer) GetChartRelease(context.Context, *GetChartReleaseReq) (*GetChartReleaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChartRelease not implemented")
}
func (UnimplementedHelmManagerServer) ListReleaseV1(context.Context, *ListReleaseV1Req) (*ListReleaseV1Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleaseV1 not implemented")
}
func (UnimplementedHelmManagerServer) GetReleaseDetailV1(context.Context, *GetReleaseDetailV1Req) (*GetReleaseDetailV1Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleaseDetailV1 not implemented")
}
func (UnimplementedHelmManagerServer) InstallReleaseV1(context.Context, *InstallReleaseV1Req) (*InstallReleaseV1Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallReleaseV1 not implemented")
}
func (UnimplementedHelmManagerServer) UninstallReleaseV1(context.Context, *UninstallReleaseV1Req) (*UninstallReleaseV1Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallReleaseV1 not implemented")
}
func (UnimplementedHelmManagerServer) UpgradeReleaseV1(context.Context, *UpgradeReleaseV1Req) (*UpgradeReleaseV1Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeReleaseV1 not implemented")
}
func (UnimplementedHelmManagerServer) RollbackReleaseV1(context.Context, *RollbackReleaseV1Req) (*RollbackReleaseV1Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackReleaseV1 not implemented")
}
func (UnimplementedHelmManagerServer) ReleasePreview(context.Context, *ReleasePreviewReq) (*ReleasePreviewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleasePreview not implemented")
}
func (UnimplementedHelmManagerServer) GetReleaseHistory(context.Context, *GetReleaseHistoryReq) (*GetReleaseHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleaseHistory not implemented")
}
func (UnimplementedHelmManagerServer) GetReleaseStatus(context.Context, *GetReleaseStatusReq) (*CommonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleaseStatus not implemented")
}
func (UnimplementedHelmManagerServer) GetReleasePods(context.Context, *GetReleasePodsReq) (*CommonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleasePods not implemented")
}
func (UnimplementedHelmManagerServer) mustEmbedUnimplementedHelmManagerServer() {}

// UnsafeHelmManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelmManagerServer will
// result in compilation errors.
type UnsafeHelmManagerServer interface {
	mustEmbedUnimplementedHelmManagerServer()
}

func RegisterHelmManagerServer(s grpc.ServiceRegistrar, srv HelmManagerServer) {
	s.RegisterService(&HelmManager_ServiceDesc, srv)
}

func _HelmManager_Available_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).Available(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_Available_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).Available(ctx, req.(*AvailableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_CreateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).CreateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_CreateRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).CreateRepository(ctx, req.(*CreateRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_UpdateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).UpdateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_UpdateRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).UpdateRepository(ctx, req.(*UpdateRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_GetRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).GetRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_GetRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).GetRepository(ctx, req.(*GetRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_DeleteRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).DeleteRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_DeleteRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).DeleteRepository(ctx, req.(*DeleteRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_ListRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).ListRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_ListRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).ListRepository(ctx, req.(*ListRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_ListChartV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChartV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).ListChartV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_ListChartV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).ListChartV1(ctx, req.(*ListChartV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_GetChartDetailV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChartDetailV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).GetChartDetailV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_GetChartDetailV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).GetChartDetailV1(ctx, req.(*GetChartDetailV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_ListChartVersionV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChartVersionV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).ListChartVersionV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_ListChartVersionV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).ListChartVersionV1(ctx, req.(*ListChartVersionV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_GetVersionDetailV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionDetailV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).GetVersionDetailV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_GetVersionDetailV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).GetVersionDetailV1(ctx, req.(*GetVersionDetailV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_DeleteChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).DeleteChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_DeleteChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).DeleteChart(ctx, req.(*DeleteChartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_DeleteChartVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChartVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).DeleteChartVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_DeleteChartVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).DeleteChartVersion(ctx, req.(*DeleteChartVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_DownloadChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadChartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).DownloadChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_DownloadChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).DownloadChart(ctx, req.(*DownloadChartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_GetChartRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChartReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).GetChartRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_GetChartRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).GetChartRelease(ctx, req.(*GetChartReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_ListReleaseV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleaseV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).ListReleaseV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_ListReleaseV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).ListReleaseV1(ctx, req.(*ListReleaseV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_GetReleaseDetailV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseDetailV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).GetReleaseDetailV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_GetReleaseDetailV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).GetReleaseDetailV1(ctx, req.(*GetReleaseDetailV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_InstallReleaseV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallReleaseV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).InstallReleaseV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_InstallReleaseV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).InstallReleaseV1(ctx, req.(*InstallReleaseV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_UninstallReleaseV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallReleaseV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).UninstallReleaseV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_UninstallReleaseV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).UninstallReleaseV1(ctx, req.(*UninstallReleaseV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_UpgradeReleaseV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeReleaseV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).UpgradeReleaseV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_UpgradeReleaseV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).UpgradeReleaseV1(ctx, req.(*UpgradeReleaseV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_RollbackReleaseV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackReleaseV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).RollbackReleaseV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_RollbackReleaseV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).RollbackReleaseV1(ctx, req.(*RollbackReleaseV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_ReleasePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleasePreviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).ReleasePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_ReleasePreview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).ReleasePreview(ctx, req.(*ReleasePreviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_GetReleaseHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).GetReleaseHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_GetReleaseHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).GetReleaseHistory(ctx, req.(*GetReleaseHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_GetReleaseStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).GetReleaseStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_GetReleaseStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).GetReleaseStatus(ctx, req.(*GetReleaseStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmManager_GetReleasePods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleasePodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmManagerServer).GetReleasePods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelmManager_GetReleasePods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmManagerServer).GetReleasePods(ctx, req.(*GetReleasePodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HelmManager_ServiceDesc is the grpc.ServiceDesc for HelmManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelmManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helmmanager.HelmManager",
	HandlerType: (*HelmManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Available",
			Handler:    _HelmManager_Available_Handler,
		},
		{
			MethodName: "CreateRepository",
			Handler:    _HelmManager_CreateRepository_Handler,
		},
		{
			MethodName: "UpdateRepository",
			Handler:    _HelmManager_UpdateRepository_Handler,
		},
		{
			MethodName: "GetRepository",
			Handler:    _HelmManager_GetRepository_Handler,
		},
		{
			MethodName: "DeleteRepository",
			Handler:    _HelmManager_DeleteRepository_Handler,
		},
		{
			MethodName: "ListRepository",
			Handler:    _HelmManager_ListRepository_Handler,
		},
		{
			MethodName: "ListChartV1",
			Handler:    _HelmManager_ListChartV1_Handler,
		},
		{
			MethodName: "GetChartDetailV1",
			Handler:    _HelmManager_GetChartDetailV1_Handler,
		},
		{
			MethodName: "ListChartVersionV1",
			Handler:    _HelmManager_ListChartVersionV1_Handler,
		},
		{
			MethodName: "GetVersionDetailV1",
			Handler:    _HelmManager_GetVersionDetailV1_Handler,
		},
		{
			MethodName: "DeleteChart",
			Handler:    _HelmManager_DeleteChart_Handler,
		},
		{
			MethodName: "DeleteChartVersion",
			Handler:    _HelmManager_DeleteChartVersion_Handler,
		},
		{
			MethodName: "DownloadChart",
			Handler:    _HelmManager_DownloadChart_Handler,
		},
		{
			MethodName: "GetChartRelease",
			Handler:    _HelmManager_GetChartRelease_Handler,
		},
		{
			MethodName: "ListReleaseV1",
			Handler:    _HelmManager_ListReleaseV1_Handler,
		},
		{
			MethodName: "GetReleaseDetailV1",
			Handler:    _HelmManager_GetReleaseDetailV1_Handler,
		},
		{
			MethodName: "InstallReleaseV1",
			Handler:    _HelmManager_InstallReleaseV1_Handler,
		},
		{
			MethodName: "UninstallReleaseV1",
			Handler:    _HelmManager_UninstallReleaseV1_Handler,
		},
		{
			MethodName: "UpgradeReleaseV1",
			Handler:    _HelmManager_UpgradeReleaseV1_Handler,
		},
		{
			MethodName: "RollbackReleaseV1",
			Handler:    _HelmManager_RollbackReleaseV1_Handler,
		},
		{
			MethodName: "ReleasePreview",
			Handler:    _HelmManager_ReleasePreview_Handler,
		},
		{
			MethodName: "GetReleaseHistory",
			Handler:    _HelmManager_GetReleaseHistory_Handler,
		},
		{
			MethodName: "GetReleaseStatus",
			Handler:    _HelmManager_GetReleaseStatus_Handler,
		},
		{
			MethodName: "GetReleasePods",
			Handler:    _HelmManager_GetReleasePods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bcs-helm-manager.proto",
}

const (
	ClusterAddons_ListAddons_FullMethodName      = "/helmmanager.ClusterAddons/ListAddons"
	ClusterAddons_GetAddonsDetail_FullMethodName = "/helmmanager.ClusterAddons/GetAddonsDetail"
	ClusterAddons_InstallAddons_FullMethodName   = "/helmmanager.ClusterAddons/InstallAddons"
	ClusterAddons_UpgradeAddons_FullMethodName   = "/helmmanager.ClusterAddons/UpgradeAddons"
	ClusterAddons_StopAddons_FullMethodName      = "/helmmanager.ClusterAddons/StopAddons"
	ClusterAddons_UninstallAddons_FullMethodName = "/helmmanager.ClusterAddons/UninstallAddons"
)

// ClusterAddonsClient is the client API for ClusterAddons service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterAddonsClient interface {
	ListAddons(ctx context.Context, in *ListAddonsReq, opts ...grpc.CallOption) (*ListAddonsResp, error)
	GetAddonsDetail(ctx context.Context, in *GetAddonsDetailReq, opts ...grpc.CallOption) (*GetAddonsDetailResp, error)
	InstallAddons(ctx context.Context, in *InstallAddonsReq, opts ...grpc.CallOption) (*InstallAddonsResp, error)
	UpgradeAddons(ctx context.Context, in *UpgradeAddonsReq, opts ...grpc.CallOption) (*UpgradeAddonsResp, error)
	StopAddons(ctx context.Context, in *StopAddonsReq, opts ...grpc.CallOption) (*StopAddonsResp, error)
	UninstallAddons(ctx context.Context, in *UninstallAddonsReq, opts ...grpc.CallOption) (*UninstallAddonsResp, error)
}

type clusterAddonsClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterAddonsClient(cc grpc.ClientConnInterface) ClusterAddonsClient {
	return &clusterAddonsClient{cc}
}

func (c *clusterAddonsClient) ListAddons(ctx context.Context, in *ListAddonsReq, opts ...grpc.CallOption) (*ListAddonsResp, error) {
	out := new(ListAddonsResp)
	err := c.cc.Invoke(ctx, ClusterAddons_ListAddons_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAddonsClient) GetAddonsDetail(ctx context.Context, in *GetAddonsDetailReq, opts ...grpc.CallOption) (*GetAddonsDetailResp, error) {
	out := new(GetAddonsDetailResp)
	err := c.cc.Invoke(ctx, ClusterAddons_GetAddonsDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAddonsClient) InstallAddons(ctx context.Context, in *InstallAddonsReq, opts ...grpc.CallOption) (*InstallAddonsResp, error) {
	out := new(InstallAddonsResp)
	err := c.cc.Invoke(ctx, ClusterAddons_InstallAddons_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAddonsClient) UpgradeAddons(ctx context.Context, in *UpgradeAddonsReq, opts ...grpc.CallOption) (*UpgradeAddonsResp, error) {
	out := new(UpgradeAddonsResp)
	err := c.cc.Invoke(ctx, ClusterAddons_UpgradeAddons_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAddonsClient) StopAddons(ctx context.Context, in *StopAddonsReq, opts ...grpc.CallOption) (*StopAddonsResp, error) {
	out := new(StopAddonsResp)
	err := c.cc.Invoke(ctx, ClusterAddons_StopAddons_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAddonsClient) UninstallAddons(ctx context.Context, in *UninstallAddonsReq, opts ...grpc.CallOption) (*UninstallAddonsResp, error) {
	out := new(UninstallAddonsResp)
	err := c.cc.Invoke(ctx, ClusterAddons_UninstallAddons_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterAddonsServer is the server API for ClusterAddons service.
// All implementations must embed UnimplementedClusterAddonsServer
// for forward compatibility
type ClusterAddonsServer interface {
	ListAddons(context.Context, *ListAddonsReq) (*ListAddonsResp, error)
	GetAddonsDetail(context.Context, *GetAddonsDetailReq) (*GetAddonsDetailResp, error)
	InstallAddons(context.Context, *InstallAddonsReq) (*InstallAddonsResp, error)
	UpgradeAddons(context.Context, *UpgradeAddonsReq) (*UpgradeAddonsResp, error)
	StopAddons(context.Context, *StopAddonsReq) (*StopAddonsResp, error)
	UninstallAddons(context.Context, *UninstallAddonsReq) (*UninstallAddonsResp, error)
	mustEmbedUnimplementedClusterAddonsServer()
}

// UnimplementedClusterAddonsServer must be embedded to have forward compatible implementations.
type UnimplementedClusterAddonsServer struct {
}

func (UnimplementedClusterAddonsServer) ListAddons(context.Context, *ListAddonsReq) (*ListAddonsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddons not implemented")
}
func (UnimplementedClusterAddonsServer) GetAddonsDetail(context.Context, *GetAddonsDetailReq) (*GetAddonsDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddonsDetail not implemented")
}
func (UnimplementedClusterAddonsServer) InstallAddons(context.Context, *InstallAddonsReq) (*InstallAddonsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallAddons not implemented")
}
func (UnimplementedClusterAddonsServer) UpgradeAddons(context.Context, *UpgradeAddonsReq) (*UpgradeAddonsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeAddons not implemented")
}
func (UnimplementedClusterAddonsServer) StopAddons(context.Context, *StopAddonsReq) (*StopAddonsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAddons not implemented")
}
func (UnimplementedClusterAddonsServer) UninstallAddons(context.Context, *UninstallAddonsReq) (*UninstallAddonsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallAddons not implemented")
}
func (UnimplementedClusterAddonsServer) mustEmbedUnimplementedClusterAddonsServer() {}

// UnsafeClusterAddonsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterAddonsServer will
// result in compilation errors.
type UnsafeClusterAddonsServer interface {
	mustEmbedUnimplementedClusterAddonsServer()
}

func RegisterClusterAddonsServer(s grpc.ServiceRegistrar, srv ClusterAddonsServer) {
	s.RegisterService(&ClusterAddons_ServiceDesc, srv)
}

func _ClusterAddons_ListAddons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddonsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAddonsServer).ListAddons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterAddons_ListAddons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAddonsServer).ListAddons(ctx, req.(*ListAddonsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterAddons_GetAddonsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddonsDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAddonsServer).GetAddonsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterAddons_GetAddonsDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAddonsServer).GetAddonsDetail(ctx, req.(*GetAddonsDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterAddons_InstallAddons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallAddonsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAddonsServer).InstallAddons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterAddons_InstallAddons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAddonsServer).InstallAddons(ctx, req.(*InstallAddonsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterAddons_UpgradeAddons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeAddonsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAddonsServer).UpgradeAddons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterAddons_UpgradeAddons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAddonsServer).UpgradeAddons(ctx, req.(*UpgradeAddonsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterAddons_StopAddons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAddonsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAddonsServer).StopAddons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterAddons_StopAddons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAddonsServer).StopAddons(ctx, req.(*StopAddonsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterAddons_UninstallAddons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallAddonsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAddonsServer).UninstallAddons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterAddons_UninstallAddons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAddonsServer).UninstallAddons(ctx, req.(*UninstallAddonsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterAddons_ServiceDesc is the grpc.ServiceDesc for ClusterAddons service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterAddons_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helmmanager.ClusterAddons",
	HandlerType: (*ClusterAddonsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAddons",
			Handler:    _ClusterAddons_ListAddons_Handler,
		},
		{
			MethodName: "GetAddonsDetail",
			Handler:    _ClusterAddons_GetAddonsDetail_Handler,
		},
		{
			MethodName: "InstallAddons",
			Handler:    _ClusterAddons_InstallAddons_Handler,
		},
		{
			MethodName: "UpgradeAddons",
			Handler:    _ClusterAddons_UpgradeAddons_Handler,
		},
		{
			MethodName: "StopAddons",
			Handler:    _ClusterAddons_StopAddons_Handler,
		},
		{
			MethodName: "UninstallAddons",
			Handler:    _ClusterAddons_UninstallAddons_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bcs-helm-manager.proto",
}
