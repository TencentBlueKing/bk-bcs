// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.5
// source: bcs-helm-manager.proto

package helmmanager

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	RequestID      string          `protobuf:"bytes,5,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,6,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *CommonResp) Reset() {
	*x = CommonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResp) ProtoMessage() {}

func (x *CommonResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResp.ProtoReflect.Descriptor instead.
func (*CommonResp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{0}
}

func (x *CommonResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CommonResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommonResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CommonResp) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CommonResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *CommonResp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type CommonListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool               `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *_struct.ListValue `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	RequestID      string             `protobuf:"bytes,5,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations    `protobuf:"bytes,6,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *CommonListResp) Reset() {
	*x = CommonListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonListResp) ProtoMessage() {}

func (x *CommonListResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonListResp.ProtoReflect.Descriptor instead.
func (*CommonListResp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{1}
}

func (x *CommonListResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CommonListResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommonListResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CommonListResp) GetData() *_struct.ListValue {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CommonListResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *CommonListResp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type WebAnnotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Perms *_struct.Struct `protobuf:"bytes,1,opt,name=perms,proto3" json:"perms,omitempty"`
}

func (x *WebAnnotations) Reset() {
	*x = WebAnnotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebAnnotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebAnnotations) ProtoMessage() {}

func (x *WebAnnotations) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebAnnotations.ProtoReflect.Descriptor instead.
func (*WebAnnotations) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{2}
}

func (x *WebAnnotations) GetPerms() *_struct.Struct {
	if x != nil {
		return x.Perms
	}
	return nil
}

type AvailableReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AvailableReq) Reset() {
	*x = AvailableReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableReq) ProtoMessage() {}

func (x *AvailableReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableReq.ProtoReflect.Descriptor instead.
func (*AvailableReq) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{3}
}

type AvailableResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AvailableResp) Reset() {
	*x = AvailableResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableResp) ProtoMessage() {}

func (x *AvailableResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableResp.ProtoReflect.Descriptor instead.
func (*AvailableResp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{4}
}

func (x *AvailableResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AvailableResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AvailableResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CreateRepositoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode    string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type           string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Takeover       bool   `protobuf:"varint,4,opt,name=takeover,proto3" json:"takeover,omitempty"`
	RepoURL        string `protobuf:"bytes,5,opt,name=repoURL,proto3" json:"repoURL,omitempty"`
	Username       string `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	Password       string `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	Remote         bool   `protobuf:"varint,8,opt,name=remote,proto3" json:"remote,omitempty"`
	RemoteURL      string `protobuf:"bytes,9,opt,name=remoteURL,proto3" json:"remoteURL,omitempty"`
	RemoteUsername string `protobuf:"bytes,10,opt,name=remoteUsername,proto3" json:"remoteUsername,omitempty"`
	RemotePassword string `protobuf:"bytes,11,opt,name=remotePassword,proto3" json:"remotePassword,omitempty"`
	DisplayName    string `protobuf:"bytes,12,opt,name=displayName,proto3" json:"displayName,omitempty"`
}

func (x *CreateRepositoryReq) Reset() {
	*x = CreateRepositoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRepositoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRepositoryReq) ProtoMessage() {}

func (x *CreateRepositoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRepositoryReq.ProtoReflect.Descriptor instead.
func (*CreateRepositoryReq) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{5}
}

func (x *CreateRepositoryReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *CreateRepositoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRepositoryReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateRepositoryReq) GetTakeover() bool {
	if x != nil {
		return x.Takeover
	}
	return false
}

func (x *CreateRepositoryReq) GetRepoURL() string {
	if x != nil {
		return x.RepoURL
	}
	return ""
}

func (x *CreateRepositoryReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateRepositoryReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateRepositoryReq) GetRemote() bool {
	if x != nil {
		return x.Remote
	}
	return false
}

func (x *CreateRepositoryReq) GetRemoteURL() string {
	if x != nil {
		return x.RemoteURL
	}
	return ""
}

func (x *CreateRepositoryReq) GetRemoteUsername() string {
	if x != nil {
		return x.RemoteUsername
	}
	return ""
}

func (x *CreateRepositoryReq) GetRemotePassword() string {
	if x != nil {
		return x.RemotePassword
	}
	return ""
}

func (x *CreateRepositoryReq) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type CreateRepositoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *Repository     `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	RequestID      string          `protobuf:"bytes,5,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,6,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *CreateRepositoryResp) Reset() {
	*x = CreateRepositoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRepositoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRepositoryResp) ProtoMessage() {}

func (x *CreateRepositoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRepositoryResp.ProtoReflect.Descriptor instead.
func (*CreateRepositoryResp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{6}
}

func (x *CreateRepositoryResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateRepositoryResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateRepositoryResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CreateRepositoryResp) GetData() *Repository {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateRepositoryResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *CreateRepositoryResp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type UpdateRepositoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type        string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Remote      bool   `protobuf:"varint,4,opt,name=remote,proto3" json:"remote,omitempty"`
	RemoteURL   string `protobuf:"bytes,5,opt,name=remoteURL,proto3" json:"remoteURL,omitempty"`
	Username    string `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	Password    string `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *UpdateRepositoryReq) Reset() {
	*x = UpdateRepositoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRepositoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRepositoryReq) ProtoMessage() {}

func (x *UpdateRepositoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRepositoryReq.ProtoReflect.Descriptor instead.
func (*UpdateRepositoryReq) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateRepositoryReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *UpdateRepositoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateRepositoryReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateRepositoryReq) GetRemote() bool {
	if x != nil {
		return x.Remote
	}
	return false
}

func (x *UpdateRepositoryReq) GetRemoteURL() string {
	if x != nil {
		return x.RemoteURL
	}
	return ""
}

func (x *UpdateRepositoryReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UpdateRepositoryReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type UpdateRepositoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *Repository     `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	RequestID      string          `protobuf:"bytes,5,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,6,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *UpdateRepositoryResp) Reset() {
	*x = UpdateRepositoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRepositoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRepositoryResp) ProtoMessage() {}

func (x *UpdateRepositoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRepositoryResp.ProtoReflect.Descriptor instead.
func (*UpdateRepositoryResp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateRepositoryResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateRepositoryResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateRepositoryResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpdateRepositoryResp) GetData() *Repository {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateRepositoryResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *UpdateRepositoryResp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type GetRepositoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRepositoryReq) Reset() {
	*x = GetRepositoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRepositoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepositoryReq) ProtoMessage() {}

func (x *GetRepositoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepositoryReq.ProtoReflect.Descriptor instead.
func (*GetRepositoryReq) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{9}
}

func (x *GetRepositoryReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *GetRepositoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetRepositoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *Repository     `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	RequestID      string          `protobuf:"bytes,5,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,6,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetRepositoryResp) Reset() {
	*x = GetRepositoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRepositoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepositoryResp) ProtoMessage() {}

func (x *GetRepositoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepositoryResp.ProtoReflect.Descriptor instead.
func (*GetRepositoryResp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{10}
}

func (x *GetRepositoryResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetRepositoryResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetRepositoryResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetRepositoryResp) GetData() *Repository {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetRepositoryResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *GetRepositoryResp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListRepositoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
}

func (x *ListRepositoryReq) Reset() {
	*x = ListRepositoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepositoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepositoryReq) ProtoMessage() {}

func (x *ListRepositoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepositoryReq.ProtoReflect.Descriptor instead.
func (*ListRepositoryReq) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{11}
}

func (x *ListRepositoryReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

type ListRepositoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           []*Repository   `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	RequestID      string          `protobuf:"bytes,5,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,6,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListRepositoryResp) Reset() {
	*x = ListRepositoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepositoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepositoryResp) ProtoMessage() {}

func (x *ListRepositoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepositoryResp.ProtoReflect.Descriptor instead.
func (*ListRepositoryResp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{12}
}

func (x *ListRepositoryResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListRepositoryResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListRepositoryResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListRepositoryResp) GetData() []*Repository {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListRepositoryResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ListRepositoryResp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type DeleteRepositoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteRepositoryReq) Reset() {
	*x = DeleteRepositoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRepositoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRepositoryReq) ProtoMessage() {}

func (x *DeleteRepositoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRepositoryReq.ProtoReflect.Descriptor instead.
func (*DeleteRepositoryReq) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteRepositoryReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *DeleteRepositoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteRepositoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	RequestID      string          `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *DeleteRepositoryResp) Reset() {
	*x = DeleteRepositoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRepositoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRepositoryResp) ProtoMessage() {}

func (x *DeleteRepositoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRepositoryResp.ProtoReflect.Descriptor instead.
func (*DeleteRepositoryResp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteRepositoryResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteRepositoryResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteRepositoryResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteRepositoryResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *DeleteRepositoryResp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type Repository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode    string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type           string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	RepoURL        string `protobuf:"bytes,4,opt,name=repoURL,proto3" json:"repoURL,omitempty"`
	Username       string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Password       string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	Remote         bool   `protobuf:"varint,7,opt,name=remote,proto3" json:"remote,omitempty"`
	RemoteURL      string `protobuf:"bytes,8,opt,name=remoteURL,proto3" json:"remoteURL,omitempty"`
	RemoteUsername string `protobuf:"bytes,9,opt,name=remoteUsername,proto3" json:"remoteUsername,omitempty"`
	RemotePassword string `protobuf:"bytes,10,opt,name=remotePassword,proto3" json:"remotePassword,omitempty"`
	CreateBy       string `protobuf:"bytes,11,opt,name=createBy,proto3" json:"createBy,omitempty"`
	UpdateBy       string `protobuf:"bytes,12,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	CreateTime     string `protobuf:"bytes,13,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime     string `protobuf:"bytes,14,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	DisplayName    string `protobuf:"bytes,15,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Public         bool   `protobuf:"varint,16,opt,name=public,proto3" json:"public,omitempty"`
}

func (x *Repository) Reset() {
	*x = Repository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repository) ProtoMessage() {}

func (x *Repository) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repository.ProtoReflect.Descriptor instead.
func (*Repository) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{15}
}

func (x *Repository) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *Repository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Repository) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Repository) GetRepoURL() string {
	if x != nil {
		return x.RepoURL
	}
	return ""
}

func (x *Repository) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Repository) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Repository) GetRemote() bool {
	if x != nil {
		return x.Remote
	}
	return false
}

func (x *Repository) GetRemoteURL() string {
	if x != nil {
		return x.RemoteURL
	}
	return ""
}

func (x *Repository) GetRemoteUsername() string {
	if x != nil {
		return x.RemoteUsername
	}
	return ""
}

func (x *Repository) GetRemotePassword() string {
	if x != nil {
		return x.RemotePassword
	}
	return ""
}

func (x *Repository) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *Repository) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *Repository) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Repository) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Repository) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Repository) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

type ChartListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  uint32   `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size  uint32   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Total uint32   `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*Chart `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ChartListData) Reset() {
	*x = ChartListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartListData) ProtoMessage() {}

func (x *ChartListData) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartListData.ProtoReflect.Descriptor instead.
func (*ChartListData) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{16}
}

func (x *ChartListData) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ChartListData) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ChartListData) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ChartListData) GetData() []*Chart {
	if x != nil {
		return x.Data
	}
	return nil
}

type Chart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID         string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Repository        string `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
	Type              string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Key               string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Name              string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	LatestVersion     string `protobuf:"bytes,6,opt,name=latestVersion,proto3" json:"latestVersion,omitempty"`
	LatestAppVersion  string `protobuf:"bytes,7,opt,name=latestAppVersion,proto3" json:"latestAppVersion,omitempty"`
	LatestDescription string `protobuf:"bytes,8,opt,name=latestDescription,proto3" json:"latestDescription,omitempty"`
	CreateBy          string `protobuf:"bytes,9,opt,name=createBy,proto3" json:"createBy,omitempty"`
	UpdateBy          string `protobuf:"bytes,10,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	CreateTime        string `protobuf:"bytes,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime        string `protobuf:"bytes,12,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	ProjectCode       string `protobuf:"bytes,13,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Icon              string `protobuf:"bytes,14,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *Chart) Reset() {
	*x = Chart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart) ProtoMessage() {}

func (x *Chart) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart.ProtoReflect.Descriptor instead.
func (*Chart) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{17}
}

func (x *Chart) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *Chart) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *Chart) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Chart) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Chart) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Chart) GetLatestVersion() string {
	if x != nil {
		return x.LatestVersion
	}
	return ""
}

func (x *Chart) GetLatestAppVersion() string {
	if x != nil {
		return x.LatestAppVersion
	}
	return ""
}

func (x *Chart) GetLatestDescription() string {
	if x != nil {
		return x.LatestDescription
	}
	return ""
}

func (x *Chart) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *Chart) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *Chart) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Chart) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Chart) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *Chart) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type ChartVersionListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  uint32          `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size  uint32          `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Total uint32          `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*ChartVersion `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ChartVersionListData) Reset() {
	*x = ChartVersionListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartVersionListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartVersionListData) ProtoMessage() {}

func (x *ChartVersionListData) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartVersionListData.ProtoReflect.Descriptor instead.
func (*ChartVersionListData) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{18}
}

func (x *ChartVersionListData) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ChartVersionListData) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ChartVersionListData) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ChartVersionListData) GetData() []*ChartVersion {
	if x != nil {
		return x.Data
	}
	return nil
}

type ChartVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version     string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	AppVersion  string `protobuf:"bytes,3,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	CreateBy    string `protobuf:"bytes,5,opt,name=createBy,proto3" json:"createBy,omitempty"`
	UpdateBy    string `protobuf:"bytes,6,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	CreateTime  string `protobuf:"bytes,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime  string `protobuf:"bytes,8,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Url         string `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ChartVersion) Reset() {
	*x = ChartVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartVersion) ProtoMessage() {}

func (x *ChartVersion) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartVersion.ProtoReflect.Descriptor instead.
func (*ChartVersion) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{19}
}

func (x *ChartVersion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChartVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ChartVersion) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *ChartVersion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChartVersion) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *ChartVersion) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *ChartVersion) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ChartVersion) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ChartVersion) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ChartDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version    string                  `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Readme     string                  `protobuf:"bytes,3,opt,name=readme,proto3" json:"readme,omitempty"`
	ValuesFile []string                `protobuf:"bytes,4,rep,name=valuesFile,proto3" json:"valuesFile,omitempty"`
	Contents   map[string]*FileContent `protobuf:"bytes,5,rep,name=contents,proto3" json:"contents,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Url        string                  `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ChartDetail) Reset() {
	*x = ChartDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartDetail) ProtoMessage() {}

func (x *ChartDetail) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartDetail.ProtoReflect.Descriptor instead.
func (*ChartDetail) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{20}
}

func (x *ChartDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChartDetail) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ChartDetail) GetReadme() string {
	if x != nil {
		return x.Readme
	}
	return ""
}

func (x *ChartDetail) GetValuesFile() []string {
	if x != nil {
		return x.ValuesFile
	}
	return nil
}

func (x *ChartDetail) GetContents() map[string]*FileContent {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *ChartDetail) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type FileContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path    string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *FileContent) Reset() {
	*x = FileContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileContent) ProtoMessage() {}

func (x *FileContent) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileContent.ProtoReflect.Descriptor instead.
func (*FileContent) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{21}
}

func (x *FileContent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileContent) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileContent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ListChartV1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size        uint32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	ProjectCode string `protobuf:"bytes,3,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	RepoName    string `protobuf:"bytes,4,opt,name=repoName,proto3" json:"repoName,omitempty"`
	Name        string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListChartV1Req) Reset() {
	*x = ListChartV1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChartV1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChartV1Req) ProtoMessage() {}

func (x *ListChartV1Req) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChartV1Req.ProtoReflect.Descriptor instead.
func (*ListChartV1Req) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{22}
}

func (x *ListChartV1Req) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListChartV1Req) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListChartV1Req) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *ListChartV1Req) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *ListChartV1Req) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListChartV1Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *ChartListData  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	RequestID      string          `protobuf:"bytes,5,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,6,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListChartV1Resp) Reset() {
	*x = ListChartV1Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChartV1Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChartV1Resp) ProtoMessage() {}

func (x *ListChartV1Resp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChartV1Resp.ProtoReflect.Descriptor instead.
func (*ListChartV1Resp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{23}
}

func (x *ListChartV1Resp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListChartV1Resp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListChartV1Resp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListChartV1Resp) GetData() *ChartListData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListChartV1Resp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ListChartV1Resp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type GetChartDetailV1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	RepoName    string `protobuf:"bytes,2,opt,name=repoName,proto3" json:"repoName,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetChartDetailV1Req) Reset() {
	*x = GetChartDetailV1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChartDetailV1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChartDetailV1Req) ProtoMessage() {}

func (x *GetChartDetailV1Req) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChartDetailV1Req.ProtoReflect.Descriptor instead.
func (*GetChartDetailV1Req) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{24}
}

func (x *GetChartDetailV1Req) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *GetChartDetailV1Req) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *GetChartDetailV1Req) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetChartDetailV1Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *Chart          `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	RequestID      string          `protobuf:"bytes,5,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,6,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetChartDetailV1Resp) Reset() {
	*x = GetChartDetailV1Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChartDetailV1Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChartDetailV1Resp) ProtoMessage() {}

func (x *GetChartDetailV1Resp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChartDetailV1Resp.ProtoReflect.Descriptor instead.
func (*GetChartDetailV1Resp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{25}
}

func (x *GetChartDetailV1Resp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetChartDetailV1Resp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetChartDetailV1Resp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetChartDetailV1Resp) GetData() *Chart {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetChartDetailV1Resp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *GetChartDetailV1Resp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListChartVersionV1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size        uint32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	ProjectCode string `protobuf:"bytes,3,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	RepoName    string `protobuf:"bytes,4,opt,name=repoName,proto3" json:"repoName,omitempty"`
	Name        string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListChartVersionV1Req) Reset() {
	*x = ListChartVersionV1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChartVersionV1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChartVersionV1Req) ProtoMessage() {}

func (x *ListChartVersionV1Req) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChartVersionV1Req.ProtoReflect.Descriptor instead.
func (*ListChartVersionV1Req) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{26}
}

func (x *ListChartVersionV1Req) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListChartVersionV1Req) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListChartVersionV1Req) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *ListChartVersionV1Req) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *ListChartVersionV1Req) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListChartVersionV1Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool                  `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *ChartVersionListData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	RequestID      string                `protobuf:"bytes,5,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations       `protobuf:"bytes,6,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListChartVersionV1Resp) Reset() {
	*x = ListChartVersionV1Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChartVersionV1Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChartVersionV1Resp) ProtoMessage() {}

func (x *ListChartVersionV1Resp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChartVersionV1Resp.ProtoReflect.Descriptor instead.
func (*ListChartVersionV1Resp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{27}
}

func (x *ListChartVersionV1Resp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListChartVersionV1Resp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListChartVersionV1Resp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListChartVersionV1Resp) GetData() *ChartVersionListData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListChartVersionV1Resp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ListChartVersionV1Resp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type GetVersionDetailV1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	RepoName    string `protobuf:"bytes,2,opt,name=repoName,proto3" json:"repoName,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version     string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetVersionDetailV1Req) Reset() {
	*x = GetVersionDetailV1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionDetailV1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionDetailV1Req) ProtoMessage() {}

func (x *GetVersionDetailV1Req) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionDetailV1Req.ProtoReflect.Descriptor instead.
func (*GetVersionDetailV1Req) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{28}
}

func (x *GetVersionDetailV1Req) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *GetVersionDetailV1Req) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *GetVersionDetailV1Req) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetVersionDetailV1Req) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetVersionDetailV1Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *ChartDetail    `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	RequestID      string          `protobuf:"bytes,5,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,6,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetVersionDetailV1Resp) Reset() {
	*x = GetVersionDetailV1Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionDetailV1Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionDetailV1Resp) ProtoMessage() {}

func (x *GetVersionDetailV1Resp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionDetailV1Resp.ProtoReflect.Descriptor instead.
func (*GetVersionDetailV1Resp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{29}
}

func (x *GetVersionDetailV1Resp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetVersionDetailV1Resp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetVersionDetailV1Resp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetVersionDetailV1Resp) GetData() *ChartDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetVersionDetailV1Resp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *GetVersionDetailV1Resp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type DeleteChartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	RepoName    string `protobuf:"bytes,2,opt,name=repoName,proto3" json:"repoName,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteChartReq) Reset() {
	*x = DeleteChartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChartReq) ProtoMessage() {}

func (x *DeleteChartReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChartReq.ProtoReflect.Descriptor instead.
func (*DeleteChartReq) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteChartReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *DeleteChartReq) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *DeleteChartReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteChartResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	RequestID      string          `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *DeleteChartResp) Reset() {
	*x = DeleteChartResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChartResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChartResp) ProtoMessage() {}

func (x *DeleteChartResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChartResp.ProtoReflect.Descriptor instead.
func (*DeleteChartResp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteChartResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteChartResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteChartResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteChartResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *DeleteChartResp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type DeleteChartVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	RepoName    string `protobuf:"bytes,2,opt,name=repoName,proto3" json:"repoName,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version     string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeleteChartVersionReq) Reset() {
	*x = DeleteChartVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChartVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChartVersionReq) ProtoMessage() {}

func (x *DeleteChartVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChartVersionReq.ProtoReflect.Descriptor instead.
func (*DeleteChartVersionReq) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteChartVersionReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *DeleteChartVersionReq) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *DeleteChartVersionReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteChartVersionReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DeleteChartVersionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	RequestID      string          `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *DeleteChartVersionResp) Reset() {
	*x = DeleteChartVersionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChartVersionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChartVersionResp) ProtoMessage() {}

func (x *DeleteChartVersionResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChartVersionResp.ProtoReflect.Descriptor instead.
func (*DeleteChartVersionResp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteChartVersionResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteChartVersionResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteChartVersionResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteChartVersionResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *DeleteChartVersionResp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type DownloadChartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	RepoName    string `protobuf:"bytes,2,opt,name=repoName,proto3" json:"repoName,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version     string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DownloadChartReq) Reset() {
	*x = DownloadChartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadChartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadChartReq) ProtoMessage() {}

func (x *DownloadChartReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadChartReq.ProtoReflect.Descriptor instead.
func (*DownloadChartReq) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{34}
}

func (x *DownloadChartReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *DownloadChartReq) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *DownloadChartReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DownloadChartReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetChartReleaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string   `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	RepoName    string   `protobuf:"bytes,2,opt,name=repoName,proto3" json:"repoName,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Versions    []string `protobuf:"bytes,4,rep,name=versions,proto3" json:"versions,omitempty"`
}

func (x *GetChartReleaseReq) Reset() {
	*x = GetChartReleaseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChartReleaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChartReleaseReq) ProtoMessage() {}

func (x *GetChartReleaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChartReleaseReq.ProtoReflect.Descriptor instead.
func (*GetChartReleaseReq) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{35}
}

func (x *GetChartReleaseReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *GetChartReleaseReq) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *GetChartReleaseReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetChartReleaseReq) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

type GetChartReleaseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           []*Release      `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	RequestID      string          `protobuf:"bytes,5,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,6,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetChartReleaseResp) Reset() {
	*x = GetChartReleaseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChartReleaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChartReleaseResp) ProtoMessage() {}

func (x *GetChartReleaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChartReleaseResp.ProtoReflect.Descriptor instead.
func (*GetChartReleaseResp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{36}
}

func (x *GetChartReleaseResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetChartReleaseResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetChartReleaseResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetChartReleaseResp) GetData() []*Release {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetChartReleaseResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *GetChartReleaseResp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ReleaseListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  uint32     `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size  uint32     `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Total uint32     `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*Release `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ReleaseListData) Reset() {
	*x = ReleaseListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseListData) ProtoMessage() {}

func (x *ReleaseListData) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseListData.ProtoReflect.Descriptor instead.
func (*ReleaseListData) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{37}
}

func (x *ReleaseListData) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ReleaseListData) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ReleaseListData) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ReleaseListData) GetData() []*Release {
	if x != nil {
		return x.Data
	}
	return nil
}

type Release struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace      string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Revision       uint32 `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty"`
	Status         string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Chart          string `protobuf:"bytes,5,opt,name=chart,proto3" json:"chart,omitempty"`
	AppVersion     string `protobuf:"bytes,6,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	UpdateTime     string `protobuf:"bytes,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	ChartVersion   string `protobuf:"bytes,8,opt,name=chartVersion,proto3" json:"chartVersion,omitempty"`
	CreateBy       string `protobuf:"bytes,9,opt,name=createBy,proto3" json:"createBy,omitempty"`
	UpdateBy       string `protobuf:"bytes,10,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	Message        string `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`
	Repo           string `protobuf:"bytes,12,opt,name=repo,proto3" json:"repo,omitempty"`
	IamNamespaceID string `protobuf:"bytes,13,opt,name=iamNamespaceID,proto3" json:"iamNamespaceID,omitempty"`
	ProjectCode    string `protobuf:"bytes,14,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID      string `protobuf:"bytes,15,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
}

func (x *Release) Reset() {
	*x = Release{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release) ProtoMessage() {}

func (x *Release) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release.ProtoReflect.Descriptor instead.
func (*Release) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{38}
}

func (x *Release) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Release) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Release) GetRevision() uint32 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *Release) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Release) GetChart() string {
	if x != nil {
		return x.Chart
	}
	return ""
}

func (x *Release) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *Release) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Release) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *Release) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *Release) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *Release) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Release) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *Release) GetIamNamespaceID() string {
	if x != nil {
		return x.IamNamespaceID
	}
	return ""
}

func (x *Release) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *Release) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

type ReleaseDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace    string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Revision     uint32   `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty"`
	Status       string   `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Chart        string   `protobuf:"bytes,5,opt,name=chart,proto3" json:"chart,omitempty"`
	AppVersion   string   `protobuf:"bytes,6,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	UpdateTime   string   `protobuf:"bytes,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	ChartVersion string   `protobuf:"bytes,8,opt,name=chartVersion,proto3" json:"chartVersion,omitempty"`
	Values       []string `protobuf:"bytes,9,rep,name=values,proto3" json:"values,omitempty"`
	Description  string   `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	Notes        string   `protobuf:"bytes,11,opt,name=notes,proto3" json:"notes,omitempty"`
	Args         []string `protobuf:"bytes,12,rep,name=args,proto3" json:"args,omitempty"`
	CreateBy     string   `protobuf:"bytes,13,opt,name=createBy,proto3" json:"createBy,omitempty"`
	UpdateBy     string   `protobuf:"bytes,14,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	Message      string   `protobuf:"bytes,15,opt,name=message,proto3" json:"message,omitempty"`
	Repo         string   `protobuf:"bytes,16,opt,name=repo,proto3" json:"repo,omitempty"`
	ValueFile    string   `protobuf:"bytes,17,opt,name=valueFile,proto3" json:"valueFile,omitempty"`
}

func (x *ReleaseDetail) Reset() {
	*x = ReleaseDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseDetail) ProtoMessage() {}

func (x *ReleaseDetail) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseDetail.ProtoReflect.Descriptor instead.
func (*ReleaseDetail) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{39}
}

func (x *ReleaseDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReleaseDetail) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ReleaseDetail) GetRevision() uint32 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *ReleaseDetail) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ReleaseDetail) GetChart() string {
	if x != nil {
		return x.Chart
	}
	return ""
}

func (x *ReleaseDetail) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *ReleaseDetail) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ReleaseDetail) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *ReleaseDetail) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ReleaseDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ReleaseDetail) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ReleaseDetail) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ReleaseDetail) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *ReleaseDetail) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *ReleaseDetail) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReleaseDetail) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *ReleaseDetail) GetValueFile() string {
	if x != nil {
		return x.ValueFile
	}
	return ""
}

type ListReleaseV1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace   string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Page        uint32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	Size        uint32 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListReleaseV1Req) Reset() {
	*x = ListReleaseV1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReleaseV1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReleaseV1Req) ProtoMessage() {}

func (x *ListReleaseV1Req) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReleaseV1Req.ProtoReflect.Descriptor instead.
func (*ListReleaseV1Req) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{40}
}

func (x *ListReleaseV1Req) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *ListReleaseV1Req) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ListReleaseV1Req) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListReleaseV1Req) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListReleaseV1Req) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListReleaseV1Req) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListReleaseV1Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool             `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *ReleaseListData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations  `protobuf:"bytes,5,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
	RequestID      string           `protobuf:"bytes,6,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *ListReleaseV1Resp) Reset() {
	*x = ListReleaseV1Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReleaseV1Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReleaseV1Resp) ProtoMessage() {}

func (x *ListReleaseV1Resp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReleaseV1Resp.ProtoReflect.Descriptor instead.
func (*ListReleaseV1Resp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{41}
}

func (x *ListReleaseV1Resp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListReleaseV1Resp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListReleaseV1Resp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListReleaseV1Resp) GetData() *ReleaseListData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListReleaseV1Resp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

func (x *ListReleaseV1Resp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type GetReleaseDetailV1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace   string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetReleaseDetailV1Req) Reset() {
	*x = GetReleaseDetailV1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReleaseDetailV1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReleaseDetailV1Req) ProtoMessage() {}

func (x *GetReleaseDetailV1Req) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReleaseDetailV1Req.ProtoReflect.Descriptor instead.
func (*GetReleaseDetailV1Req) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{42}
}

func (x *GetReleaseDetailV1Req) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *GetReleaseDetailV1Req) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *GetReleaseDetailV1Req) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetReleaseDetailV1Req) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetReleaseDetailV1Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *ReleaseDetail  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	RequestID      string          `protobuf:"bytes,5,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,6,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetReleaseDetailV1Resp) Reset() {
	*x = GetReleaseDetailV1Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReleaseDetailV1Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReleaseDetailV1Resp) ProtoMessage() {}

func (x *GetReleaseDetailV1Resp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReleaseDetailV1Resp.ProtoReflect.Descriptor instead.
func (*GetReleaseDetailV1Resp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{43}
}

func (x *GetReleaseDetailV1Resp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetReleaseDetailV1Resp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetReleaseDetailV1Resp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetReleaseDetailV1Resp) GetData() *ReleaseDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetReleaseDetailV1Resp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *GetReleaseDetailV1Resp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type InstallReleaseV1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string   `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string   `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace   string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name        string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Repository  string   `protobuf:"bytes,5,opt,name=repository,proto3" json:"repository,omitempty"`
	Chart       string   `protobuf:"bytes,6,opt,name=chart,proto3" json:"chart,omitempty"`
	Version     string   `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	Values      []string `protobuf:"bytes,8,rep,name=values,proto3" json:"values,omitempty"`
	Args        []string `protobuf:"bytes,9,rep,name=args,proto3" json:"args,omitempty"`
	ValueFile   string   `protobuf:"bytes,10,opt,name=valueFile,proto3" json:"valueFile,omitempty"`
	Operator    string   `protobuf:"bytes,11,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *InstallReleaseV1Req) Reset() {
	*x = InstallReleaseV1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallReleaseV1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallReleaseV1Req) ProtoMessage() {}

func (x *InstallReleaseV1Req) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallReleaseV1Req.ProtoReflect.Descriptor instead.
func (*InstallReleaseV1Req) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{44}
}

func (x *InstallReleaseV1Req) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *InstallReleaseV1Req) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *InstallReleaseV1Req) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *InstallReleaseV1Req) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstallReleaseV1Req) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *InstallReleaseV1Req) GetChart() string {
	if x != nil {
		return x.Chart
	}
	return ""
}

func (x *InstallReleaseV1Req) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InstallReleaseV1Req) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *InstallReleaseV1Req) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *InstallReleaseV1Req) GetValueFile() string {
	if x != nil {
		return x.ValueFile
	}
	return ""
}

func (x *InstallReleaseV1Req) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type InstallReleaseV1Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	RequestID      string          `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *InstallReleaseV1Resp) Reset() {
	*x = InstallReleaseV1Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallReleaseV1Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallReleaseV1Resp) ProtoMessage() {}

func (x *InstallReleaseV1Resp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallReleaseV1Resp.ProtoReflect.Descriptor instead.
func (*InstallReleaseV1Resp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{45}
}

func (x *InstallReleaseV1Resp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *InstallReleaseV1Resp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InstallReleaseV1Resp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *InstallReleaseV1Resp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *InstallReleaseV1Resp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type UninstallReleaseV1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace   string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UninstallReleaseV1Req) Reset() {
	*x = UninstallReleaseV1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UninstallReleaseV1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UninstallReleaseV1Req) ProtoMessage() {}

func (x *UninstallReleaseV1Req) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UninstallReleaseV1Req.ProtoReflect.Descriptor instead.
func (*UninstallReleaseV1Req) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{46}
}

func (x *UninstallReleaseV1Req) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *UninstallReleaseV1Req) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *UninstallReleaseV1Req) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UninstallReleaseV1Req) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UninstallReleaseV1Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	RequestID      string          `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *UninstallReleaseV1Resp) Reset() {
	*x = UninstallReleaseV1Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UninstallReleaseV1Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UninstallReleaseV1Resp) ProtoMessage() {}

func (x *UninstallReleaseV1Resp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UninstallReleaseV1Resp.ProtoReflect.Descriptor instead.
func (*UninstallReleaseV1Resp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{47}
}

func (x *UninstallReleaseV1Resp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UninstallReleaseV1Resp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UninstallReleaseV1Resp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UninstallReleaseV1Resp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *UninstallReleaseV1Resp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type UpgradeReleaseV1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string   `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string   `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace   string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name        string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Repository  string   `protobuf:"bytes,5,opt,name=repository,proto3" json:"repository,omitempty"`
	Chart       string   `protobuf:"bytes,6,opt,name=chart,proto3" json:"chart,omitempty"`
	Version     string   `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	Values      []string `protobuf:"bytes,8,rep,name=values,proto3" json:"values,omitempty"`
	Args        []string `protobuf:"bytes,9,rep,name=args,proto3" json:"args,omitempty"`
	ValueFile   string   `protobuf:"bytes,10,opt,name=valueFile,proto3" json:"valueFile,omitempty"`
	Operator    string   `protobuf:"bytes,11,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *UpgradeReleaseV1Req) Reset() {
	*x = UpgradeReleaseV1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeReleaseV1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeReleaseV1Req) ProtoMessage() {}

func (x *UpgradeReleaseV1Req) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeReleaseV1Req.ProtoReflect.Descriptor instead.
func (*UpgradeReleaseV1Req) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{48}
}

func (x *UpgradeReleaseV1Req) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *UpgradeReleaseV1Req) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *UpgradeReleaseV1Req) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpgradeReleaseV1Req) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpgradeReleaseV1Req) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *UpgradeReleaseV1Req) GetChart() string {
	if x != nil {
		return x.Chart
	}
	return ""
}

func (x *UpgradeReleaseV1Req) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpgradeReleaseV1Req) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *UpgradeReleaseV1Req) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *UpgradeReleaseV1Req) GetValueFile() string {
	if x != nil {
		return x.ValueFile
	}
	return ""
}

func (x *UpgradeReleaseV1Req) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type UpgradeReleaseV1Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	RequestID      string          `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *UpgradeReleaseV1Resp) Reset() {
	*x = UpgradeReleaseV1Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeReleaseV1Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeReleaseV1Resp) ProtoMessage() {}

func (x *UpgradeReleaseV1Resp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeReleaseV1Resp.ProtoReflect.Descriptor instead.
func (*UpgradeReleaseV1Resp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{49}
}

func (x *UpgradeReleaseV1Resp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpgradeReleaseV1Resp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpgradeReleaseV1Resp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpgradeReleaseV1Resp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *UpgradeReleaseV1Resp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type RollbackReleaseV1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace   string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Revision    uint32 `protobuf:"varint,5,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *RollbackReleaseV1Req) Reset() {
	*x = RollbackReleaseV1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackReleaseV1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackReleaseV1Req) ProtoMessage() {}

func (x *RollbackReleaseV1Req) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackReleaseV1Req.ProtoReflect.Descriptor instead.
func (*RollbackReleaseV1Req) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{50}
}

func (x *RollbackReleaseV1Req) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *RollbackReleaseV1Req) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *RollbackReleaseV1Req) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RollbackReleaseV1Req) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RollbackReleaseV1Req) GetRevision() uint32 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type RollbackReleaseV1Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	RequestID      string          `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *RollbackReleaseV1Resp) Reset() {
	*x = RollbackReleaseV1Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackReleaseV1Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackReleaseV1Resp) ProtoMessage() {}

func (x *RollbackReleaseV1Resp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackReleaseV1Resp.ProtoReflect.Descriptor instead.
func (*RollbackReleaseV1Resp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{51}
}

func (x *RollbackReleaseV1Resp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RollbackReleaseV1Resp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RollbackReleaseV1Resp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *RollbackReleaseV1Resp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *RollbackReleaseV1Resp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ReleasePreviewReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string   `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string   `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace   string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name        string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Repository  string   `protobuf:"bytes,5,opt,name=repository,proto3" json:"repository,omitempty"`
	Chart       string   `protobuf:"bytes,6,opt,name=chart,proto3" json:"chart,omitempty"`
	Version     string   `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	Values      []string `protobuf:"bytes,8,rep,name=values,proto3" json:"values,omitempty"`
	Args        []string `protobuf:"bytes,9,rep,name=args,proto3" json:"args,omitempty"`
	Revision    uint32   `protobuf:"varint,10,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *ReleasePreviewReq) Reset() {
	*x = ReleasePreviewReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleasePreviewReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasePreviewReq) ProtoMessage() {}

func (x *ReleasePreviewReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasePreviewReq.ProtoReflect.Descriptor instead.
func (*ReleasePreviewReq) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{52}
}

func (x *ReleasePreviewReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *ReleasePreviewReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ReleasePreviewReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ReleasePreviewReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReleasePreviewReq) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *ReleasePreviewReq) GetChart() string {
	if x != nil {
		return x.Chart
	}
	return ""
}

func (x *ReleasePreviewReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ReleasePreviewReq) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ReleasePreviewReq) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ReleasePreviewReq) GetRevision() uint32 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type ReleasePreviewResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *ReleasePreview `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	RequestID      string          `protobuf:"bytes,5,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,6,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ReleasePreviewResp) Reset() {
	*x = ReleasePreviewResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleasePreviewResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasePreviewResp) ProtoMessage() {}

func (x *ReleasePreviewResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasePreviewResp.ProtoReflect.Descriptor instead.
func (*ReleasePreviewResp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{53}
}

func (x *ReleasePreviewResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ReleasePreviewResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReleasePreviewResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ReleasePreviewResp) GetData() *ReleasePreview {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReleasePreviewResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ReleasePreviewResp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ReleasePreview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewContents map[string]*FileContent `protobuf:"bytes,1,rep,name=newContents,proto3" json:"newContents,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OldContents map[string]*FileContent `protobuf:"bytes,2,rep,name=oldContents,proto3" json:"oldContents,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NewContent  string                  `protobuf:"bytes,3,opt,name=newContent,proto3" json:"newContent,omitempty"`
	OldContent  string                  `protobuf:"bytes,4,opt,name=oldContent,proto3" json:"oldContent,omitempty"`
}

func (x *ReleasePreview) Reset() {
	*x = ReleasePreview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleasePreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasePreview) ProtoMessage() {}

func (x *ReleasePreview) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasePreview.ProtoReflect.Descriptor instead.
func (*ReleasePreview) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{54}
}

func (x *ReleasePreview) GetNewContents() map[string]*FileContent {
	if x != nil {
		return x.NewContents
	}
	return nil
}

func (x *ReleasePreview) GetOldContents() map[string]*FileContent {
	if x != nil {
		return x.OldContents
	}
	return nil
}

func (x *ReleasePreview) GetNewContent() string {
	if x != nil {
		return x.NewContent
	}
	return ""
}

func (x *ReleasePreview) GetOldContent() string {
	if x != nil {
		return x.OldContent
	}
	return ""
}

type GetReleaseHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace   string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ClusterID   string `protobuf:"bytes,3,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ProjectCode string `protobuf:"bytes,4,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Filter      string `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *GetReleaseHistoryReq) Reset() {
	*x = GetReleaseHistoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReleaseHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReleaseHistoryReq) ProtoMessage() {}

func (x *GetReleaseHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReleaseHistoryReq.ProtoReflect.Descriptor instead.
func (*GetReleaseHistoryReq) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{55}
}

func (x *GetReleaseHistoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetReleaseHistoryReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetReleaseHistoryReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *GetReleaseHistoryReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *GetReleaseHistoryReq) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type GetReleaseHistoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           []*ReleaseHistory `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	RequestID      string            `protobuf:"bytes,5,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations   `protobuf:"bytes,6,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetReleaseHistoryResp) Reset() {
	*x = GetReleaseHistoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReleaseHistoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReleaseHistoryResp) ProtoMessage() {}

func (x *GetReleaseHistoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReleaseHistoryResp.ProtoReflect.Descriptor instead.
func (*GetReleaseHistoryResp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{56}
}

func (x *GetReleaseHistoryResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetReleaseHistoryResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetReleaseHistoryResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetReleaseHistoryResp) GetData() []*ReleaseHistory {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetReleaseHistoryResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *GetReleaseHistoryResp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ReleaseHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revision     uint32 `protobuf:"varint,1,opt,name=revision,proto3" json:"revision,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace    string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	UpdateTime   string `protobuf:"bytes,4,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Description  string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Status       string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Chart        string `protobuf:"bytes,7,opt,name=chart,proto3" json:"chart,omitempty"`
	ChartVersion string `protobuf:"bytes,8,opt,name=chartVersion,proto3" json:"chartVersion,omitempty"`
	AppVersion   string `protobuf:"bytes,9,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	Values       string `protobuf:"bytes,10,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *ReleaseHistory) Reset() {
	*x = ReleaseHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseHistory) ProtoMessage() {}

func (x *ReleaseHistory) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseHistory.ProtoReflect.Descriptor instead.
func (*ReleaseHistory) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{57}
}

func (x *ReleaseHistory) GetRevision() uint32 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *ReleaseHistory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReleaseHistory) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ReleaseHistory) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ReleaseHistory) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ReleaseHistory) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ReleaseHistory) GetChart() string {
	if x != nil {
		return x.Chart
	}
	return ""
}

func (x *ReleaseHistory) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *ReleaseHistory) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *ReleaseHistory) GetValues() string {
	if x != nil {
		return x.Values
	}
	return ""
}

type GetReleaseStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace   string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ClusterID   string `protobuf:"bytes,3,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ProjectCode string `protobuf:"bytes,4,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
}

func (x *GetReleaseStatusReq) Reset() {
	*x = GetReleaseStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReleaseStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReleaseStatusReq) ProtoMessage() {}

func (x *GetReleaseStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReleaseStatusReq.ProtoReflect.Descriptor instead.
func (*GetReleaseStatusReq) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{58}
}

func (x *GetReleaseStatusReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetReleaseStatusReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetReleaseStatusReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *GetReleaseStatusReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

type GetReleasePodsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace   string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ClusterID   string `protobuf:"bytes,3,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ProjectCode string `protobuf:"bytes,4,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	After       uint32 `protobuf:"varint,5,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *GetReleasePodsReq) Reset() {
	*x = GetReleasePodsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReleasePodsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReleasePodsReq) ProtoMessage() {}

func (x *GetReleasePodsReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReleasePodsReq.ProtoReflect.Descriptor instead.
func (*GetReleasePodsReq) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{59}
}

func (x *GetReleasePodsReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetReleasePodsReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetReleasePodsReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *GetReleasePodsReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *GetReleasePodsReq) GetAfter() uint32 {
	if x != nil {
		return x.After
	}
	return 0
}

type ListAddonsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
}

func (x *ListAddonsReq) Reset() {
	*x = ListAddonsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAddonsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddonsReq) ProtoMessage() {}

func (x *ListAddonsReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddonsReq.ProtoReflect.Descriptor instead.
func (*ListAddonsReq) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{60}
}

func (x *ListAddonsReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *ListAddonsReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

type ListAddonsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           []*Addons       `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	RequestID      string          `protobuf:"bytes,5,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,6,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListAddonsResp) Reset() {
	*x = ListAddonsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAddonsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddonsResp) ProtoMessage() {}

func (x *ListAddonsResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddonsResp.ProtoReflect.Descriptor instead.
func (*ListAddonsResp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{61}
}

func (x *ListAddonsResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListAddonsResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListAddonsResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListAddonsResp) GetData() []*Addons {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListAddonsResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ListAddonsResp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type Addons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ChartName        string   `protobuf:"bytes,2,opt,name=chartName,proto3" json:"chartName,omitempty"`
	Description      string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Logo             string   `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	DocsLink         string   `protobuf:"bytes,5,opt,name=docsLink,proto3" json:"docsLink,omitempty"`
	Version          string   `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	CurrentVersion   string   `protobuf:"bytes,7,opt,name=currentVersion,proto3" json:"currentVersion,omitempty"`
	Namespace        string   `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
	DefaultValues    string   `protobuf:"bytes,9,opt,name=defaultValues,proto3" json:"defaultValues,omitempty"`
	CurrentValues    string   `protobuf:"bytes,10,opt,name=currentValues,proto3" json:"currentValues,omitempty"`
	Status           string   `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	Message          string   `protobuf:"bytes,12,opt,name=message,proto3" json:"message,omitempty"`
	SupportedActions []string `protobuf:"bytes,13,rep,name=supportedActions,proto3" json:"supportedActions,omitempty"`
}

func (x *Addons) Reset() {
	*x = Addons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Addons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addons) ProtoMessage() {}

func (x *Addons) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addons.ProtoReflect.Descriptor instead.
func (*Addons) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{62}
}

func (x *Addons) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Addons) GetChartName() string {
	if x != nil {
		return x.ChartName
	}
	return ""
}

func (x *Addons) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Addons) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *Addons) GetDocsLink() string {
	if x != nil {
		return x.DocsLink
	}
	return ""
}

func (x *Addons) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Addons) GetCurrentVersion() string {
	if x != nil {
		return x.CurrentVersion
	}
	return ""
}

func (x *Addons) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Addons) GetDefaultValues() string {
	if x != nil {
		return x.DefaultValues
	}
	return ""
}

func (x *Addons) GetCurrentValues() string {
	if x != nil {
		return x.CurrentValues
	}
	return ""
}

func (x *Addons) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Addons) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Addons) GetSupportedActions() []string {
	if x != nil {
		return x.SupportedActions
	}
	return nil
}

type GetAddonsDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetAddonsDetailReq) Reset() {
	*x = GetAddonsDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddonsDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddonsDetailReq) ProtoMessage() {}

func (x *GetAddonsDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddonsDetailReq.ProtoReflect.Descriptor instead.
func (*GetAddonsDetailReq) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{63}
}

func (x *GetAddonsDetailReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *GetAddonsDetailReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *GetAddonsDetailReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetAddonsDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data           *Addons         `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	RequestID      string          `protobuf:"bytes,5,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,6,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetAddonsDetailResp) Reset() {
	*x = GetAddonsDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddonsDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddonsDetailResp) ProtoMessage() {}

func (x *GetAddonsDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddonsDetailResp.ProtoReflect.Descriptor instead.
func (*GetAddonsDetailResp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{64}
}

func (x *GetAddonsDetailResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAddonsDetailResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetAddonsDetailResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetAddonsDetailResp) GetData() *Addons {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAddonsDetailResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *GetAddonsDetailResp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type InstallAddonsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version     string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Values      string `protobuf:"bytes,5,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *InstallAddonsReq) Reset() {
	*x = InstallAddonsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallAddonsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallAddonsReq) ProtoMessage() {}

func (x *InstallAddonsReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallAddonsReq.ProtoReflect.Descriptor instead.
func (*InstallAddonsReq) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{65}
}

func (x *InstallAddonsReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *InstallAddonsReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *InstallAddonsReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstallAddonsReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InstallAddonsReq) GetValues() string {
	if x != nil {
		return x.Values
	}
	return ""
}

type InstallAddonsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	RequestID      string          `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *InstallAddonsResp) Reset() {
	*x = InstallAddonsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallAddonsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallAddonsResp) ProtoMessage() {}

func (x *InstallAddonsResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallAddonsResp.ProtoReflect.Descriptor instead.
func (*InstallAddonsResp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{66}
}

func (x *InstallAddonsResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *InstallAddonsResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InstallAddonsResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *InstallAddonsResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *InstallAddonsResp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type UpgradeAddonsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version     string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Values      string `protobuf:"bytes,5,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *UpgradeAddonsReq) Reset() {
	*x = UpgradeAddonsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeAddonsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeAddonsReq) ProtoMessage() {}

func (x *UpgradeAddonsReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeAddonsReq.ProtoReflect.Descriptor instead.
func (*UpgradeAddonsReq) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{67}
}

func (x *UpgradeAddonsReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *UpgradeAddonsReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *UpgradeAddonsReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpgradeAddonsReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpgradeAddonsReq) GetValues() string {
	if x != nil {
		return x.Values
	}
	return ""
}

type UpgradeAddonsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	RequestID      string          `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *UpgradeAddonsResp) Reset() {
	*x = UpgradeAddonsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeAddonsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeAddonsResp) ProtoMessage() {}

func (x *UpgradeAddonsResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeAddonsResp.ProtoReflect.Descriptor instead.
func (*UpgradeAddonsResp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{68}
}

func (x *UpgradeAddonsResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpgradeAddonsResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpgradeAddonsResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UpgradeAddonsResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *UpgradeAddonsResp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type StopAddonsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StopAddonsReq) Reset() {
	*x = StopAddonsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopAddonsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAddonsReq) ProtoMessage() {}

func (x *StopAddonsReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAddonsReq.ProtoReflect.Descriptor instead.
func (*StopAddonsReq) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{69}
}

func (x *StopAddonsReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *StopAddonsReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *StopAddonsReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StopAddonsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	RequestID      string          `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *StopAddonsResp) Reset() {
	*x = StopAddonsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopAddonsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAddonsResp) ProtoMessage() {}

func (x *StopAddonsResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAddonsResp.ProtoReflect.Descriptor instead.
func (*StopAddonsResp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{70}
}

func (x *StopAddonsResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *StopAddonsResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StopAddonsResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *StopAddonsResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *StopAddonsResp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type UninstallAddonsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UninstallAddonsReq) Reset() {
	*x = UninstallAddonsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UninstallAddonsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UninstallAddonsReq) ProtoMessage() {}

func (x *UninstallAddonsReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UninstallAddonsReq.ProtoReflect.Descriptor instead.
func (*UninstallAddonsReq) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{71}
}

func (x *UninstallAddonsReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *UninstallAddonsReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *UninstallAddonsReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UninstallAddonsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result         bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	RequestID      string          `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *UninstallAddonsResp) Reset() {
	*x = UninstallAddonsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_helm_manager_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UninstallAddonsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UninstallAddonsResp) ProtoMessage() {}

func (x *UninstallAddonsResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_helm_manager_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UninstallAddonsResp.ProtoReflect.Descriptor instead.
func (*UninstallAddonsResp) Descriptor() ([]byte, []int) {
	return file_bcs_helm_manager_proto_rawDescGZIP(), []int{72}
}

func (x *UninstallAddonsResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UninstallAddonsResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UninstallAddonsResp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *UninstallAddonsResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *UninstallAddonsResp) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

var File_bcs_helm_manager_proto protoreflect.FileDescriptor

var file_bcs_helm_manager_proto_rawDesc = []byte{
	0x0a, 0x16, 0x62, 0x63, 0x73, 0x2d, 0x68, 0x65, 0x6c, 0x6d, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d,
	0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x1f, 0x92, 0x41, 0x1c,
	0x0a, 0x1a, 0x2a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x32, 0x0c,
	0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xc7, 0x03, 0x0a,
	0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x47,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d,
	0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x29, 0x92, 0x41, 0x26,
	0x0a, 0x24, 0x2a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x32, 0x12, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0x84, 0x01, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x65, 0x72,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x32, 0x0c, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x70, 0x65, 0x72,
	0x6d, 0x73, 0x3a, 0x29, 0x92, 0x41, 0x26, 0x0a, 0x24, 0x2a, 0x0e, 0x57, 0x65, 0x62, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x12, 0xe6, 0x9d, 0x83, 0xe9, 0x99,
	0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0x4f, 0x0a,
	0x0c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x3a, 0x3f, 0x92,
	0x41, 0x3c, 0x0a, 0x3a, 0x2a, 0x0c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x32, 0x2a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x68, 0x65, 0x6c, 0x6d, 0x2d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xf0,
	0x01, 0x0a, 0x0d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a,
	0x40, 0x92, 0x41, 0x3d, 0x0a, 0x3b, 0x2a, 0x0d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x32, 0x2a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x68, 0x65, 0x6c,
	0x6d, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0x22, 0xae, 0x07, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe4,
	0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x20, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0x92, 0x41, 0x4d, 0x2a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x32, 0x45, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xef, 0xbc, 0x8c, 0x48, 0x45, 0x4c, 0x4d, 0x28, 0x48, 0x65, 0x6c, 0x6d, 0xe4, 0xbb, 0x93,
	0xe5, 0xba, 0x93, 0x29, 0x2c, 0x20, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x28, 0xe9, 0x80,
	0x9a, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8c, 0xe8, 0xbf, 0x9b, 0xe5, 0x88, 0xb6, 0xe6, 0x96, 0x87,
	0xe4, 0xbb, 0xb6, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0x29, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x4c, 0x0a, 0x08, 0x74, 0x61, 0x6b, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x2a, 0x08, 0x74, 0x61, 0x6b, 0x65, 0x6f, 0x76, 0x65,
	0x72, 0x32, 0x21, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe6, 0x8e, 0xa5, 0xe7,
	0xae, 0xa1, 0xe5, 0xb7, 0xb2, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xe7, 0x9a, 0x84, 0xe4, 0xbb,
	0x93, 0xe5, 0xba, 0x93, 0x52, 0x08, 0x74, 0x61, 0x6b, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x43,
	0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x29, 0x92, 0x41, 0x26, 0x2a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x32, 0x1b, 0xe6,
	0x8e, 0xa5, 0xe7, 0xae, 0xa1, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe7, 0x9a, 0x84, 0xe4, 0xbb,
	0x93, 0xe5, 0xba, 0x93, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f,
	0x55, 0x52, 0x4c, 0x12, 0x43, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0x18, 0xe6, 0x8e, 0xa5, 0xe7, 0xae, 0xa1, 0xe4, 0xbb, 0x93, 0xe5,
	0xba, 0x93, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x90, 0x8d, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x32, 0x15, 0xe6, 0x8e, 0xa5, 0xe7, 0xae,
	0xa1, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe7, 0x9a, 0x84, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a,
	0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x32, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4,
	0xb8, 0xba, 0xe8, 0xbf, 0x9c, 0xe7, 0xa8, 0x8b, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x55, 0x52, 0x4c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x32, 0x12, 0xe8, 0xbf, 0x9c, 0xe7, 0xa8,
	0x8b, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x09, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x52, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x15, 0xe8, 0xbf, 0x9c, 0xe7, 0xa8, 0x8b, 0xe4, 0xbb, 0x93,
	0xe5, 0xba, 0x93, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x90, 0x8d, 0x52, 0x0e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x32, 0x12, 0xe8, 0xbf, 0x9c, 0xe7, 0xa8,
	0x8b, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x52, 0x0e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x40, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x3a,
	0x31, 0x92, 0x41, 0x2e, 0x0a, 0x2c, 0x2a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x32, 0x15, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x22, 0xdc, 0x03, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x15, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65,
	0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77,
	0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x32, 0x92,
	0x41, 0x2f, 0x0a, 0x2d, 0x2a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x32, 0x15, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0x22, 0xdd, 0x03, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe4,
	0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x20, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x32, 0x0c, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x32, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe8,
	0xbf, 0x9c, 0xe7, 0xa8, 0x8b, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x52, 0x4c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x32, 0x12, 0xe8, 0xbf, 0x9c, 0xe7, 0xa8, 0x8b, 0xe4, 0xbb,
	0x93, 0xe5, 0xba, 0x93, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x34, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x09, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x90,
	0x8d, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92,
	0x41, 0x12, 0x2a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x32, 0x06, 0xe5, 0xaf,
	0x86, 0xe7, 0xa0, 0x81, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x31,
	0x92, 0x41, 0x2e, 0x0a, 0x2c, 0x2a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x32, 0x15, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0x22, 0xdc, 0x03, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x15, 0xe6, 0x9b, 0xb4,
	0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c,
	0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x32, 0x92, 0x41,
	0x2f, 0x0a, 0x2d, 0x2a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x32, 0x15, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0x22, 0xc3, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe4, 0xbb, 0x93, 0xe5, 0xba,
	0x93, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x2e, 0x92, 0x41, 0x2b, 0x0a, 0x29, 0x2a, 0x10, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x32,
	0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe7, 0x9a, 0x84,
	0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xd6, 0x03, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x6d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x15, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68,
	0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77,
	0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x2f,
	0x92, 0x41, 0x2c, 0x0a, 0x2a, 0x2a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x32, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22,
	0x8c, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x3a, 0x2c, 0x92, 0x41, 0x29, 0x0a, 0x27, 0x2a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x32, 0x12, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x22, 0xd5,
	0x03, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68,
	0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77,
	0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x36,
	0x92, 0x41, 0x33, 0x0a, 0x31, 0x2a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x32, 0x1b, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe7, 0x9a, 0x84,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xc9, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x49,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3,
	0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x32, 0x0c, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a,
	0x31, 0x92, 0x41, 0x2e, 0x0a, 0x2c, 0x2a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x32, 0x15, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x22, 0x8d, 0x03, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68,
	0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77,
	0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x32,
	0x92, 0x41, 0x2f, 0x0a, 0x2d, 0x2a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x32, 0x15, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0x22, 0xd9, 0x07, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x40, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe4, 0xbb,
	0x93, 0xe5, 0xba, 0x93, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe4, 0xbb, 0x93, 0xe5, 0xba,
	0x93, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a,
	0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x32, 0x12, 0xe5, 0xbd,
	0x93, 0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe7, 0x9a, 0x84, 0x75, 0x72, 0x6c,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x12, 0x34, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x2a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x09, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe5, 0x90, 0x8d, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x31, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x32, 0x06, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x32,
	0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe8, 0xbf, 0x9c, 0xe7, 0xa8, 0x8b,
	0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x40,
	0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x52,
	0x4c, 0x32, 0x12, 0xe8, 0xbf, 0x9c, 0xe7, 0xa8, 0x8b, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x52, 0x4c,
	0x12, 0x51, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x0e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x14, 0xe8,
	0xbf, 0x9c, 0xe7, 0xa8, 0x8b, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26,
	0x2a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x32, 0x14, 0xe8, 0xbf, 0x9c, 0xe7, 0xa8, 0x8b, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x32, 0x09, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8,
	0x80, 0x85, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x34, 0x0a, 0x08,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0x92, 0x41, 0x15, 0x2a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x32, 0x09, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x32,
	0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x98, 0xaf, 0xe5, 0x85, 0xac, 0xe5, 0x85, 0xb1,
	0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0xd7,
	0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x2a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x32, 0x06, 0xe9, 0xa1, 0xb5, 0xe6, 0x95,
	0xb0, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x32, 0x0c, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x2a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32,
	0x06, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x48,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68,
	0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x15, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdd, 0x06, 0x0a, 0x05, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x69, 0x64, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x32,
	0x0c, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x32, 0x0c, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x03, 0x6b, 0x65, 0x79, 0x32, 0x09, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x20, 0x6b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13,
	0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x32, 0x16, 0xe6, 0x9c, 0x80, 0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x10, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x10, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x14, 0xe6, 0x9c,
	0x80, 0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84, 0x61, 0x70, 0x70, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2c, 0x92, 0x41, 0x29, 0x2a, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x14, 0xe6, 0x9c, 0x80, 0xe6, 0x96, 0xb0, 0xe7,
	0x9a, 0x84, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x32, 0x09, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x34, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x32, 0x09, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8,
	0x80, 0x85, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x32, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe5, 0x8f, 0xb7, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x32, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe5, 0x9b, 0xbe, 0xe6,
	0xa0, 0x87, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xea, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x32, 0x06, 0xe9, 0xa1, 0xb5, 0xe6,
	0x95, 0xb0, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x32, 0x0c, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x2a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x32, 0x06, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x54, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x1a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0x9a, 0x84, 0x63, 0x68,
	0x61, 0x72, 0x74, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8c, 0x04, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32,
	0x0a, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x32, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41,
	0x1f, 0x2a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x11, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x20, 0x61, 0x70, 0x70, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0x11, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x32, 0x09, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x34, 0x0a, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x2a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x32, 0x09, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a,
	0x03, 0x75, 0x72, 0x6c, 0x32, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x75, 0x72, 0x6c, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0xcc, 0x03, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0b, 0x63,
	0x68, 0x61, 0x72, 0x74, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32,
	0x0b, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x06, 0x72, 0x65, 0x61, 0x64,
	0x6d, 0x65, 0x32, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe8, 0x87, 0xaa, 0xe8, 0xbf, 0xb0, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20,
	0x2a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x32, 0x12, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x14, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe5, 0x8c, 0x85, 0xe6,
	0x89, 0x80, 0xe5, 0x90, 0xab, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x03, 0x75, 0x72, 0x6c, 0x32, 0x09, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x20, 0x75, 0x72, 0x6c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x55, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xb1, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x09, 0xe6, 0x96,
	0x87, 0xe4, 0xbb, 0xb6, 0xe5, 0x90, 0x8d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x2b,
	0x2a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x32, 0x23, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe7, 0x9b,
	0xb8, 0xe5, 0xaf, 0xb9, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe5, 0x8c, 0x85, 0xe5, 0x85, 0xa5, 0xe5,
	0x8f, 0xa3, 0xe7, 0x9a, 0x84, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x32, 0x0c, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xe6, 0x02, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x31, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x32, 0x06, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x32, 0x0c, 0xe6, 0xaf, 0x8f, 0xe9,
	0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x49,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3,
	0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x18,
	0x2a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe4, 0xbb, 0x93, 0xe5,
	0xba, 0x93, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x40, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0x21, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0xef, 0xbc, 0x8c, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe6, 0xa8, 0xa1, 0xe7, 0xb3,
	0x8a, 0xe6, 0x90, 0x9c, 0xe7, 0xb4, 0xa2, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x31, 0x92,
	0x41, 0x2e, 0x0a, 0x2c, 0x2a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56,
	0x31, 0x52, 0x65, 0x71, 0x32, 0x1a, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0x22, 0xdc, 0x03, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x31,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x52, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x22, 0x92,
	0x41, 0x1f, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x17, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe7, 0x9a, 0x84, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d,
	0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x32, 0x92, 0x41, 0x2f,
	0x0a, 0x2d, 0x2a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x31, 0x52,
	0x65, 0x73, 0x70, 0x32, 0x1a, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22,
	0x96, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x56, 0x31, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41,
	0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e,
	0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x13, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0b, 0x63,
	0x68, 0x61, 0x72, 0x74, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x3f, 0x92, 0x41, 0x3c, 0x0a, 0x3a, 0x2a, 0x13,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x31,
	0x52, 0x65, 0x71, 0x32, 0x23, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x63, 0x68, 0x61, 0x72, 0x74,
	0xe5, 0x8c, 0x85, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7,
	0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xe4, 0x03, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x31, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x47, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x14, 0x63,
	0x68, 0x61, 0x72, 0x74, 0xe5, 0x8c, 0x85, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65,
	0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77,
	0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x40, 0x92,
	0x41, 0x3d, 0x0a, 0x3b, 0x2a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x32, 0x23, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe5, 0x8c, 0x85, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22,
	0xe5, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x32, 0x06, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x2b, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x2a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x32, 0x0c, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1,
	0xb5, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x49, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7,
	0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x18, 0x2a,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe4, 0xbb, 0x93, 0xe5, 0xba,
	0x93, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x13, 0x2a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x32, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x38, 0x92,
	0x41, 0x35, 0x0a, 0x33, 0x2a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x52, 0x65, 0x71, 0x32, 0x1a, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe7, 0x9a,
	0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xf7, 0x03, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x5f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1d, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0x9a, 0x84, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe7, 0x9a, 0x84,
	0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x69, 0x0a, 0x0f, 0x77,
	0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x39, 0x92, 0x41, 0x36, 0x0a, 0x34, 0x2a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56,
	0x31, 0x52, 0x65, 0x73, 0x70, 0x32, 0x1a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x63, 0x68, 0x61,
	0x72, 0x74, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0x22, 0xe5, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x31, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x13, 0x2a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x32, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x16, 0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0b, 0x63, 0x68, 0x61, 0x72,
	0x74, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x50, 0x92, 0x41, 0x4d, 0x0a, 0x4b, 0x2a, 0x15,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x56, 0x31, 0x52, 0x65, 0x71, 0x32, 0x32, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87,
	0xe5, 0xae, 0x9a, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe7, 0x9a, 0x84, 0x63, 0x68, 0x61, 0x72,
	0x74, 0xe5, 0x8c, 0x85, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0x92, 0x04, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x31,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x62, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x34, 0x92, 0x41, 0x31,
	0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x29, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c,
	0x87, 0xe5, 0xae, 0x9a, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe7, 0x9a, 0x84, 0x63, 0x68, 0x61,
	0x72, 0x74, 0xe5, 0x8c, 0x85, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d,
	0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x51, 0x92, 0x41, 0x4e,
	0x0a, 0x4c, 0x2a, 0x16, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x32, 0x32, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe7, 0x9a,
	0x84, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe5, 0x8c, 0x85, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0x82,
	0x02, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0x92, 0x41, 0x18, 0x2a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe4,
	0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x40, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41,
	0x13, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x3a, 0x30, 0x92, 0x41, 0x2d, 0x0a, 0x2b, 0x2a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x32, 0x19, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0x20, 0x43, 0x68, 0x61, 0x72, 0x74, 0x20, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0x22, 0x84, 0x03, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83,
	0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x2e, 0x92, 0x41, 0x2b, 0x0a,
	0x29, 0x2a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x32, 0x16, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x20, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xd8, 0x02, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01,
	0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x40, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
	0x32, 0x0c, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0x92, 0x41, 0x13, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0b, 0x63, 0x68, 0x61, 0x72,
	0x74, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x16, 0x2a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x32, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x3a, 0x43, 0x92, 0x41, 0x40, 0x0a, 0x3e, 0x2a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x32, 0x25,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x43, 0x68, 0x61, 0x72, 0x74, 0x20, 0xe6, 0x8c, 0x87,
	0xe5, 0xae, 0x9a, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0x98, 0x03, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x37, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x32, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22,
	0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x3a, 0x3b, 0x92, 0x41, 0x38, 0x0a, 0x36, 0x2a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x32, 0x1c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x20, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0x22, 0xce, 0x02, 0x0a, 0x10, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x40, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d,
	0x65, 0x32, 0x0c, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0x92, 0x41, 0x13, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0b, 0x63, 0x68, 0x61,
	0x72, 0x74, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x16, 0x2a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe7, 0x89, 0x88, 0xe6, 0x9c,
	0xac, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x3e, 0x92, 0x41, 0x3b, 0x0a, 0x39, 0x2a, 0x10, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x32, 0x25, 0xe4, 0xb8, 0x8b, 0xe8,
	0xbd, 0xbd, 0x20, 0x43, 0x68, 0x61, 0x72, 0x74, 0x20, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7,
	0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0x22, 0x83, 0x03, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92,
	0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32,
	0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x13, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0b,
	0x63, 0x68, 0x61, 0x72, 0x74, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x48, 0x92, 0x41, 0x45, 0x2a,
	0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x39, 0x63, 0x68, 0x61, 0x72, 0x74,
	0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x2c, 0x20, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0xa0, 0xe7, 0x89,
	0x88, 0xe6, 0x9c, 0xac, 0xe5, 0x88, 0x99, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x89, 0x80,
	0xe6, 0x9c, 0x89, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe7, 0x9a, 0x84, 0x20, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x47,
	0x92, 0x41, 0x44, 0x0a, 0x42, 0x2a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x32, 0x2c, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0x20, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a,
	0x84, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x20, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xe3, 0x03, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68,
	0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0d, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x69, 0x0a, 0x0f, 0x77,
	0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x45, 0x92, 0x41, 0x42, 0x0a, 0x40, 0x2a, 0x13, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x32, 0x29, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x20, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x20, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xe2, 0x01,
	0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x32, 0x06, 0xe9, 0xa1, 0xb5, 0xe6,
	0x95, 0xb0, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x32, 0x0c, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x2a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x32, 0x06, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x51, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1c,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0x9a, 0x84, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x8a, 0x07, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41,
	0x1b, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x13, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x12, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe7, 0x9a, 0x84,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0xe6, 0x89, 0x80, 0xe5, 0xa4, 0x84, 0xe4, 0xba, 0x8e,
	0xe7, 0x9a, 0x84, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x32, 0x0f, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe7, 0x9a, 0x84, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x05, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x32, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41,
	0x25, 0x2a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x17, 0xe6,
	0x89, 0x80, 0xe5, 0xa4, 0x84, 0xe4, 0xba, 0x8e, 0xe7, 0x9a, 0x84, 0x61, 0x70, 0x70, 0x20, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x45, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0c, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0e, 0x63, 0x68, 0x61, 0x72,
	0x74, 0xe7, 0x9a, 0x84, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x32, 0x09, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x34,
	0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x32,
	0x09, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x0c, 0xe6, 0x8a, 0xa5, 0xe9, 0x94, 0x99, 0xe6, 0xb6, 0x88, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x65,
	0x70, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x72,
	0x65, 0x70, 0x6f, 0x32, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0xe4, 0xbb, 0x93, 0xe5, 0xba,
	0x93, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x4b, 0x0a, 0x0e, 0x69, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x23, 0x92, 0x41, 0x20, 0x2a, 0x0e, 0x69, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x44, 0x32, 0x0e, 0x69, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x44, 0x52, 0x0e, 0x69, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x20, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22,
	0xae, 0x08, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x13, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x12, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8,
	0xe7, 0x9a, 0x84, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0xe6, 0x89, 0x80, 0xe5, 0xa4, 0x84,
	0xe4, 0xba, 0x8e, 0xe7, 0x9a, 0x84, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x32, 0x0f, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe7, 0x9a, 0x84, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x2a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x32, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x61,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x28, 0x92, 0x41, 0x25, 0x2a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x32, 0x17, 0xe6, 0x89, 0x80, 0xe5, 0xa4, 0x84, 0xe4, 0xba, 0x8e, 0xe7, 0x9a, 0x84, 0x61, 0x70,
	0x70, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a,
	0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0e, 0x63,
	0x68, 0x61, 0x72, 0x74, 0xe7, 0x9a, 0x84, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30,
	0x2a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x32, 0x26, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0xe6, 0x97,
	0xb6, 0xe7, 0x9a, 0x84, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x32, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x20, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x45, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e,
	0x2a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x32, 0x26, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0xe6, 0x97, 0xb6, 0xe7,
	0x9a, 0x84, 0x20, 0x68, 0x65, 0x6c, 0x6d, 0x20, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x32, 0x09, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85,
	0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x34, 0x0a, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41,
	0x15, 0x2a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x32, 0x09, 0xe6, 0x9b, 0xb4,
	0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x0c, 0xe6, 0x8a, 0xa5, 0xe9, 0x94, 0x99, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x32,
	0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0x52, 0x04, 0x72,
	0x65, 0x70, 0x6f, 0x12, 0x5b, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x2a, 0x09, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x32, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0xe6, 0x96,
	0x87, 0xe4, 0xbb, 0xb6, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x80, 0xe6, 0xac, 0xa1,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe6,
	0x96, 0x87, 0xe4, 0xbb, 0xb6, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x22, 0xa9, 0x04, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x56, 0x31, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x61, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x40, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x32, 0x33, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xef, 0xbc,
	0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0xe5, 0x91, 0xbd,
	0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x71, 0x92, 0x41, 0x6e, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x66,
	0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xef, 0xbc, 0x8c, 0xe6, 0x94,
	0xaf, 0xe6, 0x8c, 0x81, 0xe6, 0xad, 0xa3, 0xe5, 0x88, 0x99, 0xe8, 0xa1, 0xa8, 0xe8, 0xbe, 0xbe,
	0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0x20, 0x27, 0x61, 0x72, 0x61, 0x5b, 0x61,
	0x2d, 0x7a, 0x5d, 0x2b, 0x27, 0x20, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe6, 0x90, 0x9c, 0xe7,
	0xb4, 0xa2, 0xe5, 0x88, 0xb0, 0x20, 0x6d, 0x61, 0x75, 0x64, 0x6c, 0x69, 0x6e, 0x2d, 0x61, 0x72,
	0x61, 0x63, 0x68, 0x6e, 0x69, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x32, 0x06, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x32, 0x0c, 0xe6, 0xaf,
	0x8f, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x3a, 0x4a, 0x92, 0x41, 0x47, 0x0a, 0x45, 0x2a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65, 0x71, 0x32, 0x31, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0x83, 0x04, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x5f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x2d, 0x92,
	0x41, 0x2a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x68, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65,
	0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77,
	0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x0e, 0x77, 0x65,
	0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x3a, 0x4b, 0x92, 0x41, 0x48, 0x0a, 0x46, 0x2a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x32,
	0x31, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0x22, 0xeb, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x31, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0,
	0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x15, 0x2a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x22,
	0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x15, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x18, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32,
	0x10, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0x6e, 0x61, 0x6d,
	0x65, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x40,
	0x92, 0x41, 0x3d, 0x0a, 0x3b, 0x2a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x31, 0x52, 0x65, 0x71, 0x32, 0x22, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0x22, 0xee, 0x03, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x13, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68,
	0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77,
	0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x41,
	0x92, 0x41, 0x3e, 0x0a, 0x3c, 0x2a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x32, 0x22, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0x22, 0xbe, 0x06, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1e, 0x2a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x11, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe7,
	0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x40, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x49,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x32, 0x12, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe7, 0x9a, 0x84, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x1b, 0x2a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x32, 0x13, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x22, 0x2a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x32, 0x14, 0x63, 0x68, 0x61, 0x72, 0x74,
	0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x2a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x32,
	0x0b, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x16,
	0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x74,
	0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x2a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x32, 0x2c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0xe6, 0x96, 0x87, 0xe4, 0xbb,
	0xb6, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x2c, 0x20, 0xe8, 0xb6, 0x8a, 0xe9, 0x9d, 0xa0, 0xe5,
	0x90, 0x8e, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0xe8, 0xb6, 0x8a, 0xe9, 0xab,
	0x98, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x32, 0x0f, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x5b, 0x0a, 0x09, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92, 0x41,
	0x3a, 0x2a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x32, 0x2d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x20, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8a,
	0xe4, 0xb8, 0x80, 0xe6, 0xac, 0xa1, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xbd, 0xbf, 0xe7,
	0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0x52, 0x09, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8,
	0x80, 0x85, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x34, 0x92, 0x41,
	0x31, 0x0a, 0x2f, 0x2a, 0x13, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65, 0x71, 0x32, 0x18, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85,
	0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x22, 0x90, 0x03, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68,
	0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77,
	0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x35,
	0x92, 0x41, 0x32, 0x0a, 0x30, 0x2a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x32, 0x18, 0xe5, 0xae, 0x89,
	0xe8, 0xa3, 0x85, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0xe7, 0x9a, 0x84, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xea, 0x02, 0x0a, 0x15, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65, 0x71, 0x12,
	0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb,
	0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92,
	0x41, 0x1e, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x11, 0xe6,
	0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x12, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe7,
	0x9a, 0x84, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x40, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92,
	0x41, 0x1b, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x13, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x36, 0x92, 0x41, 0x33, 0x0a,
	0x31, 0x2a, 0x15, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65, 0x71, 0x32, 0x18, 0xe5, 0x8d, 0xb8, 0xe8, 0xbd, 0xbd,
	0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x22, 0x94, 0x03, 0x0a, 0x16, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f,
	0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x37, 0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a, 0x16, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x32,
	0x18, 0xe5, 0x8d, 0xb8, 0xe8, 0xbd, 0xbd, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20,
	0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xa1, 0x06, 0x0a, 0x13, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65,
	0x71, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2a, 0x92, 0x41, 0x1e, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32,
	0x11, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1f, 0x2a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x12, 0xe6, 0x89, 0x80, 0xe5, 0x9c,
	0xa8, 0xe7, 0x9a, 0x84, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x25, 0x92, 0x41, 0x1b, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x13, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x32, 0x14, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a,
	0x84, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x32, 0x0b,
	0x63, 0x68, 0x61, 0x72, 0x74, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x05, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x32, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30, 0x2a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x32, 0x26, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0xe6, 0x96, 0x87, 0xe4,
	0xbb, 0xb6, 0x2c, 0x20, 0xe8, 0xb6, 0x8a, 0xe9, 0x9d, 0xa0, 0xe5, 0x90, 0x8e, 0xe4, 0xbc, 0x98,
	0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0xe8, 0xb6, 0x8a, 0xe9, 0xab, 0x98, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x32, 0x0f, 0xe9,
	0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x5b, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x2a, 0x09, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x32, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0xe6,
	0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x80, 0xe6, 0xac,
	0xa1, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84,
	0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x34, 0x92, 0x41, 0x31, 0x0a, 0x2f, 0x2a, 0x13,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x31,
	0x52, 0x65, 0x71, 0x32, 0x18, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0x20, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x20, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0x90, 0x03,
	0x0a, 0x14, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32,
	0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x69,
	0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9,
	0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x35, 0x92, 0x41, 0x32, 0x0a, 0x30,
	0x2a, 0x14, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x32, 0x18, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0x20, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0x22, 0xac, 0x03, 0x0a, 0x14, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1e, 0x2a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x11, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe7,
	0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x40, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x49,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x32, 0x12, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe7, 0x9a, 0x84, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x1b, 0x2a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x32, 0x13, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x17, 0xe8, 0xa6, 0x81, 0xe5, 0x9b, 0x9e, 0xe6, 0xbb, 0x9a,
	0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x35, 0x92, 0x41, 0x32, 0x0a, 0x30, 0x2a,
	0x14, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x56, 0x31, 0x52, 0x65, 0x71, 0x32, 0x18, 0xe5, 0x9b, 0x9e, 0xe6, 0xbb, 0x9a, 0x20, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22,
	0x92, 0x03, 0x0a, 0x15, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c,
	0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x36, 0x92, 0x41,
	0x33, 0x0a, 0x31, 0x2a, 0x15, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x32, 0x18, 0xe5, 0x9b, 0x9e, 0xe6,
	0xbb, 0x9a, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0xe7, 0x9a, 0x84, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xd2, 0x06, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x27, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1e, 0x2a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x11, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8,
	0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x40, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x49, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x32, 0x12, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe7, 0x9a, 0x84, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x1b, 0x2a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x32, 0x13, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x32, 0x14, 0x63, 0x68, 0x61, 0x72,
	0x74, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x2a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x32, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0b, 0x63, 0x68, 0x61, 0x72,
	0x74, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4b, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x33, 0x92, 0x41, 0x30, 0x2a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x32, 0x26, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0x2c, 0x20, 0xe8, 0xb6, 0x8a,
	0xe9, 0x9d, 0xa0, 0xe5, 0x90, 0x8e, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0xe8,
	0xb6, 0x8a, 0xe9, 0xab, 0x98, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x32, 0x0f, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe7, 0x9a,
	0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0xc6, 0x01,
	0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0xa9, 0x01, 0x92, 0x41, 0xa5, 0x01, 0x2a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x32, 0x98, 0x01, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x2c, 0x20, 0xe5, 0xa6, 0x82,
	0xe6, 0x9e, 0x9c, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0xe4, 0xb8, 0xba, 0x30, 0x2c,
	0x20, 0xe5, 0x88, 0x99, 0xe5, 0xaf, 0xb9, 0xe6, 0xaf, 0x94, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d,
	0xe6, 0xb8, 0xb2, 0xe6, 0x9f, 0x93, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xe5, 0x92, 0x8c, 0xe5,
	0xb7, 0xb2, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0xe7, 0x9a, 0x84, 0xe6, 0x9c, 0x80, 0xe6, 0x96,
	0xb0, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x2c, 0x20, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe4,
	0xb8, 0x8d, 0xe4, 0xb8, 0xba, 0x30, 0x2c, 0x20, 0xe5, 0x88, 0x99, 0xe5, 0xaf, 0xb9, 0xe6, 0xaf,
	0x94, 0xe6, 0x9c, 0x80, 0xe6, 0x96, 0xb0, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0x92, 0x8c,
	0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x31, 0x92, 0x41, 0x2e, 0x0a, 0x2c, 0x2a, 0x11, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x32, 0x17, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0xe9, 0xa2, 0x84, 0xe8, 0xa7, 0x88,
	0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xd5, 0x03, 0x0a, 0x12, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x48, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65,
	0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77,
	0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x32, 0x92,
	0x41, 0x2f, 0x0a, 0x2d, 0x2a, 0x12, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x32, 0x17, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x20, 0xe9, 0xa2, 0x84, 0xe8, 0xa7, 0x88, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0x22, 0xe6, 0x05, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x12, 0xba, 0x01, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x65, 0x6c,
	0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x6a, 0x92, 0x41, 0x67, 0x2a, 0x0b, 0x6e,
	0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x58, 0xe6, 0x96, 0xb0, 0xe7,
	0x89, 0x88, 0xe6, 0x9c, 0xac, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x6d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x20, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c,
	0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xef, 0xbc, 0x8c, 0xe9, 0x94, 0xae, 0xe6, 0xa0,
	0xbc, 0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x9a, 0x7b, 0x4b, 0x69, 0x6e, 0x64, 0x7d, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0xba, 0x01, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x4f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x6a, 0x92, 0x41, 0x67, 0x2a, 0x0b, 0x6f, 0x6c, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x58, 0xe6, 0x97, 0xa7, 0xe7, 0x89, 0x88, 0xe6,
	0x9c, 0xac, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x6d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x20, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xb9,
	0xe6, 0x8d, 0xae, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5,
	0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xef, 0xbc, 0x8c, 0xe9, 0x94, 0xae, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc,
	0x8f, 0xef, 0xbc, 0x9a, 0x7b, 0x4b, 0x69, 0x6e, 0x64, 0x7d, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x52,
	0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x2a, 0x0a, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x32, 0x21, 0xe6, 0x96, 0xb0, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x20, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x20,
	0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x52, 0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x2a, 0x0a, 0x6f, 0x6c, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x32, 0x21, 0xe6, 0x97, 0xa7, 0xe7, 0x89, 0x88, 0xe6,
	0x9c, 0xac, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x6d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x20, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x58, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65,
	0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x58, 0x0a, 0x10, 0x4f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x03, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x25, 0x92, 0x41, 0x1b, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x13, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x32, 0x12, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe7, 0x9a, 0x84, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41,
	0x1e, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x11, 0xe6, 0x89,
	0x80, 0xe5, 0x9c, 0xa8, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x32, 0x0c, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x3a, 0x35, 0x92, 0x41, 0x32, 0x0a, 0x30, 0x2a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x32, 0x18,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0xe7,
	0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xdf, 0x03, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x32, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57,
	0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92,
	0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x36, 0x92, 0x41, 0x33, 0x0a, 0x31, 0x2a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x32, 0x18, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0x8b, 0x05, 0x0a, 0x0e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3b, 0x0a,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x10,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x32, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x11, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41,
	0x1a, 0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x0e,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18,
	0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x20, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2f, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x32, 0x0d, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x20, 0x63, 0x68, 0x61, 0x72, 0x74, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0c, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x20, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a,
	0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x20, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18,
	0x2a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x32, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x3a, 0x26, 0x92, 0x41, 0x23, 0x0a, 0x21, 0x2a, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x32, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xec, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25,
	0x92, 0x41, 0x1b, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x13, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b,
	0x92, 0x41, 0x1f, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x12,
	0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe7, 0x9a, 0x84, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1e, 0x2a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x11, 0xe6, 0x89, 0x80, 0xe5, 0x9c,
	0xa8, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4,
	0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x3a, 0x92, 0x41, 0x37,
	0x0a, 0x35, 0x2a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x32, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe7, 0x9a,
	0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xab, 0x03, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x1b,
	0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x13, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1f,
	0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x12, 0xe6, 0x89, 0x80,
	0xe5, 0x9c, 0xa8, 0xe7, 0x9a, 0x84, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1e, 0x2a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x11, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe7, 0x9a,
	0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01,
	0x18, 0x40, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x49, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7,
	0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x05, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x32, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5, 0xae,
	0x9a, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe4, 0xb9, 0x8b, 0xe5, 0x90, 0x8e, 0xe7, 0x9a, 0x84,
	0x20, 0x70, 0x6f, 0x64, 0x73, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x3a, 0x37, 0x92, 0x41,
	0x34, 0x0a, 0x32, 0x2a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50,
	0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x32, 0x1d, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x70, 0x6f, 0x64, 0x73, 0x20, 0xe7, 0x9a, 0x84, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xba, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41,
	0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1e, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x11, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe7, 0x9a, 0x84,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x40, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x3a, 0x14, 0x92, 0x41,
	0x11, 0x0a, 0x0f, 0x2a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x22, 0xac, 0x03, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x0c, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83,
	0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x15, 0x92, 0x41, 0x12, 0x0a,
	0x10, 0x2a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x22, 0xb4, 0x08, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0a, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x0c, 0xe7, 0xbb, 0x84, 0xe4,
	0xbb, 0xb6, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x2a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x32, 0x04,
	0x6c, 0x6f, 0x67, 0x6f, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x37, 0x0a, 0x08, 0x64, 0x6f,
	0x63, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41,
	0x18, 0x2a, 0x08, 0x64, 0x6f, 0x63, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x32, 0x0c, 0xe6, 0x96, 0x87,
	0xe6, 0xa1, 0xa3, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x73, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x3a, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x32, 0x12, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe6, 0x9c, 0x80, 0xe6, 0x96, 0xb0,
	0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x6a, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x2a, 0x0e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x2d, 0xe7, 0xbb,
	0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85,
	0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xef, 0xbc, 0x8c, 0xe7, 0xa9, 0xba, 0xe4, 0xbb, 0xa3, 0xe8,
	0xa1, 0xa8, 0xe6, 0xb2, 0xa1, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0x52, 0x0e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25,
	0x92, 0x41, 0x22, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x15,
	0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0xe7, 0x9a, 0x84, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7,
	0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x85, 0x01, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5f, 0x92, 0x41, 0x5c, 0x2a, 0x0d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x32, 0x4b, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe7, 0xa9, 0xba,
	0xe4, 0xbb, 0xa3, 0xe8, 0xa1, 0xa8, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe7, 0x9b, 0xb4, 0xe6,
	0x8e, 0xa5, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe9, 0x9c,
	0x80, 0xe8, 0xa6, 0x81, 0xe5, 0xa1, 0xab, 0xe5, 0x86, 0x99, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a,
	0xe4, 0xb9, 0x89, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0x92, 0x41, 0x23, 0x2a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x32, 0x12, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe9, 0x83, 0xa8, 0xe7, 0xbd,
	0xb2, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48, 0x92, 0x41, 0x45, 0x2a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x32, 0x3b, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0xef, 0xbc, 0x8c, 0xe5, 0x90, 0x8c, 0x20, 0x48, 0x65, 0x6c, 0x6d, 0x20, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x20, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x8c, 0xe7, 0xa9,
	0xba, 0xe4, 0xbb, 0xa3, 0xe8, 0xa1, 0xa8, 0xe6, 0xb2, 0xa1, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x58, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x2a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x30, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0xe5, 0xbc,
	0x82, 0xe5, 0xb8, 0xb8, 0xe5, 0x88, 0x99, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe6, 0x8a, 0xa5,
	0xe9, 0x94, 0x99, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x42, 0x5a, 0x92,
	0x41, 0x57, 0x2a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x32, 0x43, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe6, 0x94, 0xaf, 0xe6,
	0x8c, 0x81, 0xe7, 0x9a, 0x84, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xef, 0xbc, 0x8c, 0xe7, 0x9b,
	0xae, 0xe5, 0x89, 0x8d, 0xe6, 0x9c, 0x89, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2c,
	0x20, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2c, 0x20, 0x73, 0x74, 0x6f, 0x70, 0x2c, 0x20,
	0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x1b, 0x92, 0x41, 0x18,
	0x0a, 0x16, 0x2a, 0x06, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0x22, 0xfa, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb,
	0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92,
	0x41, 0x1e, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x11, 0xe6,
	0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe7,
	0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x20, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x19, 0x92, 0x41, 0x16, 0x0a,
	0x14, 0x2a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x22, 0xb6, 0x03, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x6c,
	0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe7, 0xbb, 0x84, 0xe4,
	0xbb, 0xb6, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x32, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57,
	0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92,
	0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x1a, 0x92, 0x41, 0x17, 0x0a, 0x15, 0x2a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0xe0,
	0x02, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2a, 0x92, 0x41, 0x1e, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x32, 0x11, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x32, 0x0c, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x21, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0c, 0xe7,
	0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10,
	0x2a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x32, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x17, 0x92, 0x41, 0x14, 0x0a, 0x12, 0x2a,
	0x10, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x22, 0xf0, 0x02, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83,
	0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x18, 0x92, 0x41, 0x15, 0x0a,
	0x13, 0x2a, 0x11, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x22, 0xd9, 0x02, 0x0a, 0x10, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1e, 0x2a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x11, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe7,
	0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x40, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x34,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x32, 0x0c, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe7, 0x89, 0x88, 0xe6, 0x9c,
	0xac, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x32, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x17, 0x92, 0x41, 0x14, 0x0a, 0x12, 0x2a, 0x10,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x22, 0xf0, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32,
	0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x69,
	0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9,
	0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x18, 0x92, 0x41, 0x15, 0x0a, 0x13,
	0x2a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x22, 0xf0, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x48, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1e, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x32, 0x11, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8, 0xe7, 0x9a, 0x84, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x3a, 0x14, 0x92, 0x41, 0x11, 0x0a, 0x0f, 0x2a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x22, 0xea, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c,
	0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x15, 0x92, 0x41,
	0x12, 0x0a, 0x10, 0x2a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x22, 0xfa, 0x01, 0x0a, 0x12, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x27, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1e, 0x2a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x11, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8,
	0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x40, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x19, 0x92, 0x41, 0x16, 0x0a, 0x14, 0x2a, 0x12, 0x55, 0x6e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x22, 0xf4, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7,
	0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d,
	0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x1a, 0x92, 0x41, 0x17,
	0x0a, 0x15, 0x2a, 0x13, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x32, 0xcc, 0x2e, 0x0a, 0x0b, 0x48, 0x65, 0x6c, 0x6d,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0xb4, 0x01, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x70, 0x92, 0x41,
	0x4c, 0x12, 0x24, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x68, 0x65, 0x6c, 0x6d, 0x2d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0x1a, 0x24, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x68,
	0x65, 0x6c, 0x6d, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a,
	0xa1, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xaf,
	0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x56, 0x92, 0x41, 0x1c, 0x12, 0x0c, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0x1a, 0x0c, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a,
	0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x12, 0xb6, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5d, 0x92, 0x41, 0x1c, 0x12,
	0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0x1a, 0x0c, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x38, 0x3a, 0x01, 0x2a, 0x1a, 0x33, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xaa, 0x01, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x68, 0x65,
	0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x68, 0x65, 0x6c,
	0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5a, 0x92, 0x41, 0x1c, 0x12,
	0x0c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0x1a, 0x0c, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x35, 0x12, 0x33, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xb6, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x2e, 0x68, 0x65,
	0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x5d, 0x92, 0x41, 0x1c, 0x12, 0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe4, 0xbb, 0x93,
	0xe5, 0xba, 0x93, 0x1a, 0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe4, 0xbb, 0x93, 0xe5, 0xba,
	0x93, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x2a, 0x33, 0x2f, 0x68, 0x65, 0x6c,
	0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12,
	0xb2, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x1e, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x5f, 0x92, 0x41, 0x28, 0x12, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x12, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x12, 0xbf, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x56, 0x31, 0x12, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x31, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x75, 0x92, 0x41, 0x2c, 0x12, 0x14, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe5, 0x8c, 0x85, 0x1a, 0x14, 0xe6, 0x89, 0xb9, 0xe9,
	0x87, 0x8f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe5, 0x8c, 0x85,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12, 0x3e, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0xe2, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x31, 0x12, 0x20, 0x2e, 0x68, 0x65,
	0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x31, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x88, 0x01, 0x92, 0x41, 0x38, 0x12, 0x1a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x63, 0x68,
	0x61, 0x72, 0x74, 0xe5, 0x8c, 0x85, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x1a, 0x1a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe5,
	0x8c, 0x85, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x47, 0x12, 0x45, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xf7, 0x01, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x56, 0x31, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x56, 0x31, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x22, 0x97, 0x01, 0x92, 0x41,
	0x3e, 0x12, 0x1d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe5, 0x8c,
	0x85, 0xe7, 0x9a, 0x84, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x1a, 0x1d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe5, 0x8c, 0x85,
	0xe7, 0x9a, 0x84, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x50, 0x12, 0x4e, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x99, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x31, 0x12, 0x22, 0x2e, 0x68,
	0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x31, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56,
	0x31, 0x52, 0x65, 0x73, 0x70, 0x22, 0xb9, 0x01, 0x92, 0x41, 0x56, 0x12, 0x29, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe7,
	0x9a, 0x84, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe5, 0x8c, 0x85, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x29, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c,
	0x87, 0xe5, 0xae, 0x9a, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe7, 0x9a, 0x84, 0x63, 0x68, 0x61,
	0x72, 0x74, 0xe5, 0x8c, 0x85, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x12, 0x58, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x7d, 0x12, 0xe5, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x12, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x9a, 0x01, 0x92,
	0x41, 0x4a, 0x12, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a,
	0x20, 0x63, 0x68, 0x61, 0x72, 0x74, 0x1a, 0x34, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x8c,
	0x87, 0xe5, 0xae, 0x9a, 0x20, 0x63, 0x68, 0x61, 0x72, 0x74, 0xef, 0xbc, 0x8c, 0xe5, 0xb0, 0x86,
	0xe4, 0xbc, 0x9a, 0xe4, 0xbb, 0x8e, 0x20, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0xe4, 0xbb, 0x93,
	0xe5, 0xba, 0x93, 0xe4, 0xb8, 0xad, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x47, 0x2a, 0x45, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x9b, 0x02, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xbb, 0x01, 0x92, 0x41, 0x58, 0x12,
	0x19, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0xe6, 0x8c,
	0x87, 0xe5, 0xae, 0x9a, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x1a, 0x3b, 0xe5, 0x88, 0xa0, 0xe9,
	0x99, 0xa4, 0x20, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7,
	0x89, 0x88, 0xe6, 0x9c, 0xac, 0xef, 0xbc, 0x8c, 0xe5, 0xb0, 0x86, 0xe4, 0xbc, 0x9a, 0xe4, 0xbb,
	0x8e, 0x20, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe4, 0xb8,
	0xad, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x2a, 0x58, 0x2f,
	0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0xdc, 0x01, 0x0a, 0x0d, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x2e, 0x68, 0x65, 0x6c, 0x6d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x95,
	0x01, 0x92, 0x41, 0x29, 0x12, 0x0b, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd, 0xbd, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x1a, 0x1a, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd, 0xbd, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7,
	0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe7, 0x9a, 0x84, 0x63, 0x68, 0x61, 0x72, 0x74, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x63, 0x12, 0x61, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0xf5, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x2e, 0x68, 0x65, 0x6c,
	0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x68, 0x65,
	0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x9e, 0x01,
	0x92, 0x41, 0x42, 0x12, 0x1f, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x20, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0x20, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x1a, 0x1f, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x20, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0x20, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x53, 0x3a, 0x01, 0x2a, 0x22, 0x4e,
	0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x7b, 0x72, 0x65,
	0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0xf4,
	0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x31,
	0x12, 0x1d, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65, 0x71, 0x1a,
	0x1e, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x22,
	0xa3, 0x01, 0x92, 0x41, 0x54, 0x12, 0x28, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87,
	0xe5, 0xae, 0x9a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a,
	0x28, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x12,
	0x44, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x92, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x31, 0x12, 0x22, 0x2e, 0x68,
	0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x31, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56,
	0x31, 0x52, 0x65, 0x73, 0x70, 0x22, 0xb2, 0x01, 0x92, 0x41, 0x45, 0x12, 0x1f, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x22, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0xe7, 0x9a, 0x84, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x64, 0x12, 0x62, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa2, 0x02, 0x0a, 0x10, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x12,
	0x20, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65,
	0x71, 0x1a, 0x21, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x31,
	0x52, 0x65, 0x73, 0x70, 0x22, 0xc8, 0x01, 0x92, 0x41, 0x58, 0x12, 0x2a, 0xe6, 0x89, 0xa7, 0xe8,
	0xa1, 0x8c, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a,
	0x84, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x1a, 0x2a, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe6, 0x8c,
	0x87, 0xe5, 0xae, 0x9a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x67, 0x3a, 0x01, 0x2a, 0x22, 0x62, 0x2f, 0x68, 0x65,
	0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12,
	0xac, 0x02, 0x0a, 0x12, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x68, 0x65, 0x6c,
	0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x22,
	0xcc, 0x01, 0x92, 0x41, 0x5c, 0x12, 0x2c, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe6, 0x8c, 0x87,
	0xe5, 0xae, 0x9a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x1a, 0x2c, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe6, 0x8c, 0x87, 0xe5, 0xae,
	0x9a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x67, 0x3a, 0x01, 0x2a, 0x2a, 0x62, 0x2f, 0x68, 0x65, 0x6c,
	0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa2,
	0x02, 0x0a, 0x10, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x56, 0x31, 0x12, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x56, 0x31, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x22, 0xc8, 0x01, 0x92, 0x41, 0x58, 0x12, 0x2a,
	0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x20, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x1a, 0x2a, 0xe6, 0x89, 0xa7, 0xe8,
	0xa1, 0x8c, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a,
	0x84, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x67, 0x3a, 0x01, 0x2a, 0x1a,
	0x62, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x12, 0xb0, 0x02, 0x0a, 0x11, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x12, 0x21, 0x2e, 0x68, 0x65, 0x6c, 0x6d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x68,
	0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70,
	0x22, 0xd3, 0x01, 0x92, 0x41, 0x5a, 0x12, 0x2b, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe6, 0x8c,
	0x87, 0xe5, 0xae, 0x9a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x1a, 0x2b, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe6, 0x8c, 0x87, 0xe5, 0xae,
	0x9a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x70, 0x3a, 0x01, 0x2a, 0x1a, 0x6b, 0x2f, 0x68, 0x65, 0x6c, 0x6d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0xa3, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1e, 0x2e, 0x68, 0x65, 0x6c, 0x6d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x6d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x22, 0xcf, 0x01, 0x92, 0x41, 0x57,
	0x12, 0x15, 0xe9, 0xa2, 0x84, 0xe8, 0xa7, 0x88, 0x20, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x20, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x1a, 0x3e, 0xe9, 0xa2, 0x84, 0xe8, 0xa7, 0x88, 0x20,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xef, 0xbc,
	0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe5, 0xb7, 0xb2, 0xe7, 0xbb, 0x8f, 0xe9, 0x83, 0xa8,
	0xe7, 0xbd, 0xb2, 0xe5, 0x88, 0x99, 0xe5, 0x90, 0x8c, 0xe6, 0x97, 0xb6, 0xe5, 0xb1, 0x95, 0xe7,
	0xa4, 0xba, 0x20, 0x64, 0x69, 0x66, 0x66, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6f, 0x3a, 0x01, 0x2a,
	0x22, 0x6a, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0xb2, 0x02, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x21, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0xd5, 0x01, 0x92, 0x41, 0x60, 0x12,
	0x2e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0xe5, 0x8e, 0x86, 0xe5, 0x8f, 0xb2, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a,
	0x2e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0x63, 0x68, 0x61, 0x72, 0x74, 0x20, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0xe5, 0x8e, 0x86, 0xe5, 0x8f, 0xb2, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x6c, 0x12, 0x6a, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0xc1, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0xed, 0x01, 0x92, 0x41, 0x79, 0x12, 0x1e, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe7, 0x9a, 0x84, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x1a, 0x57, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0xe4, 0xb8, 0x8b, 0xe6,
	0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0x9a, 0x84, 0xe9, 0x83,
	0xa8, 0xe7, 0xbd, 0xb2, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82,
	0xe6, 0x9e, 0x9c, 0xe6, 0x98, 0xaf, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x20,
	0xe5, 0x88, 0x99, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0x20, 0x70, 0x6f, 0x64, 0x20, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6b, 0x12, 0x69, 0x2f, 0x68, 0x65, 0x6c,
	0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x8e, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x1e, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x50, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0xbe, 0x01, 0x92, 0x41, 0x4c, 0x12, 0x13, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x70, 0x6f, 0x64, 0x73,
	0x1a, 0x35, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x20, 0xe4, 0xb8, 0x8b, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0x70, 0x6f, 0x64, 0x2c, 0x20, 0xe6,
	0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0xe7, 0xad, 0x9b, 0xe9, 0x80, 0x89, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x69, 0x12, 0x67, 0x2f,
	0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x70, 0x6f, 0x64, 0x73, 0x32, 0xaf, 0x0a, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0xc9, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x81, 0x01, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x1a, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbb,
	0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44,
	0x12, 0x42, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x12, 0xdf, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x6d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x88, 0x01, 0x92, 0x41,
	0x34, 0x12, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7,
	0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x1a, 0x18, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe8,
	0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x12, 0x49, 0x2f, 0x68, 0x65,
	0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xc8, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x78, 0x92, 0x41, 0x28, 0x12, 0x12, 0xe5, 0xae,
	0x89, 0xe8, 0xa3, 0x85, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6,
	0x1a, 0x12, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbb,
	0x84, 0xe4, 0xbb, 0xb6, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x3a, 0x01, 0x2a, 0x22, 0x42, 0x2f,
	0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x12, 0xcf, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x7f, 0x92, 0x41, 0x28, 0x12, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0x1a, 0x12, 0xe6, 0x9b, 0xb4,
	0xe6, 0x96, 0xb0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x3a, 0x01, 0x2a, 0x1a, 0x49, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x12, 0xf3, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b,
	0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0xab, 0x01, 0x92, 0x41,
	0x4f, 0x12, 0x18, 0xe5, 0x81, 0x9c, 0xe6, 0xad, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7,
	0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0x1a, 0x33, 0xe5, 0x81, 0x9c,
	0xe6, 0xad, 0xa2, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe8,
	0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xef, 0xbc, 0x8c, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x53, 0x3a, 0x01, 0x2a, 0x1a, 0x4e, 0x2f, 0x68, 0x65, 0x6c, 0x6d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x12, 0xdc, 0x01, 0x0a, 0x0f, 0x55, 0x6e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x2e,
	0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20,
	0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x85, 0x01, 0x92, 0x41, 0x2e, 0x12, 0x12, 0xe5, 0x8d, 0xb8, 0xe8, 0xbd, 0xbd, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0x1a, 0x18, 0xe5, 0x88, 0xa0, 0xe9,
	0x99, 0xa4, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0x86,
	0x85, 0xe5, 0xae, 0xb9, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x3a, 0x01, 0x2a, 0x2a, 0x49, 0x2f,
	0x68, 0x65, 0x6c, 0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x42, 0x9d, 0x01, 0x92, 0x41, 0x89, 0x01, 0x12,
	0x1d, 0x0a, 0x14, 0x48, 0x65, 0x6c, 0x6d, 0x20, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20,
	0x41, 0x50, 0x49, 0x20, 0x44, 0x6f, 0x63, 0x32, 0x05, 0x30, 0x2e, 0x32, 0x2e, 0x30, 0x22, 0x0a,
	0x2f, 0x62, 0x63, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x34, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x5a, 0x23, 0x0a, 0x21, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x13, 0x08, 0x02, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x5a, 0x0e, 0x2e, 0x2f, 0x3b, 0x68, 0x65, 0x6c,
	0x6d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bcs_helm_manager_proto_rawDescOnce sync.Once
	file_bcs_helm_manager_proto_rawDescData = file_bcs_helm_manager_proto_rawDesc
)

func file_bcs_helm_manager_proto_rawDescGZIP() []byte {
	file_bcs_helm_manager_proto_rawDescOnce.Do(func() {
		file_bcs_helm_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_bcs_helm_manager_proto_rawDescData)
	})
	return file_bcs_helm_manager_proto_rawDescData
}

var file_bcs_helm_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 76)
var file_bcs_helm_manager_proto_goTypes = []interface{}{
	(*CommonResp)(nil),             // 0: helmmanager.CommonResp
	(*CommonListResp)(nil),         // 1: helmmanager.CommonListResp
	(*WebAnnotations)(nil),         // 2: helmmanager.WebAnnotations
	(*AvailableReq)(nil),           // 3: helmmanager.AvailableReq
	(*AvailableResp)(nil),          // 4: helmmanager.AvailableResp
	(*CreateRepositoryReq)(nil),    // 5: helmmanager.CreateRepositoryReq
	(*CreateRepositoryResp)(nil),   // 6: helmmanager.CreateRepositoryResp
	(*UpdateRepositoryReq)(nil),    // 7: helmmanager.UpdateRepositoryReq
	(*UpdateRepositoryResp)(nil),   // 8: helmmanager.UpdateRepositoryResp
	(*GetRepositoryReq)(nil),       // 9: helmmanager.GetRepositoryReq
	(*GetRepositoryResp)(nil),      // 10: helmmanager.GetRepositoryResp
	(*ListRepositoryReq)(nil),      // 11: helmmanager.ListRepositoryReq
	(*ListRepositoryResp)(nil),     // 12: helmmanager.ListRepositoryResp
	(*DeleteRepositoryReq)(nil),    // 13: helmmanager.DeleteRepositoryReq
	(*DeleteRepositoryResp)(nil),   // 14: helmmanager.DeleteRepositoryResp
	(*Repository)(nil),             // 15: helmmanager.Repository
	(*ChartListData)(nil),          // 16: helmmanager.ChartListData
	(*Chart)(nil),                  // 17: helmmanager.Chart
	(*ChartVersionListData)(nil),   // 18: helmmanager.ChartVersionListData
	(*ChartVersion)(nil),           // 19: helmmanager.ChartVersion
	(*ChartDetail)(nil),            // 20: helmmanager.ChartDetail
	(*FileContent)(nil),            // 21: helmmanager.FileContent
	(*ListChartV1Req)(nil),         // 22: helmmanager.ListChartV1Req
	(*ListChartV1Resp)(nil),        // 23: helmmanager.ListChartV1Resp
	(*GetChartDetailV1Req)(nil),    // 24: helmmanager.GetChartDetailV1Req
	(*GetChartDetailV1Resp)(nil),   // 25: helmmanager.GetChartDetailV1Resp
	(*ListChartVersionV1Req)(nil),  // 26: helmmanager.ListChartVersionV1Req
	(*ListChartVersionV1Resp)(nil), // 27: helmmanager.ListChartVersionV1Resp
	(*GetVersionDetailV1Req)(nil),  // 28: helmmanager.GetVersionDetailV1Req
	(*GetVersionDetailV1Resp)(nil), // 29: helmmanager.GetVersionDetailV1Resp
	(*DeleteChartReq)(nil),         // 30: helmmanager.DeleteChartReq
	(*DeleteChartResp)(nil),        // 31: helmmanager.DeleteChartResp
	(*DeleteChartVersionReq)(nil),  // 32: helmmanager.DeleteChartVersionReq
	(*DeleteChartVersionResp)(nil), // 33: helmmanager.DeleteChartVersionResp
	(*DownloadChartReq)(nil),       // 34: helmmanager.DownloadChartReq
	(*GetChartReleaseReq)(nil),     // 35: helmmanager.GetChartReleaseReq
	(*GetChartReleaseResp)(nil),    // 36: helmmanager.GetChartReleaseResp
	(*ReleaseListData)(nil),        // 37: helmmanager.ReleaseListData
	(*Release)(nil),                // 38: helmmanager.Release
	(*ReleaseDetail)(nil),          // 39: helmmanager.ReleaseDetail
	(*ListReleaseV1Req)(nil),       // 40: helmmanager.ListReleaseV1Req
	(*ListReleaseV1Resp)(nil),      // 41: helmmanager.ListReleaseV1Resp
	(*GetReleaseDetailV1Req)(nil),  // 42: helmmanager.GetReleaseDetailV1Req
	(*GetReleaseDetailV1Resp)(nil), // 43: helmmanager.GetReleaseDetailV1Resp
	(*InstallReleaseV1Req)(nil),    // 44: helmmanager.InstallReleaseV1Req
	(*InstallReleaseV1Resp)(nil),   // 45: helmmanager.InstallReleaseV1Resp
	(*UninstallReleaseV1Req)(nil),  // 46: helmmanager.UninstallReleaseV1Req
	(*UninstallReleaseV1Resp)(nil), // 47: helmmanager.UninstallReleaseV1Resp
	(*UpgradeReleaseV1Req)(nil),    // 48: helmmanager.UpgradeReleaseV1Req
	(*UpgradeReleaseV1Resp)(nil),   // 49: helmmanager.UpgradeReleaseV1Resp
	(*RollbackReleaseV1Req)(nil),   // 50: helmmanager.RollbackReleaseV1Req
	(*RollbackReleaseV1Resp)(nil),  // 51: helmmanager.RollbackReleaseV1Resp
	(*ReleasePreviewReq)(nil),      // 52: helmmanager.ReleasePreviewReq
	(*ReleasePreviewResp)(nil),     // 53: helmmanager.ReleasePreviewResp
	(*ReleasePreview)(nil),         // 54: helmmanager.ReleasePreview
	(*GetReleaseHistoryReq)(nil),   // 55: helmmanager.GetReleaseHistoryReq
	(*GetReleaseHistoryResp)(nil),  // 56: helmmanager.GetReleaseHistoryResp
	(*ReleaseHistory)(nil),         // 57: helmmanager.ReleaseHistory
	(*GetReleaseStatusReq)(nil),    // 58: helmmanager.GetReleaseStatusReq
	(*GetReleasePodsReq)(nil),      // 59: helmmanager.GetReleasePodsReq
	(*ListAddonsReq)(nil),          // 60: helmmanager.ListAddonsReq
	(*ListAddonsResp)(nil),         // 61: helmmanager.ListAddonsResp
	(*Addons)(nil),                 // 62: helmmanager.Addons
	(*GetAddonsDetailReq)(nil),     // 63: helmmanager.GetAddonsDetailReq
	(*GetAddonsDetailResp)(nil),    // 64: helmmanager.GetAddonsDetailResp
	(*InstallAddonsReq)(nil),       // 65: helmmanager.InstallAddonsReq
	(*InstallAddonsResp)(nil),      // 66: helmmanager.InstallAddonsResp
	(*UpgradeAddonsReq)(nil),       // 67: helmmanager.UpgradeAddonsReq
	(*UpgradeAddonsResp)(nil),      // 68: helmmanager.UpgradeAddonsResp
	(*StopAddonsReq)(nil),          // 69: helmmanager.StopAddonsReq
	(*StopAddonsResp)(nil),         // 70: helmmanager.StopAddonsResp
	(*UninstallAddonsReq)(nil),     // 71: helmmanager.UninstallAddonsReq
	(*UninstallAddonsResp)(nil),    // 72: helmmanager.UninstallAddonsResp
	nil,                            // 73: helmmanager.ChartDetail.ContentsEntry
	nil,                            // 74: helmmanager.ReleasePreview.NewContentsEntry
	nil,                            // 75: helmmanager.ReleasePreview.OldContentsEntry
	(*_struct.Struct)(nil),         // 76: google.protobuf.Struct
	(*_struct.ListValue)(nil),      // 77: google.protobuf.ListValue
	(*httpbody.HttpBody)(nil),      // 78: google.api.HttpBody
}
var file_bcs_helm_manager_proto_depIdxs = []int32{
	76, // 0: helmmanager.CommonResp.data:type_name -> google.protobuf.Struct
	2,  // 1: helmmanager.CommonResp.web_annotations:type_name -> helmmanager.WebAnnotations
	77, // 2: helmmanager.CommonListResp.data:type_name -> google.protobuf.ListValue
	2,  // 3: helmmanager.CommonListResp.web_annotations:type_name -> helmmanager.WebAnnotations
	76, // 4: helmmanager.WebAnnotations.perms:type_name -> google.protobuf.Struct
	15, // 5: helmmanager.CreateRepositoryResp.data:type_name -> helmmanager.Repository
	2,  // 6: helmmanager.CreateRepositoryResp.web_annotations:type_name -> helmmanager.WebAnnotations
	15, // 7: helmmanager.UpdateRepositoryResp.data:type_name -> helmmanager.Repository
	2,  // 8: helmmanager.UpdateRepositoryResp.web_annotations:type_name -> helmmanager.WebAnnotations
	15, // 9: helmmanager.GetRepositoryResp.data:type_name -> helmmanager.Repository
	2,  // 10: helmmanager.GetRepositoryResp.web_annotations:type_name -> helmmanager.WebAnnotations
	15, // 11: helmmanager.ListRepositoryResp.data:type_name -> helmmanager.Repository
	2,  // 12: helmmanager.ListRepositoryResp.web_annotations:type_name -> helmmanager.WebAnnotations
	2,  // 13: helmmanager.DeleteRepositoryResp.web_annotations:type_name -> helmmanager.WebAnnotations
	17, // 14: helmmanager.ChartListData.data:type_name -> helmmanager.Chart
	19, // 15: helmmanager.ChartVersionListData.data:type_name -> helmmanager.ChartVersion
	73, // 16: helmmanager.ChartDetail.contents:type_name -> helmmanager.ChartDetail.ContentsEntry
	16, // 17: helmmanager.ListChartV1Resp.data:type_name -> helmmanager.ChartListData
	2,  // 18: helmmanager.ListChartV1Resp.web_annotations:type_name -> helmmanager.WebAnnotations
	17, // 19: helmmanager.GetChartDetailV1Resp.data:type_name -> helmmanager.Chart
	2,  // 20: helmmanager.GetChartDetailV1Resp.web_annotations:type_name -> helmmanager.WebAnnotations
	18, // 21: helmmanager.ListChartVersionV1Resp.data:type_name -> helmmanager.ChartVersionListData
	2,  // 22: helmmanager.ListChartVersionV1Resp.web_annotations:type_name -> helmmanager.WebAnnotations
	20, // 23: helmmanager.GetVersionDetailV1Resp.data:type_name -> helmmanager.ChartDetail
	2,  // 24: helmmanager.GetVersionDetailV1Resp.web_annotations:type_name -> helmmanager.WebAnnotations
	2,  // 25: helmmanager.DeleteChartResp.web_annotations:type_name -> helmmanager.WebAnnotations
	2,  // 26: helmmanager.DeleteChartVersionResp.web_annotations:type_name -> helmmanager.WebAnnotations
	38, // 27: helmmanager.GetChartReleaseResp.data:type_name -> helmmanager.Release
	2,  // 28: helmmanager.GetChartReleaseResp.web_annotations:type_name -> helmmanager.WebAnnotations
	38, // 29: helmmanager.ReleaseListData.data:type_name -> helmmanager.Release
	37, // 30: helmmanager.ListReleaseV1Resp.data:type_name -> helmmanager.ReleaseListData
	2,  // 31: helmmanager.ListReleaseV1Resp.web_annotations:type_name -> helmmanager.WebAnnotations
	39, // 32: helmmanager.GetReleaseDetailV1Resp.data:type_name -> helmmanager.ReleaseDetail
	2,  // 33: helmmanager.GetReleaseDetailV1Resp.web_annotations:type_name -> helmmanager.WebAnnotations
	2,  // 34: helmmanager.InstallReleaseV1Resp.web_annotations:type_name -> helmmanager.WebAnnotations
	2,  // 35: helmmanager.UninstallReleaseV1Resp.web_annotations:type_name -> helmmanager.WebAnnotations
	2,  // 36: helmmanager.UpgradeReleaseV1Resp.web_annotations:type_name -> helmmanager.WebAnnotations
	2,  // 37: helmmanager.RollbackReleaseV1Resp.web_annotations:type_name -> helmmanager.WebAnnotations
	54, // 38: helmmanager.ReleasePreviewResp.data:type_name -> helmmanager.ReleasePreview
	2,  // 39: helmmanager.ReleasePreviewResp.web_annotations:type_name -> helmmanager.WebAnnotations
	74, // 40: helmmanager.ReleasePreview.newContents:type_name -> helmmanager.ReleasePreview.NewContentsEntry
	75, // 41: helmmanager.ReleasePreview.oldContents:type_name -> helmmanager.ReleasePreview.OldContentsEntry
	57, // 42: helmmanager.GetReleaseHistoryResp.data:type_name -> helmmanager.ReleaseHistory
	2,  // 43: helmmanager.GetReleaseHistoryResp.web_annotations:type_name -> helmmanager.WebAnnotations
	62, // 44: helmmanager.ListAddonsResp.data:type_name -> helmmanager.Addons
	2,  // 45: helmmanager.ListAddonsResp.web_annotations:type_name -> helmmanager.WebAnnotations
	62, // 46: helmmanager.GetAddonsDetailResp.data:type_name -> helmmanager.Addons
	2,  // 47: helmmanager.GetAddonsDetailResp.web_annotations:type_name -> helmmanager.WebAnnotations
	2,  // 48: helmmanager.InstallAddonsResp.web_annotations:type_name -> helmmanager.WebAnnotations
	2,  // 49: helmmanager.UpgradeAddonsResp.web_annotations:type_name -> helmmanager.WebAnnotations
	2,  // 50: helmmanager.StopAddonsResp.web_annotations:type_name -> helmmanager.WebAnnotations
	2,  // 51: helmmanager.UninstallAddonsResp.web_annotations:type_name -> helmmanager.WebAnnotations
	21, // 52: helmmanager.ChartDetail.ContentsEntry.value:type_name -> helmmanager.FileContent
	21, // 53: helmmanager.ReleasePreview.NewContentsEntry.value:type_name -> helmmanager.FileContent
	21, // 54: helmmanager.ReleasePreview.OldContentsEntry.value:type_name -> helmmanager.FileContent
	3,  // 55: helmmanager.HelmManager.Available:input_type -> helmmanager.AvailableReq
	5,  // 56: helmmanager.HelmManager.CreateRepository:input_type -> helmmanager.CreateRepositoryReq
	7,  // 57: helmmanager.HelmManager.UpdateRepository:input_type -> helmmanager.UpdateRepositoryReq
	9,  // 58: helmmanager.HelmManager.GetRepository:input_type -> helmmanager.GetRepositoryReq
	13, // 59: helmmanager.HelmManager.DeleteRepository:input_type -> helmmanager.DeleteRepositoryReq
	11, // 60: helmmanager.HelmManager.ListRepository:input_type -> helmmanager.ListRepositoryReq
	22, // 61: helmmanager.HelmManager.ListChartV1:input_type -> helmmanager.ListChartV1Req
	24, // 62: helmmanager.HelmManager.GetChartDetailV1:input_type -> helmmanager.GetChartDetailV1Req
	26, // 63: helmmanager.HelmManager.ListChartVersionV1:input_type -> helmmanager.ListChartVersionV1Req
	28, // 64: helmmanager.HelmManager.GetVersionDetailV1:input_type -> helmmanager.GetVersionDetailV1Req
	30, // 65: helmmanager.HelmManager.DeleteChart:input_type -> helmmanager.DeleteChartReq
	32, // 66: helmmanager.HelmManager.DeleteChartVersion:input_type -> helmmanager.DeleteChartVersionReq
	34, // 67: helmmanager.HelmManager.DownloadChart:input_type -> helmmanager.DownloadChartReq
	35, // 68: helmmanager.HelmManager.GetChartRelease:input_type -> helmmanager.GetChartReleaseReq
	40, // 69: helmmanager.HelmManager.ListReleaseV1:input_type -> helmmanager.ListReleaseV1Req
	42, // 70: helmmanager.HelmManager.GetReleaseDetailV1:input_type -> helmmanager.GetReleaseDetailV1Req
	44, // 71: helmmanager.HelmManager.InstallReleaseV1:input_type -> helmmanager.InstallReleaseV1Req
	46, // 72: helmmanager.HelmManager.UninstallReleaseV1:input_type -> helmmanager.UninstallReleaseV1Req
	48, // 73: helmmanager.HelmManager.UpgradeReleaseV1:input_type -> helmmanager.UpgradeReleaseV1Req
	50, // 74: helmmanager.HelmManager.RollbackReleaseV1:input_type -> helmmanager.RollbackReleaseV1Req
	52, // 75: helmmanager.HelmManager.ReleasePreview:input_type -> helmmanager.ReleasePreviewReq
	55, // 76: helmmanager.HelmManager.GetReleaseHistory:input_type -> helmmanager.GetReleaseHistoryReq
	58, // 77: helmmanager.HelmManager.GetReleaseStatus:input_type -> helmmanager.GetReleaseStatusReq
	59, // 78: helmmanager.HelmManager.GetReleasePods:input_type -> helmmanager.GetReleasePodsReq
	60, // 79: helmmanager.ClusterAddons.ListAddons:input_type -> helmmanager.ListAddonsReq
	63, // 80: helmmanager.ClusterAddons.GetAddonsDetail:input_type -> helmmanager.GetAddonsDetailReq
	65, // 81: helmmanager.ClusterAddons.InstallAddons:input_type -> helmmanager.InstallAddonsReq
	67, // 82: helmmanager.ClusterAddons.UpgradeAddons:input_type -> helmmanager.UpgradeAddonsReq
	69, // 83: helmmanager.ClusterAddons.StopAddons:input_type -> helmmanager.StopAddonsReq
	71, // 84: helmmanager.ClusterAddons.UninstallAddons:input_type -> helmmanager.UninstallAddonsReq
	4,  // 85: helmmanager.HelmManager.Available:output_type -> helmmanager.AvailableResp
	6,  // 86: helmmanager.HelmManager.CreateRepository:output_type -> helmmanager.CreateRepositoryResp
	8,  // 87: helmmanager.HelmManager.UpdateRepository:output_type -> helmmanager.UpdateRepositoryResp
	10, // 88: helmmanager.HelmManager.GetRepository:output_type -> helmmanager.GetRepositoryResp
	14, // 89: helmmanager.HelmManager.DeleteRepository:output_type -> helmmanager.DeleteRepositoryResp
	12, // 90: helmmanager.HelmManager.ListRepository:output_type -> helmmanager.ListRepositoryResp
	23, // 91: helmmanager.HelmManager.ListChartV1:output_type -> helmmanager.ListChartV1Resp
	25, // 92: helmmanager.HelmManager.GetChartDetailV1:output_type -> helmmanager.GetChartDetailV1Resp
	27, // 93: helmmanager.HelmManager.ListChartVersionV1:output_type -> helmmanager.ListChartVersionV1Resp
	29, // 94: helmmanager.HelmManager.GetVersionDetailV1:output_type -> helmmanager.GetVersionDetailV1Resp
	31, // 95: helmmanager.HelmManager.DeleteChart:output_type -> helmmanager.DeleteChartResp
	33, // 96: helmmanager.HelmManager.DeleteChartVersion:output_type -> helmmanager.DeleteChartVersionResp
	78, // 97: helmmanager.HelmManager.DownloadChart:output_type -> google.api.HttpBody
	36, // 98: helmmanager.HelmManager.GetChartRelease:output_type -> helmmanager.GetChartReleaseResp
	41, // 99: helmmanager.HelmManager.ListReleaseV1:output_type -> helmmanager.ListReleaseV1Resp
	43, // 100: helmmanager.HelmManager.GetReleaseDetailV1:output_type -> helmmanager.GetReleaseDetailV1Resp
	45, // 101: helmmanager.HelmManager.InstallReleaseV1:output_type -> helmmanager.InstallReleaseV1Resp
	47, // 102: helmmanager.HelmManager.UninstallReleaseV1:output_type -> helmmanager.UninstallReleaseV1Resp
	49, // 103: helmmanager.HelmManager.UpgradeReleaseV1:output_type -> helmmanager.UpgradeReleaseV1Resp
	51, // 104: helmmanager.HelmManager.RollbackReleaseV1:output_type -> helmmanager.RollbackReleaseV1Resp
	53, // 105: helmmanager.HelmManager.ReleasePreview:output_type -> helmmanager.ReleasePreviewResp
	56, // 106: helmmanager.HelmManager.GetReleaseHistory:output_type -> helmmanager.GetReleaseHistoryResp
	1,  // 107: helmmanager.HelmManager.GetReleaseStatus:output_type -> helmmanager.CommonListResp
	1,  // 108: helmmanager.HelmManager.GetReleasePods:output_type -> helmmanager.CommonListResp
	61, // 109: helmmanager.ClusterAddons.ListAddons:output_type -> helmmanager.ListAddonsResp
	64, // 110: helmmanager.ClusterAddons.GetAddonsDetail:output_type -> helmmanager.GetAddonsDetailResp
	66, // 111: helmmanager.ClusterAddons.InstallAddons:output_type -> helmmanager.InstallAddonsResp
	68, // 112: helmmanager.ClusterAddons.UpgradeAddons:output_type -> helmmanager.UpgradeAddonsResp
	70, // 113: helmmanager.ClusterAddons.StopAddons:output_type -> helmmanager.StopAddonsResp
	72, // 114: helmmanager.ClusterAddons.UninstallAddons:output_type -> helmmanager.UninstallAddonsResp
	85, // [85:115] is the sub-list for method output_type
	55, // [55:85] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_bcs_helm_manager_proto_init() }
func file_bcs_helm_manager_proto_init() {
	if File_bcs_helm_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bcs_helm_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebAnnotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRepositoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRepositoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRepositoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRepositoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRepositoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRepositoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepositoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepositoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRepositoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRepositoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartVersionListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChartV1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChartV1Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChartDetailV1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChartDetailV1Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChartVersionV1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChartVersionV1Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionDetailV1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionDetailV1Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChartResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChartVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChartVersionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadChartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChartReleaseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChartReleaseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Release); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReleaseV1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReleaseV1Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReleaseDetailV1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReleaseDetailV1Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallReleaseV1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallReleaseV1Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UninstallReleaseV1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UninstallReleaseV1Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeReleaseV1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeReleaseV1Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackReleaseV1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackReleaseV1Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleasePreviewReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleasePreviewResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleasePreview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReleaseHistoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReleaseHistoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReleaseStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReleasePodsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAddonsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAddonsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Addons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddonsDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddonsDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallAddonsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallAddonsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeAddonsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeAddonsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopAddonsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopAddonsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UninstallAddonsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_helm_manager_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UninstallAddonsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bcs_helm_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   76,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_bcs_helm_manager_proto_goTypes,
		DependencyIndexes: file_bcs_helm_manager_proto_depIdxs,
		MessageInfos:      file_bcs_helm_manager_proto_msgTypes,
	}.Build()
	File_bcs_helm_manager_proto = out.File
	file_bcs_helm_manager_proto_rawDesc = nil
	file_bcs_helm_manager_proto_goTypes = nil
	file_bcs_helm_manager_proto_depIdxs = nil
}
