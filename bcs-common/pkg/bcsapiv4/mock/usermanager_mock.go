// Code generated by MockGen. DO NOT EDIT.
// Source: usermanager.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	bcsapiv4 "github.com/Tencent/bk-bcs/bcs-common/pkg/bcsapiv4"
	gomock "github.com/golang/mock/gomock"
)

// MockUserManager is a mock of UserManager interface.
type MockUserManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagerMockRecorder
}

// MockUserManagerMockRecorder is the mock recorder for MockUserManager.
type MockUserManagerMockRecorder struct {
	mock *MockUserManager
}

// NewMockUserManager creates a new mock instance.
func NewMockUserManager(ctrl *gomock.Controller) *MockUserManager {
	mock := &MockUserManager{ctrl: ctrl}
	mock.recorder = &MockUserManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManager) EXPECT() *MockUserManagerMockRecorder {
	return m.recorder
}

// ListAllClusters mocks base method.
func (m *MockUserManager) ListAllClusters() ([]*bcsapiv4.ClusterCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllClusters")
	ret0, _ := ret[0].([]*bcsapiv4.ClusterCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllClusters indicates an expected call of ListAllClusters.
func (mr *MockUserManagerMockRecorder) ListAllClusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllClusters", reflect.TypeOf((*MockUserManager)(nil).ListAllClusters))
}
