// Tencent is pleased to support the open source community by making Blueking Container Service available.
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
// Licensed under the MIT License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// http://opensource.org/licenses/MIT
//
// Unless required by applicable law or agreed to in writing, software distributed under,
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied. See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.5
// source: bcsproject.proto

package bcsproject

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BCSProject_CreateProject_FullMethodName          = "/bcsproject.BCSProject/CreateProject"
	BCSProject_GetProject_FullMethodName             = "/bcsproject.BCSProject/GetProject"
	BCSProject_UpdateProject_FullMethodName          = "/bcsproject.BCSProject/UpdateProject"
	BCSProject_DeleteProject_FullMethodName          = "/bcsproject.BCSProject/DeleteProject"
	BCSProject_ListProjects_FullMethodName           = "/bcsproject.BCSProject/ListProjects"
	BCSProject_ListAuthorizedProjects_FullMethodName = "/bcsproject.BCSProject/ListAuthorizedProjects"
	BCSProject_ListProjectsForIAM_FullMethodName     = "/bcsproject.BCSProject/ListProjectsForIAM"
)

// BCSProjectClient is the client API for BCSProject service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BCSProjectClient interface {
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error)
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error)
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	ListAuthorizedProjects(ctx context.Context, in *ListAuthorizedProjReq, opts ...grpc.CallOption) (*ListAuthorizedProjResp, error)
	ListProjectsForIAM(ctx context.Context, in *ListProjectsForIAMReq, opts ...grpc.CallOption) (*ListProjectsForIAMResp, error)
}

type bCSProjectClient struct {
	cc grpc.ClientConnInterface
}

func NewBCSProjectClient(cc grpc.ClientConnInterface) BCSProjectClient {
	return &bCSProjectClient{cc}
}

func (c *bCSProjectClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error) {
	out := new(ProjectResponse)
	err := c.cc.Invoke(ctx, BCSProject_CreateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bCSProjectClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error) {
	out := new(ProjectResponse)
	err := c.cc.Invoke(ctx, BCSProject_GetProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bCSProjectClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error) {
	out := new(ProjectResponse)
	err := c.cc.Invoke(ctx, BCSProject_UpdateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bCSProjectClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error) {
	out := new(ProjectResponse)
	err := c.cc.Invoke(ctx, BCSProject_DeleteProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bCSProjectClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, BCSProject_ListProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bCSProjectClient) ListAuthorizedProjects(ctx context.Context, in *ListAuthorizedProjReq, opts ...grpc.CallOption) (*ListAuthorizedProjResp, error) {
	out := new(ListAuthorizedProjResp)
	err := c.cc.Invoke(ctx, BCSProject_ListAuthorizedProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bCSProjectClient) ListProjectsForIAM(ctx context.Context, in *ListProjectsForIAMReq, opts ...grpc.CallOption) (*ListProjectsForIAMResp, error) {
	out := new(ListProjectsForIAMResp)
	err := c.cc.Invoke(ctx, BCSProject_ListProjectsForIAM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BCSProjectServer is the server API for BCSProject service.
// All implementations must embed UnimplementedBCSProjectServer
// for forward compatibility
type BCSProjectServer interface {
	CreateProject(context.Context, *CreateProjectRequest) (*ProjectResponse, error)
	GetProject(context.Context, *GetProjectRequest) (*ProjectResponse, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*ProjectResponse, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*ProjectResponse, error)
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	ListAuthorizedProjects(context.Context, *ListAuthorizedProjReq) (*ListAuthorizedProjResp, error)
	ListProjectsForIAM(context.Context, *ListProjectsForIAMReq) (*ListProjectsForIAMResp, error)
	mustEmbedUnimplementedBCSProjectServer()
}

// UnimplementedBCSProjectServer must be embedded to have forward compatible implementations.
type UnimplementedBCSProjectServer struct {
}

func (UnimplementedBCSProjectServer) CreateProject(context.Context, *CreateProjectRequest) (*ProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedBCSProjectServer) GetProject(context.Context, *GetProjectRequest) (*ProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedBCSProjectServer) UpdateProject(context.Context, *UpdateProjectRequest) (*ProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedBCSProjectServer) DeleteProject(context.Context, *DeleteProjectRequest) (*ProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedBCSProjectServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedBCSProjectServer) ListAuthorizedProjects(context.Context, *ListAuthorizedProjReq) (*ListAuthorizedProjResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthorizedProjects not implemented")
}
func (UnimplementedBCSProjectServer) ListProjectsForIAM(context.Context, *ListProjectsForIAMReq) (*ListProjectsForIAMResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsForIAM not implemented")
}
func (UnimplementedBCSProjectServer) mustEmbedUnimplementedBCSProjectServer() {}

// UnsafeBCSProjectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BCSProjectServer will
// result in compilation errors.
type UnsafeBCSProjectServer interface {
	mustEmbedUnimplementedBCSProjectServer()
}

func RegisterBCSProjectServer(s grpc.ServiceRegistrar, srv BCSProjectServer) {
	s.RegisterService(&BCSProject_ServiceDesc, srv)
}

func _BCSProject_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCSProjectServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BCSProject_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCSProjectServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BCSProject_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCSProjectServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BCSProject_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCSProjectServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BCSProject_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCSProjectServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BCSProject_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCSProjectServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BCSProject_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCSProjectServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BCSProject_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCSProjectServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BCSProject_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCSProjectServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BCSProject_ListProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCSProjectServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BCSProject_ListAuthorizedProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthorizedProjReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCSProjectServer).ListAuthorizedProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BCSProject_ListAuthorizedProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCSProjectServer).ListAuthorizedProjects(ctx, req.(*ListAuthorizedProjReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BCSProject_ListProjectsForIAM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsForIAMReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCSProjectServer).ListProjectsForIAM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BCSProject_ListProjectsForIAM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCSProjectServer).ListProjectsForIAM(ctx, req.(*ListProjectsForIAMReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BCSProject_ServiceDesc is the grpc.ServiceDesc for BCSProject service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BCSProject_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bcsproject.BCSProject",
	HandlerType: (*BCSProjectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProject",
			Handler:    _BCSProject_CreateProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _BCSProject_GetProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _BCSProject_UpdateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _BCSProject_DeleteProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _BCSProject_ListProjects_Handler,
		},
		{
			MethodName: "ListAuthorizedProjects",
			Handler:    _BCSProject_ListAuthorizedProjects_Handler,
		},
		{
			MethodName: "ListProjectsForIAM",
			Handler:    _BCSProject_ListProjectsForIAM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bcsproject.proto",
}

const (
	Business_GetBusiness_FullMethodName         = "/bcsproject.Business/GetBusiness"
	Business_ListBusiness_FullMethodName        = "/bcsproject.Business/ListBusiness"
	Business_GetBusinessTopology_FullMethodName = "/bcsproject.Business/GetBusinessTopology"
)

// BusinessClient is the client API for Business service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessClient interface {
	GetBusiness(ctx context.Context, in *GetBusinessRequest, opts ...grpc.CallOption) (*GetBusinessResponse, error)
	ListBusiness(ctx context.Context, in *ListBusinessRequest, opts ...grpc.CallOption) (*ListBusinessResponse, error)
	GetBusinessTopology(ctx context.Context, in *GetBusinessTopologyRequest, opts ...grpc.CallOption) (*GetBusinessTopologyResponse, error)
}

type businessClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessClient(cc grpc.ClientConnInterface) BusinessClient {
	return &businessClient{cc}
}

func (c *businessClient) GetBusiness(ctx context.Context, in *GetBusinessRequest, opts ...grpc.CallOption) (*GetBusinessResponse, error) {
	out := new(GetBusinessResponse)
	err := c.cc.Invoke(ctx, Business_GetBusiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) ListBusiness(ctx context.Context, in *ListBusinessRequest, opts ...grpc.CallOption) (*ListBusinessResponse, error) {
	out := new(ListBusinessResponse)
	err := c.cc.Invoke(ctx, Business_ListBusiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) GetBusinessTopology(ctx context.Context, in *GetBusinessTopologyRequest, opts ...grpc.CallOption) (*GetBusinessTopologyResponse, error) {
	out := new(GetBusinessTopologyResponse)
	err := c.cc.Invoke(ctx, Business_GetBusinessTopology_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessServer is the server API for Business service.
// All implementations must embed UnimplementedBusinessServer
// for forward compatibility
type BusinessServer interface {
	GetBusiness(context.Context, *GetBusinessRequest) (*GetBusinessResponse, error)
	ListBusiness(context.Context, *ListBusinessRequest) (*ListBusinessResponse, error)
	GetBusinessTopology(context.Context, *GetBusinessTopologyRequest) (*GetBusinessTopologyResponse, error)
	mustEmbedUnimplementedBusinessServer()
}

// UnimplementedBusinessServer must be embedded to have forward compatible implementations.
type UnimplementedBusinessServer struct {
}

func (UnimplementedBusinessServer) GetBusiness(context.Context, *GetBusinessRequest) (*GetBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusiness not implemented")
}
func (UnimplementedBusinessServer) ListBusiness(context.Context, *ListBusinessRequest) (*ListBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusiness not implemented")
}
func (UnimplementedBusinessServer) GetBusinessTopology(context.Context, *GetBusinessTopologyRequest) (*GetBusinessTopologyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessTopology not implemented")
}
func (UnimplementedBusinessServer) mustEmbedUnimplementedBusinessServer() {}

// UnsafeBusinessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessServer will
// result in compilation errors.
type UnsafeBusinessServer interface {
	mustEmbedUnimplementedBusinessServer()
}

func RegisterBusinessServer(s grpc.ServiceRegistrar, srv BusinessServer) {
	s.RegisterService(&Business_ServiceDesc, srv)
}

func _Business_GetBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).GetBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Business_GetBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).GetBusiness(ctx, req.(*GetBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_ListBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).ListBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Business_ListBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).ListBusiness(ctx, req.(*ListBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_GetBusinessTopology_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessTopologyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).GetBusinessTopology(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Business_GetBusinessTopology_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).GetBusinessTopology(ctx, req.(*GetBusinessTopologyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Business_ServiceDesc is the grpc.ServiceDesc for Business service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Business_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bcsproject.Business",
	HandlerType: (*BusinessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBusiness",
			Handler:    _Business_GetBusiness_Handler,
		},
		{
			MethodName: "ListBusiness",
			Handler:    _Business_ListBusiness_Handler,
		},
		{
			MethodName: "GetBusinessTopology",
			Handler:    _Business_GetBusinessTopology_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bcsproject.proto",
}

const (
	Namespace_CreateNamespace_FullMethodName         = "/bcsproject.Namespace/CreateNamespace"
	Namespace_CreateNamespaceCallback_FullMethodName = "/bcsproject.Namespace/CreateNamespaceCallback"
	Namespace_UpdateNamespace_FullMethodName         = "/bcsproject.Namespace/UpdateNamespace"
	Namespace_UpdateNamespaceCallback_FullMethodName = "/bcsproject.Namespace/UpdateNamespaceCallback"
	Namespace_GetNamespace_FullMethodName            = "/bcsproject.Namespace/GetNamespace"
	Namespace_ListNamespaces_FullMethodName          = "/bcsproject.Namespace/ListNamespaces"
	Namespace_DeleteNamespace_FullMethodName         = "/bcsproject.Namespace/DeleteNamespace"
	Namespace_DeleteNamespaceCallback_FullMethodName = "/bcsproject.Namespace/DeleteNamespaceCallback"
	Namespace_SyncNamespace_FullMethodName           = "/bcsproject.Namespace/SyncNamespace"
	Namespace_WithdrawNamespace_FullMethodName       = "/bcsproject.Namespace/WithdrawNamespace"
	Namespace_ListNativeNamespaces_FullMethodName    = "/bcsproject.Namespace/ListNativeNamespaces"
)

// NamespaceClient is the client API for Namespace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamespaceClient interface {
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	CreateNamespaceCallback(ctx context.Context, in *NamespaceCallbackRequest, opts ...grpc.CallOption) (*NamespaceCallbackResponse, error)
	UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error)
	UpdateNamespaceCallback(ctx context.Context, in *NamespaceCallbackRequest, opts ...grpc.CallOption) (*NamespaceCallbackResponse, error)
	GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error)
	ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error)
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error)
	DeleteNamespaceCallback(ctx context.Context, in *NamespaceCallbackRequest, opts ...grpc.CallOption) (*NamespaceCallbackResponse, error)
	SyncNamespace(ctx context.Context, in *SyncNamespaceRequest, opts ...grpc.CallOption) (*SyncNamespaceResponse, error)
	WithdrawNamespace(ctx context.Context, in *WithdrawNamespaceRequest, opts ...grpc.CallOption) (*WithdrawNamespaceResponse, error)
	ListNativeNamespaces(ctx context.Context, in *ListNativeNamespacesRequest, opts ...grpc.CallOption) (*ListNativeNamespacesResponse, error)
}

type namespaceClient struct {
	cc grpc.ClientConnInterface
}

func NewNamespaceClient(cc grpc.ClientConnInterface) NamespaceClient {
	return &namespaceClient{cc}
}

func (c *namespaceClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, Namespace_CreateNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) CreateNamespaceCallback(ctx context.Context, in *NamespaceCallbackRequest, opts ...grpc.CallOption) (*NamespaceCallbackResponse, error) {
	out := new(NamespaceCallbackResponse)
	err := c.cc.Invoke(ctx, Namespace_CreateNamespaceCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error) {
	out := new(UpdateNamespaceResponse)
	err := c.cc.Invoke(ctx, Namespace_UpdateNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) UpdateNamespaceCallback(ctx context.Context, in *NamespaceCallbackRequest, opts ...grpc.CallOption) (*NamespaceCallbackResponse, error) {
	out := new(NamespaceCallbackResponse)
	err := c.cc.Invoke(ctx, Namespace_UpdateNamespaceCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error) {
	out := new(GetNamespaceResponse)
	err := c.cc.Invoke(ctx, Namespace_GetNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error) {
	out := new(ListNamespacesResponse)
	err := c.cc.Invoke(ctx, Namespace_ListNamespaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error) {
	out := new(DeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, Namespace_DeleteNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) DeleteNamespaceCallback(ctx context.Context, in *NamespaceCallbackRequest, opts ...grpc.CallOption) (*NamespaceCallbackResponse, error) {
	out := new(NamespaceCallbackResponse)
	err := c.cc.Invoke(ctx, Namespace_DeleteNamespaceCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) SyncNamespace(ctx context.Context, in *SyncNamespaceRequest, opts ...grpc.CallOption) (*SyncNamespaceResponse, error) {
	out := new(SyncNamespaceResponse)
	err := c.cc.Invoke(ctx, Namespace_SyncNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) WithdrawNamespace(ctx context.Context, in *WithdrawNamespaceRequest, opts ...grpc.CallOption) (*WithdrawNamespaceResponse, error) {
	out := new(WithdrawNamespaceResponse)
	err := c.cc.Invoke(ctx, Namespace_WithdrawNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) ListNativeNamespaces(ctx context.Context, in *ListNativeNamespacesRequest, opts ...grpc.CallOption) (*ListNativeNamespacesResponse, error) {
	out := new(ListNativeNamespacesResponse)
	err := c.cc.Invoke(ctx, Namespace_ListNativeNamespaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespaceServer is the server API for Namespace service.
// All implementations must embed UnimplementedNamespaceServer
// for forward compatibility
type NamespaceServer interface {
	CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	CreateNamespaceCallback(context.Context, *NamespaceCallbackRequest) (*NamespaceCallbackResponse, error)
	UpdateNamespace(context.Context, *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error)
	UpdateNamespaceCallback(context.Context, *NamespaceCallbackRequest) (*NamespaceCallbackResponse, error)
	GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error)
	ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error)
	DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error)
	DeleteNamespaceCallback(context.Context, *NamespaceCallbackRequest) (*NamespaceCallbackResponse, error)
	SyncNamespace(context.Context, *SyncNamespaceRequest) (*SyncNamespaceResponse, error)
	WithdrawNamespace(context.Context, *WithdrawNamespaceRequest) (*WithdrawNamespaceResponse, error)
	ListNativeNamespaces(context.Context, *ListNativeNamespacesRequest) (*ListNativeNamespacesResponse, error)
	mustEmbedUnimplementedNamespaceServer()
}

// UnimplementedNamespaceServer must be embedded to have forward compatible implementations.
type UnimplementedNamespaceServer struct {
}

func (UnimplementedNamespaceServer) CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedNamespaceServer) CreateNamespaceCallback(context.Context, *NamespaceCallbackRequest) (*NamespaceCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespaceCallback not implemented")
}
func (UnimplementedNamespaceServer) UpdateNamespace(context.Context, *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespace not implemented")
}
func (UnimplementedNamespaceServer) UpdateNamespaceCallback(context.Context, *NamespaceCallbackRequest) (*NamespaceCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespaceCallback not implemented")
}
func (UnimplementedNamespaceServer) GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (UnimplementedNamespaceServer) ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedNamespaceServer) DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedNamespaceServer) DeleteNamespaceCallback(context.Context, *NamespaceCallbackRequest) (*NamespaceCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespaceCallback not implemented")
}
func (UnimplementedNamespaceServer) SyncNamespace(context.Context, *SyncNamespaceRequest) (*SyncNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncNamespace not implemented")
}
func (UnimplementedNamespaceServer) WithdrawNamespace(context.Context, *WithdrawNamespaceRequest) (*WithdrawNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawNamespace not implemented")
}
func (UnimplementedNamespaceServer) ListNativeNamespaces(context.Context, *ListNativeNamespacesRequest) (*ListNativeNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNativeNamespaces not implemented")
}
func (UnimplementedNamespaceServer) mustEmbedUnimplementedNamespaceServer() {}

// UnsafeNamespaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamespaceServer will
// result in compilation errors.
type UnsafeNamespaceServer interface {
	mustEmbedUnimplementedNamespaceServer()
}

func RegisterNamespaceServer(s grpc.ServiceRegistrar, srv NamespaceServer) {
	s.RegisterService(&Namespace_ServiceDesc, srv)
}

func _Namespace_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Namespace_CreateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).CreateNamespace(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_CreateNamespaceCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).CreateNamespaceCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Namespace_CreateNamespaceCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).CreateNamespaceCallback(ctx, req.(*NamespaceCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_UpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).UpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Namespace_UpdateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).UpdateNamespace(ctx, req.(*UpdateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_UpdateNamespaceCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).UpdateNamespaceCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Namespace_UpdateNamespaceCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).UpdateNamespaceCallback(ctx, req.(*NamespaceCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Namespace_GetNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).GetNamespace(ctx, req.(*GetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Namespace_ListNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).ListNamespaces(ctx, req.(*ListNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Namespace_DeleteNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).DeleteNamespace(ctx, req.(*DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_DeleteNamespaceCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).DeleteNamespaceCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Namespace_DeleteNamespaceCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).DeleteNamespaceCallback(ctx, req.(*NamespaceCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_SyncNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).SyncNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Namespace_SyncNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).SyncNamespace(ctx, req.(*SyncNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_WithdrawNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).WithdrawNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Namespace_WithdrawNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).WithdrawNamespace(ctx, req.(*WithdrawNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_ListNativeNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNativeNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).ListNativeNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Namespace_ListNativeNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).ListNativeNamespaces(ctx, req.(*ListNativeNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Namespace_ServiceDesc is the grpc.ServiceDesc for Namespace service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Namespace_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bcsproject.Namespace",
	HandlerType: (*NamespaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNamespace",
			Handler:    _Namespace_CreateNamespace_Handler,
		},
		{
			MethodName: "CreateNamespaceCallback",
			Handler:    _Namespace_CreateNamespaceCallback_Handler,
		},
		{
			MethodName: "UpdateNamespace",
			Handler:    _Namespace_UpdateNamespace_Handler,
		},
		{
			MethodName: "UpdateNamespaceCallback",
			Handler:    _Namespace_UpdateNamespaceCallback_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _Namespace_GetNamespace_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _Namespace_ListNamespaces_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _Namespace_DeleteNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespaceCallback",
			Handler:    _Namespace_DeleteNamespaceCallback_Handler,
		},
		{
			MethodName: "SyncNamespace",
			Handler:    _Namespace_SyncNamespace_Handler,
		},
		{
			MethodName: "WithdrawNamespace",
			Handler:    _Namespace_WithdrawNamespace_Handler,
		},
		{
			MethodName: "ListNativeNamespaces",
			Handler:    _Namespace_ListNativeNamespaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bcsproject.proto",
}

const (
	Variable_CreateVariable_FullMethodName            = "/bcsproject.Variable/CreateVariable"
	Variable_UpdateVariable_FullMethodName            = "/bcsproject.Variable/UpdateVariable"
	Variable_ListVariableDefinitions_FullMethodName   = "/bcsproject.Variable/ListVariableDefinitions"
	Variable_DeleteVariableDefinitions_FullMethodName = "/bcsproject.Variable/DeleteVariableDefinitions"
	Variable_ListClustersVariables_FullMethodName     = "/bcsproject.Variable/ListClustersVariables"
	Variable_ListNamespacesVariables_FullMethodName   = "/bcsproject.Variable/ListNamespacesVariables"
	Variable_UpdateClustersVariables_FullMethodName   = "/bcsproject.Variable/UpdateClustersVariables"
	Variable_UpdateNamespacesVariables_FullMethodName = "/bcsproject.Variable/UpdateNamespacesVariables"
	Variable_ListClusterVariables_FullMethodName      = "/bcsproject.Variable/ListClusterVariables"
	Variable_ListNamespaceVariables_FullMethodName    = "/bcsproject.Variable/ListNamespaceVariables"
	Variable_UpdateClusterVariables_FullMethodName    = "/bcsproject.Variable/UpdateClusterVariables"
	Variable_UpdateNamespaceVariables_FullMethodName  = "/bcsproject.Variable/UpdateNamespaceVariables"
	Variable_ImportVariables_FullMethodName           = "/bcsproject.Variable/ImportVariables"
	Variable_RenderVariables_FullMethodName           = "/bcsproject.Variable/RenderVariables"
)

// VariableClient is the client API for Variable service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VariableClient interface {
	CreateVariable(ctx context.Context, in *CreateVariableRequest, opts ...grpc.CallOption) (*CreateVariableResponse, error)
	UpdateVariable(ctx context.Context, in *UpdateVariableRequest, opts ...grpc.CallOption) (*UpdateVariableResponse, error)
	ListVariableDefinitions(ctx context.Context, in *ListVariableDefinitionsRequest, opts ...grpc.CallOption) (*ListVariableDefinitionsResponse, error)
	DeleteVariableDefinitions(ctx context.Context, in *DeleteVariableDefinitionsRequest, opts ...grpc.CallOption) (*DeleteVariableDefinitionsResponse, error)
	ListClustersVariables(ctx context.Context, in *ListClustersVariablesRequest, opts ...grpc.CallOption) (*ListClustersVariablesResponse, error)
	ListNamespacesVariables(ctx context.Context, in *ListNamespacesVariablesRequest, opts ...grpc.CallOption) (*ListNamespacesVariablesResponse, error)
	UpdateClustersVariables(ctx context.Context, in *UpdateClustersVariablesRequest, opts ...grpc.CallOption) (*UpdateClustersVariablesResponse, error)
	UpdateNamespacesVariables(ctx context.Context, in *UpdateNamespacesVariablesRequest, opts ...grpc.CallOption) (*UpdateNamespacesVariablesResponse, error)
	ListClusterVariables(ctx context.Context, in *ListClusterVariablesRequest, opts ...grpc.CallOption) (*ListClusterVariablesResponse, error)
	ListNamespaceVariables(ctx context.Context, in *ListNamespaceVariablesRequest, opts ...grpc.CallOption) (*ListNamespaceVariablesResponse, error)
	UpdateClusterVariables(ctx context.Context, in *UpdateClusterVariablesRequest, opts ...grpc.CallOption) (*UpdateClusterVariablesResponse, error)
	UpdateNamespaceVariables(ctx context.Context, in *UpdateNamespaceVariablesRequest, opts ...grpc.CallOption) (*UpdateNamespaceVariablesResponse, error)
	ImportVariables(ctx context.Context, in *ImportVariablesRequest, opts ...grpc.CallOption) (*ImportVariablesResponse, error)
	RenderVariables(ctx context.Context, in *RenderVariablesRequest, opts ...grpc.CallOption) (*RenderVariablesResponse, error)
}

type variableClient struct {
	cc grpc.ClientConnInterface
}

func NewVariableClient(cc grpc.ClientConnInterface) VariableClient {
	return &variableClient{cc}
}

func (c *variableClient) CreateVariable(ctx context.Context, in *CreateVariableRequest, opts ...grpc.CallOption) (*CreateVariableResponse, error) {
	out := new(CreateVariableResponse)
	err := c.cc.Invoke(ctx, Variable_CreateVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableClient) UpdateVariable(ctx context.Context, in *UpdateVariableRequest, opts ...grpc.CallOption) (*UpdateVariableResponse, error) {
	out := new(UpdateVariableResponse)
	err := c.cc.Invoke(ctx, Variable_UpdateVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableClient) ListVariableDefinitions(ctx context.Context, in *ListVariableDefinitionsRequest, opts ...grpc.CallOption) (*ListVariableDefinitionsResponse, error) {
	out := new(ListVariableDefinitionsResponse)
	err := c.cc.Invoke(ctx, Variable_ListVariableDefinitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableClient) DeleteVariableDefinitions(ctx context.Context, in *DeleteVariableDefinitionsRequest, opts ...grpc.CallOption) (*DeleteVariableDefinitionsResponse, error) {
	out := new(DeleteVariableDefinitionsResponse)
	err := c.cc.Invoke(ctx, Variable_DeleteVariableDefinitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableClient) ListClustersVariables(ctx context.Context, in *ListClustersVariablesRequest, opts ...grpc.CallOption) (*ListClustersVariablesResponse, error) {
	out := new(ListClustersVariablesResponse)
	err := c.cc.Invoke(ctx, Variable_ListClustersVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableClient) ListNamespacesVariables(ctx context.Context, in *ListNamespacesVariablesRequest, opts ...grpc.CallOption) (*ListNamespacesVariablesResponse, error) {
	out := new(ListNamespacesVariablesResponse)
	err := c.cc.Invoke(ctx, Variable_ListNamespacesVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableClient) UpdateClustersVariables(ctx context.Context, in *UpdateClustersVariablesRequest, opts ...grpc.CallOption) (*UpdateClustersVariablesResponse, error) {
	out := new(UpdateClustersVariablesResponse)
	err := c.cc.Invoke(ctx, Variable_UpdateClustersVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableClient) UpdateNamespacesVariables(ctx context.Context, in *UpdateNamespacesVariablesRequest, opts ...grpc.CallOption) (*UpdateNamespacesVariablesResponse, error) {
	out := new(UpdateNamespacesVariablesResponse)
	err := c.cc.Invoke(ctx, Variable_UpdateNamespacesVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableClient) ListClusterVariables(ctx context.Context, in *ListClusterVariablesRequest, opts ...grpc.CallOption) (*ListClusterVariablesResponse, error) {
	out := new(ListClusterVariablesResponse)
	err := c.cc.Invoke(ctx, Variable_ListClusterVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableClient) ListNamespaceVariables(ctx context.Context, in *ListNamespaceVariablesRequest, opts ...grpc.CallOption) (*ListNamespaceVariablesResponse, error) {
	out := new(ListNamespaceVariablesResponse)
	err := c.cc.Invoke(ctx, Variable_ListNamespaceVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableClient) UpdateClusterVariables(ctx context.Context, in *UpdateClusterVariablesRequest, opts ...grpc.CallOption) (*UpdateClusterVariablesResponse, error) {
	out := new(UpdateClusterVariablesResponse)
	err := c.cc.Invoke(ctx, Variable_UpdateClusterVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableClient) UpdateNamespaceVariables(ctx context.Context, in *UpdateNamespaceVariablesRequest, opts ...grpc.CallOption) (*UpdateNamespaceVariablesResponse, error) {
	out := new(UpdateNamespaceVariablesResponse)
	err := c.cc.Invoke(ctx, Variable_UpdateNamespaceVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableClient) ImportVariables(ctx context.Context, in *ImportVariablesRequest, opts ...grpc.CallOption) (*ImportVariablesResponse, error) {
	out := new(ImportVariablesResponse)
	err := c.cc.Invoke(ctx, Variable_ImportVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableClient) RenderVariables(ctx context.Context, in *RenderVariablesRequest, opts ...grpc.CallOption) (*RenderVariablesResponse, error) {
	out := new(RenderVariablesResponse)
	err := c.cc.Invoke(ctx, Variable_RenderVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VariableServer is the server API for Variable service.
// All implementations must embed UnimplementedVariableServer
// for forward compatibility
type VariableServer interface {
	CreateVariable(context.Context, *CreateVariableRequest) (*CreateVariableResponse, error)
	UpdateVariable(context.Context, *UpdateVariableRequest) (*UpdateVariableResponse, error)
	ListVariableDefinitions(context.Context, *ListVariableDefinitionsRequest) (*ListVariableDefinitionsResponse, error)
	DeleteVariableDefinitions(context.Context, *DeleteVariableDefinitionsRequest) (*DeleteVariableDefinitionsResponse, error)
	ListClustersVariables(context.Context, *ListClustersVariablesRequest) (*ListClustersVariablesResponse, error)
	ListNamespacesVariables(context.Context, *ListNamespacesVariablesRequest) (*ListNamespacesVariablesResponse, error)
	UpdateClustersVariables(context.Context, *UpdateClustersVariablesRequest) (*UpdateClustersVariablesResponse, error)
	UpdateNamespacesVariables(context.Context, *UpdateNamespacesVariablesRequest) (*UpdateNamespacesVariablesResponse, error)
	ListClusterVariables(context.Context, *ListClusterVariablesRequest) (*ListClusterVariablesResponse, error)
	ListNamespaceVariables(context.Context, *ListNamespaceVariablesRequest) (*ListNamespaceVariablesResponse, error)
	UpdateClusterVariables(context.Context, *UpdateClusterVariablesRequest) (*UpdateClusterVariablesResponse, error)
	UpdateNamespaceVariables(context.Context, *UpdateNamespaceVariablesRequest) (*UpdateNamespaceVariablesResponse, error)
	ImportVariables(context.Context, *ImportVariablesRequest) (*ImportVariablesResponse, error)
	RenderVariables(context.Context, *RenderVariablesRequest) (*RenderVariablesResponse, error)
	mustEmbedUnimplementedVariableServer()
}

// UnimplementedVariableServer must be embedded to have forward compatible implementations.
type UnimplementedVariableServer struct {
}

func (UnimplementedVariableServer) CreateVariable(context.Context, *CreateVariableRequest) (*CreateVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVariable not implemented")
}
func (UnimplementedVariableServer) UpdateVariable(context.Context, *UpdateVariableRequest) (*UpdateVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVariable not implemented")
}
func (UnimplementedVariableServer) ListVariableDefinitions(context.Context, *ListVariableDefinitionsRequest) (*ListVariableDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVariableDefinitions not implemented")
}
func (UnimplementedVariableServer) DeleteVariableDefinitions(context.Context, *DeleteVariableDefinitionsRequest) (*DeleteVariableDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVariableDefinitions not implemented")
}
func (UnimplementedVariableServer) ListClustersVariables(context.Context, *ListClustersVariablesRequest) (*ListClustersVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClustersVariables not implemented")
}
func (UnimplementedVariableServer) ListNamespacesVariables(context.Context, *ListNamespacesVariablesRequest) (*ListNamespacesVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespacesVariables not implemented")
}
func (UnimplementedVariableServer) UpdateClustersVariables(context.Context, *UpdateClustersVariablesRequest) (*UpdateClustersVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClustersVariables not implemented")
}
func (UnimplementedVariableServer) UpdateNamespacesVariables(context.Context, *UpdateNamespacesVariablesRequest) (*UpdateNamespacesVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespacesVariables not implemented")
}
func (UnimplementedVariableServer) ListClusterVariables(context.Context, *ListClusterVariablesRequest) (*ListClusterVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterVariables not implemented")
}
func (UnimplementedVariableServer) ListNamespaceVariables(context.Context, *ListNamespaceVariablesRequest) (*ListNamespaceVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaceVariables not implemented")
}
func (UnimplementedVariableServer) UpdateClusterVariables(context.Context, *UpdateClusterVariablesRequest) (*UpdateClusterVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterVariables not implemented")
}
func (UnimplementedVariableServer) UpdateNamespaceVariables(context.Context, *UpdateNamespaceVariablesRequest) (*UpdateNamespaceVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespaceVariables not implemented")
}
func (UnimplementedVariableServer) ImportVariables(context.Context, *ImportVariablesRequest) (*ImportVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportVariables not implemented")
}
func (UnimplementedVariableServer) RenderVariables(context.Context, *RenderVariablesRequest) (*RenderVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderVariables not implemented")
}
func (UnimplementedVariableServer) mustEmbedUnimplementedVariableServer() {}

// UnsafeVariableServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VariableServer will
// result in compilation errors.
type UnsafeVariableServer interface {
	mustEmbedUnimplementedVariableServer()
}

func RegisterVariableServer(s grpc.ServiceRegistrar, srv VariableServer) {
	s.RegisterService(&Variable_ServiceDesc, srv)
}

func _Variable_CreateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServer).CreateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variable_CreateVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServer).CreateVariable(ctx, req.(*CreateVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variable_UpdateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServer).UpdateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variable_UpdateVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServer).UpdateVariable(ctx, req.(*UpdateVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variable_ListVariableDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVariableDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServer).ListVariableDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variable_ListVariableDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServer).ListVariableDefinitions(ctx, req.(*ListVariableDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variable_DeleteVariableDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVariableDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServer).DeleteVariableDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variable_DeleteVariableDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServer).DeleteVariableDefinitions(ctx, req.(*DeleteVariableDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variable_ListClustersVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServer).ListClustersVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variable_ListClustersVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServer).ListClustersVariables(ctx, req.(*ListClustersVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variable_ListNamespacesVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServer).ListNamespacesVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variable_ListNamespacesVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServer).ListNamespacesVariables(ctx, req.(*ListNamespacesVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variable_UpdateClustersVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClustersVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServer).UpdateClustersVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variable_UpdateClustersVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServer).UpdateClustersVariables(ctx, req.(*UpdateClustersVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variable_UpdateNamespacesVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespacesVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServer).UpdateNamespacesVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variable_UpdateNamespacesVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServer).UpdateNamespacesVariables(ctx, req.(*UpdateNamespacesVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variable_ListClusterVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServer).ListClusterVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variable_ListClusterVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServer).ListClusterVariables(ctx, req.(*ListClusterVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variable_ListNamespaceVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespaceVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServer).ListNamespaceVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variable_ListNamespaceVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServer).ListNamespaceVariables(ctx, req.(*ListNamespaceVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variable_UpdateClusterVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServer).UpdateClusterVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variable_UpdateClusterVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServer).UpdateClusterVariables(ctx, req.(*UpdateClusterVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variable_UpdateNamespaceVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServer).UpdateNamespaceVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variable_UpdateNamespaceVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServer).UpdateNamespaceVariables(ctx, req.(*UpdateNamespaceVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variable_ImportVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServer).ImportVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variable_ImportVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServer).ImportVariables(ctx, req.(*ImportVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variable_RenderVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServer).RenderVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variable_RenderVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServer).RenderVariables(ctx, req.(*RenderVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Variable_ServiceDesc is the grpc.ServiceDesc for Variable service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Variable_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bcsproject.Variable",
	HandlerType: (*VariableServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVariable",
			Handler:    _Variable_CreateVariable_Handler,
		},
		{
			MethodName: "UpdateVariable",
			Handler:    _Variable_UpdateVariable_Handler,
		},
		{
			MethodName: "ListVariableDefinitions",
			Handler:    _Variable_ListVariableDefinitions_Handler,
		},
		{
			MethodName: "DeleteVariableDefinitions",
			Handler:    _Variable_DeleteVariableDefinitions_Handler,
		},
		{
			MethodName: "ListClustersVariables",
			Handler:    _Variable_ListClustersVariables_Handler,
		},
		{
			MethodName: "ListNamespacesVariables",
			Handler:    _Variable_ListNamespacesVariables_Handler,
		},
		{
			MethodName: "UpdateClustersVariables",
			Handler:    _Variable_UpdateClustersVariables_Handler,
		},
		{
			MethodName: "UpdateNamespacesVariables",
			Handler:    _Variable_UpdateNamespacesVariables_Handler,
		},
		{
			MethodName: "ListClusterVariables",
			Handler:    _Variable_ListClusterVariables_Handler,
		},
		{
			MethodName: "ListNamespaceVariables",
			Handler:    _Variable_ListNamespaceVariables_Handler,
		},
		{
			MethodName: "UpdateClusterVariables",
			Handler:    _Variable_UpdateClusterVariables_Handler,
		},
		{
			MethodName: "UpdateNamespaceVariables",
			Handler:    _Variable_UpdateNamespaceVariables_Handler,
		},
		{
			MethodName: "ImportVariables",
			Handler:    _Variable_ImportVariables_Handler,
		},
		{
			MethodName: "RenderVariables",
			Handler:    _Variable_RenderVariables_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bcsproject.proto",
}

const (
	Healthz_Healthz_FullMethodName = "/bcsproject.Healthz/Healthz"
	Healthz_Ping_FullMethodName    = "/bcsproject.Healthz/Ping"
)

// HealthzClient is the client API for Healthz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthzClient interface {
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type healthzClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthzClient(cc grpc.ClientConnInterface) HealthzClient {
	return &healthzClient{cc}
}

func (c *healthzClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, Healthz_Healthz_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthzClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Healthz_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthzServer is the server API for Healthz service.
// All implementations must embed UnimplementedHealthzServer
// for forward compatibility
type HealthzServer interface {
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedHealthzServer()
}

// UnimplementedHealthzServer must be embedded to have forward compatible implementations.
type UnimplementedHealthzServer struct {
}

func (UnimplementedHealthzServer) Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedHealthzServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedHealthzServer) mustEmbedUnimplementedHealthzServer() {}

// UnsafeHealthzServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthzServer will
// result in compilation errors.
type UnsafeHealthzServer interface {
	mustEmbedUnimplementedHealthzServer()
}

func RegisterHealthzServer(s grpc.ServiceRegistrar, srv HealthzServer) {
	s.RegisterService(&Healthz_ServiceDesc, srv)
}

func _Healthz_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthzServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Healthz_Healthz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthzServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Healthz_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthzServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Healthz_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthzServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Healthz_ServiceDesc is the grpc.ServiceDesc for Healthz service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Healthz_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bcsproject.Healthz",
	HandlerType: (*HealthzServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthz",
			Handler:    _Healthz_Healthz_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Healthz_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bcsproject.proto",
}
