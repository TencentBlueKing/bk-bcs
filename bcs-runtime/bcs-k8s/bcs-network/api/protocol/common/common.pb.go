// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

package common

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ErrCode error code
type ErrCode int32

const (
	// 0 Sunccess
	ErrCode_ERROR_OK ErrCode = 0
	// 81000 cloud netservice, invalid parameter
	ErrCode_ERROR_CLOUD_NETSERVICE_INVALID_PARAMS ErrCode = 81000
	// 81001 cloud netservice, storage operation failed
	ErrCode_ERROR_CLOUD_NETSERVICE_STOREOPS_FAILED ErrCode = 81001
	// 81002 cloud netservice, call cloud api failed
	ErrCode_ERROR_CLOUD_NETSERVICE_CLOUDAPI_FAILED ErrCode = 81002
	// 81003 cloud netservice, assign ip failed
	ErrCode_ERROR_CLOUD_NETSERVICE_CLOUDAPI_ASSIGNIP_FAILED ErrCode = 81003
	// 81004 cloud netserivce, unassign ip failed
	ErrCode_ERROR_CLOUD_NETSERVICE_CLOUDAPI_UNASSIGNIP_FAILED ErrCode = 81004
	// 81005 cloud netservice, query eni failed
	ErrCode_ERROR_CLOUD_NETSERVICE_CLOUDAPI_QUERY_ENI_FAILED ErrCode = 81005
	// 81006 cloud netservice, eni info not match
	ErrCode_ERROR_CLOUD_NETSERVICE_CLOUDAPI_ENI_INFO_NOTMATCH ErrCode = 81006
	// 81007 cloud netservice, query subnet from store failed
	ErrCode_ERROR_CLOUD_NETSERVICE_CLOUDAPI_QUERY_SUBNET_FROM_STORE_FAILED ErrCode = 81007
	// 81008 cloud netservice, try to delete subent with active ip
	ErrCode_ERROR_CLOUD_NETSERVICE_TRY_TO_DELETE_ACTIVE_SUBNET ErrCode = 81008
	// 81009 cloud netservice, try to delete enabled subnet
	ErrCode_ERROR_CLOUD_NETSERVICE_TRY_TO_DELETE_ENABLED_SUBNET ErrCode = 81009
	// 81010 cloud netservice, subnet is disabled
	ErrCode_ERROR_CLOUD_NETSERVICE_SUBNET_IS_DISABLED ErrCode = 81010
	// 81011 cloud netservice, try to allocate active ip
	ErrCode_ERROR_CLOUD_NETSERVICE_TRY_TO_ALLOCATE_ACTIVE_IP ErrCode = 81011
	// 81012 cloud netservice, migrate ip failed
	ErrCode_ERROR_CLOUD_NETSERVICE_MIGRATE_IP_FAILED ErrCode = 81012
	// 81013 cloud netservice, allocated ip info not match request
	ErrCode_ERROR_CLOUD_NETSERVICE_ALLOCATE_IP_NOT_MATCH ErrCode = 81013
	// 81014 cloud netservice, try to clean active ip
	ErrCode_ERROR_CLOUD_NETSERVICE_TRY_TO_CLEAN_ACTIVE_IP ErrCode = 81014
	// 81015 cloud netservice, attach eni failed
	ErrCode_ERROR_CLOUD_NETSERVICE_ATTACH_ENI_FAILED ErrCode = 81015
	// 81016 cloud netservice, create eni failed
	ErrCode_ERROR_CLOUD_NETSERVICE_CREATE_ENI_FAILED ErrCode = 81016
	// 81017 cloud netservice, delete eni failed
	ErrCode_ERROR_CLOUD_NETSERVICE_DELETE_ENI_FAILED ErrCode = 81017
	// 81018 cloud netservice, detach eni failed
	ErrCode_ERROR_CLOUD_NETSERVICE_DETACH_ENI_FAILED ErrCode = 81018
	// 81019 cloud netservice, query vm info failed
	ErrCode_ERROR_CLOUD_NETSERVICE_QUERY_VMINFO_FAILED ErrCode = 81019
	// 81020 cloud netservice, list subnet from store failed
	ErrCode_ERROR_CLOUD_NETSERVICE_LIST_SUBNET_FROM_STORE_FAILED ErrCode = 81020
	// 81021 cloud netservice, list eni record from store failed
	ErrCode_ERROR_CLOUD_NETSERVICE_LIST_ENI_FROM_STORE_FAILED ErrCode = 81021
	// 81022 cloud netservice, no subnet has enough ips
	ErrCode_ERROR_CLOUD_NETSERVICE_NO_SUBNET_HAS_ENOUGH_IPS ErrCode = 81022
	// 81023 cloud netservice, clean eni with active ips
	ErrCode_ERROR_CLOUD_NETSERVICE_CLEAN_ENI_WITH_ACTIVE_IPS ErrCode = 81023
	// 81024 cloud netservice, no enough ips
	ErrCode_ERROR_CLOUD_NETSERVICE_NO_ENOUGH_IPS ErrCode = 81024
	// 81025 cloud netservice, not enough quota
	ErrCode_ERROR_CLOUD_NETSERVICE_NO_ENOUGH_QUOTA ErrCode = 81025
	// 82000 cloud netagent, find no pod
	ErrCode_ERROR_CLOUD_NETAGENT_POD_NOT_FOUND ErrCode = 82000
	// 82001 cloud netagent, get ip failed
	ErrCode_ERROR_CLOUD_NETAGENT_ALLOCATE_IP_FAILED ErrCode = 82001
	// 82002 cloud netagent, release ip failed
	ErrCode_ERROR_CLOUD_NETAGENT_RELEASE_IP_FAILED ErrCode = 82002
	// 82003 cloud netagent, k8s api server ops failed
	ErrCode_ERROR_CLOUD_NETAGENT_K8S_API_SERVER_OPS_FAILED ErrCode = 82003
	// 82004 cloud netagent, nodenetwork not available
	ErrCode_ERROR_CLOUD_NETAGENT_NODENETWORK_NOT_AVAILABLE ErrCode = 82004
	// 82005 cloud netagent, pod workload not found
	ErrCode_ERROR_CLOUD_NETAGENT_POD_WORKLOAD_NOT_FOUND ErrCode = 82005
	// 82006 cloud netagent, ip info invalid
	ErrCode_ERROR_CLOUD_NETAGENT_INVALID_IP_INFO ErrCode = 82006
	// 82007 cloud netagent, invalid parameter
	ErrCode_ERROR_CLOUD_NETAGENT_INVALID_PARAMS ErrCode = 82007
	// 82008 cloud netagent, workload not support fixed ip feature
	ErrCode_ERROR_CLOUD_NETAGENT_WORKLOAD_NOT_SUPPORT_FIXED_IP_FEATURE ErrCode = 82008
	// 82009 cloud netagent, invalid keep duration for fixed ip
	ErrCode_ERROR_CLOUD_NETAGENT_INVALID_FIXED_IP_KEEP_DURATION ErrCode = 82009
)

var ErrCode_name = map[int32]string{
	0:     "ERROR_OK",
	81000: "ERROR_CLOUD_NETSERVICE_INVALID_PARAMS",
	81001: "ERROR_CLOUD_NETSERVICE_STOREOPS_FAILED",
	81002: "ERROR_CLOUD_NETSERVICE_CLOUDAPI_FAILED",
	81003: "ERROR_CLOUD_NETSERVICE_CLOUDAPI_ASSIGNIP_FAILED",
	81004: "ERROR_CLOUD_NETSERVICE_CLOUDAPI_UNASSIGNIP_FAILED",
	81005: "ERROR_CLOUD_NETSERVICE_CLOUDAPI_QUERY_ENI_FAILED",
	81006: "ERROR_CLOUD_NETSERVICE_CLOUDAPI_ENI_INFO_NOTMATCH",
	81007: "ERROR_CLOUD_NETSERVICE_CLOUDAPI_QUERY_SUBNET_FROM_STORE_FAILED",
	81008: "ERROR_CLOUD_NETSERVICE_TRY_TO_DELETE_ACTIVE_SUBNET",
	81009: "ERROR_CLOUD_NETSERVICE_TRY_TO_DELETE_ENABLED_SUBNET",
	81010: "ERROR_CLOUD_NETSERVICE_SUBNET_IS_DISABLED",
	81011: "ERROR_CLOUD_NETSERVICE_TRY_TO_ALLOCATE_ACTIVE_IP",
	81012: "ERROR_CLOUD_NETSERVICE_MIGRATE_IP_FAILED",
	81013: "ERROR_CLOUD_NETSERVICE_ALLOCATE_IP_NOT_MATCH",
	81014: "ERROR_CLOUD_NETSERVICE_TRY_TO_CLEAN_ACTIVE_IP",
	81015: "ERROR_CLOUD_NETSERVICE_ATTACH_ENI_FAILED",
	81016: "ERROR_CLOUD_NETSERVICE_CREATE_ENI_FAILED",
	81017: "ERROR_CLOUD_NETSERVICE_DELETE_ENI_FAILED",
	81018: "ERROR_CLOUD_NETSERVICE_DETACH_ENI_FAILED",
	81019: "ERROR_CLOUD_NETSERVICE_QUERY_VMINFO_FAILED",
	81020: "ERROR_CLOUD_NETSERVICE_LIST_SUBNET_FROM_STORE_FAILED",
	81021: "ERROR_CLOUD_NETSERVICE_LIST_ENI_FROM_STORE_FAILED",
	81022: "ERROR_CLOUD_NETSERVICE_NO_SUBNET_HAS_ENOUGH_IPS",
	81023: "ERROR_CLOUD_NETSERVICE_CLEAN_ENI_WITH_ACTIVE_IPS",
	81024: "ERROR_CLOUD_NETSERVICE_NO_ENOUGH_IPS",
	81025: "ERROR_CLOUD_NETSERVICE_NO_ENOUGH_QUOTA",
	82000: "ERROR_CLOUD_NETAGENT_POD_NOT_FOUND",
	82001: "ERROR_CLOUD_NETAGENT_ALLOCATE_IP_FAILED",
	82002: "ERROR_CLOUD_NETAGENT_RELEASE_IP_FAILED",
	82003: "ERROR_CLOUD_NETAGENT_K8S_API_SERVER_OPS_FAILED",
	82004: "ERROR_CLOUD_NETAGENT_NODENETWORK_NOT_AVAILABLE",
	82005: "ERROR_CLOUD_NETAGENT_POD_WORKLOAD_NOT_FOUND",
	82006: "ERROR_CLOUD_NETAGENT_INVALID_IP_INFO",
	82007: "ERROR_CLOUD_NETAGENT_INVALID_PARAMS",
	82008: "ERROR_CLOUD_NETAGENT_WORKLOAD_NOT_SUPPORT_FIXED_IP_FEATURE",
	82009: "ERROR_CLOUD_NETAGENT_INVALID_FIXED_IP_KEEP_DURATION",
}

var ErrCode_value = map[string]int32{
	"ERROR_OK":                                                       0,
	"ERROR_CLOUD_NETSERVICE_INVALID_PARAMS":                          81000,
	"ERROR_CLOUD_NETSERVICE_STOREOPS_FAILED":                         81001,
	"ERROR_CLOUD_NETSERVICE_CLOUDAPI_FAILED":                         81002,
	"ERROR_CLOUD_NETSERVICE_CLOUDAPI_ASSIGNIP_FAILED":                81003,
	"ERROR_CLOUD_NETSERVICE_CLOUDAPI_UNASSIGNIP_FAILED":              81004,
	"ERROR_CLOUD_NETSERVICE_CLOUDAPI_QUERY_ENI_FAILED":               81005,
	"ERROR_CLOUD_NETSERVICE_CLOUDAPI_ENI_INFO_NOTMATCH":              81006,
	"ERROR_CLOUD_NETSERVICE_CLOUDAPI_QUERY_SUBNET_FROM_STORE_FAILED": 81007,
	"ERROR_CLOUD_NETSERVICE_TRY_TO_DELETE_ACTIVE_SUBNET":             81008,
	"ERROR_CLOUD_NETSERVICE_TRY_TO_DELETE_ENABLED_SUBNET":            81009,
	"ERROR_CLOUD_NETSERVICE_SUBNET_IS_DISABLED":                      81010,
	"ERROR_CLOUD_NETSERVICE_TRY_TO_ALLOCATE_ACTIVE_IP":               81011,
	"ERROR_CLOUD_NETSERVICE_MIGRATE_IP_FAILED":                       81012,
	"ERROR_CLOUD_NETSERVICE_ALLOCATE_IP_NOT_MATCH":                   81013,
	"ERROR_CLOUD_NETSERVICE_TRY_TO_CLEAN_ACTIVE_IP":                  81014,
	"ERROR_CLOUD_NETSERVICE_ATTACH_ENI_FAILED":                       81015,
	"ERROR_CLOUD_NETSERVICE_CREATE_ENI_FAILED":                       81016,
	"ERROR_CLOUD_NETSERVICE_DELETE_ENI_FAILED":                       81017,
	"ERROR_CLOUD_NETSERVICE_DETACH_ENI_FAILED":                       81018,
	"ERROR_CLOUD_NETSERVICE_QUERY_VMINFO_FAILED":                     81019,
	"ERROR_CLOUD_NETSERVICE_LIST_SUBNET_FROM_STORE_FAILED":           81020,
	"ERROR_CLOUD_NETSERVICE_LIST_ENI_FROM_STORE_FAILED":              81021,
	"ERROR_CLOUD_NETSERVICE_NO_SUBNET_HAS_ENOUGH_IPS":                81022,
	"ERROR_CLOUD_NETSERVICE_CLEAN_ENI_WITH_ACTIVE_IPS":               81023,
	"ERROR_CLOUD_NETSERVICE_NO_ENOUGH_IPS":                           81024,
	"ERROR_CLOUD_NETSERVICE_NO_ENOUGH_QUOTA":                         81025,
	"ERROR_CLOUD_NETAGENT_POD_NOT_FOUND":                             82000,
	"ERROR_CLOUD_NETAGENT_ALLOCATE_IP_FAILED":                        82001,
	"ERROR_CLOUD_NETAGENT_RELEASE_IP_FAILED":                         82002,
	"ERROR_CLOUD_NETAGENT_K8S_API_SERVER_OPS_FAILED":                 82003,
	"ERROR_CLOUD_NETAGENT_NODENETWORK_NOT_AVAILABLE":                 82004,
	"ERROR_CLOUD_NETAGENT_POD_WORKLOAD_NOT_FOUND":                    82005,
	"ERROR_CLOUD_NETAGENT_INVALID_IP_INFO":                           82006,
	"ERROR_CLOUD_NETAGENT_INVALID_PARAMS":                            82007,
	"ERROR_CLOUD_NETAGENT_WORKLOAD_NOT_SUPPORT_FIXED_IP_FEATURE":     82008,
	"ERROR_CLOUD_NETAGENT_INVALID_FIXED_IP_KEEP_DURATION":            82009,
}

func (x ErrCode) String() string {
	return proto.EnumName(ErrCode_name, int32(x))
}

func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

type CloudSubnet struct {
	VpcID                string   `protobuf:"bytes,1,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	Region               string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Zone                 string   `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	SubnetID             string   `protobuf:"bytes,4,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
	SubnetCidr           string   `protobuf:"bytes,5,opt,name=subnetCidr,proto3" json:"subnetCidr,omitempty"`
	AvailableIPNum       uint64   `protobuf:"varint,6,opt,name=availableIPNum,proto3" json:"availableIPNum,omitempty"`
	State                int32    `protobuf:"varint,7,opt,name=state,proto3" json:"state,omitempty"`
	CreateTime           string   `protobuf:"bytes,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime           string   `protobuf:"bytes,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	MinIPNumPerEni       int32    `protobuf:"varint,10,opt,name=minIPNumPerEni,proto3" json:"minIPNumPerEni,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloudSubnet) Reset()         { *m = CloudSubnet{} }
func (m *CloudSubnet) String() string { return proto.CompactTextString(m) }
func (*CloudSubnet) ProtoMessage()    {}
func (*CloudSubnet) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

func (m *CloudSubnet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudSubnet.Unmarshal(m, b)
}
func (m *CloudSubnet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudSubnet.Marshal(b, m, deterministic)
}
func (m *CloudSubnet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudSubnet.Merge(m, src)
}
func (m *CloudSubnet) XXX_Size() int {
	return xxx_messageInfo_CloudSubnet.Size(m)
}
func (m *CloudSubnet) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudSubnet.DiscardUnknown(m)
}

var xxx_messageInfo_CloudSubnet proto.InternalMessageInfo

func (m *CloudSubnet) GetVpcID() string {
	if m != nil {
		return m.VpcID
	}
	return ""
}

func (m *CloudSubnet) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *CloudSubnet) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *CloudSubnet) GetSubnetID() string {
	if m != nil {
		return m.SubnetID
	}
	return ""
}

func (m *CloudSubnet) GetSubnetCidr() string {
	if m != nil {
		return m.SubnetCidr
	}
	return ""
}

func (m *CloudSubnet) GetAvailableIPNum() uint64 {
	if m != nil {
		return m.AvailableIPNum
	}
	return 0
}

func (m *CloudSubnet) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CloudSubnet) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *CloudSubnet) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

func (m *CloudSubnet) GetMinIPNumPerEni() int32 {
	if m != nil {
		return m.MinIPNumPerEni
	}
	return 0
}

type NetworkInterfaceIPAddress struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	DnsName              string   `protobuf:"bytes,2,opt,name=dnsName,proto3" json:"dnsName,omitempty"`
	IsPrimary            bool     `protobuf:"varint,3,opt,name=isPrimary,proto3" json:"isPrimary,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkInterfaceIPAddress) Reset()         { *m = NetworkInterfaceIPAddress{} }
func (m *NetworkInterfaceIPAddress) String() string { return proto.CompactTextString(m) }
func (*NetworkInterfaceIPAddress) ProtoMessage()    {}
func (*NetworkInterfaceIPAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}

func (m *NetworkInterfaceIPAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkInterfaceIPAddress.Unmarshal(m, b)
}
func (m *NetworkInterfaceIPAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkInterfaceIPAddress.Marshal(b, m, deterministic)
}
func (m *NetworkInterfaceIPAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInterfaceIPAddress.Merge(m, src)
}
func (m *NetworkInterfaceIPAddress) XXX_Size() int {
	return xxx_messageInfo_NetworkInterfaceIPAddress.Size(m)
}
func (m *NetworkInterfaceIPAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInterfaceIPAddress.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInterfaceIPAddress proto.InternalMessageInfo

func (m *NetworkInterfaceIPAddress) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *NetworkInterfaceIPAddress) GetDnsName() string {
	if m != nil {
		return m.DnsName
	}
	return ""
}

func (m *NetworkInterfaceIPAddress) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

type NetworkInterfaceAttachment struct {
	Index                int32    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	AttachmentID         string   `protobuf:"bytes,2,opt,name=attachmentID,proto3" json:"attachmentID,omitempty"`
	EniID                string   `protobuf:"bytes,3,opt,name=eniID,proto3" json:"eniID,omitempty"`
	InstanceID           string   `protobuf:"bytes,4,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkInterfaceAttachment) Reset()         { *m = NetworkInterfaceAttachment{} }
func (m *NetworkInterfaceAttachment) String() string { return proto.CompactTextString(m) }
func (*NetworkInterfaceAttachment) ProtoMessage()    {}
func (*NetworkInterfaceAttachment) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}

func (m *NetworkInterfaceAttachment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkInterfaceAttachment.Unmarshal(m, b)
}
func (m *NetworkInterfaceAttachment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkInterfaceAttachment.Marshal(b, m, deterministic)
}
func (m *NetworkInterfaceAttachment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInterfaceAttachment.Merge(m, src)
}
func (m *NetworkInterfaceAttachment) XXX_Size() int {
	return xxx_messageInfo_NetworkInterfaceAttachment.Size(m)
}
func (m *NetworkInterfaceAttachment) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInterfaceAttachment.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInterfaceAttachment proto.InternalMessageInfo

func (m *NetworkInterfaceAttachment) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *NetworkInterfaceAttachment) GetAttachmentID() string {
	if m != nil {
		return m.AttachmentID
	}
	return ""
}

func (m *NetworkInterfaceAttachment) GetEniID() string {
	if m != nil {
		return m.EniID
	}
	return ""
}

func (m *NetworkInterfaceAttachment) GetInstanceID() string {
	if m != nil {
		return m.InstanceID
	}
	return ""
}

type ElasticNetworkInterfaceObject struct {
	EniName              string   `protobuf:"bytes,1,opt,name=eniName,proto3" json:"eniName,omitempty"`
	InstanceID           string   `protobuf:"bytes,2,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	Region               string   `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Zone                 string   `protobuf:"bytes,4,opt,name=zone,proto3" json:"zone,omitempty"`
	EniSubnetID          string   `protobuf:"bytes,5,opt,name=eniSubnetID,proto3" json:"eniSubnetID,omitempty"`
	EniSubnetCidr        string   `protobuf:"bytes,6,opt,name=eniSubnetCidr,proto3" json:"eniSubnetCidr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ElasticNetworkInterfaceObject) Reset()         { *m = ElasticNetworkInterfaceObject{} }
func (m *ElasticNetworkInterfaceObject) String() string { return proto.CompactTextString(m) }
func (*ElasticNetworkInterfaceObject) ProtoMessage()    {}
func (*ElasticNetworkInterfaceObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{3}
}

func (m *ElasticNetworkInterfaceObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ElasticNetworkInterfaceObject.Unmarshal(m, b)
}
func (m *ElasticNetworkInterfaceObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ElasticNetworkInterfaceObject.Marshal(b, m, deterministic)
}
func (m *ElasticNetworkInterfaceObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElasticNetworkInterfaceObject.Merge(m, src)
}
func (m *ElasticNetworkInterfaceObject) XXX_Size() int {
	return xxx_messageInfo_ElasticNetworkInterfaceObject.Size(m)
}
func (m *ElasticNetworkInterfaceObject) XXX_DiscardUnknown() {
	xxx_messageInfo_ElasticNetworkInterfaceObject.DiscardUnknown(m)
}

var xxx_messageInfo_ElasticNetworkInterfaceObject proto.InternalMessageInfo

func (m *ElasticNetworkInterfaceObject) GetEniName() string {
	if m != nil {
		return m.EniName
	}
	return ""
}

func (m *ElasticNetworkInterfaceObject) GetInstanceID() string {
	if m != nil {
		return m.InstanceID
	}
	return ""
}

func (m *ElasticNetworkInterfaceObject) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *ElasticNetworkInterfaceObject) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *ElasticNetworkInterfaceObject) GetEniSubnetID() string {
	if m != nil {
		return m.EniSubnetID
	}
	return ""
}

func (m *ElasticNetworkInterfaceObject) GetEniSubnetCidr() string {
	if m != nil {
		return m.EniSubnetCidr
	}
	return ""
}

type VMInfoObject struct {
	Zone                 string   `protobuf:"bytes,1,opt,name=zone,proto3" json:"zone,omitempty"`
	Region               string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	VpcID                string   `protobuf:"bytes,3,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	SubnetID             string   `protobuf:"bytes,4,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
	InstanceID           string   `protobuf:"bytes,5,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	InstanceIP           string   `protobuf:"bytes,6,opt,name=instanceIP,proto3" json:"instanceIP,omitempty"`
	CoreNum              uint64   `protobuf:"varint,7,opt,name=coreNum,proto3" json:"coreNum,omitempty"`
	MemNum               uint64   `protobuf:"varint,8,opt,name=memNum,proto3" json:"memNum,omitempty"`
	MaxEniNum            uint64   `protobuf:"varint,9,opt,name=maxEniNum,proto3" json:"maxEniNum,omitempty"`
	MaxIPEachEni         uint64   `protobuf:"varint,10,opt,name=maxIPEachEni,proto3" json:"maxIPEachEni,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VMInfoObject) Reset()         { *m = VMInfoObject{} }
func (m *VMInfoObject) String() string { return proto.CompactTextString(m) }
func (*VMInfoObject) ProtoMessage()    {}
func (*VMInfoObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{4}
}

func (m *VMInfoObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMInfoObject.Unmarshal(m, b)
}
func (m *VMInfoObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMInfoObject.Marshal(b, m, deterministic)
}
func (m *VMInfoObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMInfoObject.Merge(m, src)
}
func (m *VMInfoObject) XXX_Size() int {
	return xxx_messageInfo_VMInfoObject.Size(m)
}
func (m *VMInfoObject) XXX_DiscardUnknown() {
	xxx_messageInfo_VMInfoObject.DiscardUnknown(m)
}

var xxx_messageInfo_VMInfoObject proto.InternalMessageInfo

func (m *VMInfoObject) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *VMInfoObject) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *VMInfoObject) GetVpcID() string {
	if m != nil {
		return m.VpcID
	}
	return ""
}

func (m *VMInfoObject) GetSubnetID() string {
	if m != nil {
		return m.SubnetID
	}
	return ""
}

func (m *VMInfoObject) GetInstanceID() string {
	if m != nil {
		return m.InstanceID
	}
	return ""
}

func (m *VMInfoObject) GetInstanceIP() string {
	if m != nil {
		return m.InstanceIP
	}
	return ""
}

func (m *VMInfoObject) GetCoreNum() uint64 {
	if m != nil {
		return m.CoreNum
	}
	return 0
}

func (m *VMInfoObject) GetMemNum() uint64 {
	if m != nil {
		return m.MemNum
	}
	return 0
}

func (m *VMInfoObject) GetMaxEniNum() uint64 {
	if m != nil {
		return m.MaxEniNum
	}
	return 0
}

func (m *VMInfoObject) GetMaxIPEachEni() uint64 {
	if m != nil {
		return m.MaxIPEachEni
	}
	return 0
}

type IPObject struct {
	VpcID                string   `protobuf:"bytes,1,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	Region               string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	SubnetID             string   `protobuf:"bytes,3,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
	SubnetCidr           string   `protobuf:"bytes,4,opt,name=subnetCidr,proto3" json:"subnetCidr,omitempty"`
	Address              string   `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Cluster              string   `protobuf:"bytes,6,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Namespace            string   `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PodName              string   `protobuf:"bytes,8,opt,name=podName,proto3" json:"podName,omitempty"`
	WorkloadName         string   `protobuf:"bytes,9,opt,name=workloadName,proto3" json:"workloadName,omitempty"`
	WorkloadKind         string   `protobuf:"bytes,10,opt,name=workloadKind,proto3" json:"workloadKind,omitempty"`
	Host                 string   `protobuf:"bytes,11,opt,name=host,proto3" json:"host,omitempty"`
	ContainerID          string   `protobuf:"bytes,12,opt,name=containerID,proto3" json:"containerID,omitempty"`
	EniID                string   `protobuf:"bytes,13,opt,name=eniID,proto3" json:"eniID,omitempty"`
	CreateTime           string   `protobuf:"bytes,14,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime           string   `protobuf:"bytes,15,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	IsFixed              bool     `protobuf:"varint,16,opt,name=isFixed,proto3" json:"isFixed,omitempty"`
	Status               string   `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPObject) Reset()         { *m = IPObject{} }
func (m *IPObject) String() string { return proto.CompactTextString(m) }
func (*IPObject) ProtoMessage()    {}
func (*IPObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{5}
}

func (m *IPObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPObject.Unmarshal(m, b)
}
func (m *IPObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPObject.Marshal(b, m, deterministic)
}
func (m *IPObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPObject.Merge(m, src)
}
func (m *IPObject) XXX_Size() int {
	return xxx_messageInfo_IPObject.Size(m)
}
func (m *IPObject) XXX_DiscardUnknown() {
	xxx_messageInfo_IPObject.DiscardUnknown(m)
}

var xxx_messageInfo_IPObject proto.InternalMessageInfo

func (m *IPObject) GetVpcID() string {
	if m != nil {
		return m.VpcID
	}
	return ""
}

func (m *IPObject) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *IPObject) GetSubnetID() string {
	if m != nil {
		return m.SubnetID
	}
	return ""
}

func (m *IPObject) GetSubnetCidr() string {
	if m != nil {
		return m.SubnetCidr
	}
	return ""
}

func (m *IPObject) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *IPObject) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *IPObject) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *IPObject) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *IPObject) GetWorkloadName() string {
	if m != nil {
		return m.WorkloadName
	}
	return ""
}

func (m *IPObject) GetWorkloadKind() string {
	if m != nil {
		return m.WorkloadKind
	}
	return ""
}

func (m *IPObject) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *IPObject) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *IPObject) GetEniID() string {
	if m != nil {
		return m.EniID
	}
	return ""
}

func (m *IPObject) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *IPObject) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

func (m *IPObject) GetIsFixed() bool {
	if m != nil {
		return m.IsFixed
	}
	return false
}

func (m *IPObject) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type IPClaim struct {
	VpcID                string   `protobuf:"bytes,1,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	Region               string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	SubnetID             string   `protobuf:"bytes,3,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
	Address              string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Cluster              string   `protobuf:"bytes,5,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Namespace            string   `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PodName              string   `protobuf:"bytes,7,opt,name=podName,proto3" json:"podName,omitempty"`
	WorkloadName         string   `protobuf:"bytes,8,opt,name=workloadName,proto3" json:"workloadName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPClaim) Reset()         { *m = IPClaim{} }
func (m *IPClaim) String() string { return proto.CompactTextString(m) }
func (*IPClaim) ProtoMessage()    {}
func (*IPClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{6}
}

func (m *IPClaim) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPClaim.Unmarshal(m, b)
}
func (m *IPClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPClaim.Marshal(b, m, deterministic)
}
func (m *IPClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPClaim.Merge(m, src)
}
func (m *IPClaim) XXX_Size() int {
	return xxx_messageInfo_IPClaim.Size(m)
}
func (m *IPClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_IPClaim.DiscardUnknown(m)
}

var xxx_messageInfo_IPClaim proto.InternalMessageInfo

func (m *IPClaim) GetVpcID() string {
	if m != nil {
		return m.VpcID
	}
	return ""
}

func (m *IPClaim) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *IPClaim) GetSubnetID() string {
	if m != nil {
		return m.SubnetID
	}
	return ""
}

func (m *IPClaim) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *IPClaim) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *IPClaim) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *IPClaim) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *IPClaim) GetWorkloadName() string {
	if m != nil {
		return m.WorkloadName
	}
	return ""
}

type IPQuota struct {
	Cluster              string   `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Limit                uint32   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPQuota) Reset()         { *m = IPQuota{} }
func (m *IPQuota) String() string { return proto.CompactTextString(m) }
func (*IPQuota) ProtoMessage()    {}
func (*IPQuota) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{7}
}

func (m *IPQuota) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPQuota.Unmarshal(m, b)
}
func (m *IPQuota) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPQuota.Marshal(b, m, deterministic)
}
func (m *IPQuota) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPQuota.Merge(m, src)
}
func (m *IPQuota) XXX_Size() int {
	return xxx_messageInfo_IPQuota.Size(m)
}
func (m *IPQuota) XXX_DiscardUnknown() {
	xxx_messageInfo_IPQuota.DiscardUnknown(m)
}

var xxx_messageInfo_IPQuota proto.InternalMessageInfo

func (m *IPQuota) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *IPQuota) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func init() {
	proto.RegisterEnum("common.ErrCode", ErrCode_name, ErrCode_value)
	proto.RegisterType((*CloudSubnet)(nil), "common.CloudSubnet")
	proto.RegisterType((*NetworkInterfaceIPAddress)(nil), "common.NetworkInterfaceIPAddress")
	proto.RegisterType((*NetworkInterfaceAttachment)(nil), "common.NetworkInterfaceAttachment")
	proto.RegisterType((*ElasticNetworkInterfaceObject)(nil), "common.ElasticNetworkInterfaceObject")
	proto.RegisterType((*VMInfoObject)(nil), "common.VMInfoObject")
	proto.RegisterType((*IPObject)(nil), "common.IPObject")
	proto.RegisterType((*IPClaim)(nil), "common.IPClaim")
	proto.RegisterType((*IPQuota)(nil), "common.IPQuota")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 1354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x5b, 0x8f, 0xdb, 0x44,
	0x14, 0x26, 0xbb, 0xf6, 0x26, 0x3b, 0xdd, 0x2e, 0x66, 0x54, 0x21, 0x53, 0x01, 0x5a, 0x85, 0x52,
	0xb6, 0xf7, 0x2b, 0xd0, 0xf6, 0x01, 0xe1, 0xc6, 0x93, 0xdd, 0xd1, 0x66, 0x6d, 0xd7, 0x76, 0xb6,
	0xf4, 0xc9, 0xf2, 0x26, 0x53, 0x6a, 0x88, 0xed, 0xc8, 0x71, 0xca, 0xc2, 0x53, 0x78, 0xe7, 0x47,
	0xf0, 0x17, 0xf8, 0x21, 0x48, 0xdc, 0x2f, 0xcf, 0x48, 0xa8, 0xdc, 0xef, 0xe0, 0x72, 0xd7, 0xcc,
	0xd8, 0x89, 0x93, 0x4d, 0x9c, 0x45, 0xe2, 0xcd, 0xe7, 0x9b, 0xef, 0xcc, 0x39, 0x73, 0xce, 0x77,
	0x4e, 0x14, 0xb0, 0xd2, 0x0a, 0x7d, 0x3f, 0x0c, 0xce, 0x76, 0xa3, 0x30, 0x0e, 0xe1, 0x12, 0xb7,
	0xaa, 0x6f, 0x2d, 0x80, 0x43, 0xb5, 0x4e, 0xd8, 0x6f, 0x5b, 0xfd, 0xdd, 0x80, 0xc4, 0xf0, 0x08,
	0x10, 0xef, 0x76, 0x5b, 0x58, 0x95, 0x4b, 0x6b, 0xa5, 0xf5, 0x65, 0x93, 0x1b, 0xf0, 0x61, 0xb0,
	0x14, 0x91, 0x17, 0xbd, 0x30, 0x90, 0x17, 0x18, 0x9c, 0x5a, 0x10, 0x02, 0xe1, 0xb5, 0x30, 0x20,
	0xf2, 0x22, 0x43, 0xd9, 0x37, 0x3c, 0x0a, 0x2a, 0x3d, 0x76, 0x17, 0x56, 0x65, 0x81, 0xe1, 0x43,
	0x1b, 0x3e, 0x0e, 0x00, 0xff, 0xae, 0x79, 0xed, 0x48, 0x16, 0xd9, 0x69, 0x0e, 0x81, 0xc7, 0xc1,
	0xaa, 0x7b, 0xd7, 0xf5, 0x3a, 0xee, 0x6e, 0x87, 0x60, 0x43, 0xeb, 0xfb, 0xf2, 0xd2, 0x5a, 0x69,
	0x5d, 0x30, 0x27, 0x50, 0x9a, 0x65, 0x2f, 0x76, 0x63, 0x22, 0x97, 0xd7, 0x4a, 0xeb, 0xa2, 0xc9,
	0x0d, 0x7a, 0x7b, 0x2b, 0x22, 0x6e, 0x4c, 0x6c, 0xcf, 0x27, 0x72, 0x85, 0xdf, 0x3e, 0x42, 0xe8,
	0x79, 0xbf, 0xdb, 0xce, 0xce, 0x97, 0xf9, 0xf9, 0x08, 0xa1, 0xd1, 0x7d, 0x2f, 0x60, 0x11, 0x0c,
	0x12, 0xa1, 0xc0, 0x93, 0x01, 0xbb, 0x7e, 0x02, 0xad, 0xb6, 0xc0, 0x23, 0x1a, 0x89, 0x5f, 0x09,
	0xa3, 0x97, 0x71, 0x10, 0x93, 0xe8, 0xb6, 0xdb, 0x22, 0xd8, 0x50, 0xda, 0xed, 0x88, 0xf4, 0x7a,
	0x70, 0x15, 0x2c, 0x78, 0xdd, 0xb4, 0x7a, 0x0b, 0x5e, 0x17, 0xca, 0xa0, 0xdc, 0x0e, 0x7a, 0x9a,
	0xeb, 0x93, 0xb4, 0x76, 0x99, 0x09, 0x1f, 0x05, 0xcb, 0x5e, 0xcf, 0x88, 0x3c, 0xdf, 0x8d, 0x5e,
	0x65, 0x15, 0xac, 0x98, 0x23, 0xa0, 0xfa, 0x46, 0x09, 0x1c, 0x9d, 0x8c, 0xa2, 0xc4, 0xb1, 0xdb,
	0xba, 0xe3, 0x93, 0x80, 0xf5, 0xc9, 0x0b, 0xda, 0x64, 0x8f, 0x45, 0x12, 0x4d, 0x6e, 0xc0, 0x2a,
	0x58, 0x71, 0x87, 0x1c, 0xac, 0xa6, 0x11, 0xc7, 0x30, 0xea, 0x49, 0x02, 0x0f, 0xab, 0x69, 0xd3,
	0xb8, 0x41, 0x6b, 0xe3, 0x05, 0xbd, 0xd8, 0x0d, 0x5a, 0x64, 0xd8, 0xb7, 0x1c, 0x52, 0x7d, 0xbb,
	0x04, 0x1e, 0x43, 0x1d, 0xb7, 0x17, 0x7b, 0xad, 0xc9, 0xac, 0xf4, 0xdd, 0x97, 0x48, 0x2b, 0xa6,
	0x0f, 0x25, 0x81, 0xc7, 0x1e, 0xca, 0x5f, 0x9f, 0x99, 0x13, 0x77, 0x2f, 0x4c, 0xde, 0x9d, 0x53,
	0xd7, 0xe2, 0x54, 0x75, 0x09, 0x39, 0x75, 0xad, 0x81, 0x43, 0x24, 0xf0, 0xac, 0x4c, 0x60, 0x5c,
	0x42, 0x79, 0x08, 0x1e, 0x03, 0x87, 0x87, 0x26, 0x93, 0xd9, 0x12, 0xe3, 0x8c, 0x83, 0xd5, 0x37,
	0x17, 0xc0, 0xca, 0xce, 0x36, 0x0e, 0x6e, 0x87, 0x69, 0xfa, 0x59, 0xb0, 0x52, 0x2e, 0xd8, 0x2c,
	0xd9, 0x0f, 0x87, 0x64, 0x31, 0x3f, 0x24, 0x73, 0x84, 0x9f, 0x2b, 0x81, 0xb8, 0xaf, 0x04, 0xf9,
	0x73, 0x23, 0xcd, 0x38, 0x87, 0xd0, 0xe2, 0xb6, 0xc2, 0x88, 0xd0, 0x89, 0x28, 0xb3, 0x89, 0xc8,
	0x4c, 0x9a, 0xa3, 0x4f, 0x7c, 0x7a, 0x50, 0x61, 0x07, 0xa9, 0x45, 0xd5, 0xe5, 0xbb, 0x7b, 0x28,
	0xf0, 0xe8, 0xd1, 0x32, 0x3b, 0x1a, 0x01, 0x54, 0x28, 0xbe, 0xbb, 0x87, 0x0d, 0xe4, 0xb6, 0xee,
	0x64, 0x42, 0x17, 0xcc, 0x31, 0xac, 0xfa, 0xf9, 0x22, 0xa8, 0x60, 0x23, 0x2d, 0xcf, 0x7f, 0xdb,
	0x0b, 0xf9, 0x52, 0x2c, 0x16, 0xee, 0x00, 0x61, 0xdf, 0x0e, 0x90, 0x41, 0xd9, 0xe5, 0xb3, 0x94,
	0xd6, 0x29, 0x33, 0x59, 0x11, 0x3a, 0xfd, 0x5e, 0x4c, 0xb2, 0x9e, 0x66, 0x26, 0x7d, 0x6c, 0xe0,
	0xfa, 0xa4, 0xd7, 0x75, 0x5b, 0x7c, 0x27, 0x2c, 0x9b, 0x23, 0x80, 0xfa, 0x75, 0xc3, 0x36, 0x53,
	0x26, 0x5f, 0x0a, 0x99, 0x49, 0xcb, 0x40, 0xa5, 0xdc, 0x09, 0x5d, 0x7e, 0xcc, 0x77, 0xc2, 0x18,
	0x96, 0xe7, 0x6c, 0x79, 0x41, 0x9b, 0x95, 0x2a, 0xc7, 0xa1, 0x18, 0x15, 0xcf, 0x9d, 0xb0, 0x17,
	0xcb, 0x87, 0xb8, 0x78, 0xe8, 0x37, 0x55, 0x6a, 0x2b, 0x0c, 0x62, 0xd7, 0x0b, 0x48, 0x84, 0x55,
	0x79, 0x85, 0x2b, 0x35, 0x07, 0x8d, 0x26, 0xf1, 0xf0, 0xc4, 0x24, 0xe6, 0xb6, 0xd8, 0xea, 0x9c,
	0x2d, 0xf6, 0xe0, 0xbe, 0x2d, 0x26, 0x83, 0xb2, 0xd7, 0xab, 0x7b, 0x7b, 0xa4, 0x2d, 0x4b, 0x6c,
	0xa9, 0x64, 0x26, 0xed, 0x16, 0x5d, 0x94, 0xfd, 0x9e, 0xfc, 0x10, 0xef, 0x16, 0xb7, 0xaa, 0x9f,
	0x95, 0x40, 0x19, 0x1b, 0xb5, 0x8e, 0xeb, 0xf9, 0xff, 0x63, 0x9f, 0x73, 0x7d, 0x14, 0x66, 0xf6,
	0x51, 0x2c, 0xe8, 0xe3, 0x52, 0x41, 0x1f, 0xcb, 0xc5, 0x7d, 0xac, 0xec, 0xef, 0x63, 0xf5, 0x2a,
	0x7d, 0xe4, 0x8d, 0x7e, 0x18, 0xbb, 0xf9, 0x04, 0x4a, 0xe3, 0x09, 0x1c, 0x01, 0x62, 0xc7, 0xf3,
	0xbd, 0x98, 0xbd, 0xf3, 0xb0, 0xc9, 0x8d, 0x93, 0xf7, 0x56, 0x41, 0x19, 0x45, 0x51, 0x2d, 0x6c,
	0x13, 0xb8, 0x02, 0x2a, 0xc8, 0x34, 0x75, 0xd3, 0xd1, 0xb7, 0xa4, 0x07, 0xe0, 0x29, 0xf0, 0x24,
	0xb7, 0x6a, 0x0d, 0xbd, 0xa9, 0x3a, 0x1a, 0xb2, 0x2d, 0x64, 0xee, 0xe0, 0x1a, 0x72, 0xb0, 0xb6,
	0xa3, 0x34, 0xb0, 0xea, 0x18, 0x8a, 0xa9, 0x6c, 0x5b, 0xd2, 0xbd, 0x44, 0x80, 0xa7, 0xc1, 0xf1,
	0x19, 0x64, 0xcb, 0xd6, 0x4d, 0xa4, 0x1b, 0x96, 0x53, 0x57, 0x70, 0x03, 0xa9, 0xd2, 0x17, 0x85,
	0x6c, 0x06, 0x28, 0x06, 0xce, 0xd8, 0x5f, 0x26, 0x02, 0x7c, 0x1a, 0x9c, 0x9b, 0xc7, 0x56, 0x2c,
	0x0b, 0x6f, 0x68, 0xd8, 0xc8, 0xdc, 0xbe, 0x4a, 0x04, 0xf8, 0x2c, 0xb8, 0x30, 0xcf, 0xad, 0xa9,
	0x4d, 0x3a, 0x7e, 0x9d, 0x08, 0xf0, 0x19, 0x70, 0x7e, 0x9e, 0xe3, 0x8d, 0x26, 0x32, 0x6f, 0x39,
	0x48, 0x1b, 0xe6, 0xf9, 0xcd, 0xc1, 0x02, 0x52, 0x0f, 0xac, 0xd5, 0x75, 0x47, 0xd3, 0xed, 0x6d,
	0xc5, 0xae, 0x6d, 0x4a, 0xdf, 0x26, 0x02, 0x54, 0xc1, 0x73, 0x07, 0x0b, 0x68, 0x35, 0xaf, 0x6b,
	0xc8, 0x76, 0xea, 0xa6, 0xbe, 0xcd, 0xeb, 0x9a, 0x85, 0xff, 0x2e, 0x11, 0xe0, 0x15, 0x70, 0x71,
	0xc6, 0x2d, 0xb6, 0x79, 0xcb, 0xb1, 0x75, 0x47, 0x45, 0x0d, 0x64, 0x23, 0x47, 0xa9, 0xd9, 0x78,
	0x07, 0xa5, 0x77, 0x49, 0xdf, 0x27, 0x02, 0xbc, 0x0a, 0x2e, 0x1d, 0xc8, 0x13, 0x69, 0xca, 0xf5,
	0x06, 0x52, 0x33, 0xd7, 0x1f, 0x12, 0x01, 0x9e, 0x03, 0x27, 0x66, 0xf5, 0x9d, 0xe7, 0x8a, 0x2d,
	0x47, 0xc5, 0x16, 0xf3, 0x93, 0x7e, 0x2c, 0x2c, 0x6e, 0x1a, 0x4b, 0x69, 0x34, 0xf4, 0x9a, 0x32,
	0xca, 0x13, 0x1b, 0xd2, 0x4f, 0x89, 0x00, 0xcf, 0x82, 0xf5, 0x19, 0x7e, 0xdb, 0x78, 0xc3, 0xa4,
	0xfc, 0x51, 0x13, 0x7f, 0x4e, 0x04, 0x78, 0x11, 0x9c, 0x9e, 0xc1, 0x1f, 0x06, 0xc0, 0x06, 0x6d,
	0x83, 0xc3, 0xfb, 0xf0, 0x4b, 0x22, 0xc0, 0x4b, 0xe0, 0x4c, 0x71, 0x6e, 0xb5, 0x06, 0x52, 0xb4,
	0x5c, 0x62, 0xbf, 0x16, 0x26, 0xa6, 0xd8, 0xb6, 0x52, 0xdb, 0xcc, 0xab, 0xe4, 0xb7, 0x42, 0x7e,
	0xcd, 0x44, 0x0a, 0xab, 0xf2, 0x90, 0x9f, 0x14, 0xf2, 0x87, 0x5d, 0x19, 0xf2, 0xef, 0xcf, 0xe1,
	0x4f, 0xe6, 0xf3, 0x7b, 0x22, 0xc0, 0xf3, 0xe0, 0xe4, 0x0c, 0x3e, 0xd7, 0xdc, 0xce, 0x36, 0x13,
	0x6c, 0xea, 0xf1, 0x47, 0x22, 0xc0, 0x6b, 0xe0, 0xf2, 0x0c, 0x8f, 0x06, 0xb6, 0xec, 0xd9, 0x22,
	0xfd, 0xb3, 0x70, 0x46, 0x98, 0x2f, 0xcb, 0x6d, 0x9f, 0xe3, 0x5f, 0x85, 0x4b, 0x40, 0xd3, 0xb3,
	0x90, 0x9b, 0x8a, 0xe5, 0x20, 0x4d, 0x6f, 0x6e, 0x6c, 0x3a, 0xd8, 0xb0, 0xa4, 0xbf, 0xe7, 0xcc,
	0x32, 0xed, 0x25, 0x0d, 0x78, 0x13, 0xdb, 0x9b, 0xa3, 0xa6, 0x5a, 0xd2, 0x3f, 0x89, 0x00, 0x4f,
	0x82, 0x63, 0xb3, 0xc3, 0xe5, 0x62, 0x0c, 0xee, 0x17, 0x6d, 0xb3, 0x11, 0xf7, 0x46, 0x53, 0xb7,
	0x15, 0xe9, 0xf5, 0xfb, 0x02, 0x5c, 0x07, 0xd5, 0x09, 0xb6, 0xb2, 0x81, 0x34, 0xdb, 0x31, 0x74,
	0x95, 0xc9, 0xb1, 0xae, 0x37, 0x35, 0x55, 0x7a, 0x67, 0x20, 0xc2, 0x33, 0xe0, 0xa9, 0xa9, 0xcc,
	0xbc, 0x80, 0xd3, 0x0a, 0xbd, 0x3b, 0x10, 0xa7, 0xa4, 0xc1, 0xe9, 0x26, 0x6a, 0x20, 0xc5, 0xca,
	0xb3, 0xdf, 0x1b, 0x88, 0xf0, 0x32, 0x38, 0x3b, 0x95, 0xbd, 0x75, 0xc5, 0x72, 0xe8, 0xc2, 0xa1,
	0x4f, 0x40, 0xa6, 0x93, 0x5b, 0xdc, 0xef, 0x17, 0x78, 0x69, 0xba, 0x8a, 0x34, 0x64, 0xdf, 0xd4,
	0xcd, 0x2d, 0xf6, 0x08, 0x65, 0x47, 0xc1, 0x0d, 0x3a, 0xf4, 0xd2, 0x07, 0x03, 0x11, 0x5e, 0x00,
	0xa7, 0x66, 0x3e, 0x99, 0xba, 0x34, 0x74, 0x25, 0xff, 0xf6, 0x0f, 0x07, 0xe2, 0x94, 0xfa, 0x73,
	0x97, 0xec, 0xa7, 0x07, 0x1b, 0x6c, 0x8f, 0x4a, 0x1f, 0x0d, 0x44, 0x78, 0x02, 0x3c, 0x51, 0xc8,
	0x4d, 0x7f, 0xa6, 0x3e, 0x1e, 0x88, 0xf0, 0x79, 0x70, 0x6d, 0x2a, 0x75, 0x2c, 0x0b, 0xab, 0x69,
	0x18, 0xba, 0x69, 0x3b, 0x75, 0xfc, 0x02, 0x62, 0x91, 0xea, 0x48, 0xb1, 0x9b, 0x26, 0x92, 0x3e,
	0x19, 0x88, 0x53, 0x76, 0xe5, 0x78, 0xb0, 0xa1, 0xd3, 0x16, 0x42, 0x86, 0xa3, 0x36, 0x4d, 0xc5,
	0xc6, 0xba, 0x26, 0x7d, 0x3a, 0x10, 0x77, 0x97, 0xd8, 0xdf, 0xd3, 0x4b, 0xff, 0x06, 0x00, 0x00,
	0xff, 0xff, 0xad, 0x95, 0xed, 0x22, 0xae, 0x0e, 0x00, 0x00,
}
