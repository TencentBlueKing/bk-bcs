// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Tencent/bk-bcs/bcs-runtime/bcs-k8s/bcs-network/bcs-ingress-controller/internal/cloud (interfaces: LoadBalance)

// Package mock is a generated GoMock package.
package mock

import (
	cloud "github.com/Tencent/bk-bcs/bcs-runtime/bcs-k8s/bcs-network/bcs-ingress-controller/internal/cloud"
	v1 "github.com/Tencent/bk-bcs/bcs-runtime/bcs-k8s/kubernetes/apis/networkextension/v1"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLoadBalance is a mock of LoadBalance interface
type MockLoadBalance struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalanceMockRecorder
}

// MockLoadBalanceMockRecorder is the mock recorder for MockLoadBalance
type MockLoadBalanceMockRecorder struct {
	mock *MockLoadBalance
}

// NewMockLoadBalance creates a new mock instance
func NewMockLoadBalance(ctrl *gomock.Controller) *MockLoadBalance {
	mock := &MockLoadBalance{ctrl: ctrl}
	mock.recorder = &MockLoadBalanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoadBalance) EXPECT() *MockLoadBalanceMockRecorder {
	return m.recorder
}

// DeleteListener mocks base method
func (m *MockLoadBalance) DeleteListener(arg0 string, arg1 *v1.Listener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListener", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteListener indicates an expected call of DeleteListener
func (mr *MockLoadBalanceMockRecorder) DeleteListener(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListener", reflect.TypeOf((*MockLoadBalance)(nil).DeleteListener), arg0, arg1)
}

// DeleteMultiListeners mocks base method
func (m *MockLoadBalance) DeleteMultiListeners(arg0, arg1 string, arg2 []*v1.Listener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMultiListeners", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultiListeners indicates an expected call of DeleteMultiListeners
func (mr *MockLoadBalanceMockRecorder) DeleteMultiListeners(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultiListeners", reflect.TypeOf((*MockLoadBalance)(nil).DeleteMultiListeners), arg0, arg1, arg2)
}

// DeleteSegmentListener mocks base method
func (m *MockLoadBalance) DeleteSegmentListener(arg0 string, arg1 *v1.Listener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegmentListener", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegmentListener indicates an expected call of DeleteSegmentListener
func (mr *MockLoadBalanceMockRecorder) DeleteSegmentListener(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegmentListener", reflect.TypeOf((*MockLoadBalance)(nil).DeleteSegmentListener), arg0, arg1)
}

// DescribeBackendStatus mocks base method
func (m *MockLoadBalance) DescribeBackendStatus(arg0, arg1 string, arg2 []string) (map[string][]*cloud.BackendHealthStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBackendStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string][]*cloud.BackendHealthStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBackendStatus indicates an expected call of DescribeBackendStatus
func (mr *MockLoadBalanceMockRecorder) DescribeBackendStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackendStatus", reflect.TypeOf((*MockLoadBalance)(nil).DescribeBackendStatus), arg0, arg1, arg2)
}

// DescribeLoadBalancer mocks base method
func (m *MockLoadBalance) DescribeLoadBalancer(arg0, arg1, arg2 string) (*cloud.LoadBalanceObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLoadBalancer", arg0, arg1, arg2)
	ret0, _ := ret[0].(*cloud.LoadBalanceObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoadBalancer indicates an expected call of DescribeLoadBalancer
func (mr *MockLoadBalanceMockRecorder) DescribeLoadBalancer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoadBalancer", reflect.TypeOf((*MockLoadBalance)(nil).DescribeLoadBalancer), arg0, arg1, arg2)
}

// DescribeLoadBalancerWithNs mocks base method
func (m *MockLoadBalance) DescribeLoadBalancerWithNs(arg0, arg1, arg2, arg3 string) (*cloud.LoadBalanceObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLoadBalancerWithNs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*cloud.LoadBalanceObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoadBalancerWithNs indicates an expected call of DescribeLoadBalancerWithNs
func (mr *MockLoadBalanceMockRecorder) DescribeLoadBalancerWithNs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoadBalancerWithNs", reflect.TypeOf((*MockLoadBalance)(nil).DescribeLoadBalancerWithNs), arg0, arg1, arg2, arg3)
}

// EnsureListener mocks base method
func (m *MockLoadBalance) EnsureListener(arg0 string, arg1 *v1.Listener) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureListener", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureListener indicates an expected call of EnsureListener
func (mr *MockLoadBalanceMockRecorder) EnsureListener(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureListener", reflect.TypeOf((*MockLoadBalance)(nil).EnsureListener), arg0, arg1)
}

// EnsureMultiListeners mocks base method
func (m *MockLoadBalance) EnsureMultiListeners(arg0, arg1 string, arg2 []*v1.Listener) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureMultiListeners", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureMultiListeners indicates an expected call of EnsureMultiListeners
func (mr *MockLoadBalanceMockRecorder) EnsureMultiListeners(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureMultiListeners", reflect.TypeOf((*MockLoadBalance)(nil).EnsureMultiListeners), arg0, arg1, arg2)
}

// EnsureMultiSegmentListeners mocks base method
func (m *MockLoadBalance) EnsureMultiSegmentListeners(arg0, arg1 string, arg2 []*v1.Listener) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureMultiSegmentListeners", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureMultiSegmentListeners indicates an expected call of EnsureMultiSegmentListeners
func (mr *MockLoadBalanceMockRecorder) EnsureMultiSegmentListeners(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureMultiSegmentListeners", reflect.TypeOf((*MockLoadBalance)(nil).EnsureMultiSegmentListeners), arg0, arg1, arg2)
}

// EnsureSegmentListener mocks base method
func (m *MockLoadBalance) EnsureSegmentListener(arg0 string, arg1 *v1.Listener) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureSegmentListener", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureSegmentListener indicates an expected call of EnsureSegmentListener
func (mr *MockLoadBalanceMockRecorder) EnsureSegmentListener(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureSegmentListener", reflect.TypeOf((*MockLoadBalance)(nil).EnsureSegmentListener), arg0, arg1)
}

// IsNamespaced mocks base method
func (m *MockLoadBalance) IsNamespaced() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNamespaced")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNamespaced indicates an expected call of IsNamespaced
func (mr *MockLoadBalanceMockRecorder) IsNamespaced() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNamespaced", reflect.TypeOf((*MockLoadBalance)(nil).IsNamespaced))
}
