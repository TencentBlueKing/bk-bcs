/*
 * Tencent is pleased to support the open source community by making Blueking Container Service available.
 * Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://opensource.org/licenses/MIT
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package extender

import (
	"context"
	"encoding/json"
	"slices"
	"time"

	"github.com/pkg/errors"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	extenderv1 "k8s.io/kube-scheduler/extender/v1"

	"github.com/Tencent/bk-bcs/bcs-common/common/blog"

	"github.com/Tencent/bk-bcs/bcs-runtime/bcs-k8s/bcs-component/bcs-repack-descheduler/pkg/apis"
)

// Filter based on extender-implemented predicate functions. The filtered list is
// expected to be a subset of the supplied list.
// The failedNodes and failedAndUnresolvableNodes optionally contains the list
// of failed nodes and failure reasons, except nodes in the latter are
// unresolvable.
func (h *HTTPExtender) Filter(ctx context.Context, msgId string,
	args *extenderv1.ExtenderArgs) (result extenderv1.ExtenderFilterResult, err error) {
	filterNodes := make([]string, 0, len(args.Nodes.Items))
	for i := range args.Nodes.Items {
		filterNodes = append(filterNodes, args.Nodes.Items[i].Name)
	}
	blog.Infof("RequestID[%s] extender filter is called, pod: %s/%s, node: %v",
		msgId, args.Pod.Namespace, args.Pod.Name, filterNodes)

	queryCtx, cancel := context.WithTimeout(ctx, apis.DefaultQueryTimeout*time.Second)
	defer cancel()
	nodeList, err := h.migratorManager.FilterNodes(queryCtx, args.Pod)
	if err != nil {
		blog.Warnf("RequestID[%s] extender filter nodes failed: %s", msgId, err.Error())
		return result, err
	}
	if len(nodeList.Items) == 0 {
		blog.Warnf("RequestID[%s] extender filter nodes have not result", msgId)
		return result, errors.Errorf("no such nodes filtered")
	}

	// 取系统预选和计算预选的交集
	nodeNames := make([]string, 0, len(nodeList.Items))
	newItems := make([]corev1.Node, 0)
	for i, n := range nodeList.Items {
		if slices.Contains(filterNodes, n.Name) {
			nodeNames = append(nodeNames, n.Name)
			newItems = append(newItems, nodeList.Items[i])
		}
	}
	nodeList.Items = newItems
	blog.Infof("MsgID[%s] extender filter response, nodeNames: %v", msgId, nodeNames)
	return extenderv1.ExtenderFilterResult{
		Nodes:     nodeList,
		NodeNames: &nodeNames,
		Error:     "",
	}, nil
}

// Prioritize based on extender-implemented priority functions. The returned scores & weight
// are used to compute the weighted score for an extender. The weighted scores are added to
// the scores computed by Kubernetes scheduler. The total scores are used to do the host selection.
func (h *HTTPExtender) Prioritize(ctx context.Context, msgId string,
	args *extenderv1.ExtenderArgs) (extenderv1.HostPriorityList, error) {
	prioritizeNodes := make([]string, 0, len(args.Nodes.Items))
	for i := range args.Nodes.Items {
		prioritizeNodes = append(prioritizeNodes, args.Nodes.Items[i].Name)
	}
	blog.Infof("MsgID[%s] extender prioritize is called, pod: %s/%s, node: %v",
		msgId, args.Pod.Namespace, args.Pod.Name, prioritizeNodes)
	result := make(extenderv1.HostPriorityList, 0)
	for _, node := range args.Nodes.Items {
		result = append(result, extenderv1.HostPriority{
			Host:  node.Name,
			Score: 1,
		})
	}
	return result, nil
}

// Bind delegates the action of binding a pod to a node to the extender.
func (h *HTTPExtender) Bind(ctx context.Context, msgId string,
	args *extenderv1.ExtenderBindingArgs) (extenderv1.ExtenderBindingResult, error) {
	blog.Infof("MsgID[%s] Bind is called, value: %v", msgId, *args)

	queryCtx, cancel := context.WithTimeout(context.Background(), apis.DefaultQueryTimeout*time.Second)
	defer cancel()
	if err := h.cacheManager.PodBind(queryCtx, &corev1.Binding{
		ObjectMeta: metav1.ObjectMeta{
			Namespace: args.PodNamespace,
			Name:      args.PodName,
			UID:       args.PodUID,
		},
		Target: corev1.ObjectReference{
			Kind: "Node",
			Name: args.Node,
		},
	}); err != nil {
		wrapErr := errors.Wrapf(err, "create pods with binding failed")
		return extenderv1.ExtenderBindingResult{
			Error: wrapErr.Error(),
		}, wrapErr
	}
	// bind(b)
	return extenderv1.ExtenderBindingResult{}, nil
}

// ProcessPreemption returns nodes with their victim pods processed by extender based on
// given:
//  1. Pod to schedule
//  2. Candidate nodes and victim pods (nodeNameToVictims) generated by previous scheduling process.
//
// The possible changes made by extender may include:
//  1. Subset of given candidate nodes after preemption phase of extender.
//  2. A different set of victim pod for every given candidate node after preemption phase of extender.
func (h *HTTPExtender) ProcessPreemption(ctx context.Context, msgId string, args *extenderv1.ExtenderPreemptionArgs) (
	extenderv1.ExtenderPreemptionResult, error) {
	bs, _ := json.Marshal(args)
	blog.Infof("MsgID[%s] ProcessPreemption is called, value: %s", msgId, string(bs))
	return extenderv1.ExtenderPreemptionResult{
		NodeNameToMetaVictims: args.NodeNameToMetaVictims,
	}, nil
}
