/*
 * Tencent is pleased to support the open source community by making Blueking Container Service available.
 * Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://opensource.org/licenses/MIT
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
// Code generated by informer-gen. DO NOT EDIT.

package externalversions

import (
	"fmt"

	v1 "github.com/Tencent/bk-bcs/bcs-runtime/bcs-k8s/kubedeprecated/apis/clb/v1"
	meshv1 "github.com/Tencent/bk-bcs/bcs-runtime/bcs-k8s/kubedeprecated/apis/mesh/v1"
	networkv1 "github.com/Tencent/bk-bcs/bcs-runtime/bcs-k8s/kubedeprecated/apis/network/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	cache "k8s.io/client-go/tools/cache"
)

// GenericInformer is type of SharedIndexInformer which will locate and delegate to other
// sharedInformers based on type
type GenericInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() cache.GenericLister
}

type genericInformer struct {
	informer cache.SharedIndexInformer
	resource schema.GroupResource
}

// Informer returns the SharedIndexInformer.
func (f *genericInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

// Lister returns the GenericLister.
func (f *genericInformer) Lister() cache.GenericLister {
	return cache.NewGenericLister(f.Informer().GetIndexer(), f.resource)
}

// ForResource gives generic access to a shared informer of the matching type
// TODO extend this to unknown resources with a client pool
func (f *sharedInformerFactory) ForResource(resource schema.GroupVersionResource) (GenericInformer, error) {
	switch resource {
	// Group=clb, Version=v1
	case v1.SchemeGroupVersion.WithResource("clbingresses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Clb().V1().ClbIngresses().Informer()}, nil

		// Group=mesh, Version=v1
	case meshv1.SchemeGroupVersion.WithResource("appnodes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Mesh().V1().AppNodes().Informer()}, nil
	case meshv1.SchemeGroupVersion.WithResource("appsvcs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Mesh().V1().AppSvcs().Informer()}, nil

		// Group=network, Version=v1
	case networkv1.SchemeGroupVersion.WithResource("cloudlisteners"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Network().V1().CloudListeners().Informer()}, nil

	}

	return nil, fmt.Errorf("no informer found for %v", resource)
}
