/*
 * Tencent is pleased to support the open source community by making Blueking Container Service available.
 * Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://opensource.org/licenses/MIT
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Code generated by protoc-gen-go.
// source: maintenance.proto
// DO NOT EDIT!

/*
Package mesos_maintenance is a generated protocol buffer package.

It is generated from these files:
	maintenance.proto

It has these top-level messages:
	Window
	Schedule
	ClusterStatus
*/
package mesos_maintenance

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import mesos "github.com/Tencent/bk-bcs/bcs-common/pkg/scheduler/mesosproto/mesos"
import mesos_allocator "github.com/Tencent/bk-bcs/bcs-common/pkg/scheduler/mesosproto/mesos/allocator"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *
// A set of machines scheduled to go into maintenance
// in the same `unavailability`.
type Window struct {
	// Machines affected by this maintenance window.
	MachineIds []*mesos.MachineID `protobuf:"bytes,1,rep,name=machine_ids,json=machineIds" json:"machine_ids,omitempty"`
	// Interval during which this set of machines is expected to be down.
	Unavailability   *mesos.Unavailability `protobuf:"bytes,2,req,name=unavailability" json:"unavailability,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *Window) Reset()                    { *m = Window{} }
func (m *Window) String() string            { return proto.CompactTextString(m) }
func (*Window) ProtoMessage()               {}
func (*Window) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Window) GetMachineIds() []*mesos.MachineID {
	if m != nil {
		return m.MachineIds
	}
	return nil
}

func (m *Window) GetUnavailability() *mesos.Unavailability {
	if m != nil {
		return m.Unavailability
	}
	return nil
}

// *
// A list of maintenance windows.
// For example, this may represent a rolling restart of agents.
type Schedule struct {
	Windows          []*Window `protobuf:"bytes,1,rep,name=windows" json:"windows,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Schedule) Reset()                    { *m = Schedule{} }
func (m *Schedule) String() string            { return proto.CompactTextString(m) }
func (*Schedule) ProtoMessage()               {}
func (*Schedule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Schedule) GetWindows() []*Window {
	if m != nil {
		return m.Windows
	}
	return nil
}

// *
// Represents the maintenance status of each machine in the cluster.
// The lists correspond to the `MachineInfo.Mode` enumeration.
type ClusterStatus struct {
	DrainingMachines []*ClusterStatus_DrainingMachine `protobuf:"bytes,1,rep,name=draining_machines,json=drainingMachines" json:"draining_machines,omitempty"`
	DownMachines     []*mesos.MachineID               `protobuf:"bytes,2,rep,name=down_machines,json=downMachines" json:"down_machines,omitempty"`
	XXX_unrecognized []byte                           `json:"-"`
}

func (m *ClusterStatus) Reset()                    { *m = ClusterStatus{} }
func (m *ClusterStatus) String() string            { return proto.CompactTextString(m) }
func (*ClusterStatus) ProtoMessage()               {}
func (*ClusterStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ClusterStatus) GetDrainingMachines() []*ClusterStatus_DrainingMachine {
	if m != nil {
		return m.DrainingMachines
	}
	return nil
}

func (m *ClusterStatus) GetDownMachines() []*mesos.MachineID {
	if m != nil {
		return m.DownMachines
	}
	return nil
}

type ClusterStatus_DrainingMachine struct {
	Id *mesos.MachineID `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// A list of the most recent responses to inverse offers from frameworks
	// running on this draining machine.
	Statuses         []*mesos_allocator.InverseOfferStatus `protobuf:"bytes,2,rep,name=statuses" json:"statuses,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *ClusterStatus_DrainingMachine) Reset()         { *m = ClusterStatus_DrainingMachine{} }
func (m *ClusterStatus_DrainingMachine) String() string { return proto.CompactTextString(m) }
func (*ClusterStatus_DrainingMachine) ProtoMessage()    {}
func (*ClusterStatus_DrainingMachine) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 0}
}

func (m *ClusterStatus_DrainingMachine) GetId() *mesos.MachineID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ClusterStatus_DrainingMachine) GetStatuses() []*mesos_allocator.InverseOfferStatus {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func init() {
	proto.RegisterType((*Window)(nil), "mesos.v1.maintenance.Window")
	proto.RegisterType((*Schedule)(nil), "mesos.v1.maintenance.Schedule")
	proto.RegisterType((*ClusterStatus)(nil), "mesos.v1.maintenance.ClusterStatus")
	proto.RegisterType((*ClusterStatus_DrainingMachine)(nil), "mesos.v1.maintenance.ClusterStatus.DrainingMachine")
}

func init() { proto.RegisterFile("maintenance.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x92, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0xc6, 0x69, 0x5e, 0xe8, 0x5b, 0xa6, 0x56, 0xed, 0xea, 0x21, 0x14, 0xc1, 0x12, 0x41, 0xea,
	0x65, 0x4b, 0xab, 0x88, 0x47, 0x89, 0xbd, 0xf4, 0x20, 0x4a, 0x8a, 0x78, 0xac, 0x63, 0x76, 0xdb,
	0x2e, 0xa4, 0xbb, 0x25, 0xbb, 0x49, 0xd1, 0x93, 0xdf, 0xc6, 0xaf, 0x29, 0xcd, 0x5f, 0x53, 0xe2,
	0x2d, 0xcc, 0xfc, 0x9e, 0x67, 0x9e, 0x99, 0x2c, 0x74, 0xd7, 0x28, 0xa4, 0xe1, 0x12, 0xa5, 0xcf,
	0xe9, 0x26, 0x54, 0x46, 0x91, 0xd3, 0x35, 0xd7, 0x4a, 0xd3, 0x78, 0x44, 0x7f, 0xf5, 0x7a, 0x69,
	0x75, 0x18, 0x8f, 0x86, 0x69, 0x3b, 0x61, 0x7b, 0x4e, 0x51, 0xc5, 0x20, 0x50, 0x3e, 0x1a, 0x15,
	0x96, 0x5f, 0x29, 0xe3, 0x7c, 0x35, 0xa0, 0xf9, 0x2a, 0x24, 0x53, 0x5b, 0x72, 0x03, 0xed, 0x35,
	0xfa, 0x2b, 0x21, 0xf9, 0x5c, 0x30, 0x6d, 0x37, 0xfa, 0xff, 0x06, 0xed, 0xf1, 0x09, 0x2d, 0x06,
	0x3e, 0xa6, 0xcd, 0xe9, 0xc4, 0x83, 0x8c, 0x9b, 0x32, 0x4d, 0xee, 0xe1, 0x30, 0x92, 0x18, 0xa3,
	0x08, 0xf0, 0x5d, 0x04, 0xc2, 0x7c, 0xd8, 0x56, 0xdf, 0x1a, 0xb4, 0xc7, 0x76, 0x29, 0x7c, 0xa9,
	0xf4, 0xbd, 0x3d, 0xde, 0x71, 0xa1, 0x35, 0xf3, 0x57, 0x9c, 0x45, 0x01, 0x27, 0xb7, 0xf0, 0x7f,
	0x9b, 0xa4, 0xc9, 0xe7, 0x9f, 0xd1, 0xba, 0x85, 0x69, 0x1a, 0xd9, 0xcb, 0x61, 0xe7, 0xdb, 0x82,
	0xce, 0x43, 0x10, 0x69, 0xc3, 0xc3, 0x99, 0x41, 0x13, 0x69, 0xf2, 0x06, 0x5d, 0x16, 0xa2, 0x90,
	0x42, 0x2e, 0xe7, 0x59, 0xdc, 0xdc, 0xf3, 0xba, 0xde, 0xb3, 0xa2, 0xa7, 0x93, 0x4c, 0x9c, 0x6d,
	0xed, 0x1d, 0xb3, 0x6a, 0x41, 0x93, 0x3b, 0xe8, 0x30, 0xb5, 0x95, 0xa5, 0xbb, 0xf5, 0xf7, 0xc5,
	0x0e, 0x76, 0x64, 0xae, 0xec, 0x7d, 0xc2, 0xd1, 0x9e, 0x3d, 0xb9, 0x00, 0x4b, 0x30, 0xbb, 0x91,
	0x9c, 0xae, 0xd6, 0xc1, 0x12, 0x8c, 0xb8, 0xd0, 0xd2, 0x49, 0xba, 0x62, 0xd8, 0x65, 0x89, 0x96,
	0x7f, 0x76, 0x2a, 0x63, 0x1e, 0x6a, 0xfe, 0xb4, 0x58, 0xe4, 0xdb, 0x78, 0x85, 0xce, 0xbd, 0x82,
	0x73, 0x15, 0x2e, 0x29, 0x6e, 0xd0, 0x5f, 0xf1, 0xda, 0x43, 0xb8, 0xcd, 0xe7, 0xdd, 0xd3, 0xd0,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x49, 0x49, 0xfb, 0x4b, 0x7f, 0x02, 0x00, 0x00,
}
