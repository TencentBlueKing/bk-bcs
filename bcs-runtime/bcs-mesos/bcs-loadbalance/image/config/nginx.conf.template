user bcs;
worker_processes 8;
error_log /usr/local/nginx/logs/error.log;
pid /run/nginx.pid;

events {
    worker_connections 102400;
}

#http module
http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /usr/local/nginx/logs/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /usr/local/nginx/conf/mime.types;
    default_type        application/octet-stream;

    #default http server
    server {
        listen       80 default_server;
        return       444;
    }
    #http section
    {{range $i, $svc := .HTTP}}
    {{range $j, $backend := $svc.Backends}}
	upstream {{$backend.UpstreamName}} {
		{{if eq $svc.Balance "leastconn" }}least_conn;{{else if eq $svc.Balance "source"}}ip_hash;{{end}}{{range $j, $bend := $backend.BackendList}}
		server {{$bend.IP}}:{{$bend.Port}} max_fails=1 fail_timeout=10s {{if ne $bend.Weight 0 }}weight={{$bend.Weight}}{{end}};{{end}}
	}{{end}}{{end}}
	{{range $i, $svc := .HTTP}}
    server {
        listen {{$svc.ServicePort}};
        server_name {{$svc.BCSVHost}};
        error_log   /var/log/nginx/{{$svc.Name}}_error.log;
        access_log  /var/log/nginx/{{$svc.Name}}_access.log main;
		{{range $j, $backend := $svc.Backends}}
        location {{$backend.Path}} {
            proxy_pass http://{{$backend.UpstreamName}};
            proxy_http_version 1.1;
            proxy_set_header Host              $host;
            proxy_set_header Via               "nginx";
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        }{{end}}
        client_max_body_size 2048M;
    }{{end}}
}

#tcp & udp module
stream {
#tcp section {{range $i, $svc := .TCP}}
    upstream tcp_{{$svc.Name}}_{{$svc.ServicePort}} {
        {{if eq $svc.Balance "leastconn" }}least_conn;{{else if eq $svc.Balance "source"}}hash $remote_addr consistent;{{end}}{{range $j, $backend := $svc.Backends}}
        server {{$backend.IP}}:{{$backend.Port}} max_fails=1 fail_timeout=10s {{if ne $backend.Weight 0 }}weight={{$backend.Weight}}{{end}};{{end}}
    }{{end}}
    {{range $i, $svc := .TCP}}
    server {
        listen {{$svc.ServicePort}};
        proxy_connect_timeout 1s;
        proxy_timeout 60s;
        proxy_pass tcp_{{$svc.Name}}_{{$svc.ServicePort}};
    }{{end}}
#udp section {{range $i, $svc := .UDP}}
    upstream udp_{{$svc.Name}}_{{$svc.ServicePort}} { 
        {{if eq $svc.Balance "source"}}hash $remote_addr consistent;{{end}}{{range $j, $backend := $svc.Backends}}
        server {{$backend.IP}}:{{$backend.Port}} {{if ne $backend.Weight 0 }}weight={{$backend.Weight}}{{end}};{{end}}
    }{{end}}
    {{range $i, $svc := .UDP}}
    server {
        listen {{$svc.ServicePort}} udp reuseport;
        proxy_connect_timeout 1s;
        proxy_timeout 60s;
        proxy_pass udp_{{$svc.Name}}_{{$svc.ServicePort}};
    }{{end}}
}